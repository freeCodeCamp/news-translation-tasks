name: Articles Auto Translate (Simplified)
run-name: ${{ github.event.label.name }} - ${{ github.event.issue.title }}

on:
  issues:
    types: [labeled]

jobs:
  auto-translate:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      contents: write

    steps:
      # queue lock (keep this, prevent concurrent conflicts)
      - uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 10
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # basic validation and setup
      - name: Validate and setup
        run: |
          # validate issue body
          if [ -z "${{ github.event.issue.body }}" ]; then
            echo "Issue body is empty. Exiting."
            exit 1
          fi
          
          # 提取语言代码
          title="${{ github.event.issue.title }}"
          LANG_CODE=$(echo "$title" | sed -E 's/^\[([a-zA-Z]+)\].*/\1/')
          echo "LANG_CODE=$LANG_CODE" >> $GITHUB_ENV

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # get full history, simplify git operations

      # setup git
      - name: Setup Git
        run: |
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git config pull.rebase true

      # fetch and process article
      - name: Fetch and process article
        id: process
        run: |
          # fetch article
          # here use action or direct script
          # (simplify: directly operate in the target directory, avoid multiple copies)
          
          base_name="article_$(date +%s).md"  # or extract from URL
          lang="${{ env.LANG_CODE }}"
          
          # create necessary directories
          mkdir -p "./articles/_raw" "./articles/$lang"
          
          echo "base_name=$base_name" >> $GITHUB_OUTPUT
          echo "lang=$lang" >> $GITHUB_OUTPUT

      # fetch article content
      - name: Fetch article content
        uses: freecodecamp/article-webpage-to-markdown-action@dev
        with:
          newsLink: "${{ github.event.issue.body }}"
          includeSelector: 'span.author-card-name,section.post-content'
          ignoreSelector: '.ad-wrapper'
          skipSameArticleCheck: true
          skipIssueComment: true
          markDownFilePath: './articles/_raw/'
          githubToken: "${{ github.token }}"

      # translate article
      - name: Translate article
        uses: freeCodeCamp/articles-auto-translate-action@main
        with:
          with_issue_title: "${{ github.event.issue.title }}"
          with_issue_body: "${{ github.event.issue.body }}"
          with_label_name: "${{ github.event.label.name }}"
          with_github_token: "${{ github.token }}"
          with_orginal_markdown_file_path: "${{ steps.fetch.outputs.markdown_file_path }}"
          with_task_fetch_to_save_path: "./articles/_raw/"
          with_task_translate_openai_api_key: "${{ secrets.OPENAI_API_KEY }}"
          with_task_translate_to_save_path: "./articles/{lang}/"

      # commit and push changes
      - name: Commit and push changes
        run: |
          # add all changes
          git add ./articles/
          
          # check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          # commit
          git commit -m "Auto-translate: ${{ github.event.issue.title }}"
          
          # push
          for i in {1..3}; do
            if git push origin main; then
              echo "Push successful"
              break
            else
              echo "Push failed, attempt $i/3"
              git pull --rebase origin main
              sleep 5
            fi
          done

      # clean up
      - name: Cleanup
        if: always()
        run: |
          rm -rf ./articles/_tmp/ || true