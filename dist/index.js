(() => {
  var __webpack_modules__ = {
    1513: function (a, C, q) {
      'use strict';
      var re =
        (this && this.__createBinding) ||
        (Object.create
          ? function (a, C, q, re) {
              if (re === undefined) re = q;
              Object.defineProperty(a, re, {
                enumerable: true,
                get: function () {
                  return C[q];
                }
              });
            }
          : function (a, C, q, re) {
              if (re === undefined) re = q;
              a[re] = C[q];
            });
      var ae =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (a, C) {
              Object.defineProperty(a, 'default', {
                enumerable: true,
                value: C
              });
            }
          : function (a, C) {
              a['default'] = C;
            });
      var Ue =
        (this && this.__importStar) ||
        function (a) {
          if (a && a.__esModule) return a;
          var C = {};
          if (a != null)
            for (var q in a)
              if (q !== 'default' && Object.hasOwnProperty.call(a, q))
                re(C, a, q);
          ae(C, a);
          return C;
        };
      Object.defineProperty(C, '__esModule', { value: true });
      C.issue = C.issueCommand = void 0;
      const lt = Ue(q(2037));
      const Pt = q(1120);
      function issueCommand(a, C, q) {
        const re = new Command(a, C, q);
        process.stdout.write(re.toString() + lt.EOL);
      }
      C.issueCommand = issueCommand;
      function issue(a, C = '') {
        issueCommand(a, {}, C);
      }
      C.issue = issue;
      const Wt = '::';
      class Command {
        constructor(a, C, q) {
          if (!a) {
            a = 'missing.command';
          }
          this.command = a;
          this.properties = C;
          this.message = q;
        }
        toString() {
          let a = Wt + this.command;
          if (this.properties && Object.keys(this.properties).length > 0) {
            a += ' ';
            let C = true;
            for (const q in this.properties) {
              if (this.properties.hasOwnProperty(q)) {
                const re = this.properties[q];
                if (re) {
                  if (C) {
                    C = false;
                  } else {
                    a += ',';
                  }
                  a += `${q}=${escapeProperty(re)}`;
                }
              }
            }
          }
          a += `${Wt}${escapeData(this.message)}`;
          return a;
        }
      }
      function escapeData(a) {
        return Pt.toCommandValue(a)
          .replace(/%/g, '%25')
          .replace(/\r/g, '%0D')
          .replace(/\n/g, '%0A');
      }
      function escapeProperty(a) {
        return Pt.toCommandValue(a)
          .replace(/%/g, '%25')
          .replace(/\r/g, '%0D')
          .replace(/\n/g, '%0A')
          .replace(/:/g, '%3A')
          .replace(/,/g, '%2C');
      }
    },
    9093: function (a, C, q) {
      'use strict';
      var re =
        (this && this.__createBinding) ||
        (Object.create
          ? function (a, C, q, re) {
              if (re === undefined) re = q;
              Object.defineProperty(a, re, {
                enumerable: true,
                get: function () {
                  return C[q];
                }
              });
            }
          : function (a, C, q, re) {
              if (re === undefined) re = q;
              a[re] = C[q];
            });
      var ae =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (a, C) {
              Object.defineProperty(a, 'default', {
                enumerable: true,
                value: C
              });
            }
          : function (a, C) {
              a['default'] = C;
            });
      var Ue =
        (this && this.__importStar) ||
        function (a) {
          if (a && a.__esModule) return a;
          var C = {};
          if (a != null)
            for (var q in a)
              if (q !== 'default' && Object.hasOwnProperty.call(a, q))
                re(C, a, q);
          ae(C, a);
          return C;
        };
      var lt =
        (this && this.__awaiter) ||
        function (a, C, q, re) {
          function adopt(a) {
            return a instanceof q
              ? a
              : new q(function (C) {
                  C(a);
                });
          }
          return new (q || (q = Promise))(function (q, ae) {
            function fulfilled(a) {
              try {
                step(re.next(a));
              } catch (a) {
                ae(a);
              }
            }
            function rejected(a) {
              try {
                step(re['throw'](a));
              } catch (a) {
                ae(a);
              }
            }
            function step(a) {
              a.done ? q(a.value) : adopt(a.value).then(fulfilled, rejected);
            }
            step((re = re.apply(a, C || [])).next());
          });
        };
      Object.defineProperty(C, '__esModule', { value: true });
      C.getIDToken =
        C.getState =
        C.saveState =
        C.group =
        C.endGroup =
        C.startGroup =
        C.info =
        C.notice =
        C.warning =
        C.error =
        C.debug =
        C.isDebug =
        C.setFailed =
        C.setCommandEcho =
        C.setOutput =
        C.getBooleanInput =
        C.getMultilineInput =
        C.getInput =
        C.addPath =
        C.setSecret =
        C.exportVariable =
        C.ExitCode =
          void 0;
      const Pt = q(1513);
      const Wt = q(9017);
      const Ar = q(1120);
      const Er = Ue(q(2037));
      const Ir = Ue(q(1017));
      const Br = q(9141);
      var Qr;
      (function (a) {
        a[(a['Success'] = 0)] = 'Success';
        a[(a['Failure'] = 1)] = 'Failure';
      })((Qr = C.ExitCode || (C.ExitCode = {})));
      function exportVariable(a, C) {
        const q = Ar.toCommandValue(C);
        process.env[a] = q;
        const re = process.env['GITHUB_ENV'] || '';
        if (re) {
          return Wt.issueFileCommand('ENV', Wt.prepareKeyValueMessage(a, C));
        }
        Pt.issueCommand('set-env', { name: a }, q);
      }
      C.exportVariable = exportVariable;
      function setSecret(a) {
        Pt.issueCommand('add-mask', {}, a);
      }
      C.setSecret = setSecret;
      function addPath(a) {
        const C = process.env['GITHUB_PATH'] || '';
        if (C) {
          Wt.issueFileCommand('PATH', a);
        } else {
          Pt.issueCommand('add-path', {}, a);
        }
        process.env['PATH'] = `${a}${Ir.delimiter}${process.env['PATH']}`;
      }
      C.addPath = addPath;
      function getInput(a, C) {
        const q =
          process.env[`INPUT_${a.replace(/ /g, '_').toUpperCase()}`] || '';
        if (C && C.required && !q) {
          throw new Error(`Input required and not supplied: ${a}`);
        }
        if (C && C.trimWhitespace === false) {
          return q;
        }
        return q.trim();
      }
      C.getInput = getInput;
      function getMultilineInput(a, C) {
        const q = getInput(a, C)
          .split('\n')
          .filter((a) => a !== '');
        if (C && C.trimWhitespace === false) {
          return q;
        }
        return q.map((a) => a.trim());
      }
      C.getMultilineInput = getMultilineInput;
      function getBooleanInput(a, C) {
        const q = ['true', 'True', 'TRUE'];
        const re = ['false', 'False', 'FALSE'];
        const ae = getInput(a, C);
        if (q.includes(ae)) return true;
        if (re.includes(ae)) return false;
        throw new TypeError(
          `Input does not meet YAML 1.2 "Core Schema" specification: ${a}\n` +
            `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``
        );
      }
      C.getBooleanInput = getBooleanInput;
      function setOutput(a, C) {
        const q = process.env['GITHUB_OUTPUT'] || '';
        if (q) {
          return Wt.issueFileCommand('OUTPUT', Wt.prepareKeyValueMessage(a, C));
        }
        process.stdout.write(Er.EOL);
        Pt.issueCommand('set-output', { name: a }, Ar.toCommandValue(C));
      }
      C.setOutput = setOutput;
      function setCommandEcho(a) {
        Pt.issue('echo', a ? 'on' : 'off');
      }
      C.setCommandEcho = setCommandEcho;
      function setFailed(a) {
        process.exitCode = Qr.Failure;
        error(a);
      }
      C.setFailed = setFailed;
      function isDebug() {
        return process.env['RUNNER_DEBUG'] === '1';
      }
      C.isDebug = isDebug;
      function debug(a) {
        Pt.issueCommand('debug', {}, a);
      }
      C.debug = debug;
      function error(a, C = {}) {
        Pt.issueCommand(
          'error',
          Ar.toCommandProperties(C),
          a instanceof Error ? a.toString() : a
        );
      }
      C.error = error;
      function warning(a, C = {}) {
        Pt.issueCommand(
          'warning',
          Ar.toCommandProperties(C),
          a instanceof Error ? a.toString() : a
        );
      }
      C.warning = warning;
      function notice(a, C = {}) {
        Pt.issueCommand(
          'notice',
          Ar.toCommandProperties(C),
          a instanceof Error ? a.toString() : a
        );
      }
      C.notice = notice;
      function info(a) {
        process.stdout.write(a + Er.EOL);
      }
      C.info = info;
      function startGroup(a) {
        Pt.issue('group', a);
      }
      C.startGroup = startGroup;
      function endGroup() {
        Pt.issue('endgroup');
      }
      C.endGroup = endGroup;
      function group(a, C) {
        return lt(this, void 0, void 0, function* () {
          startGroup(a);
          let q;
          try {
            q = yield C();
          } finally {
            endGroup();
          }
          return q;
        });
      }
      C.group = group;
      function saveState(a, C) {
        const q = process.env['GITHUB_STATE'] || '';
        if (q) {
          return Wt.issueFileCommand('STATE', Wt.prepareKeyValueMessage(a, C));
        }
        Pt.issueCommand('save-state', { name: a }, Ar.toCommandValue(C));
      }
      C.saveState = saveState;
      function getState(a) {
        return process.env[`STATE_${a}`] || '';
      }
      C.getState = getState;
      function getIDToken(a) {
        return lt(this, void 0, void 0, function* () {
          return yield Br.OidcClient.getIDToken(a);
        });
      }
      C.getIDToken = getIDToken;
      var kr = q(5276);
      Object.defineProperty(C, 'summary', {
        enumerable: true,
        get: function () {
          return kr.summary;
        }
      });
      var Dr = q(5276);
      Object.defineProperty(C, 'markdownSummary', {
        enumerable: true,
        get: function () {
          return Dr.markdownSummary;
        }
      });
      var Nr = q(670);
      Object.defineProperty(C, 'toPosixPath', {
        enumerable: true,
        get: function () {
          return Nr.toPosixPath;
        }
      });
      Object.defineProperty(C, 'toWin32Path', {
        enumerable: true,
        get: function () {
          return Nr.toWin32Path;
        }
      });
      Object.defineProperty(C, 'toPlatformPath', {
        enumerable: true,
        get: function () {
          return Nr.toPlatformPath;
        }
      });
    },
    9017: function (a, C, q) {
      'use strict';
      var re =
        (this && this.__createBinding) ||
        (Object.create
          ? function (a, C, q, re) {
              if (re === undefined) re = q;
              Object.defineProperty(a, re, {
                enumerable: true,
                get: function () {
                  return C[q];
                }
              });
            }
          : function (a, C, q, re) {
              if (re === undefined) re = q;
              a[re] = C[q];
            });
      var ae =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (a, C) {
              Object.defineProperty(a, 'default', {
                enumerable: true,
                value: C
              });
            }
          : function (a, C) {
              a['default'] = C;
            });
      var Ue =
        (this && this.__importStar) ||
        function (a) {
          if (a && a.__esModule) return a;
          var C = {};
          if (a != null)
            for (var q in a)
              if (q !== 'default' && Object.hasOwnProperty.call(a, q))
                re(C, a, q);
          ae(C, a);
          return C;
        };
      Object.defineProperty(C, '__esModule', { value: true });
      C.prepareKeyValueMessage = C.issueFileCommand = void 0;
      const lt = Ue(q(7147));
      const Pt = Ue(q(2037));
      const Wt = q(7338);
      const Ar = q(1120);
      function issueFileCommand(a, C) {
        const q = process.env[`GITHUB_${a}`];
        if (!q) {
          throw new Error(
            `Unable to find environment variable for file command ${a}`
          );
        }
        if (!lt.existsSync(q)) {
          throw new Error(`Missing file at path: ${q}`);
        }
        lt.appendFileSync(q, `${Ar.toCommandValue(C)}${Pt.EOL}`, {
          encoding: 'utf8'
        });
      }
      C.issueFileCommand = issueFileCommand;
      function prepareKeyValueMessage(a, C) {
        const q = `ghadelimiter_${Wt.v4()}`;
        const re = Ar.toCommandValue(C);
        if (a.includes(q)) {
          throw new Error(
            `Unexpected input: name should not contain the delimiter "${q}"`
          );
        }
        if (re.includes(q)) {
          throw new Error(
            `Unexpected input: value should not contain the delimiter "${q}"`
          );
        }
        return `${a}<<${q}${Pt.EOL}${re}${Pt.EOL}${q}`;
      }
      C.prepareKeyValueMessage = prepareKeyValueMessage;
    },
    9141: function (a, C, q) {
      'use strict';
      var re =
        (this && this.__awaiter) ||
        function (a, C, q, re) {
          function adopt(a) {
            return a instanceof q
              ? a
              : new q(function (C) {
                  C(a);
                });
          }
          return new (q || (q = Promise))(function (q, ae) {
            function fulfilled(a) {
              try {
                step(re.next(a));
              } catch (a) {
                ae(a);
              }
            }
            function rejected(a) {
              try {
                step(re['throw'](a));
              } catch (a) {
                ae(a);
              }
            }
            function step(a) {
              a.done ? q(a.value) : adopt(a.value).then(fulfilled, rejected);
            }
            step((re = re.apply(a, C || [])).next());
          });
        };
      Object.defineProperty(C, '__esModule', { value: true });
      C.OidcClient = void 0;
      const ae = q(6372);
      const Ue = q(8603);
      const lt = q(9093);
      class OidcClient {
        static createHttpClient(a = true, C = 10) {
          const q = { allowRetries: a, maxRetries: C };
          return new ae.HttpClient(
            'actions/oidc-client',
            [new Ue.BearerCredentialHandler(OidcClient.getRequestToken())],
            q
          );
        }
        static getRequestToken() {
          const a = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
          if (!a) {
            throw new Error(
              'Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable'
            );
          }
          return a;
        }
        static getIDTokenUrl() {
          const a = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
          if (!a) {
            throw new Error(
              'Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable'
            );
          }
          return a;
        }
        static getCall(a) {
          var C;
          return re(this, void 0, void 0, function* () {
            const q = OidcClient.createHttpClient();
            const re = yield q.getJson(a).catch((a) => {
              throw new Error(
                `Failed to get ID Token. \n \n        Error Code : ${a.statusCode}\n \n        Error Message: ${a.message}`
              );
            });
            const ae =
              (C = re.result) === null || C === void 0 ? void 0 : C.value;
            if (!ae) {
              throw new Error('Response json body do not have ID Token field');
            }
            return ae;
          });
        }
        static getIDToken(a) {
          return re(this, void 0, void 0, function* () {
            try {
              let C = OidcClient.getIDTokenUrl();
              if (a) {
                const q = encodeURIComponent(a);
                C = `${C}&audience=${q}`;
              }
              lt.debug(`ID token url is ${C}`);
              const q = yield OidcClient.getCall(C);
              lt.setSecret(q);
              return q;
            } catch (a) {
              throw new Error(`Error message: ${a.message}`);
            }
          });
        }
      }
      C.OidcClient = OidcClient;
    },
    670: function (a, C, q) {
      'use strict';
      var re =
        (this && this.__createBinding) ||
        (Object.create
          ? function (a, C, q, re) {
              if (re === undefined) re = q;
              Object.defineProperty(a, re, {
                enumerable: true,
                get: function () {
                  return C[q];
                }
              });
            }
          : function (a, C, q, re) {
              if (re === undefined) re = q;
              a[re] = C[q];
            });
      var ae =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (a, C) {
              Object.defineProperty(a, 'default', {
                enumerable: true,
                value: C
              });
            }
          : function (a, C) {
              a['default'] = C;
            });
      var Ue =
        (this && this.__importStar) ||
        function (a) {
          if (a && a.__esModule) return a;
          var C = {};
          if (a != null)
            for (var q in a)
              if (q !== 'default' && Object.hasOwnProperty.call(a, q))
                re(C, a, q);
          ae(C, a);
          return C;
        };
      Object.defineProperty(C, '__esModule', { value: true });
      C.toPlatformPath = C.toWin32Path = C.toPosixPath = void 0;
      const lt = Ue(q(1017));
      function toPosixPath(a) {
        return a.replace(/[\\]/g, '/');
      }
      C.toPosixPath = toPosixPath;
      function toWin32Path(a) {
        return a.replace(/[/]/g, '\\');
      }
      C.toWin32Path = toWin32Path;
      function toPlatformPath(a) {
        return a.replace(/[/\\]/g, lt.sep);
      }
      C.toPlatformPath = toPlatformPath;
    },
    5276: function (a, C, q) {
      'use strict';
      var re =
        (this && this.__awaiter) ||
        function (a, C, q, re) {
          function adopt(a) {
            return a instanceof q
              ? a
              : new q(function (C) {
                  C(a);
                });
          }
          return new (q || (q = Promise))(function (q, ae) {
            function fulfilled(a) {
              try {
                step(re.next(a));
              } catch (a) {
                ae(a);
              }
            }
            function rejected(a) {
              try {
                step(re['throw'](a));
              } catch (a) {
                ae(a);
              }
            }
            function step(a) {
              a.done ? q(a.value) : adopt(a.value).then(fulfilled, rejected);
            }
            step((re = re.apply(a, C || [])).next());
          });
        };
      Object.defineProperty(C, '__esModule', { value: true });
      C.summary =
        C.markdownSummary =
        C.SUMMARY_DOCS_URL =
        C.SUMMARY_ENV_VAR =
          void 0;
      const ae = q(2037);
      const Ue = q(7147);
      const { access: lt, appendFile: Pt, writeFile: Wt } = Ue.promises;
      C.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
      C.SUMMARY_DOCS_URL =
        'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
      class Summary {
        constructor() {
          this._buffer = '';
        }
        filePath() {
          return re(this, void 0, void 0, function* () {
            if (this._filePath) {
              return this._filePath;
            }
            const a = process.env[C.SUMMARY_ENV_VAR];
            if (!a) {
              throw new Error(
                `Unable to find environment variable for $${C.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`
              );
            }
            try {
              yield lt(a, Ue.constants.R_OK | Ue.constants.W_OK);
            } catch (C) {
              throw new Error(
                `Unable to access summary file: '${a}'. Check if the file has correct read/write permissions.`
              );
            }
            this._filePath = a;
            return this._filePath;
          });
        }
        wrap(a, C, q = {}) {
          const re = Object.entries(q)
            .map(([a, C]) => ` ${a}="${C}"`)
            .join('');
          if (!C) {
            return `<${a}${re}>`;
          }
          return `<${a}${re}>${C}</${a}>`;
        }
        write(a) {
          return re(this, void 0, void 0, function* () {
            const C = !!(a === null || a === void 0 ? void 0 : a.overwrite);
            const q = yield this.filePath();
            const re = C ? Wt : Pt;
            yield re(q, this._buffer, { encoding: 'utf8' });
            return this.emptyBuffer();
          });
        }
        clear() {
          return re(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
          });
        }
        stringify() {
          return this._buffer;
        }
        isEmptyBuffer() {
          return this._buffer.length === 0;
        }
        emptyBuffer() {
          this._buffer = '';
          return this;
        }
        addRaw(a, C = false) {
          this._buffer += a;
          return C ? this.addEOL() : this;
        }
        addEOL() {
          return this.addRaw(ae.EOL);
        }
        addCodeBlock(a, C) {
          const q = Object.assign({}, C && { lang: C });
          const re = this.wrap('pre', this.wrap('code', a), q);
          return this.addRaw(re).addEOL();
        }
        addList(a, C = false) {
          const q = C ? 'ol' : 'ul';
          const re = a.map((a) => this.wrap('li', a)).join('');
          const ae = this.wrap(q, re);
          return this.addRaw(ae).addEOL();
        }
        addTable(a) {
          const C = a
            .map((a) => {
              const C = a
                .map((a) => {
                  if (typeof a === 'string') {
                    return this.wrap('td', a);
                  }
                  const { header: C, data: q, colspan: re, rowspan: ae } = a;
                  const Ue = C ? 'th' : 'td';
                  const lt = Object.assign(
                    Object.assign({}, re && { colspan: re }),
                    ae && { rowspan: ae }
                  );
                  return this.wrap(Ue, q, lt);
                })
                .join('');
              return this.wrap('tr', C);
            })
            .join('');
          const q = this.wrap('table', C);
          return this.addRaw(q).addEOL();
        }
        addDetails(a, C) {
          const q = this.wrap('details', this.wrap('summary', a) + C);
          return this.addRaw(q).addEOL();
        }
        addImage(a, C, q) {
          const { width: re, height: ae } = q || {};
          const Ue = Object.assign(
            Object.assign({}, re && { width: re }),
            ae && { height: ae }
          );
          const lt = this.wrap(
            'img',
            null,
            Object.assign({ src: a, alt: C }, Ue)
          );
          return this.addRaw(lt).addEOL();
        }
        addHeading(a, C) {
          const q = `h${C}`;
          const re = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(q)
            ? q
            : 'h1';
          const ae = this.wrap(re, a);
          return this.addRaw(ae).addEOL();
        }
        addSeparator() {
          const a = this.wrap('hr', null);
          return this.addRaw(a).addEOL();
        }
        addBreak() {
          const a = this.wrap('br', null);
          return this.addRaw(a).addEOL();
        }
        addQuote(a, C) {
          const q = Object.assign({}, C && { cite: C });
          const re = this.wrap('blockquote', a, q);
          return this.addRaw(re).addEOL();
        }
        addLink(a, C) {
          const q = this.wrap('a', a, { href: C });
          return this.addRaw(q).addEOL();
        }
      }
      const Ar = new Summary();
      C.markdownSummary = Ar;
      C.summary = Ar;
    },
    1120: (a, C) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C.toCommandProperties = C.toCommandValue = void 0;
      function toCommandValue(a) {
        if (a === null || a === undefined) {
          return '';
        } else if (typeof a === 'string' || a instanceof String) {
          return a;
        }
        return JSON.stringify(a);
      }
      C.toCommandValue = toCommandValue;
      function toCommandProperties(a) {
        if (!Object.keys(a).length) {
          return {};
        }
        return {
          title: a.title,
          file: a.file,
          line: a.startLine,
          endLine: a.endLine,
          col: a.startColumn,
          endColumn: a.endColumn
        };
      }
      C.toCommandProperties = toCommandProperties;
    },
    8282: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C.Context = void 0;
      const re = q(7147);
      const ae = q(2037);
      class Context {
        constructor() {
          var a, C, q;
          this.payload = {};
          if (process.env.GITHUB_EVENT_PATH) {
            if ((0, re.existsSync)(process.env.GITHUB_EVENT_PATH)) {
              this.payload = JSON.parse(
                (0, re.readFileSync)(process.env.GITHUB_EVENT_PATH, {
                  encoding: 'utf8'
                })
              );
            } else {
              const a = process.env.GITHUB_EVENT_PATH;
              process.stdout.write(
                `GITHUB_EVENT_PATH ${a} does not exist${ae.EOL}`
              );
            }
          }
          this.eventName = process.env.GITHUB_EVENT_NAME;
          this.sha = process.env.GITHUB_SHA;
          this.ref = process.env.GITHUB_REF;
          this.workflow = process.env.GITHUB_WORKFLOW;
          this.action = process.env.GITHUB_ACTION;
          this.actor = process.env.GITHUB_ACTOR;
          this.job = process.env.GITHUB_JOB;
          this.runNumber = parseInt(process.env.GITHUB_RUN_NUMBER, 10);
          this.runId = parseInt(process.env.GITHUB_RUN_ID, 10);
          this.apiUrl =
            (a = process.env.GITHUB_API_URL) !== null && a !== void 0
              ? a
              : `https://api.github.com`;
          this.serverUrl =
            (C = process.env.GITHUB_SERVER_URL) !== null && C !== void 0
              ? C
              : `https://github.com`;
          this.graphqlUrl =
            (q = process.env.GITHUB_GRAPHQL_URL) !== null && q !== void 0
              ? q
              : `https://api.github.com/graphql`;
        }
        get issue() {
          const a = this.payload;
          return Object.assign(Object.assign({}, this.repo), {
            number: (a.issue || a.pull_request || a).number
          });
        }
        get repo() {
          if (process.env.GITHUB_REPOSITORY) {
            const [a, C] = process.env.GITHUB_REPOSITORY.split('/');
            return { owner: a, repo: C };
          }
          if (this.payload.repository) {
            return {
              owner: this.payload.repository.owner.login,
              repo: this.payload.repository.name
            };
          }
          throw new Error(
            "context.repo requires a GITHUB_REPOSITORY environment variable like 'owner/repo'"
          );
        }
      }
      C.Context = Context;
    },
    5942: function (a, C, q) {
      'use strict';
      var re =
        (this && this.__createBinding) ||
        (Object.create
          ? function (a, C, q, re) {
              if (re === undefined) re = q;
              var ae = Object.getOwnPropertyDescriptor(C, q);
              if (
                !ae ||
                ('get' in ae ? !C.__esModule : ae.writable || ae.configurable)
              ) {
                ae = {
                  enumerable: true,
                  get: function () {
                    return C[q];
                  }
                };
              }
              Object.defineProperty(a, re, ae);
            }
          : function (a, C, q, re) {
              if (re === undefined) re = q;
              a[re] = C[q];
            });
      var ae =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (a, C) {
              Object.defineProperty(a, 'default', {
                enumerable: true,
                value: C
              });
            }
          : function (a, C) {
              a['default'] = C;
            });
      var Ue =
        (this && this.__importStar) ||
        function (a) {
          if (a && a.__esModule) return a;
          var C = {};
          if (a != null)
            for (var q in a)
              if (q !== 'default' && Object.prototype.hasOwnProperty.call(a, q))
                re(C, a, q);
          ae(C, a);
          return C;
        };
      Object.defineProperty(C, '__esModule', { value: true });
      C.getOctokit = C.context = void 0;
      const lt = Ue(q(8282));
      const Pt = q(7375);
      C.context = new lt.Context();
      function getOctokit(a, C, ...q) {
        const re = Pt.GitHub.plugin(...q);
        return new re((0, Pt.getOctokitOptions)(a, C));
      }
      C.getOctokit = getOctokit;
    },
    1181: function (a, C, q) {
      'use strict';
      var re =
        (this && this.__createBinding) ||
        (Object.create
          ? function (a, C, q, re) {
              if (re === undefined) re = q;
              var ae = Object.getOwnPropertyDescriptor(C, q);
              if (
                !ae ||
                ('get' in ae ? !C.__esModule : ae.writable || ae.configurable)
              ) {
                ae = {
                  enumerable: true,
                  get: function () {
                    return C[q];
                  }
                };
              }
              Object.defineProperty(a, re, ae);
            }
          : function (a, C, q, re) {
              if (re === undefined) re = q;
              a[re] = C[q];
            });
      var ae =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (a, C) {
              Object.defineProperty(a, 'default', {
                enumerable: true,
                value: C
              });
            }
          : function (a, C) {
              a['default'] = C;
            });
      var Ue =
        (this && this.__importStar) ||
        function (a) {
          if (a && a.__esModule) return a;
          var C = {};
          if (a != null)
            for (var q in a)
              if (q !== 'default' && Object.prototype.hasOwnProperty.call(a, q))
                re(C, a, q);
          ae(C, a);
          return C;
        };
      var lt =
        (this && this.__awaiter) ||
        function (a, C, q, re) {
          function adopt(a) {
            return a instanceof q
              ? a
              : new q(function (C) {
                  C(a);
                });
          }
          return new (q || (q = Promise))(function (q, ae) {
            function fulfilled(a) {
              try {
                step(re.next(a));
              } catch (a) {
                ae(a);
              }
            }
            function rejected(a) {
              try {
                step(re['throw'](a));
              } catch (a) {
                ae(a);
              }
            }
            function step(a) {
              a.done ? q(a.value) : adopt(a.value).then(fulfilled, rejected);
            }
            step((re = re.apply(a, C || [])).next());
          });
        };
      Object.defineProperty(C, '__esModule', { value: true });
      C.getApiBaseUrl =
        C.getProxyFetch =
        C.getProxyAgentDispatcher =
        C.getProxyAgent =
        C.getAuthString =
          void 0;
      const Pt = Ue(q(6372));
      const Wt = q(7181);
      function getAuthString(a, C) {
        if (!a && !C.auth) {
          throw new Error('Parameter token or opts.auth is required');
        } else if (a && C.auth) {
          throw new Error(
            'Parameters token and opts.auth may not both be specified'
          );
        }
        return typeof C.auth === 'string' ? C.auth : `token ${a}`;
      }
      C.getAuthString = getAuthString;
      function getProxyAgent(a) {
        const C = new Pt.HttpClient();
        return C.getAgent(a);
      }
      C.getProxyAgent = getProxyAgent;
      function getProxyAgentDispatcher(a) {
        const C = new Pt.HttpClient();
        return C.getAgentDispatcher(a);
      }
      C.getProxyAgentDispatcher = getProxyAgentDispatcher;
      function getProxyFetch(a) {
        const C = getProxyAgentDispatcher(a);
        const proxyFetch = (a, q) =>
          lt(this, void 0, void 0, function* () {
            return (0, Wt.fetch)(
              a,
              Object.assign(Object.assign({}, q), { dispatcher: C })
            );
          });
        return proxyFetch;
      }
      C.getProxyFetch = getProxyFetch;
      function getApiBaseUrl() {
        return process.env['GITHUB_API_URL'] || 'https://api.github.com';
      }
      C.getApiBaseUrl = getApiBaseUrl;
    },
    7375: function (a, C, q) {
      'use strict';
      var re =
        (this && this.__createBinding) ||
        (Object.create
          ? function (a, C, q, re) {
              if (re === undefined) re = q;
              var ae = Object.getOwnPropertyDescriptor(C, q);
              if (
                !ae ||
                ('get' in ae ? !C.__esModule : ae.writable || ae.configurable)
              ) {
                ae = {
                  enumerable: true,
                  get: function () {
                    return C[q];
                  }
                };
              }
              Object.defineProperty(a, re, ae);
            }
          : function (a, C, q, re) {
              if (re === undefined) re = q;
              a[re] = C[q];
            });
      var ae =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (a, C) {
              Object.defineProperty(a, 'default', {
                enumerable: true,
                value: C
              });
            }
          : function (a, C) {
              a['default'] = C;
            });
      var Ue =
        (this && this.__importStar) ||
        function (a) {
          if (a && a.__esModule) return a;
          var C = {};
          if (a != null)
            for (var q in a)
              if (q !== 'default' && Object.prototype.hasOwnProperty.call(a, q))
                re(C, a, q);
          ae(C, a);
          return C;
        };
      Object.defineProperty(C, '__esModule', { value: true });
      C.getOctokitOptions = C.GitHub = C.defaults = C.context = void 0;
      const lt = Ue(q(8282));
      const Pt = Ue(q(1181));
      const Wt = q(9437);
      const Ar = q(3418);
      const Er = q(8927);
      C.context = new lt.Context();
      const Ir = Pt.getApiBaseUrl();
      C.defaults = {
        baseUrl: Ir,
        request: { agent: Pt.getProxyAgent(Ir), fetch: Pt.getProxyFetch(Ir) }
      };
      C.GitHub = Wt.Octokit.plugin(
        Ar.restEndpointMethods,
        Er.paginateRest
      ).defaults(C.defaults);
      function getOctokitOptions(a, C) {
        const q = Object.assign({}, C || {});
        const re = Pt.getAuthString(a, q);
        if (re) {
          q.auth = re;
        }
        return q;
      }
      C.getOctokitOptions = getOctokitOptions;
    },
    8603: function (a, C) {
      'use strict';
      var q =
        (this && this.__awaiter) ||
        function (a, C, q, re) {
          function adopt(a) {
            return a instanceof q
              ? a
              : new q(function (C) {
                  C(a);
                });
          }
          return new (q || (q = Promise))(function (q, ae) {
            function fulfilled(a) {
              try {
                step(re.next(a));
              } catch (a) {
                ae(a);
              }
            }
            function rejected(a) {
              try {
                step(re['throw'](a));
              } catch (a) {
                ae(a);
              }
            }
            function step(a) {
              a.done ? q(a.value) : adopt(a.value).then(fulfilled, rejected);
            }
            step((re = re.apply(a, C || [])).next());
          });
        };
      Object.defineProperty(C, '__esModule', { value: true });
      C.PersonalAccessTokenCredentialHandler =
        C.BearerCredentialHandler =
        C.BasicCredentialHandler =
          void 0;
      class BasicCredentialHandler {
        constructor(a, C) {
          this.username = a;
          this.password = C;
        }
        prepareRequest(a) {
          if (!a.headers) {
            throw Error('The request has no headers');
          }
          a.headers['Authorization'] =
            `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;
        }
        canHandleAuthentication() {
          return false;
        }
        handleAuthentication() {
          return q(this, void 0, void 0, function* () {
            throw new Error('not implemented');
          });
        }
      }
      C.BasicCredentialHandler = BasicCredentialHandler;
      class BearerCredentialHandler {
        constructor(a) {
          this.token = a;
        }
        prepareRequest(a) {
          if (!a.headers) {
            throw Error('The request has no headers');
          }
          a.headers['Authorization'] = `Bearer ${this.token}`;
        }
        canHandleAuthentication() {
          return false;
        }
        handleAuthentication() {
          return q(this, void 0, void 0, function* () {
            throw new Error('not implemented');
          });
        }
      }
      C.BearerCredentialHandler = BearerCredentialHandler;
      class PersonalAccessTokenCredentialHandler {
        constructor(a) {
          this.token = a;
        }
        prepareRequest(a) {
          if (!a.headers) {
            throw Error('The request has no headers');
          }
          a.headers['Authorization'] =
            `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
        }
        canHandleAuthentication() {
          return false;
        }
        handleAuthentication() {
          return q(this, void 0, void 0, function* () {
            throw new Error('not implemented');
          });
        }
      }
      C.PersonalAccessTokenCredentialHandler =
        PersonalAccessTokenCredentialHandler;
    },
    6372: function (a, C, q) {
      'use strict';
      var re =
        (this && this.__createBinding) ||
        (Object.create
          ? function (a, C, q, re) {
              if (re === undefined) re = q;
              var ae = Object.getOwnPropertyDescriptor(C, q);
              if (
                !ae ||
                ('get' in ae ? !C.__esModule : ae.writable || ae.configurable)
              ) {
                ae = {
                  enumerable: true,
                  get: function () {
                    return C[q];
                  }
                };
              }
              Object.defineProperty(a, re, ae);
            }
          : function (a, C, q, re) {
              if (re === undefined) re = q;
              a[re] = C[q];
            });
      var ae =
        (this && this.__setModuleDefault) ||
        (Object.create
          ? function (a, C) {
              Object.defineProperty(a, 'default', {
                enumerable: true,
                value: C
              });
            }
          : function (a, C) {
              a['default'] = C;
            });
      var Ue =
        (this && this.__importStar) ||
        function (a) {
          if (a && a.__esModule) return a;
          var C = {};
          if (a != null)
            for (var q in a)
              if (q !== 'default' && Object.prototype.hasOwnProperty.call(a, q))
                re(C, a, q);
          ae(C, a);
          return C;
        };
      var lt =
        (this && this.__awaiter) ||
        function (a, C, q, re) {
          function adopt(a) {
            return a instanceof q
              ? a
              : new q(function (C) {
                  C(a);
                });
          }
          return new (q || (q = Promise))(function (q, ae) {
            function fulfilled(a) {
              try {
                step(re.next(a));
              } catch (a) {
                ae(a);
              }
            }
            function rejected(a) {
              try {
                step(re['throw'](a));
              } catch (a) {
                ae(a);
              }
            }
            function step(a) {
              a.done ? q(a.value) : adopt(a.value).then(fulfilled, rejected);
            }
            step((re = re.apply(a, C || [])).next());
          });
        };
      Object.defineProperty(C, '__esModule', { value: true });
      C.HttpClient =
        C.isHttps =
        C.HttpClientResponse =
        C.HttpClientError =
        C.getProxyUrl =
        C.MediaTypes =
        C.Headers =
        C.HttpCodes =
          void 0;
      const Pt = Ue(q(3685));
      const Wt = Ue(q(5687));
      const Ar = Ue(q(2067));
      const Er = Ue(q(4225));
      const Ir = q(7181);
      var Br;
      (function (a) {
        a[(a['OK'] = 200)] = 'OK';
        a[(a['MultipleChoices'] = 300)] = 'MultipleChoices';
        a[(a['MovedPermanently'] = 301)] = 'MovedPermanently';
        a[(a['ResourceMoved'] = 302)] = 'ResourceMoved';
        a[(a['SeeOther'] = 303)] = 'SeeOther';
        a[(a['NotModified'] = 304)] = 'NotModified';
        a[(a['UseProxy'] = 305)] = 'UseProxy';
        a[(a['SwitchProxy'] = 306)] = 'SwitchProxy';
        a[(a['TemporaryRedirect'] = 307)] = 'TemporaryRedirect';
        a[(a['PermanentRedirect'] = 308)] = 'PermanentRedirect';
        a[(a['BadRequest'] = 400)] = 'BadRequest';
        a[(a['Unauthorized'] = 401)] = 'Unauthorized';
        a[(a['PaymentRequired'] = 402)] = 'PaymentRequired';
        a[(a['Forbidden'] = 403)] = 'Forbidden';
        a[(a['NotFound'] = 404)] = 'NotFound';
        a[(a['MethodNotAllowed'] = 405)] = 'MethodNotAllowed';
        a[(a['NotAcceptable'] = 406)] = 'NotAcceptable';
        a[(a['ProxyAuthenticationRequired'] = 407)] =
          'ProxyAuthenticationRequired';
        a[(a['RequestTimeout'] = 408)] = 'RequestTimeout';
        a[(a['Conflict'] = 409)] = 'Conflict';
        a[(a['Gone'] = 410)] = 'Gone';
        a[(a['TooManyRequests'] = 429)] = 'TooManyRequests';
        a[(a['InternalServerError'] = 500)] = 'InternalServerError';
        a[(a['NotImplemented'] = 501)] = 'NotImplemented';
        a[(a['BadGateway'] = 502)] = 'BadGateway';
        a[(a['ServiceUnavailable'] = 503)] = 'ServiceUnavailable';
        a[(a['GatewayTimeout'] = 504)] = 'GatewayTimeout';
      })(Br || (C.HttpCodes = Br = {}));
      var Qr;
      (function (a) {
        a['Accept'] = 'accept';
        a['ContentType'] = 'content-type';
      })(Qr || (C.Headers = Qr = {}));
      var kr;
      (function (a) {
        a['ApplicationJson'] = 'application/json';
      })(kr || (C.MediaTypes = kr = {}));
      function getProxyUrl(a) {
        const C = Ar.getProxyUrl(new URL(a));
        return C ? C.href : '';
      }
      C.getProxyUrl = getProxyUrl;
      const Dr = [
        Br.MovedPermanently,
        Br.ResourceMoved,
        Br.SeeOther,
        Br.TemporaryRedirect,
        Br.PermanentRedirect
      ];
      const Nr = [Br.BadGateway, Br.ServiceUnavailable, Br.GatewayTimeout];
      const Lr = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
      const Fr = 10;
      const Mr = 5;
      class HttpClientError extends Error {
        constructor(a, C) {
          super(a);
          this.name = 'HttpClientError';
          this.statusCode = C;
          Object.setPrototypeOf(this, HttpClientError.prototype);
        }
      }
      C.HttpClientError = HttpClientError;
      class HttpClientResponse {
        constructor(a) {
          this.message = a;
        }
        readBody() {
          return lt(this, void 0, void 0, function* () {
            return new Promise((a) =>
              lt(this, void 0, void 0, function* () {
                let C = Buffer.alloc(0);
                this.message.on('data', (a) => {
                  C = Buffer.concat([C, a]);
                });
                this.message.on('end', () => {
                  a(C.toString());
                });
              })
            );
          });
        }
        readBodyBuffer() {
          return lt(this, void 0, void 0, function* () {
            return new Promise((a) =>
              lt(this, void 0, void 0, function* () {
                const C = [];
                this.message.on('data', (a) => {
                  C.push(a);
                });
                this.message.on('end', () => {
                  a(Buffer.concat(C));
                });
              })
            );
          });
        }
      }
      C.HttpClientResponse = HttpClientResponse;
      function isHttps(a) {
        const C = new URL(a);
        return C.protocol === 'https:';
      }
      C.isHttps = isHttps;
      class HttpClient {
        constructor(a, C, q) {
          this._ignoreSslError = false;
          this._allowRedirects = true;
          this._allowRedirectDowngrade = false;
          this._maxRedirects = 50;
          this._allowRetries = false;
          this._maxRetries = 1;
          this._keepAlive = false;
          this._disposed = false;
          this.userAgent = a;
          this.handlers = C || [];
          this.requestOptions = q;
          if (q) {
            if (q.ignoreSslError != null) {
              this._ignoreSslError = q.ignoreSslError;
            }
            this._socketTimeout = q.socketTimeout;
            if (q.allowRedirects != null) {
              this._allowRedirects = q.allowRedirects;
            }
            if (q.allowRedirectDowngrade != null) {
              this._allowRedirectDowngrade = q.allowRedirectDowngrade;
            }
            if (q.maxRedirects != null) {
              this._maxRedirects = Math.max(q.maxRedirects, 0);
            }
            if (q.keepAlive != null) {
              this._keepAlive = q.keepAlive;
            }
            if (q.allowRetries != null) {
              this._allowRetries = q.allowRetries;
            }
            if (q.maxRetries != null) {
              this._maxRetries = q.maxRetries;
            }
          }
        }
        options(a, C) {
          return lt(this, void 0, void 0, function* () {
            return this.request('OPTIONS', a, null, C || {});
          });
        }
        get(a, C) {
          return lt(this, void 0, void 0, function* () {
            return this.request('GET', a, null, C || {});
          });
        }
        del(a, C) {
          return lt(this, void 0, void 0, function* () {
            return this.request('DELETE', a, null, C || {});
          });
        }
        post(a, C, q) {
          return lt(this, void 0, void 0, function* () {
            return this.request('POST', a, C, q || {});
          });
        }
        patch(a, C, q) {
          return lt(this, void 0, void 0, function* () {
            return this.request('PATCH', a, C, q || {});
          });
        }
        put(a, C, q) {
          return lt(this, void 0, void 0, function* () {
            return this.request('PUT', a, C, q || {});
          });
        }
        head(a, C) {
          return lt(this, void 0, void 0, function* () {
            return this.request('HEAD', a, null, C || {});
          });
        }
        sendStream(a, C, q, re) {
          return lt(this, void 0, void 0, function* () {
            return this.request(a, C, q, re);
          });
        }
        getJson(a, C = {}) {
          return lt(this, void 0, void 0, function* () {
            C[Qr.Accept] = this._getExistingOrDefaultHeader(
              C,
              Qr.Accept,
              kr.ApplicationJson
            );
            const q = yield this.get(a, C);
            return this._processResponse(q, this.requestOptions);
          });
        }
        postJson(a, C, q = {}) {
          return lt(this, void 0, void 0, function* () {
            const re = JSON.stringify(C, null, 2);
            q[Qr.Accept] = this._getExistingOrDefaultHeader(
              q,
              Qr.Accept,
              kr.ApplicationJson
            );
            q[Qr.ContentType] = this._getExistingOrDefaultHeader(
              q,
              Qr.ContentType,
              kr.ApplicationJson
            );
            const ae = yield this.post(a, re, q);
            return this._processResponse(ae, this.requestOptions);
          });
        }
        putJson(a, C, q = {}) {
          return lt(this, void 0, void 0, function* () {
            const re = JSON.stringify(C, null, 2);
            q[Qr.Accept] = this._getExistingOrDefaultHeader(
              q,
              Qr.Accept,
              kr.ApplicationJson
            );
            q[Qr.ContentType] = this._getExistingOrDefaultHeader(
              q,
              Qr.ContentType,
              kr.ApplicationJson
            );
            const ae = yield this.put(a, re, q);
            return this._processResponse(ae, this.requestOptions);
          });
        }
        patchJson(a, C, q = {}) {
          return lt(this, void 0, void 0, function* () {
            const re = JSON.stringify(C, null, 2);
            q[Qr.Accept] = this._getExistingOrDefaultHeader(
              q,
              Qr.Accept,
              kr.ApplicationJson
            );
            q[Qr.ContentType] = this._getExistingOrDefaultHeader(
              q,
              Qr.ContentType,
              kr.ApplicationJson
            );
            const ae = yield this.patch(a, re, q);
            return this._processResponse(ae, this.requestOptions);
          });
        }
        request(a, C, q, re) {
          return lt(this, void 0, void 0, function* () {
            if (this._disposed) {
              throw new Error('Client has already been disposed.');
            }
            const ae = new URL(C);
            let Ue = this._prepareRequest(a, ae, re);
            const lt =
              this._allowRetries && Lr.includes(a) ? this._maxRetries + 1 : 1;
            let Pt = 0;
            let Wt;
            do {
              Wt = yield this.requestRaw(Ue, q);
              if (
                Wt &&
                Wt.message &&
                Wt.message.statusCode === Br.Unauthorized
              ) {
                let a;
                for (const C of this.handlers) {
                  if (C.canHandleAuthentication(Wt)) {
                    a = C;
                    break;
                  }
                }
                if (a) {
                  return a.handleAuthentication(this, Ue, q);
                } else {
                  return Wt;
                }
              }
              let C = this._maxRedirects;
              while (
                Wt.message.statusCode &&
                Dr.includes(Wt.message.statusCode) &&
                this._allowRedirects &&
                C > 0
              ) {
                const lt = Wt.message.headers['location'];
                if (!lt) {
                  break;
                }
                const Pt = new URL(lt);
                if (
                  ae.protocol === 'https:' &&
                  ae.protocol !== Pt.protocol &&
                  !this._allowRedirectDowngrade
                ) {
                  throw new Error(
                    'Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.'
                  );
                }
                yield Wt.readBody();
                if (Pt.hostname !== ae.hostname) {
                  for (const a in re) {
                    if (a.toLowerCase() === 'authorization') {
                      delete re[a];
                    }
                  }
                }
                Ue = this._prepareRequest(a, Pt, re);
                Wt = yield this.requestRaw(Ue, q);
                C--;
              }
              if (
                !Wt.message.statusCode ||
                !Nr.includes(Wt.message.statusCode)
              ) {
                return Wt;
              }
              Pt += 1;
              if (Pt < lt) {
                yield Wt.readBody();
                yield this._performExponentialBackoff(Pt);
              }
            } while (Pt < lt);
            return Wt;
          });
        }
        dispose() {
          if (this._agent) {
            this._agent.destroy();
          }
          this._disposed = true;
        }
        requestRaw(a, C) {
          return lt(this, void 0, void 0, function* () {
            return new Promise((q, re) => {
              function callbackForResult(a, C) {
                if (a) {
                  re(a);
                } else if (!C) {
                  re(new Error('Unknown error'));
                } else {
                  q(C);
                }
              }
              this.requestRawWithCallback(a, C, callbackForResult);
            });
          });
        }
        requestRawWithCallback(a, C, q) {
          if (typeof C === 'string') {
            if (!a.options.headers) {
              a.options.headers = {};
            }
            a.options.headers['Content-Length'] = Buffer.byteLength(C, 'utf8');
          }
          let re = false;
          function handleResult(a, C) {
            if (!re) {
              re = true;
              q(a, C);
            }
          }
          const ae = a.httpModule.request(a.options, (a) => {
            const C = new HttpClientResponse(a);
            handleResult(undefined, C);
          });
          let Ue;
          ae.on('socket', (a) => {
            Ue = a;
          });
          ae.setTimeout(this._socketTimeout || 3 * 6e4, () => {
            if (Ue) {
              Ue.end();
            }
            handleResult(new Error(`Request timeout: ${a.options.path}`));
          });
          ae.on('error', function (a) {
            handleResult(a);
          });
          if (C && typeof C === 'string') {
            ae.write(C, 'utf8');
          }
          if (C && typeof C !== 'string') {
            C.on('close', function () {
              ae.end();
            });
            C.pipe(ae);
          } else {
            ae.end();
          }
        }
        getAgent(a) {
          const C = new URL(a);
          return this._getAgent(C);
        }
        getAgentDispatcher(a) {
          const C = new URL(a);
          const q = Ar.getProxyUrl(C);
          const re = q && q.hostname;
          if (!re) {
            return;
          }
          return this._getProxyAgentDispatcher(C, q);
        }
        _prepareRequest(a, C, q) {
          const re = {};
          re.parsedUrl = C;
          const ae = re.parsedUrl.protocol === 'https:';
          re.httpModule = ae ? Wt : Pt;
          const Ue = ae ? 443 : 80;
          re.options = {};
          re.options.host = re.parsedUrl.hostname;
          re.options.port = re.parsedUrl.port
            ? parseInt(re.parsedUrl.port)
            : Ue;
          re.options.path =
            (re.parsedUrl.pathname || '') + (re.parsedUrl.search || '');
          re.options.method = a;
          re.options.headers = this._mergeHeaders(q);
          if (this.userAgent != null) {
            re.options.headers['user-agent'] = this.userAgent;
          }
          re.options.agent = this._getAgent(re.parsedUrl);
          if (this.handlers) {
            for (const a of this.handlers) {
              a.prepareRequest(re.options);
            }
          }
          return re;
        }
        _mergeHeaders(a) {
          if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign(
              {},
              lowercaseKeys(this.requestOptions.headers),
              lowercaseKeys(a || {})
            );
          }
          return lowercaseKeys(a || {});
        }
        _getExistingOrDefaultHeader(a, C, q) {
          let re;
          if (this.requestOptions && this.requestOptions.headers) {
            re = lowercaseKeys(this.requestOptions.headers)[C];
          }
          return a[C] || re || q;
        }
        _getAgent(a) {
          let C;
          const q = Ar.getProxyUrl(a);
          const re = q && q.hostname;
          if (this._keepAlive && re) {
            C = this._proxyAgent;
          }
          if (!re) {
            C = this._agent;
          }
          if (C) {
            return C;
          }
          const ae = a.protocol === 'https:';
          let Ue = 100;
          if (this.requestOptions) {
            Ue = this.requestOptions.maxSockets || Pt.globalAgent.maxSockets;
          }
          if (q && q.hostname) {
            const a = {
              maxSockets: Ue,
              keepAlive: this._keepAlive,
              proxy: Object.assign(
                Object.assign(
                  {},
                  (q.username || q.password) && {
                    proxyAuth: `${q.username}:${q.password}`
                  }
                ),
                { host: q.hostname, port: q.port }
              )
            };
            let re;
            const lt = q.protocol === 'https:';
            if (ae) {
              re = lt ? Er.httpsOverHttps : Er.httpsOverHttp;
            } else {
              re = lt ? Er.httpOverHttps : Er.httpOverHttp;
            }
            C = re(a);
            this._proxyAgent = C;
          }
          if (!C) {
            const a = { keepAlive: this._keepAlive, maxSockets: Ue };
            C = ae ? new Wt.Agent(a) : new Pt.Agent(a);
            this._agent = C;
          }
          if (ae && this._ignoreSslError) {
            C.options = Object.assign(C.options || {}, {
              rejectUnauthorized: false
            });
          }
          return C;
        }
        _getProxyAgentDispatcher(a, C) {
          let q;
          if (this._keepAlive) {
            q = this._proxyAgentDispatcher;
          }
          if (q) {
            return q;
          }
          const re = a.protocol === 'https:';
          q = new Ir.ProxyAgent(
            Object.assign(
              { uri: C.href, pipelining: !this._keepAlive ? 0 : 1 },
              (C.username || C.password) && {
                token: `${C.username}:${C.password}`
              }
            )
          );
          this._proxyAgentDispatcher = q;
          if (re && this._ignoreSslError) {
            q.options = Object.assign(q.options.requestTls || {}, {
              rejectUnauthorized: false
            });
          }
          return q;
        }
        _performExponentialBackoff(a) {
          return lt(this, void 0, void 0, function* () {
            a = Math.min(Fr, a);
            const C = Mr * Math.pow(2, a);
            return new Promise((a) => setTimeout(() => a(), C));
          });
        }
        _processResponse(a, C) {
          return lt(this, void 0, void 0, function* () {
            return new Promise((q, re) =>
              lt(this, void 0, void 0, function* () {
                const ae = a.message.statusCode || 0;
                const Ue = { statusCode: ae, result: null, headers: {} };
                if (ae === Br.NotFound) {
                  q(Ue);
                }
                function dateTimeDeserializer(a, C) {
                  if (typeof C === 'string') {
                    const a = new Date(C);
                    if (!isNaN(a.valueOf())) {
                      return a;
                    }
                  }
                  return C;
                }
                let lt;
                let Pt;
                try {
                  Pt = yield a.readBody();
                  if (Pt && Pt.length > 0) {
                    if (C && C.deserializeDates) {
                      lt = JSON.parse(Pt, dateTimeDeserializer);
                    } else {
                      lt = JSON.parse(Pt);
                    }
                    Ue.result = lt;
                  }
                  Ue.headers = a.message.headers;
                } catch (a) {}
                if (ae > 299) {
                  let a;
                  if (lt && lt.message) {
                    a = lt.message;
                  } else if (Pt && Pt.length > 0) {
                    a = Pt;
                  } else {
                    a = `Failed request: (${ae})`;
                  }
                  const C = new HttpClientError(a, ae);
                  C.result = Ue.result;
                  re(C);
                } else {
                  q(Ue);
                }
              })
            );
          });
        }
      }
      C.HttpClient = HttpClient;
      const lowercaseKeys = (a) =>
        Object.keys(a).reduce((C, q) => ((C[q.toLowerCase()] = a[q]), C), {});
    },
    2067: (a, C) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C.checkBypass = C.getProxyUrl = void 0;
      function getProxyUrl(a) {
        const C = a.protocol === 'https:';
        if (checkBypass(a)) {
          return undefined;
        }
        const q = (() => {
          if (C) {
            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
          } else {
            return process.env['http_proxy'] || process.env['HTTP_PROXY'];
          }
        })();
        if (q) {
          try {
            return new URL(q);
          } catch (a) {
            if (!q.startsWith('http://') && !q.startsWith('https://'))
              return new URL(`http://${q}`);
          }
        } else {
          return undefined;
        }
      }
      C.getProxyUrl = getProxyUrl;
      function checkBypass(a) {
        if (!a.hostname) {
          return false;
        }
        const C = a.hostname;
        if (isLoopbackAddress(C)) {
          return true;
        }
        const q = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
        if (!q) {
          return false;
        }
        let re;
        if (a.port) {
          re = Number(a.port);
        } else if (a.protocol === 'http:') {
          re = 80;
        } else if (a.protocol === 'https:') {
          re = 443;
        }
        const ae = [a.hostname.toUpperCase()];
        if (typeof re === 'number') {
          ae.push(`${ae[0]}:${re}`);
        }
        for (const a of q
          .split(',')
          .map((a) => a.trim().toUpperCase())
          .filter((a) => a)) {
          if (
            a === '*' ||
            ae.some(
              (C) =>
                C === a ||
                C.endsWith(`.${a}`) ||
                (a.startsWith('.') && C.endsWith(`${a}`))
            )
          ) {
            return true;
          }
        }
        return false;
      }
      C.checkBypass = checkBypass;
      function isLoopbackAddress(a) {
        const C = a.toLowerCase();
        return (
          C === 'localhost' ||
          C.startsWith('127.') ||
          C.startsWith('[::1]') ||
          C.startsWith('[0:0:0:0:0:0:0:1]')
        );
      }
    },
    6557: (a, C, q) => {
      'use strict';
      const { parse: re } = q(6288);
      a.exports = function (a) {
        const C = new CSSStyleDeclaration(a);
        const q = {
          get: function (a, C) {
            return C in a ? a[C] : a.getPropertyValue(dasherizeProperty(C));
          },
          has: function (a, C) {
            return true;
          },
          set: function (a, C, q) {
            if (C in a) {
              a[C] = q;
            } else {
              a.setProperty(dasherizeProperty(C), q ?? undefined);
            }
            return true;
          }
        };
        return new Proxy(C, q);
      };
      function dasherizeProperty(a) {
        return a.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();
      }
      function CSSStyleDeclaration(a) {
        this._element = a;
      }
      const ae = '!important';
      function parseStyles(a) {
        const C = { property: {}, priority: {} };
        if (!a) {
          return C;
        }
        const q = re(a);
        if (q.length < 2) {
          return C;
        }
        for (let a = 0; a < q.length; a += 2) {
          const re = q[a];
          let Ue = q[a + 1];
          if (Ue.endsWith(ae)) {
            C.priority[re] = 'important';
            Ue = Ue.slice(0, -ae.length).trim();
          }
          C.property[re] = Ue;
        }
        return C;
      }
      var Ue = {};
      CSSStyleDeclaration.prototype = Object.create(Object.prototype, {
        _parsed: {
          get: function () {
            if (!this._parsedStyles || this.cssText !== this._lastParsedText) {
              var a = this.cssText;
              this._parsedStyles = parseStyles(a);
              this._lastParsedText = a;
              delete this._names;
            }
            return this._parsedStyles;
          }
        },
        _serialize: {
          value: function () {
            var a = this._parsed;
            var C = '';
            for (var q in a.property) {
              if (C) C += ' ';
              C += q + ': ' + a.property[q];
              if (a.priority[q]) {
                C += ' !' + a.priority[q];
              }
              C += ';';
            }
            this.cssText = C;
            this._lastParsedText = C;
            delete this._names;
          }
        },
        cssText: {
          get: function () {
            return this._element.getAttribute('style');
          },
          set: function (a) {
            this._element.setAttribute('style', a);
          }
        },
        length: {
          get: function () {
            if (!this._names)
              this._names = Object.getOwnPropertyNames(this._parsed.property);
            return this._names.length;
          }
        },
        item: {
          value: function (a) {
            if (!this._names)
              this._names = Object.getOwnPropertyNames(this._parsed.property);
            return this._names[a];
          }
        },
        getPropertyValue: {
          value: function (a) {
            a = a.toLowerCase();
            return this._parsed.property[a] || '';
          }
        },
        getPropertyPriority: {
          value: function (a) {
            a = a.toLowerCase();
            return this._parsed.priority[a] || '';
          }
        },
        setProperty: {
          value: function (a, C, q) {
            a = a.toLowerCase();
            if (C === null || C === undefined) {
              C = '';
            }
            if (q === null || q === undefined) {
              q = '';
            }
            if (C !== Ue) {
              C = '' + C;
            }
            C = C.trim();
            if (C === '') {
              this.removeProperty(a);
              return;
            }
            if (q !== '' && q !== Ue && !/^important$/i.test(q)) {
              return;
            }
            var re = this._parsed;
            if (C === Ue) {
              if (!re.property[a]) {
                return;
              }
              if (q !== '') {
                re.priority[a] = 'important';
              } else {
                delete re.priority[a];
              }
            } else {
              if (C.indexOf(';') !== -1) return;
              var ae = parseStyles(a + ':' + C);
              if (Object.getOwnPropertyNames(ae.property).length === 0) {
                return;
              }
              if (Object.getOwnPropertyNames(ae.priority).length !== 0) {
                return;
              }
              for (var lt in ae.property) {
                re.property[lt] = ae.property[lt];
                if (q === Ue) {
                  continue;
                } else if (q !== '') {
                  re.priority[lt] = 'important';
                } else if (re.priority[lt]) {
                  delete re.priority[lt];
                }
              }
            }
            this._serialize();
          }
        },
        setPropertyValue: {
          value: function (a, C) {
            return this.setProperty(a, C, Ue);
          }
        },
        setPropertyPriority: {
          value: function (a, C) {
            return this.setProperty(a, Ue, C);
          }
        },
        removeProperty: {
          value: function (a) {
            a = a.toLowerCase();
            var C = this._parsed;
            if (a in C.property) {
              delete C.property[a];
              delete C.priority[a];
              this._serialize();
            }
          }
        }
      });
    },
    5995: (a, C, q) => {
      'use strict';
      a.exports = CharacterData;
      var re = q(6889);
      var ae = q(3573);
      var Ue = q(1641);
      var lt = q(4813);
      function CharacterData() {
        re.call(this);
      }
      CharacterData.prototype = Object.create(re.prototype, {
        substringData: {
          value: function substringData(a, C) {
            if (arguments.length < 2) {
              throw new TypeError('Not enough arguments');
            }
            a = a >>> 0;
            C = C >>> 0;
            if (a > this.data.length || a < 0 || C < 0) {
              ae.IndexSizeError();
            }
            return this.data.substring(a, a + C);
          }
        },
        appendData: {
          value: function appendData(a) {
            if (arguments.length < 1) {
              throw new TypeError('Not enough arguments');
            }
            this.data += String(a);
          }
        },
        insertData: {
          value: function insertData(a, C) {
            return this.replaceData(a, 0, C);
          }
        },
        deleteData: {
          value: function deleteData(a, C) {
            return this.replaceData(a, C, '');
          }
        },
        replaceData: {
          value: function replaceData(a, C, q) {
            var re = this.data,
              Ue = re.length;
            a = a >>> 0;
            C = C >>> 0;
            q = String(q);
            if (a > Ue || a < 0) ae.IndexSizeError();
            if (a + C > Ue) C = Ue - a;
            var lt = re.substring(0, a),
              Pt = re.substring(a + C);
            this.data = lt + q + Pt;
          }
        },
        isEqual: {
          value: function isEqual(a) {
            return this._data === a._data;
          }
        },
        length: {
          get: function () {
            return this.data.length;
          }
        }
      });
      Object.defineProperties(CharacterData.prototype, Ue);
      Object.defineProperties(CharacterData.prototype, lt);
    },
    1641: (a, C, q) => {
      'use strict';
      var re = q(4976);
      var ae = q(9271);
      var createDocumentFragmentFromArguments = function (a, C) {
        var q = a.createDocumentFragment();
        for (var ae = 0; ae < C.length; ae++) {
          var Ue = C[ae];
          var lt = Ue instanceof re;
          q.appendChild(lt ? Ue : a.createTextNode(String(Ue)));
        }
        return q;
      };
      var Ue = {
        after: {
          value: function after() {
            var a = Array.prototype.slice.call(arguments);
            var C = this.parentNode,
              q = this.nextSibling;
            if (C === null) {
              return;
            }
            while (
              q &&
              a.some(function (a) {
                return a === q;
              })
            )
              q = q.nextSibling;
            var re = createDocumentFragmentFromArguments(this.doc, a);
            C.insertBefore(re, q);
          }
        },
        before: {
          value: function before() {
            var a = Array.prototype.slice.call(arguments);
            var C = this.parentNode,
              q = this.previousSibling;
            if (C === null) {
              return;
            }
            while (
              q &&
              a.some(function (a) {
                return a === q;
              })
            )
              q = q.previousSibling;
            var re = createDocumentFragmentFromArguments(this.doc, a);
            var ae = q ? q.nextSibling : C.firstChild;
            C.insertBefore(re, ae);
          }
        },
        remove: {
          value: function remove() {
            if (this.parentNode === null) return;
            if (this.doc) {
              this.doc._preremoveNodeIterators(this);
              if (this.rooted) {
                this.doc.mutateRemove(this);
              }
            }
            this._remove();
            this.parentNode = null;
          }
        },
        _remove: {
          value: function _remove() {
            var a = this.parentNode;
            if (a === null) return;
            if (a._childNodes) {
              a._childNodes.splice(this.index, 1);
            } else if (a._firstChild === this) {
              if (this._nextSibling === this) {
                a._firstChild = null;
              } else {
                a._firstChild = this._nextSibling;
              }
            }
            ae.remove(this);
            a.modify();
          }
        },
        replaceWith: {
          value: function replaceWith() {
            var a = Array.prototype.slice.call(arguments);
            var C = this.parentNode,
              q = this.nextSibling;
            if (C === null) {
              return;
            }
            while (
              q &&
              a.some(function (a) {
                return a === q;
              })
            )
              q = q.nextSibling;
            var re = createDocumentFragmentFromArguments(this.doc, a);
            if (this.parentNode === C) {
              C.replaceChild(re, this);
            } else {
              C.insertBefore(re, q);
            }
          }
        }
      };
      a.exports = Ue;
    },
    8715: (a, C, q) => {
      'use strict';
      a.exports = Comment;
      var re = q(4976);
      var ae = q(5995);
      function Comment(a, C) {
        ae.call(this);
        this.nodeType = re.COMMENT_NODE;
        this.ownerDocument = a;
        this._data = C;
      }
      var Ue = {
        get: function () {
          return this._data;
        },
        set: function (a) {
          if (a === null || a === undefined) {
            a = '';
          } else {
            a = String(a);
          }
          this._data = a;
          if (this.rooted) this.ownerDocument.mutateValue(this);
        }
      };
      Comment.prototype = Object.create(ae.prototype, {
        nodeName: { value: '#comment' },
        nodeValue: Ue,
        textContent: Ue,
        innerText: Ue,
        data: {
          get: Ue.get,
          set: function (a) {
            Ue.set.call(this, a === null ? '' : String(a));
          }
        },
        clone: {
          value: function clone() {
            return new Comment(this.ownerDocument, this._data);
          }
        }
      });
    },
    3145: (a, C, q) => {
      'use strict';
      a.exports = ContainerNode;
      var re = q(4976);
      var ae = q(3209);
      function ContainerNode() {
        re.call(this);
        this._firstChild = this._childNodes = null;
      }
      ContainerNode.prototype = Object.create(re.prototype, {
        hasChildNodes: {
          value: function () {
            if (this._childNodes) {
              return this._childNodes.length > 0;
            }
            return this._firstChild !== null;
          }
        },
        childNodes: {
          get: function () {
            this._ensureChildNodes();
            return this._childNodes;
          }
        },
        firstChild: {
          get: function () {
            if (this._childNodes) {
              return this._childNodes.length === 0 ? null : this._childNodes[0];
            }
            return this._firstChild;
          }
        },
        lastChild: {
          get: function () {
            var a = this._childNodes,
              C;
            if (a) {
              return a.length === 0 ? null : a[a.length - 1];
            }
            C = this._firstChild;
            if (C === null) {
              return null;
            }
            return C._previousSibling;
          }
        },
        _ensureChildNodes: {
          value: function () {
            if (this._childNodes) {
              return;
            }
            var a = this._firstChild,
              C = a,
              q = (this._childNodes = new ae());
            if (a)
              do {
                q.push(C);
                C = C._nextSibling;
              } while (C !== a);
            this._firstChild = null;
          }
        },
        removeChildren: {
          value: function removeChildren() {
            var a = this.rooted ? this.ownerDocument : null,
              C = this.firstChild,
              q;
            while (C !== null) {
              q = C;
              C = q.nextSibling;
              if (a) a.mutateRemove(q);
              q.parentNode = null;
            }
            if (this._childNodes) {
              this._childNodes.length = 0;
            } else {
              this._firstChild = null;
            }
            this.modify();
          }
        }
      });
    },
    3643: (a, C, q) => {
      'use strict';
      a.exports = CustomEvent;
      var re = q(5137);
      function CustomEvent(a, C) {
        re.call(this, a, C);
      }
      CustomEvent.prototype = Object.create(re.prototype, {
        constructor: { value: CustomEvent }
      });
    },
    9984: (a) => {
      'use strict';
      a.exports = DOMException;
      var C = 1;
      var q = 3;
      var re = 4;
      var ae = 5;
      var Ue = 7;
      var lt = 8;
      var Pt = 9;
      var Wt = 11;
      var Ar = 12;
      var Er = 13;
      var Ir = 14;
      var Br = 15;
      var Qr = 17;
      var kr = 18;
      var Dr = 19;
      var Nr = 20;
      var Lr = 21;
      var Fr = 22;
      var Mr = 23;
      var Pr = 24;
      var Or = 25;
      var xr = [
        null,
        'INDEX_SIZE_ERR',
        null,
        'HIERARCHY_REQUEST_ERR',
        'WRONG_DOCUMENT_ERR',
        'INVALID_CHARACTER_ERR',
        null,
        'NO_MODIFICATION_ALLOWED_ERR',
        'NOT_FOUND_ERR',
        'NOT_SUPPORTED_ERR',
        'INUSE_ATTRIBUTE_ERR',
        'INVALID_STATE_ERR',
        'SYNTAX_ERR',
        'INVALID_MODIFICATION_ERR',
        'NAMESPACE_ERR',
        'INVALID_ACCESS_ERR',
        null,
        'TYPE_MISMATCH_ERR',
        'SECURITY_ERR',
        'NETWORK_ERR',
        'ABORT_ERR',
        'URL_MISMATCH_ERR',
        'QUOTA_EXCEEDED_ERR',
        'TIMEOUT_ERR',
        'INVALID_NODE_TYPE_ERR',
        'DATA_CLONE_ERR'
      ];
      var Ur = [
        null,
        'INDEX_SIZE_ERR (1): the index is not in the allowed range',
        null,
        'HIERARCHY_REQUEST_ERR (3): the operation would yield an incorrect nodes model',
        'WRONG_DOCUMENT_ERR (4): the object is in the wrong Document, a call to importNode is required',
        'INVALID_CHARACTER_ERR (5): the string contains invalid characters',
        null,
        'NO_MODIFICATION_ALLOWED_ERR (7): the object can not be modified',
        'NOT_FOUND_ERR (8): the object can not be found here',
        'NOT_SUPPORTED_ERR (9): this operation is not supported',
        'INUSE_ATTRIBUTE_ERR (10): setAttributeNode called on owned Attribute',
        'INVALID_STATE_ERR (11): the object is in an invalid state',
        'SYNTAX_ERR (12): the string did not match the expected pattern',
        'INVALID_MODIFICATION_ERR (13): the object can not be modified in this way',
        'NAMESPACE_ERR (14): the operation is not allowed by Namespaces in XML',
        'INVALID_ACCESS_ERR (15): the object does not support the operation or argument',
        null,
        'TYPE_MISMATCH_ERR (17): the type of the object does not match the expected type',
        'SECURITY_ERR (18): the operation is insecure',
        'NETWORK_ERR (19): a network error occurred',
        'ABORT_ERR (20): the user aborted an operation',
        'URL_MISMATCH_ERR (21): the given URL does not match another URL',
        'QUOTA_EXCEEDED_ERR (22): the quota has been exceeded',
        'TIMEOUT_ERR (23): a timeout occurred',
        'INVALID_NODE_TYPE_ERR (24): the supplied node is invalid or has an invalid ancestor for this operation',
        'DATA_CLONE_ERR (25): the object can not be cloned.'
      ];
      var Gr = {
        INDEX_SIZE_ERR: C,
        DOMSTRING_SIZE_ERR: 2,
        HIERARCHY_REQUEST_ERR: q,
        WRONG_DOCUMENT_ERR: re,
        INVALID_CHARACTER_ERR: ae,
        NO_DATA_ALLOWED_ERR: 6,
        NO_MODIFICATION_ALLOWED_ERR: Ue,
        NOT_FOUND_ERR: lt,
        NOT_SUPPORTED_ERR: Pt,
        INUSE_ATTRIBUTE_ERR: 10,
        INVALID_STATE_ERR: Wt,
        SYNTAX_ERR: Ar,
        INVALID_MODIFICATION_ERR: Er,
        NAMESPACE_ERR: Ir,
        INVALID_ACCESS_ERR: Br,
        VALIDATION_ERR: 16,
        TYPE_MISMATCH_ERR: Qr,
        SECURITY_ERR: kr,
        NETWORK_ERR: Dr,
        ABORT_ERR: Nr,
        URL_MISMATCH_ERR: Lr,
        QUOTA_EXCEEDED_ERR: Fr,
        TIMEOUT_ERR: Mr,
        INVALID_NODE_TYPE_ERR: Pr,
        DATA_CLONE_ERR: Or
      };
      function DOMException(a) {
        Error.call(this);
        Error.captureStackTrace(this, this.constructor);
        this.code = a;
        this.message = Ur[a];
        this.name = xr[a];
      }
      DOMException.prototype.__proto__ = Error.prototype;
      for (var Hr in Gr) {
        var Vr = { value: Gr[Hr] };
        Object.defineProperty(DOMException, Hr, Vr);
        Object.defineProperty(DOMException.prototype, Hr, Vr);
      }
    },
    956: (a, C, q) => {
      'use strict';
      a.exports = DOMImplementation;
      var re = q(5960);
      var ae = q(7718);
      var Ue = q(4483);
      var lt = q(3573);
      var Pt = q(8726);
      function DOMImplementation(a) {
        this.contextObject = a;
      }
      var Wt = {
        xml: { '': true, '1.0': true, '2.0': true },
        core: { '': true, '2.0': true },
        html: { '': true, '1.0': true, '2.0': true },
        xhtml: { '': true, '1.0': true, '2.0': true }
      };
      DOMImplementation.prototype = {
        hasFeature: function hasFeature(a, C) {
          var q = Wt[(a || '').toLowerCase()];
          return (q && q[C || '']) || false;
        },
        createDocumentType: function createDocumentType(a, C, q) {
          if (!Pt.isValidQName(a)) lt.InvalidCharacterError();
          return new ae(this.contextObject, a, C, q);
        },
        createDocument: function createDocument(a, C, q) {
          var ae = new re(false, null);
          var Ue;
          if (C) Ue = ae.createElementNS(a, C);
          else Ue = null;
          if (q) {
            ae.appendChild(q);
          }
          if (Ue) ae.appendChild(Ue);
          if (a === lt.NAMESPACE.HTML) {
            ae._contentType = 'application/xhtml+xml';
          } else if (a === lt.NAMESPACE.SVG) {
            ae._contentType = 'image/svg+xml';
          } else {
            ae._contentType = 'application/xml';
          }
          return ae;
        },
        createHTMLDocument: function createHTMLDocument(a) {
          var C = new re(true, null);
          C.appendChild(new ae(C, 'html'));
          var q = C.createElement('html');
          C.appendChild(q);
          var Ue = C.createElement('head');
          q.appendChild(Ue);
          if (a !== undefined) {
            var lt = C.createElement('title');
            Ue.appendChild(lt);
            lt.appendChild(C.createTextNode(a));
          }
          q.appendChild(C.createElement('body'));
          C.modclock = 1;
          return C;
        },
        mozSetOutputMutationHandler: function (a, C) {
          a.mutationHandler = C;
        },
        mozGetInputMutationHandler: function (a) {
          lt.nyi();
        },
        mozHTMLParser: Ue
      };
    },
    9386: (a, C, q) => {
      'use strict';
      var re = q(3573);
      a.exports = DOMTokenList;
      function DOMTokenList(a, C) {
        this._getString = a;
        this._setString = C;
        this._length = 0;
        this._lastStringValue = '';
        this._update();
      }
      Object.defineProperties(DOMTokenList.prototype, {
        length: {
          get: function () {
            return this._length;
          }
        },
        item: {
          value: function (a) {
            var C = getList(this);
            if (a < 0 || a >= C.length) {
              return null;
            }
            return C[a];
          }
        },
        contains: {
          value: function (a) {
            a = String(a);
            var C = getList(this);
            return C.indexOf(a) > -1;
          }
        },
        add: {
          value: function () {
            var a = getList(this);
            for (var C = 0, q = arguments.length; C < q; C++) {
              var re = handleErrors(arguments[C]);
              if (a.indexOf(re) < 0) {
                a.push(re);
              }
            }
            this._update(a);
          }
        },
        remove: {
          value: function () {
            var a = getList(this);
            for (var C = 0, q = arguments.length; C < q; C++) {
              var re = handleErrors(arguments[C]);
              var ae = a.indexOf(re);
              if (ae > -1) {
                a.splice(ae, 1);
              }
            }
            this._update(a);
          }
        },
        toggle: {
          value: function toggle(a, C) {
            a = handleErrors(a);
            if (this.contains(a)) {
              if (C === undefined || C === false) {
                this.remove(a);
                return false;
              }
              return true;
            } else {
              if (C === undefined || C === true) {
                this.add(a);
                return true;
              }
              return false;
            }
          }
        },
        replace: {
          value: function replace(a, C) {
            if (String(C) === '') {
              re.SyntaxError();
            }
            a = handleErrors(a);
            C = handleErrors(C);
            var q = getList(this);
            var ae = q.indexOf(a);
            if (ae < 0) {
              return false;
            }
            var Ue = q.indexOf(C);
            if (Ue < 0) {
              q[ae] = C;
            } else {
              if (ae < Ue) {
                q[ae] = C;
                q.splice(Ue, 1);
              } else {
                q.splice(ae, 1);
              }
            }
            this._update(q);
            return true;
          }
        },
        toString: {
          value: function () {
            return this._getString();
          }
        },
        value: {
          get: function () {
            return this._getString();
          },
          set: function (a) {
            this._setString(a);
            this._update();
          }
        },
        _update: {
          value: function (a) {
            if (a) {
              fixIndex(this, a);
              this._setString(a.join(' ').trim());
            } else {
              fixIndex(this, getList(this));
            }
            this._lastStringValue = this._getString();
          }
        }
      });
      function fixIndex(a, C) {
        var q = a._length;
        var re;
        a._length = C.length;
        for (re = 0; re < C.length; re++) {
          a[re] = C[re];
        }
        for (; re < q; re++) {
          a[re] = undefined;
        }
      }
      function handleErrors(a) {
        a = String(a);
        if (a === '') {
          re.SyntaxError();
        }
        if (/[ \t\r\n\f]/.test(a)) {
          re.InvalidCharacterError();
        }
        return a;
      }
      function toArray(a) {
        var C = a._length;
        var q = Array(C);
        for (var re = 0; re < C; re++) {
          q[re] = a[re];
        }
        return q;
      }
      function getList(a) {
        var C = a._getString();
        if (C === a._lastStringValue) {
          return toArray(a);
        }
        var q = C.replace(/(^[ \t\r\n\f]+)|([ \t\r\n\f]+$)/g, '');
        if (q === '') {
          return [];
        } else {
          var re = Object.create(null);
          return q.split(/[ \t\r\n\f]+/g).filter(function (a) {
            var C = '$' + a;
            if (re[C]) {
              return false;
            }
            re[C] = true;
            return true;
          });
        }
      }
    },
    5960: (a, C, q) => {
      'use strict';
      a.exports = Document;
      var re = q(4976);
      var ae = q(3209);
      var Ue = q(3145);
      var lt = q(3032);
      var Pt = q(1207);
      var Wt = q(8715);
      var Ar = q(5137);
      var Er = q(3816);
      var Ir = q(4430);
      var Br = q(956);
      var Qr = q(8772);
      var kr = q(9410);
      var Dr = q(3587);
      var Nr = q(1026);
      var Lr = q(1444);
      var Fr = q(6287);
      var Mr = q(8726);
      var Pr = q(1364);
      var Or = q(9454);
      var xr = q(3573);
      var Ur = q(7535);
      var Gr = xr.NAMESPACE;
      var Hr = q(1617).S;
      function Document(a, C) {
        Ue.call(this);
        this.nodeType = re.DOCUMENT_NODE;
        this.isHTML = a;
        this._address = C || 'about:blank';
        this.readyState = 'loading';
        this.implementation = new Br(this);
        this.ownerDocument = null;
        this._contentType = a ? 'text/html' : 'application/xml';
        this.doctype = null;
        this.documentElement = null;
        this._templateDocCache = null;
        this._nodeIterators = null;
        this._nid = 1;
        this._nextnid = 2;
        this._nodes = [null, this];
        this.byId = Object.create(null);
        this.modclock = 0;
      }
      var Vr = {
        event: 'Event',
        customevent: 'CustomEvent',
        uievent: 'UIEvent',
        mouseevent: 'MouseEvent'
      };
      var Wr = {
        events: 'event',
        htmlevents: 'event',
        mouseevents: 'mouseevent',
        mutationevents: 'mutationevent',
        uievents: 'uievent'
      };
      var mirrorAttr = function (a, C, q) {
        return {
          get: function () {
            var re = a.call(this);
            if (re) {
              return re[C];
            }
            return q;
          },
          set: function (q) {
            var re = a.call(this);
            if (re) {
              re[C] = q;
            }
          }
        };
      };
      function validateAndExtract(a, C) {
        var q, re, ae;
        if (a === '') {
          a = null;
        }
        if (!Mr.isValidQName(C)) {
          xr.InvalidCharacterError();
        }
        q = null;
        re = C;
        ae = C.indexOf(':');
        if (ae >= 0) {
          q = C.substring(0, ae);
          re = C.substring(ae + 1);
        }
        if (q !== null && a === null) {
          xr.NamespaceError();
        }
        if (q === 'xml' && a !== Gr.XML) {
          xr.NamespaceError();
        }
        if ((q === 'xmlns' || C === 'xmlns') && a !== Gr.XMLNS) {
          xr.NamespaceError();
        }
        if (a === Gr.XMLNS && !(q === 'xmlns' || C === 'xmlns')) {
          xr.NamespaceError();
        }
        return { namespace: a, prefix: q, localName: re };
      }
      Document.prototype = Object.create(Ue.prototype, {
        _setMutationHandler: {
          value: function (a) {
            this.mutationHandler = a;
          }
        },
        _dispatchRendererEvent: {
          value: function (a, C, q) {
            var re = this._nodes[a];
            if (!re) return;
            re._dispatchEvent(new Ar(C, q), true);
          }
        },
        nodeName: { value: '#document' },
        nodeValue: {
          get: function () {
            return null;
          },
          set: function () {}
        },
        documentURI: {
          get: function () {
            return this._address;
          },
          set: xr.nyi
        },
        compatMode: {
          get: function () {
            return this._quirks ? 'BackCompat' : 'CSS1Compat';
          }
        },
        createTextNode: {
          value: function (a) {
            return new Pt(this, String(a));
          }
        },
        createComment: {
          value: function (a) {
            return new Wt(this, a);
          }
        },
        createDocumentFragment: {
          value: function () {
            return new Er(this);
          }
        },
        createProcessingInstruction: {
          value: function (a, C) {
            if (!Mr.isValidName(a) || C.indexOf('?>') !== -1)
              xr.InvalidCharacterError();
            return new Ir(this, a, C);
          }
        },
        createAttribute: {
          value: function (a) {
            a = String(a);
            if (!Mr.isValidName(a)) xr.InvalidCharacterError();
            if (this.isHTML) {
              a = xr.toASCIILowerCase(a);
            }
            return new lt._Attr(null, a, null, null, '');
          }
        },
        createAttributeNS: {
          value: function (a, C) {
            a = a === null || a === undefined || a === '' ? null : String(a);
            C = String(C);
            var q = validateAndExtract(a, C);
            return new lt._Attr(null, q.localName, q.prefix, q.namespace, '');
          }
        },
        createElement: {
          value: function (a) {
            a = String(a);
            if (!Mr.isValidName(a)) xr.InvalidCharacterError();
            if (this.isHTML) {
              if (/[A-Z]/.test(a)) a = xr.toASCIILowerCase(a);
              return Pr.createElement(this, a, null);
            } else if (this.contentType === 'application/xhtml+xml') {
              return Pr.createElement(this, a, null);
            } else {
              return new lt(this, a, null, null);
            }
          },
          writable: Hr
        },
        createElementNS: {
          value: function (a, C) {
            a = a === null || a === undefined || a === '' ? null : String(a);
            C = String(C);
            var q = validateAndExtract(a, C);
            return this._createElementNS(q.localName, q.namespace, q.prefix);
          },
          writable: Hr
        },
        _createElementNS: {
          value: function (a, C, q) {
            if (C === Gr.HTML) {
              return Pr.createElement(this, a, q);
            } else if (C === Gr.SVG) {
              return Or.createElement(this, a, q);
            }
            return new lt(this, a, C, q);
          }
        },
        createEvent: {
          value: function createEvent(a) {
            a = a.toLowerCase();
            var C = Wr[a] || a;
            var q = Fr[Vr[C]];
            if (q) {
              var re = new q();
              re._initialized = false;
              return re;
            } else {
              xr.NotSupportedError();
            }
          }
        },
        createTreeWalker: {
          value: function (a, C, q) {
            if (!a) {
              throw new TypeError('root argument is required');
            }
            if (!(a instanceof re)) {
              throw new TypeError('root not a node');
            }
            C = C === undefined ? Dr.SHOW_ALL : +C;
            q = q === undefined ? null : q;
            return new Qr(a, C, q);
          }
        },
        createNodeIterator: {
          value: function (a, C, q) {
            if (!a) {
              throw new TypeError('root argument is required');
            }
            if (!(a instanceof re)) {
              throw new TypeError('root not a node');
            }
            C = C === undefined ? Dr.SHOW_ALL : +C;
            q = q === undefined ? null : q;
            return new kr(a, C, q);
          }
        },
        _attachNodeIterator: {
          value: function (a) {
            if (!this._nodeIterators) {
              this._nodeIterators = [];
            }
            this._nodeIterators.push(a);
          }
        },
        _detachNodeIterator: {
          value: function (a) {
            var C = this._nodeIterators.indexOf(a);
            this._nodeIterators.splice(C, 1);
          }
        },
        _preremoveNodeIterators: {
          value: function (a) {
            if (this._nodeIterators) {
              this._nodeIterators.forEach(function (C) {
                C._preremove(a);
              });
            }
          }
        },
        _updateDocTypeElement: {
          value: function _updateDocTypeElement() {
            this.doctype = this.documentElement = null;
            for (var a = this.firstChild; a !== null; a = a.nextSibling) {
              if (a.nodeType === re.DOCUMENT_TYPE_NODE) this.doctype = a;
              else if (a.nodeType === re.ELEMENT_NODE) this.documentElement = a;
            }
          }
        },
        insertBefore: {
          value: function insertBefore(a, C) {
            re.prototype.insertBefore.call(this, a, C);
            this._updateDocTypeElement();
            return a;
          }
        },
        replaceChild: {
          value: function replaceChild(a, C) {
            re.prototype.replaceChild.call(this, a, C);
            this._updateDocTypeElement();
            return C;
          }
        },
        removeChild: {
          value: function removeChild(a) {
            re.prototype.removeChild.call(this, a);
            this._updateDocTypeElement();
            return a;
          }
        },
        getElementById: {
          value: function (a) {
            var C = this.byId[a];
            if (!C) return null;
            if (C instanceof MultiId) {
              return C.getFirst();
            }
            return C;
          }
        },
        _hasMultipleElementsWithId: {
          value: function (a) {
            return this.byId[a] instanceof MultiId;
          }
        },
        getElementsByName: { value: lt.prototype.getElementsByName },
        getElementsByTagName: { value: lt.prototype.getElementsByTagName },
        getElementsByTagNameNS: { value: lt.prototype.getElementsByTagNameNS },
        getElementsByClassName: { value: lt.prototype.getElementsByClassName },
        adoptNode: {
          value: function adoptNode(a) {
            if (a.nodeType === re.DOCUMENT_NODE) xr.NotSupportedError();
            if (a.nodeType === re.ATTRIBUTE_NODE) {
              return a;
            }
            if (a.parentNode) a.parentNode.removeChild(a);
            if (a.ownerDocument !== this) recursivelySetOwner(a, this);
            return a;
          }
        },
        importNode: {
          value: function importNode(a, C) {
            return this.adoptNode(a.cloneNode(C));
          },
          writable: Hr
        },
        origin: {
          get: function origin() {
            return null;
          }
        },
        characterSet: {
          get: function characterSet() {
            return 'UTF-8';
          }
        },
        contentType: {
          get: function contentType() {
            return this._contentType;
          }
        },
        URL: {
          get: function URL() {
            return this._address;
          }
        },
        domain: { get: xr.nyi, set: xr.nyi },
        referrer: { get: xr.nyi },
        cookie: { get: xr.nyi, set: xr.nyi },
        lastModified: { get: xr.nyi },
        location: {
          get: function () {
            return this.defaultView ? this.defaultView.location : null;
          },
          set: xr.nyi
        },
        _titleElement: {
          get: function () {
            return this.getElementsByTagName('title').item(0) || null;
          }
        },
        title: {
          get: function () {
            var a = this._titleElement;
            var C = a ? a.textContent : '';
            return C.replace(/[ \t\n\r\f]+/g, ' ').replace(/(^ )|( $)/g, '');
          },
          set: function (a) {
            var C = this._titleElement;
            var q = this.head;
            if (!C && !q) {
              return;
            }
            if (!C) {
              C = this.createElement('title');
              q.appendChild(C);
            }
            C.textContent = a;
          }
        },
        dir: mirrorAttr(
          function () {
            var a = this.documentElement;
            if (a && a.tagName === 'HTML') {
              return a;
            }
          },
          'dir',
          ''
        ),
        fgColor: mirrorAttr(
          function () {
            return this.body;
          },
          'text',
          ''
        ),
        linkColor: mirrorAttr(
          function () {
            return this.body;
          },
          'link',
          ''
        ),
        vlinkColor: mirrorAttr(
          function () {
            return this.body;
          },
          'vLink',
          ''
        ),
        alinkColor: mirrorAttr(
          function () {
            return this.body;
          },
          'aLink',
          ''
        ),
        bgColor: mirrorAttr(
          function () {
            return this.body;
          },
          'bgColor',
          ''
        ),
        charset: {
          get: function () {
            return this.characterSet;
          }
        },
        inputEncoding: {
          get: function () {
            return this.characterSet;
          }
        },
        scrollingElement: {
          get: function () {
            return this._quirks ? this.body : this.documentElement;
          }
        },
        body: {
          get: function () {
            return namedHTMLChild(this.documentElement, 'body');
          },
          set: xr.nyi
        },
        head: {
          get: function () {
            return namedHTMLChild(this.documentElement, 'head');
          }
        },
        images: { get: xr.nyi },
        embeds: { get: xr.nyi },
        plugins: { get: xr.nyi },
        links: { get: xr.nyi },
        forms: { get: xr.nyi },
        scripts: { get: xr.nyi },
        applets: {
          get: function () {
            return [];
          }
        },
        activeElement: {
          get: function () {
            return null;
          }
        },
        innerHTML: {
          get: function () {
            return this.serialize();
          },
          set: xr.nyi
        },
        outerHTML: {
          get: function () {
            return this.serialize();
          },
          set: xr.nyi
        },
        write: {
          value: function (a) {
            if (!this.isHTML) xr.InvalidStateError();
            if (!this._parser) return;
            if (!this._parser) {
            }
            var C = arguments.join('');
            this._parser.parse(C);
          }
        },
        writeln: {
          value: function writeln(a) {
            this.write(Array.prototype.join.call(arguments, '') + '\n');
          }
        },
        open: {
          value: function () {
            this.documentElement = null;
          }
        },
        close: {
          value: function () {
            this.readyState = 'interactive';
            this._dispatchEvent(new Ar('readystatechange'), true);
            this._dispatchEvent(new Ar('DOMContentLoaded'), true);
            this.readyState = 'complete';
            this._dispatchEvent(new Ar('readystatechange'), true);
            if (this.defaultView) {
              this.defaultView._dispatchEvent(new Ar('load'), true);
            }
          }
        },
        clone: {
          value: function clone() {
            var a = new Document(this.isHTML, this._address);
            a._quirks = this._quirks;
            a._contentType = this._contentType;
            return a;
          }
        },
        cloneNode: {
          value: function cloneNode(a) {
            var C = re.prototype.cloneNode.call(this, false);
            if (a) {
              for (var q = this.firstChild; q !== null; q = q.nextSibling) {
                C._appendChild(C.importNode(q, true));
              }
            }
            C._updateDocTypeElement();
            return C;
          }
        },
        isEqual: {
          value: function isEqual(a) {
            return true;
          }
        },
        mutateValue: {
          value: function (a) {
            if (this.mutationHandler) {
              this.mutationHandler({ type: Ur.VALUE, target: a, data: a.data });
            }
          }
        },
        mutateAttr: {
          value: function (a, C) {
            if (this.mutationHandler) {
              this.mutationHandler({
                type: Ur.ATTR,
                target: a.ownerElement,
                attr: a
              });
            }
          }
        },
        mutateRemoveAttr: {
          value: function (a) {
            if (this.mutationHandler) {
              this.mutationHandler({
                type: Ur.REMOVE_ATTR,
                target: a.ownerElement,
                attr: a
              });
            }
          }
        },
        mutateRemove: {
          value: function (a) {
            if (this.mutationHandler) {
              this.mutationHandler({
                type: Ur.REMOVE,
                target: a.parentNode,
                node: a
              });
            }
            recursivelyUproot(a);
          }
        },
        mutateInsert: {
          value: function (a) {
            recursivelyRoot(a);
            if (this.mutationHandler) {
              this.mutationHandler({
                type: Ur.INSERT,
                target: a.parentNode,
                node: a
              });
            }
          }
        },
        mutateMove: {
          value: function (a) {
            if (this.mutationHandler) {
              this.mutationHandler({ type: Ur.MOVE, target: a });
            }
          }
        },
        addId: {
          value: function addId(a, C) {
            var q = this.byId[a];
            if (!q) {
              this.byId[a] = C;
            } else {
              if (!(q instanceof MultiId)) {
                q = new MultiId(q);
                this.byId[a] = q;
              }
              q.add(C);
            }
          }
        },
        delId: {
          value: function delId(a, C) {
            var q = this.byId[a];
            xr.assert(q);
            if (q instanceof MultiId) {
              q.del(C);
              if (q.length === 1) {
                this.byId[a] = q.downgrade();
              }
            } else {
              this.byId[a] = undefined;
            }
          }
        },
        _resolve: {
          value: function (a) {
            return new Nr(this._documentBaseURL).resolve(a);
          }
        },
        _documentBaseURL: {
          get: function () {
            var a = this._address;
            if (a === 'about:blank') a = '/';
            var C = this.querySelector('base[href]');
            if (C) {
              return new Nr(a).resolve(C.getAttribute('href'));
            }
            return a;
          }
        },
        _templateDoc: {
          get: function () {
            if (!this._templateDocCache) {
              var a = new Document(this.isHTML, this._address);
              this._templateDocCache = a._templateDocCache = a;
            }
            return this._templateDocCache;
          }
        },
        querySelector: {
          value: function (a) {
            return Lr(a, this)[0];
          }
        },
        querySelectorAll: {
          value: function (a) {
            var C = Lr(a, this);
            return C.item ? C : new ae(C);
          }
        }
      });
      var Yr = [
        'abort',
        'canplay',
        'canplaythrough',
        'change',
        'click',
        'contextmenu',
        'cuechange',
        'dblclick',
        'drag',
        'dragend',
        'dragenter',
        'dragleave',
        'dragover',
        'dragstart',
        'drop',
        'durationchange',
        'emptied',
        'ended',
        'input',
        'invalid',
        'keydown',
        'keypress',
        'keyup',
        'loadeddata',
        'loadedmetadata',
        'loadstart',
        'mousedown',
        'mousemove',
        'mouseout',
        'mouseover',
        'mouseup',
        'mousewheel',
        'pause',
        'play',
        'playing',
        'progress',
        'ratechange',
        'readystatechange',
        'reset',
        'seeked',
        'seeking',
        'select',
        'show',
        'stalled',
        'submit',
        'suspend',
        'timeupdate',
        'volumechange',
        'waiting',
        'blur',
        'error',
        'focus',
        'load',
        'scroll'
      ];
      Yr.forEach(function (a) {
        Object.defineProperty(Document.prototype, 'on' + a, {
          get: function () {
            return this._getEventHandler(a);
          },
          set: function (C) {
            this._setEventHandler(a, C);
          }
        });
      });
      function namedHTMLChild(a, C) {
        if (a && a.isHTML) {
          for (var q = a.firstChild; q !== null; q = q.nextSibling) {
            if (
              q.nodeType === re.ELEMENT_NODE &&
              q.localName === C &&
              q.namespaceURI === Gr.HTML
            ) {
              return q;
            }
          }
        }
        return null;
      }
      function root(a) {
        a._nid = a.ownerDocument._nextnid++;
        a.ownerDocument._nodes[a._nid] = a;
        if (a.nodeType === re.ELEMENT_NODE) {
          var C = a.getAttribute('id');
          if (C) a.ownerDocument.addId(C, a);
          if (a._roothook) a._roothook();
        }
      }
      function uproot(a) {
        if (a.nodeType === re.ELEMENT_NODE) {
          var C = a.getAttribute('id');
          if (C) a.ownerDocument.delId(C, a);
        }
        a.ownerDocument._nodes[a._nid] = undefined;
        a._nid = undefined;
      }
      function recursivelyRoot(a) {
        root(a);
        if (a.nodeType === re.ELEMENT_NODE) {
          for (var C = a.firstChild; C !== null; C = C.nextSibling)
            recursivelyRoot(C);
        }
      }
      function recursivelyUproot(a) {
        uproot(a);
        for (var C = a.firstChild; C !== null; C = C.nextSibling)
          recursivelyUproot(C);
      }
      function recursivelySetOwner(a, C) {
        a.ownerDocument = C;
        a._lastModTime = undefined;
        if (Object.prototype.hasOwnProperty.call(a, '_tagName')) {
          a._tagName = undefined;
        }
        for (var q = a.firstChild; q !== null; q = q.nextSibling)
          recursivelySetOwner(q, C);
      }
      function MultiId(a) {
        this.nodes = Object.create(null);
        this.nodes[a._nid] = a;
        this.length = 1;
        this.firstNode = undefined;
      }
      MultiId.prototype.add = function (a) {
        if (!this.nodes[a._nid]) {
          this.nodes[a._nid] = a;
          this.length++;
          this.firstNode = undefined;
        }
      };
      MultiId.prototype.del = function (a) {
        if (this.nodes[a._nid]) {
          delete this.nodes[a._nid];
          this.length--;
          this.firstNode = undefined;
        }
      };
      MultiId.prototype.getFirst = function () {
        if (!this.firstNode) {
          var a;
          for (a in this.nodes) {
            if (
              this.firstNode === undefined ||
              this.firstNode.compareDocumentPosition(this.nodes[a]) &
                re.DOCUMENT_POSITION_PRECEDING
            ) {
              this.firstNode = this.nodes[a];
            }
          }
        }
        return this.firstNode;
      };
      MultiId.prototype.downgrade = function () {
        if (this.length === 1) {
          var a;
          for (a in this.nodes) {
            return this.nodes[a];
          }
        }
        return this;
      };
    },
    3816: (a, C, q) => {
      'use strict';
      a.exports = DocumentFragment;
      var re = q(4976);
      var ae = q(3209);
      var Ue = q(3145);
      var lt = q(3032);
      var Pt = q(1444);
      var Wt = q(3573);
      function DocumentFragment(a) {
        Ue.call(this);
        this.nodeType = re.DOCUMENT_FRAGMENT_NODE;
        this.ownerDocument = a;
      }
      DocumentFragment.prototype = Object.create(Ue.prototype, {
        nodeName: { value: '#document-fragment' },
        nodeValue: {
          get: function () {
            return null;
          },
          set: function () {}
        },
        textContent: Object.getOwnPropertyDescriptor(
          lt.prototype,
          'textContent'
        ),
        innerText: Object.getOwnPropertyDescriptor(lt.prototype, 'innerText'),
        querySelector: {
          value: function (a) {
            var C = this.querySelectorAll(a);
            return C.length ? C[0] : null;
          }
        },
        querySelectorAll: {
          value: function (a) {
            var C = Object.create(this);
            C.isHTML = true;
            C.getElementsByTagName = lt.prototype.getElementsByTagName;
            C.nextElement = Object.getOwnPropertyDescriptor(
              lt.prototype,
              'firstElementChild'
            ).get;
            var q = Pt(a, C);
            return q.item ? q : new ae(q);
          }
        },
        clone: {
          value: function clone() {
            return new DocumentFragment(this.ownerDocument);
          }
        },
        isEqual: {
          value: function isEqual(a) {
            return true;
          }
        },
        innerHTML: {
          get: function () {
            return this.serialize();
          },
          set: Wt.nyi
        },
        outerHTML: {
          get: function () {
            return this.serialize();
          },
          set: Wt.nyi
        }
      });
    },
    7718: (a, C, q) => {
      'use strict';
      a.exports = DocumentType;
      var re = q(4976);
      var ae = q(6889);
      var Ue = q(1641);
      function DocumentType(a, C, q, Ue) {
        ae.call(this);
        this.nodeType = re.DOCUMENT_TYPE_NODE;
        this.ownerDocument = a || null;
        this.name = C;
        this.publicId = q || '';
        this.systemId = Ue || '';
      }
      DocumentType.prototype = Object.create(ae.prototype, {
        nodeName: {
          get: function () {
            return this.name;
          }
        },
        nodeValue: {
          get: function () {
            return null;
          },
          set: function () {}
        },
        clone: {
          value: function clone() {
            return new DocumentType(
              this.ownerDocument,
              this.name,
              this.publicId,
              this.systemId
            );
          }
        },
        isEqual: {
          value: function isEqual(a) {
            return (
              this.name === a.name &&
              this.publicId === a.publicId &&
              this.systemId === a.systemId
            );
          }
        }
      });
      Object.defineProperties(DocumentType.prototype, Ue);
    },
    3032: (a, C, q) => {
      'use strict';
      a.exports = Element;
      var re = q(8726);
      var ae = q(3573);
      var Ue = ae.NAMESPACE;
      var lt = q(8510);
      var Pt = q(4976);
      var Wt = q(3209);
      var Ar = q(9976);
      var Er = q(9548);
      var Ir = q(9984);
      var Br = q(9386);
      var Qr = q(1444);
      var kr = q(3145);
      var Dr = q(1641);
      var Nr = q(4813);
      var Lr = q(8601);
      var Fr = Object.create(null);
      function Element(a, C, q, re) {
        kr.call(this);
        this.nodeType = Pt.ELEMENT_NODE;
        this.ownerDocument = a;
        this.localName = C;
        this.namespaceURI = q;
        this.prefix = re;
        this._tagName = undefined;
        this._attrsByQName = Object.create(null);
        this._attrsByLName = Object.create(null);
        this._attrKeys = [];
      }
      function recursiveGetText(a, C) {
        if (a.nodeType === Pt.TEXT_NODE) {
          C.push(a._data);
        } else {
          for (var q = 0, re = a.childNodes.length; q < re; q++)
            recursiveGetText(a.childNodes[q], C);
        }
      }
      Element.prototype = Object.create(kr.prototype, {
        isHTML: {
          get: function isHTML() {
            return this.namespaceURI === Ue.HTML && this.ownerDocument.isHTML;
          }
        },
        tagName: {
          get: function tagName() {
            if (this._tagName === undefined) {
              var a;
              if (this.prefix === null) {
                a = this.localName;
              } else {
                a = this.prefix + ':' + this.localName;
              }
              if (this.isHTML) {
                var C = Fr[a];
                if (!C) {
                  Fr[a] = C = ae.toASCIIUpperCase(a);
                }
                a = C;
              }
              this._tagName = a;
            }
            return this._tagName;
          }
        },
        nodeName: {
          get: function () {
            return this.tagName;
          }
        },
        nodeValue: {
          get: function () {
            return null;
          },
          set: function () {}
        },
        textContent: {
          get: function () {
            var a = [];
            recursiveGetText(this, a);
            return a.join('');
          },
          set: function (a) {
            this.removeChildren();
            if (a !== null && a !== undefined && a !== '') {
              this._appendChild(this.ownerDocument.createTextNode(a));
            }
          }
        },
        innerText: {
          get: function () {
            var a = [];
            recursiveGetText(this, a);
            return a
              .join('')
              .replace(/[ \t\n\f\r]+/g, ' ')
              .trim();
          },
          set: function (a) {
            this.removeChildren();
            if (a !== null && a !== undefined && a !== '') {
              this._appendChild(this.ownerDocument.createTextNode(a));
            }
          }
        },
        innerHTML: {
          get: function () {
            return this.serialize();
          },
          set: ae.nyi
        },
        outerHTML: {
          get: function () {
            return Ar.serializeOne(this, { nodeType: 0 });
          },
          set: function (a) {
            var C = this.ownerDocument;
            var q = this.parentNode;
            if (q === null) {
              return;
            }
            if (q.nodeType === Pt.DOCUMENT_NODE) {
              ae.NoModificationAllowedError();
            }
            if (q.nodeType === Pt.DOCUMENT_FRAGMENT_NODE) {
              q = q.ownerDocument.createElement('body');
            }
            var re = C.implementation.mozHTMLParser(C._address, q);
            re.parse(a === null ? '' : String(a), true);
            this.replaceWith(re._asDocumentFragment());
          }
        },
        _insertAdjacent: {
          value: function _insertAdjacent(a, C) {
            var q = false;
            switch (a) {
              case 'beforebegin':
                q = true;
              case 'afterend':
                var re = this.parentNode;
                if (re === null) {
                  return null;
                }
                return re.insertBefore(C, q ? this : this.nextSibling);
              case 'afterbegin':
                q = true;
              case 'beforeend':
                return this.insertBefore(C, q ? this.firstChild : null);
              default:
                return ae.SyntaxError();
            }
          }
        },
        insertAdjacentElement: {
          value: function insertAdjacentElement(a, C) {
            if (C.nodeType !== Pt.ELEMENT_NODE) {
              throw new TypeError('not an element');
            }
            a = ae.toASCIILowerCase(String(a));
            return this._insertAdjacent(a, C);
          }
        },
        insertAdjacentText: {
          value: function insertAdjacentText(a, C) {
            var q = this.ownerDocument.createTextNode(C);
            a = ae.toASCIILowerCase(String(a));
            this._insertAdjacent(a, q);
          }
        },
        insertAdjacentHTML: {
          value: function insertAdjacentHTML(a, C) {
            a = ae.toASCIILowerCase(String(a));
            C = String(C);
            var q;
            switch (a) {
              case 'beforebegin':
              case 'afterend':
                q = this.parentNode;
                if (q === null || q.nodeType === Pt.DOCUMENT_NODE) {
                  ae.NoModificationAllowedError();
                }
                break;
              case 'afterbegin':
              case 'beforeend':
                q = this;
                break;
              default:
                ae.SyntaxError();
            }
            if (
              !(q instanceof Element) ||
              (q.ownerDocument.isHTML &&
                q.localName === 'html' &&
                q.namespaceURI === Ue.HTML)
            ) {
              q = q.ownerDocument.createElementNS(Ue.HTML, 'body');
            }
            var re = this.ownerDocument.implementation.mozHTMLParser(
              this.ownerDocument._address,
              q
            );
            re.parse(C, true);
            this._insertAdjacent(a, re._asDocumentFragment());
          }
        },
        children: {
          get: function () {
            if (!this._children) {
              this._children = new ChildrenCollection(this);
            }
            return this._children;
          }
        },
        attributes: {
          get: function () {
            if (!this._attributes) {
              this._attributes = new AttributesArray(this);
            }
            return this._attributes;
          }
        },
        firstElementChild: {
          get: function () {
            for (var a = this.firstChild; a !== null; a = a.nextSibling) {
              if (a.nodeType === Pt.ELEMENT_NODE) return a;
            }
            return null;
          }
        },
        lastElementChild: {
          get: function () {
            for (var a = this.lastChild; a !== null; a = a.previousSibling) {
              if (a.nodeType === Pt.ELEMENT_NODE) return a;
            }
            return null;
          }
        },
        childElementCount: {
          get: function () {
            return this.children.length;
          }
        },
        nextElement: {
          value: function (a) {
            if (!a) a = this.ownerDocument.documentElement;
            var C = this.firstElementChild;
            if (!C) {
              if (this === a) return null;
              C = this.nextElementSibling;
            }
            if (C) return C;
            for (
              var q = this.parentElement;
              q && q !== a;
              q = q.parentElement
            ) {
              C = q.nextElementSibling;
              if (C) return C;
            }
            return null;
          }
        },
        getElementsByTagName: {
          value: function getElementsByTagName(a) {
            var C;
            if (!a) return new Wt();
            if (a === '*')
              C = function () {
                return true;
              };
            else if (this.isHTML) C = htmlLocalNameElementFilter(a);
            else C = localNameElementFilter(a);
            return new Er(this, C);
          }
        },
        getElementsByTagNameNS: {
          value: function getElementsByTagNameNS(a, C) {
            var q;
            if (a === '*' && C === '*')
              q = function () {
                return true;
              };
            else if (a === '*') q = localNameElementFilter(C);
            else if (C === '*') q = namespaceElementFilter(a);
            else q = namespaceLocalNameElementFilter(a, C);
            return new Er(this, q);
          }
        },
        getElementsByClassName: {
          value: function getElementsByClassName(a) {
            a = String(a).trim();
            if (a === '') {
              var C = new Wt();
              return C;
            }
            a = a.split(/[ \t\r\n\f]+/);
            return new Er(this, classNamesElementFilter(a));
          }
        },
        getElementsByName: {
          value: function getElementsByName(a) {
            return new Er(this, elementNameFilter(String(a)));
          }
        },
        clone: {
          value: function clone() {
            var a;
            if (
              this.namespaceURI !== Ue.HTML ||
              this.prefix ||
              !this.ownerDocument.isHTML
            ) {
              a = this.ownerDocument.createElementNS(
                this.namespaceURI,
                this.prefix !== null
                  ? this.prefix + ':' + this.localName
                  : this.localName
              );
            } else {
              a = this.ownerDocument.createElement(this.localName);
            }
            for (var C = 0, q = this._attrKeys.length; C < q; C++) {
              var re = this._attrKeys[C];
              var ae = this._attrsByLName[re];
              var lt = ae.cloneNode();
              lt._setOwnerElement(a);
              a._attrsByLName[re] = lt;
              a._addQName(lt);
            }
            a._attrKeys = this._attrKeys.concat();
            return a;
          }
        },
        isEqual: {
          value: function isEqual(a) {
            if (
              this.localName !== a.localName ||
              this.namespaceURI !== a.namespaceURI ||
              this.prefix !== a.prefix ||
              this._numattrs !== a._numattrs
            )
              return false;
            for (var C = 0, q = this._numattrs; C < q; C++) {
              var re = this._attr(C);
              if (!a.hasAttributeNS(re.namespaceURI, re.localName))
                return false;
              if (a.getAttributeNS(re.namespaceURI, re.localName) !== re.value)
                return false;
            }
            return true;
          }
        },
        _lookupNamespacePrefix: {
          value: function _lookupNamespacePrefix(a, C) {
            if (
              this.namespaceURI &&
              this.namespaceURI === a &&
              this.prefix !== null &&
              C.lookupNamespaceURI(this.prefix) === a
            ) {
              return this.prefix;
            }
            for (var q = 0, re = this._numattrs; q < re; q++) {
              var ae = this._attr(q);
              if (
                ae.prefix === 'xmlns' &&
                ae.value === a &&
                C.lookupNamespaceURI(ae.localName) === a
              ) {
                return ae.localName;
              }
            }
            var Ue = this.parentElement;
            return Ue ? Ue._lookupNamespacePrefix(a, C) : null;
          }
        },
        lookupNamespaceURI: {
          value: function lookupNamespaceURI(a) {
            if (a === '' || a === undefined) {
              a = null;
            }
            if (this.namespaceURI !== null && this.prefix === a)
              return this.namespaceURI;
            for (var C = 0, q = this._numattrs; C < q; C++) {
              var re = this._attr(C);
              if (re.namespaceURI === Ue.XMLNS) {
                if (
                  (re.prefix === 'xmlns' && re.localName === a) ||
                  (a === null && re.prefix === null && re.localName === 'xmlns')
                ) {
                  return re.value || null;
                }
              }
            }
            var ae = this.parentElement;
            return ae ? ae.lookupNamespaceURI(a) : null;
          }
        },
        getAttribute: {
          value: function getAttribute(a) {
            var C = this.getAttributeNode(a);
            return C ? C.value : null;
          }
        },
        getAttributeNS: {
          value: function getAttributeNS(a, C) {
            var q = this.getAttributeNodeNS(a, C);
            return q ? q.value : null;
          }
        },
        getAttributeNode: {
          value: function getAttributeNode(a) {
            a = String(a);
            if (/[A-Z]/.test(a) && this.isHTML) a = ae.toASCIILowerCase(a);
            var C = this._attrsByQName[a];
            if (!C) return null;
            if (Array.isArray(C)) C = C[0];
            return C;
          }
        },
        getAttributeNodeNS: {
          value: function getAttributeNodeNS(a, C) {
            a = a === undefined || a === null ? '' : String(a);
            C = String(C);
            var q = this._attrsByLName[a + '|' + C];
            return q ? q : null;
          }
        },
        hasAttribute: {
          value: function hasAttribute(a) {
            a = String(a);
            if (/[A-Z]/.test(a) && this.isHTML) a = ae.toASCIILowerCase(a);
            return this._attrsByQName[a] !== undefined;
          }
        },
        hasAttributeNS: {
          value: function hasAttributeNS(a, C) {
            a = a === undefined || a === null ? '' : String(a);
            C = String(C);
            var q = a + '|' + C;
            return this._attrsByLName[q] !== undefined;
          }
        },
        hasAttributes: {
          value: function hasAttributes() {
            return this._numattrs > 0;
          }
        },
        toggleAttribute: {
          value: function toggleAttribute(a, C) {
            a = String(a);
            if (!re.isValidName(a)) ae.InvalidCharacterError();
            if (/[A-Z]/.test(a) && this.isHTML) a = ae.toASCIILowerCase(a);
            var q = this._attrsByQName[a];
            if (q === undefined) {
              if (C === undefined || C === true) {
                this._setAttribute(a, '');
                return true;
              }
              return false;
            } else {
              if (C === undefined || C === false) {
                this.removeAttribute(a);
                return false;
              }
              return true;
            }
          }
        },
        _setAttribute: {
          value: function _setAttribute(a, C) {
            var q = this._attrsByQName[a];
            var re;
            if (!q) {
              q = this._newattr(a);
              re = true;
            } else {
              if (Array.isArray(q)) q = q[0];
            }
            q.value = C;
            if (this._attributes) this._attributes[a] = q;
            if (re && this._newattrhook) this._newattrhook(a, C);
          }
        },
        setAttribute: {
          value: function setAttribute(a, C) {
            a = String(a);
            if (!re.isValidName(a)) ae.InvalidCharacterError();
            if (/[A-Z]/.test(a) && this.isHTML) a = ae.toASCIILowerCase(a);
            this._setAttribute(a, String(C));
          }
        },
        _setAttributeNS: {
          value: function _setAttributeNS(a, C, q) {
            var re = C.indexOf(':'),
              ae,
              Ue;
            if (re < 0) {
              ae = null;
              Ue = C;
            } else {
              ae = C.substring(0, re);
              Ue = C.substring(re + 1);
            }
            if (a === '' || a === undefined) a = null;
            var lt = (a === null ? '' : a) + '|' + Ue;
            var Pt = this._attrsByLName[lt];
            var Wt;
            if (!Pt) {
              Pt = new Attr(this, Ue, ae, a);
              Wt = true;
              this._attrsByLName[lt] = Pt;
              if (this._attributes) {
                this._attributes[this._attrKeys.length] = Pt;
              }
              this._attrKeys.push(lt);
              this._addQName(Pt);
            } else if (false) {
            }
            Pt.value = q;
            if (Wt && this._newattrhook) this._newattrhook(C, q);
          }
        },
        setAttributeNS: {
          value: function setAttributeNS(a, C, q) {
            a = a === null || a === undefined || a === '' ? null : String(a);
            C = String(C);
            if (!re.isValidQName(C)) ae.InvalidCharacterError();
            var lt = C.indexOf(':');
            var Pt = lt < 0 ? null : C.substring(0, lt);
            if (
              (Pt !== null && a === null) ||
              (Pt === 'xml' && a !== Ue.XML) ||
              ((C === 'xmlns' || Pt === 'xmlns') && a !== Ue.XMLNS) ||
              (a === Ue.XMLNS && !(C === 'xmlns' || Pt === 'xmlns'))
            )
              ae.NamespaceError();
            this._setAttributeNS(a, C, String(q));
          }
        },
        setAttributeNode: {
          value: function setAttributeNode(a) {
            if (a.ownerElement !== null && a.ownerElement !== this) {
              throw new Ir(Ir.INUSE_ATTRIBUTE_ERR);
            }
            var C = null;
            var q = this._attrsByQName[a.name];
            if (q) {
              if (!Array.isArray(q)) {
                q = [q];
              }
              if (
                q.some(function (C) {
                  return C === a;
                })
              ) {
                return a;
              } else if (a.ownerElement !== null) {
                throw new Ir(Ir.INUSE_ATTRIBUTE_ERR);
              }
              q.forEach(function (a) {
                this.removeAttributeNode(a);
              }, this);
              C = q[0];
            }
            this.setAttributeNodeNS(a);
            return C;
          }
        },
        setAttributeNodeNS: {
          value: function setAttributeNodeNS(a) {
            if (a.ownerElement !== null) {
              throw new Ir(Ir.INUSE_ATTRIBUTE_ERR);
            }
            var C = a.namespaceURI;
            var q = (C === null ? '' : C) + '|' + a.localName;
            var re = this._attrsByLName[q];
            if (re) {
              this.removeAttributeNode(re);
            }
            a._setOwnerElement(this);
            this._attrsByLName[q] = a;
            if (this._attributes) {
              this._attributes[this._attrKeys.length] = a;
            }
            this._attrKeys.push(q);
            this._addQName(a);
            if (this._newattrhook) this._newattrhook(a.name, a.value);
            return re || null;
          }
        },
        removeAttribute: {
          value: function removeAttribute(a) {
            a = String(a);
            if (/[A-Z]/.test(a) && this.isHTML) a = ae.toASCIILowerCase(a);
            var C = this._attrsByQName[a];
            if (!C) return;
            if (Array.isArray(C)) {
              if (C.length > 2) {
                C = C.shift();
              } else {
                this._attrsByQName[a] = C[1];
                C = C[0];
              }
            } else {
              this._attrsByQName[a] = undefined;
            }
            var q = C.namespaceURI;
            var re = (q === null ? '' : q) + '|' + C.localName;
            this._attrsByLName[re] = undefined;
            var Ue = this._attrKeys.indexOf(re);
            if (this._attributes) {
              Array.prototype.splice.call(this._attributes, Ue, 1);
              this._attributes[a] = undefined;
            }
            this._attrKeys.splice(Ue, 1);
            var lt = C.onchange;
            C._setOwnerElement(null);
            if (lt) {
              lt.call(C, this, C.localName, C.value, null);
            }
            if (this.rooted) this.ownerDocument.mutateRemoveAttr(C);
          }
        },
        removeAttributeNS: {
          value: function removeAttributeNS(a, C) {
            a = a === undefined || a === null ? '' : String(a);
            C = String(C);
            var q = a + '|' + C;
            var re = this._attrsByLName[q];
            if (!re) return;
            this._attrsByLName[q] = undefined;
            var ae = this._attrKeys.indexOf(q);
            if (this._attributes) {
              Array.prototype.splice.call(this._attributes, ae, 1);
            }
            this._attrKeys.splice(ae, 1);
            this._removeQName(re);
            var Ue = re.onchange;
            re._setOwnerElement(null);
            if (Ue) {
              Ue.call(re, this, re.localName, re.value, null);
            }
            if (this.rooted) this.ownerDocument.mutateRemoveAttr(re);
          }
        },
        removeAttributeNode: {
          value: function removeAttributeNode(a) {
            var C = a.namespaceURI;
            var q = (C === null ? '' : C) + '|' + a.localName;
            if (this._attrsByLName[q] !== a) {
              ae.NotFoundError();
            }
            this.removeAttributeNS(C, a.localName);
            return a;
          }
        },
        getAttributeNames: {
          value: function getAttributeNames() {
            var a = this;
            return this._attrKeys.map(function (C) {
              return a._attrsByLName[C].name;
            });
          }
        },
        _getattr: {
          value: function _getattr(a) {
            var C = this._attrsByQName[a];
            return C ? C.value : null;
          }
        },
        _setattr: {
          value: function _setattr(a, C) {
            var q = this._attrsByQName[a];
            var re;
            if (!q) {
              q = this._newattr(a);
              re = true;
            }
            q.value = String(C);
            if (this._attributes) this._attributes[a] = q;
            if (re && this._newattrhook) this._newattrhook(a, C);
          }
        },
        _newattr: {
          value: function _newattr(a) {
            var C = new Attr(this, a, null, null);
            var q = '|' + a;
            this._attrsByQName[a] = C;
            this._attrsByLName[q] = C;
            if (this._attributes) {
              this._attributes[this._attrKeys.length] = C;
            }
            this._attrKeys.push(q);
            return C;
          }
        },
        _addQName: {
          value: function (a) {
            var C = a.name;
            var q = this._attrsByQName[C];
            if (!q) {
              this._attrsByQName[C] = a;
            } else if (Array.isArray(q)) {
              q.push(a);
            } else {
              this._attrsByQName[C] = [q, a];
            }
            if (this._attributes) this._attributes[C] = a;
          }
        },
        _removeQName: {
          value: function (a) {
            var C = a.name;
            var q = this._attrsByQName[C];
            if (Array.isArray(q)) {
              var re = q.indexOf(a);
              ae.assert(re !== -1);
              if (q.length === 2) {
                this._attrsByQName[C] = q[1 - re];
                if (this._attributes) {
                  this._attributes[C] = this._attrsByQName[C];
                }
              } else {
                q.splice(re, 1);
                if (this._attributes && this._attributes[C] === a) {
                  this._attributes[C] = q[0];
                }
              }
            } else {
              ae.assert(q === a);
              this._attrsByQName[C] = undefined;
              if (this._attributes) {
                this._attributes[C] = undefined;
              }
            }
          }
        },
        _numattrs: {
          get: function () {
            return this._attrKeys.length;
          }
        },
        _attr: {
          value: function (a) {
            return this._attrsByLName[this._attrKeys[a]];
          }
        },
        id: lt.property({ name: 'id' }),
        className: lt.property({ name: 'class' }),
        classList: {
          get: function () {
            var a = this;
            if (this._classList) {
              return this._classList;
            }
            var C = new Br(
              function () {
                return a.className || '';
              },
              function (C) {
                a.className = C;
              }
            );
            this._classList = C;
            return C;
          },
          set: function (a) {
            this.className = a;
          }
        },
        matches: {
          value: function (a) {
            return Qr.matches(this, a);
          }
        },
        closest: {
          value: function (a) {
            var C = this;
            do {
              if (C.matches && C.matches(a)) {
                return C;
              }
              C = C.parentElement || C.parentNode;
            } while (C !== null && C.nodeType === Pt.ELEMENT_NODE);
            return null;
          }
        },
        querySelector: {
          value: function (a) {
            return Qr(a, this)[0];
          }
        },
        querySelectorAll: {
          value: function (a) {
            var C = Qr(a, this);
            return C.item ? C : new Wt(C);
          }
        }
      });
      Object.defineProperties(Element.prototype, Dr);
      Object.defineProperties(Element.prototype, Nr);
      lt.registerChangeHandler(Element, 'id', function (a, C, q, re) {
        if (a.rooted) {
          if (q) {
            a.ownerDocument.delId(q, a);
          }
          if (re) {
            a.ownerDocument.addId(re, a);
          }
        }
      });
      lt.registerChangeHandler(Element, 'class', function (a, C, q, re) {
        if (a._classList) {
          a._classList._update();
        }
      });
      function Attr(a, C, q, re, ae) {
        this.localName = C;
        this.prefix = q === null || q === '' ? null : '' + q;
        this.namespaceURI = re === null || re === '' ? null : '' + re;
        this.data = ae;
        this._setOwnerElement(a);
      }
      Attr.prototype = Object.create(Object.prototype, {
        ownerElement: {
          get: function () {
            return this._ownerElement;
          }
        },
        _setOwnerElement: {
          value: function _setOwnerElement(a) {
            this._ownerElement = a;
            if (this.prefix === null && this.namespaceURI === null && a) {
              this.onchange = a._attributeChangeHandlers[this.localName];
            } else {
              this.onchange = null;
            }
          }
        },
        name: {
          get: function () {
            return this.prefix
              ? this.prefix + ':' + this.localName
              : this.localName;
          }
        },
        specified: {
          get: function () {
            return true;
          }
        },
        value: {
          get: function () {
            return this.data;
          },
          set: function (a) {
            var C = this.data;
            a = a === undefined ? '' : a + '';
            if (a === C) return;
            this.data = a;
            if (this.ownerElement) {
              if (this.onchange)
                this.onchange(this.ownerElement, this.localName, C, a);
              if (this.ownerElement.rooted)
                this.ownerElement.ownerDocument.mutateAttr(this, C);
            }
          }
        },
        cloneNode: {
          value: function cloneNode(a) {
            return new Attr(
              null,
              this.localName,
              this.prefix,
              this.namespaceURI,
              this.data
            );
          }
        },
        nodeType: {
          get: function () {
            return Pt.ATTRIBUTE_NODE;
          }
        },
        nodeName: {
          get: function () {
            return this.name;
          }
        },
        nodeValue: {
          get: function () {
            return this.value;
          },
          set: function (a) {
            this.value = a;
          }
        },
        textContent: {
          get: function () {
            return this.value;
          },
          set: function (a) {
            if (a === null || a === undefined) {
              a = '';
            }
            this.value = a;
          }
        },
        innerText: {
          get: function () {
            return this.value;
          },
          set: function (a) {
            if (a === null || a === undefined) {
              a = '';
            }
            this.value = a;
          }
        }
      });
      Element._Attr = Attr;
      function AttributesArray(a) {
        Lr.call(this, a);
        for (var C in a._attrsByQName) {
          this[C] = a._attrsByQName[C];
        }
        for (var q = 0; q < a._attrKeys.length; q++) {
          this[q] = a._attrsByLName[a._attrKeys[q]];
        }
      }
      AttributesArray.prototype = Object.create(Lr.prototype, {
        length: {
          get: function () {
            return this.element._attrKeys.length;
          },
          set: function () {}
        },
        item: {
          value: function (a) {
            a = a >>> 0;
            if (a >= this.length) {
              return null;
            }
            return this.element._attrsByLName[this.element._attrKeys[a]];
          }
        }
      });
      if (globalThis.Symbol?.iterator) {
        AttributesArray.prototype[globalThis.Symbol.iterator] = function () {
          var a = 0,
            C = this.length,
            q = this;
          return {
            next: function () {
              if (a < C) return { value: q.item(a++) };
              return { done: true };
            }
          };
        };
      }
      function ChildrenCollection(a) {
        this.element = a;
        this.updateCache();
      }
      ChildrenCollection.prototype = Object.create(Object.prototype, {
        length: {
          get: function () {
            this.updateCache();
            return this.childrenByNumber.length;
          }
        },
        item: {
          value: function item(a) {
            this.updateCache();
            return this.childrenByNumber[a] || null;
          }
        },
        namedItem: {
          value: function namedItem(a) {
            this.updateCache();
            return this.childrenByName[a] || null;
          }
        },
        namedItems: {
          get: function () {
            this.updateCache();
            return this.childrenByName;
          }
        },
        updateCache: {
          value: function updateCache() {
            var a =
              /^(a|applet|area|embed|form|frame|frameset|iframe|img|object)$/;
            if (this.lastModTime !== this.element.lastModTime) {
              this.lastModTime = this.element.lastModTime;
              var C =
                (this.childrenByNumber && this.childrenByNumber.length) || 0;
              for (var q = 0; q < C; q++) {
                this[q] = undefined;
              }
              this.childrenByNumber = [];
              this.childrenByName = Object.create(null);
              for (
                var re = this.element.firstChild;
                re !== null;
                re = re.nextSibling
              ) {
                if (re.nodeType === Pt.ELEMENT_NODE) {
                  this[this.childrenByNumber.length] = re;
                  this.childrenByNumber.push(re);
                  var ae = re.getAttribute('id');
                  if (ae && !this.childrenByName[ae])
                    this.childrenByName[ae] = re;
                  var lt = re.getAttribute('name');
                  if (
                    lt &&
                    this.element.namespaceURI === Ue.HTML &&
                    a.test(this.element.localName) &&
                    !this.childrenByName[lt]
                  )
                    this.childrenByName[ae] = re;
                }
              }
            }
          }
        }
      });
      function localNameElementFilter(a) {
        return function (C) {
          return C.localName === a;
        };
      }
      function htmlLocalNameElementFilter(a) {
        var C = ae.toASCIILowerCase(a);
        if (C === a) return localNameElementFilter(a);
        return function (q) {
          return q.isHTML ? q.localName === C : q.localName === a;
        };
      }
      function namespaceElementFilter(a) {
        return function (C) {
          return C.namespaceURI === a;
        };
      }
      function namespaceLocalNameElementFilter(a, C) {
        return function (q) {
          return q.namespaceURI === a && q.localName === C;
        };
      }
      function classNamesElementFilter(a) {
        return function (C) {
          return a.every(function (a) {
            return C.classList.contains(a);
          });
        };
      }
      function elementNameFilter(a) {
        return function (C) {
          if (C.namespaceURI !== Ue.HTML) {
            return false;
          }
          return C.getAttribute('name') === a;
        };
      }
    },
    5137: (a) => {
      'use strict';
      a.exports = Event;
      Event.CAPTURING_PHASE = 1;
      Event.AT_TARGET = 2;
      Event.BUBBLING_PHASE = 3;
      function Event(a, C) {
        this.type = '';
        this.target = null;
        this.currentTarget = null;
        this.eventPhase = Event.AT_TARGET;
        this.bubbles = false;
        this.cancelable = false;
        this.isTrusted = false;
        this.defaultPrevented = false;
        this.timeStamp = Date.now();
        this._propagationStopped = false;
        this._immediatePropagationStopped = false;
        this._initialized = true;
        this._dispatching = false;
        if (a) this.type = a;
        if (C) {
          for (var q in C) {
            this[q] = C[q];
          }
        }
      }
      Event.prototype = Object.create(Object.prototype, {
        constructor: { value: Event },
        stopPropagation: {
          value: function stopPropagation() {
            this._propagationStopped = true;
          }
        },
        stopImmediatePropagation: {
          value: function stopImmediatePropagation() {
            this._propagationStopped = true;
            this._immediatePropagationStopped = true;
          }
        },
        preventDefault: {
          value: function preventDefault() {
            if (this.cancelable) this.defaultPrevented = true;
          }
        },
        initEvent: {
          value: function initEvent(a, C, q) {
            this._initialized = true;
            if (this._dispatching) return;
            this._propagationStopped = false;
            this._immediatePropagationStopped = false;
            this.defaultPrevented = false;
            this.isTrusted = false;
            this.target = null;
            this.type = a;
            this.bubbles = C;
            this.cancelable = q;
          }
        }
      });
    },
    802: (a, C, q) => {
      'use strict';
      var re = q(5137);
      var ae = q(3162);
      var Ue = q(3573);
      a.exports = EventTarget;
      function EventTarget() {}
      EventTarget.prototype = {
        addEventListener: function addEventListener(a, C, q) {
          if (!C) return;
          if (q === undefined) q = false;
          if (!this._listeners) this._listeners = Object.create(null);
          if (!this._listeners[a]) this._listeners[a] = [];
          var re = this._listeners[a];
          for (var ae = 0, Ue = re.length; ae < Ue; ae++) {
            var lt = re[ae];
            if (lt.listener === C && lt.capture === q) return;
          }
          var Pt = { listener: C, capture: q };
          if (typeof C === 'function') Pt.f = C;
          re.push(Pt);
        },
        removeEventListener: function removeEventListener(a, C, q) {
          if (q === undefined) q = false;
          if (this._listeners) {
            var re = this._listeners[a];
            if (re) {
              for (var ae = 0, Ue = re.length; ae < Ue; ae++) {
                var lt = re[ae];
                if (lt.listener === C && lt.capture === q) {
                  if (re.length === 1) {
                    this._listeners[a] = undefined;
                  } else {
                    re.splice(ae, 1);
                  }
                  return;
                }
              }
            }
          }
        },
        dispatchEvent: function dispatchEvent(a) {
          return this._dispatchEvent(a, false);
        },
        _dispatchEvent: function _dispatchEvent(a, C) {
          if (typeof C !== 'boolean') C = false;
          function invoke(a, C) {
            var q = C.type,
              ae = C.eventPhase;
            C.currentTarget = a;
            if (ae !== re.CAPTURING_PHASE && a._handlers && a._handlers[q]) {
              var Ue = a._handlers[q];
              var lt;
              if (typeof Ue === 'function') {
                lt = Ue.call(C.currentTarget, C);
              } else {
                var Pt = Ue.handleEvent;
                if (typeof Pt !== 'function')
                  throw new TypeError(
                    'handleEvent property of ' +
                      'event handler object is' +
                      'not a function.'
                  );
                lt = Pt.call(Ue, C);
              }
              switch (C.type) {
                case 'mouseover':
                  if (lt === true) C.preventDefault();
                  break;
                case 'beforeunload':
                default:
                  if (lt === false) C.preventDefault();
                  break;
              }
            }
            var Wt = a._listeners && a._listeners[q];
            if (!Wt) return;
            Wt = Wt.slice();
            for (var Ar = 0, Er = Wt.length; Ar < Er; Ar++) {
              if (C._immediatePropagationStopped) return;
              var Ir = Wt[Ar];
              if (
                (ae === re.CAPTURING_PHASE && !Ir.capture) ||
                (ae === re.BUBBLING_PHASE && Ir.capture)
              )
                continue;
              if (Ir.f) {
                Ir.f.call(C.currentTarget, C);
              } else {
                var Br = Ir.listener.handleEvent;
                if (typeof Br !== 'function')
                  throw new TypeError(
                    'handleEvent property of event listener object is not a function.'
                  );
                Br.call(Ir.listener, C);
              }
            }
          }
          if (!a._initialized || a._dispatching) Ue.InvalidStateError();
          a.isTrusted = C;
          a._dispatching = true;
          a.target = this;
          var q = [];
          for (var lt = this.parentNode; lt; lt = lt.parentNode) q.push(lt);
          a.eventPhase = re.CAPTURING_PHASE;
          for (var Pt = q.length - 1; Pt >= 0; Pt--) {
            invoke(q[Pt], a);
            if (a._propagationStopped) break;
          }
          if (!a._propagationStopped) {
            a.eventPhase = re.AT_TARGET;
            invoke(this, a);
          }
          if (a.bubbles && !a._propagationStopped) {
            a.eventPhase = re.BUBBLING_PHASE;
            for (var Wt = 0, Ar = q.length; Wt < Ar; Wt++) {
              invoke(q[Wt], a);
              if (a._propagationStopped) break;
            }
          }
          a._dispatching = false;
          a.eventPhase = re.AT_TARGET;
          a.currentTarget = null;
          if (C && !a.defaultPrevented && a instanceof ae) {
            switch (a.type) {
              case 'mousedown':
                this._armed = { x: a.clientX, y: a.clientY, t: a.timeStamp };
                break;
              case 'mouseout':
              case 'mouseover':
                this._armed = null;
                break;
              case 'mouseup':
                if (this._isClick(a)) this._doClick(a);
                this._armed = null;
                break;
            }
          }
          return !a.defaultPrevented;
        },
        _isClick: function (a) {
          return (
            this._armed !== null &&
            a.type === 'mouseup' &&
            a.isTrusted &&
            a.button === 0 &&
            a.timeStamp - this._armed.t < 1e3 &&
            Math.abs(a.clientX - this._armed.x) < 10 &&
            Math.abs(a.clientY - this._armed.Y) < 10
          );
        },
        _doClick: function (a) {
          if (this._click_in_progress) return;
          this._click_in_progress = true;
          var C = this;
          while (C && !C._post_click_activation_steps) C = C.parentNode;
          if (C && C._pre_click_activation_steps) {
            C._pre_click_activation_steps();
          }
          var q = this.ownerDocument.createEvent('MouseEvent');
          q.initMouseEvent(
            'click',
            true,
            true,
            this.ownerDocument.defaultView,
            1,
            a.screenX,
            a.screenY,
            a.clientX,
            a.clientY,
            a.ctrlKey,
            a.altKey,
            a.shiftKey,
            a.metaKey,
            a.button,
            null
          );
          var re = this._dispatchEvent(q, true);
          if (C) {
            if (re) {
              if (C._post_click_activation_steps)
                C._post_click_activation_steps(q);
            } else {
              if (C._cancelled_activation_steps)
                C._cancelled_activation_steps();
            }
          }
        },
        _setEventHandler: function _setEventHandler(a, C) {
          if (!this._handlers) this._handlers = Object.create(null);
          this._handlers[a] = C;
        },
        _getEventHandler: function _getEventHandler(a) {
          return (this._handlers && this._handlers[a]) || null;
        }
      };
    },
    9548: (a, C, q) => {
      'use strict';
      a.exports = FilteredElementList;
      var re = q(4976);
      function FilteredElementList(a, C) {
        this.root = a;
        this.filter = C;
        this.lastModTime = a.lastModTime;
        this.done = false;
        this.cache = [];
        this.traverse();
      }
      FilteredElementList.prototype = Object.create(Object.prototype, {
        length: {
          get: function () {
            this.checkcache();
            if (!this.done) this.traverse();
            return this.cache.length;
          }
        },
        item: {
          value: function (a) {
            this.checkcache();
            if (!this.done && a >= this.cache.length) {
              this.traverse();
            }
            return this.cache[a];
          }
        },
        checkcache: {
          value: function () {
            if (this.lastModTime !== this.root.lastModTime) {
              for (var a = this.cache.length - 1; a >= 0; a--) {
                this[a] = undefined;
              }
              this.cache.length = 0;
              this.done = false;
              this.lastModTime = this.root.lastModTime;
            }
          }
        },
        traverse: {
          value: function (a) {
            if (a !== undefined) a++;
            var C;
            while ((C = this.next()) !== null) {
              this[this.cache.length] = C;
              this.cache.push(C);
              if (a && this.cache.length === a) return;
            }
            this.done = true;
          }
        },
        next: {
          value: function () {
            var a =
              this.cache.length === 0
                ? this.root
                : this.cache[this.cache.length - 1];
            var C;
            if (a.nodeType === re.DOCUMENT_NODE) C = a.documentElement;
            else C = a.nextElement(this.root);
            while (C) {
              if (this.filter(C)) {
                return C;
              }
              C = C.nextElement(this.root);
            }
            return null;
          }
        }
      });
    },
    4483: (a, C, q) => {
      'use strict';
      a.exports = HTMLParser;
      var re = q(5960);
      var ae = q(7718);
      var Ue = q(4976);
      var lt = q(3573).NAMESPACE;
      var Pt = q(1364);
      var Wt = Pt.elements;
      var Ar = Function.prototype.apply.bind(Array.prototype.push);
      var Er = -1;
      var Ir = 1;
      var Br = 2;
      var Qr = 3;
      var kr = 4;
      var Dr = 5;
      var Nr = [];
      var Lr =
        /^HTML$|^-\/\/W3O\/\/DTD W3 HTML Strict 3\.0\/\/EN\/\/$|^-\/W3C\/DTD HTML 4\.0 Transitional\/EN$|^\+\/\/Silmaril\/\/dtd html Pro v0r11 19970101\/\/|^-\/\/AdvaSoft Ltd\/\/DTD HTML 3\.0 asWedit \+ extensions\/\/|^-\/\/AS\/\/DTD HTML 3\.0 asWedit \+ extensions\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Level 1\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Level 2\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict Level 1\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict Level 2\/\/|^-\/\/IETF\/\/DTD HTML 2\.0 Strict\/\/|^-\/\/IETF\/\/DTD HTML 2\.0\/\/|^-\/\/IETF\/\/DTD HTML 2\.1E\/\/|^-\/\/IETF\/\/DTD HTML 3\.0\/\/|^-\/\/IETF\/\/DTD HTML 3\.2 Final\/\/|^-\/\/IETF\/\/DTD HTML 3\.2\/\/|^-\/\/IETF\/\/DTD HTML 3\/\/|^-\/\/IETF\/\/DTD HTML Level 0\/\/|^-\/\/IETF\/\/DTD HTML Level 1\/\/|^-\/\/IETF\/\/DTD HTML Level 2\/\/|^-\/\/IETF\/\/DTD HTML Level 3\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 0\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 1\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 2\/\/|^-\/\/IETF\/\/DTD HTML Strict Level 3\/\/|^-\/\/IETF\/\/DTD HTML Strict\/\/|^-\/\/IETF\/\/DTD HTML\/\/|^-\/\/Metrius\/\/DTD Metrius Presentational\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 HTML Strict\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 HTML\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 2\.0 Tables\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 HTML Strict\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 HTML\/\/|^-\/\/Microsoft\/\/DTD Internet Explorer 3\.0 Tables\/\/|^-\/\/Netscape Comm\. Corp\.\/\/DTD HTML\/\/|^-\/\/Netscape Comm\. Corp\.\/\/DTD Strict HTML\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML 2\.0\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML Extended 1\.0\/\/|^-\/\/O'Reilly and Associates\/\/DTD HTML Extended Relaxed 1\.0\/\/|^-\/\/SoftQuad Software\/\/DTD HoTMetaL PRO 6\.0::19990601::extensions to HTML 4\.0\/\/|^-\/\/SoftQuad\/\/DTD HoTMetaL PRO 4\.0::19971010::extensions to HTML 4\.0\/\/|^-\/\/Spyglass\/\/DTD HTML 2\.0 Extended\/\/|^-\/\/SQ\/\/DTD HTML 2\.0 HoTMetaL \+ extensions\/\/|^-\/\/Sun Microsystems Corp\.\/\/DTD HotJava HTML\/\/|^-\/\/Sun Microsystems Corp\.\/\/DTD HotJava Strict HTML\/\/|^-\/\/W3C\/\/DTD HTML 3 1995-03-24\/\/|^-\/\/W3C\/\/DTD HTML 3\.2 Draft\/\/|^-\/\/W3C\/\/DTD HTML 3\.2 Final\/\/|^-\/\/W3C\/\/DTD HTML 3\.2\/\/|^-\/\/W3C\/\/DTD HTML 3\.2S Draft\/\/|^-\/\/W3C\/\/DTD HTML 4\.0 Frameset\/\/|^-\/\/W3C\/\/DTD HTML 4\.0 Transitional\/\/|^-\/\/W3C\/\/DTD HTML Experimental 19960712\/\/|^-\/\/W3C\/\/DTD HTML Experimental 970421\/\/|^-\/\/W3C\/\/DTD W3 HTML\/\/|^-\/\/W3O\/\/DTD W3 HTML 3\.0\/\/|^-\/\/WebTechs\/\/DTD Mozilla HTML 2\.0\/\/|^-\/\/WebTechs\/\/DTD Mozilla HTML\/\//i;
      var Fr = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';
      var Mr =
        /^-\/\/W3C\/\/DTD HTML 4\.01 Frameset\/\/|^-\/\/W3C\/\/DTD HTML 4\.01 Transitional\/\//i;
      var Pr =
        /^-\/\/W3C\/\/DTD XHTML 1\.0 Frameset\/\/|^-\/\/W3C\/\/DTD XHTML 1\.0 Transitional\/\//i;
      var Or = Object.create(null);
      Or[lt.HTML] = {
        __proto__: null,
        address: true,
        applet: true,
        area: true,
        article: true,
        aside: true,
        base: true,
        basefont: true,
        bgsound: true,
        blockquote: true,
        body: true,
        br: true,
        button: true,
        caption: true,
        center: true,
        col: true,
        colgroup: true,
        dd: true,
        details: true,
        dir: true,
        div: true,
        dl: true,
        dt: true,
        embed: true,
        fieldset: true,
        figcaption: true,
        figure: true,
        footer: true,
        form: true,
        frame: true,
        frameset: true,
        h1: true,
        h2: true,
        h3: true,
        h4: true,
        h5: true,
        h6: true,
        head: true,
        header: true,
        hgroup: true,
        hr: true,
        html: true,
        iframe: true,
        img: true,
        input: true,
        li: true,
        link: true,
        listing: true,
        main: true,
        marquee: true,
        menu: true,
        meta: true,
        nav: true,
        noembed: true,
        noframes: true,
        noscript: true,
        object: true,
        ol: true,
        p: true,
        param: true,
        plaintext: true,
        pre: true,
        script: true,
        section: true,
        select: true,
        source: true,
        style: true,
        summary: true,
        table: true,
        tbody: true,
        td: true,
        template: true,
        textarea: true,
        tfoot: true,
        th: true,
        thead: true,
        title: true,
        tr: true,
        track: true,
        ul: true,
        wbr: true,
        xmp: true
      };
      Or[lt.SVG] = {
        __proto__: null,
        foreignObject: true,
        desc: true,
        title: true
      };
      Or[lt.MATHML] = {
        __proto__: null,
        mi: true,
        mo: true,
        mn: true,
        ms: true,
        mtext: true,
        'annotation-xml': true
      };
      var xr = Object.create(null);
      xr[lt.HTML] = { __proto__: null, address: true, div: true, p: true };
      var Ur = Object.create(null);
      Ur[lt.HTML] = { __proto__: null, dd: true, dt: true };
      var Gr = Object.create(null);
      Gr[lt.HTML] = {
        __proto__: null,
        table: true,
        thead: true,
        tbody: true,
        tfoot: true,
        tr: true
      };
      var Hr = Object.create(null);
      Hr[lt.HTML] = {
        __proto__: null,
        dd: true,
        dt: true,
        li: true,
        menuitem: true,
        optgroup: true,
        option: true,
        p: true,
        rb: true,
        rp: true,
        rt: true,
        rtc: true
      };
      var Vr = Object.create(null);
      Vr[lt.HTML] = {
        __proto__: null,
        caption: true,
        colgroup: true,
        dd: true,
        dt: true,
        li: true,
        optgroup: true,
        option: true,
        p: true,
        rb: true,
        rp: true,
        rt: true,
        rtc: true,
        tbody: true,
        td: true,
        tfoot: true,
        th: true,
        thead: true,
        tr: true
      };
      var Wr = Object.create(null);
      Wr[lt.HTML] = {
        __proto__: null,
        table: true,
        template: true,
        html: true
      };
      var Yr = Object.create(null);
      Yr[lt.HTML] = {
        __proto__: null,
        tbody: true,
        tfoot: true,
        thead: true,
        template: true,
        html: true
      };
      var jr = Object.create(null);
      jr[lt.HTML] = { __proto__: null, tr: true, template: true, html: true };
      var Jr = Object.create(null);
      Jr[lt.HTML] = {
        __proto__: null,
        button: true,
        fieldset: true,
        input: true,
        keygen: true,
        object: true,
        output: true,
        select: true,
        textarea: true,
        img: true
      };
      var zr = Object.create(null);
      zr[lt.HTML] = {
        __proto__: null,
        applet: true,
        caption: true,
        html: true,
        table: true,
        td: true,
        th: true,
        marquee: true,
        object: true,
        template: true
      };
      zr[lt.MATHML] = {
        __proto__: null,
        mi: true,
        mo: true,
        mn: true,
        ms: true,
        mtext: true,
        'annotation-xml': true
      };
      zr[lt.SVG] = {
        __proto__: null,
        foreignObject: true,
        desc: true,
        title: true
      };
      var $r = Object.create(zr);
      $r[lt.HTML] = Object.create(zr[lt.HTML]);
      $r[lt.HTML].ol = true;
      $r[lt.HTML].ul = true;
      var Kr = Object.create(zr);
      Kr[lt.HTML] = Object.create(zr[lt.HTML]);
      Kr[lt.HTML].button = true;
      var Xr = Object.create(null);
      Xr[lt.HTML] = {
        __proto__: null,
        html: true,
        table: true,
        template: true
      };
      var Zr = Object.create(null);
      Zr[lt.HTML] = { __proto__: null, optgroup: true, option: true };
      var es = Object.create(null);
      es[lt.MATHML] = {
        __proto__: null,
        mi: true,
        mo: true,
        mn: true,
        ms: true,
        mtext: true
      };
      var ts = Object.create(null);
      ts[lt.SVG] = {
        __proto__: null,
        foreignObject: true,
        desc: true,
        title: true
      };
      var rs = {
        __proto__: null,
        'xlink:actuate': lt.XLINK,
        'xlink:arcrole': lt.XLINK,
        'xlink:href': lt.XLINK,
        'xlink:role': lt.XLINK,
        'xlink:show': lt.XLINK,
        'xlink:title': lt.XLINK,
        'xlink:type': lt.XLINK,
        'xml:base': lt.XML,
        'xml:lang': lt.XML,
        'xml:space': lt.XML,
        xmlns: lt.XMLNS,
        'xmlns:xlink': lt.XMLNS
      };
      var ss = {
        __proto__: null,
        attributename: 'attributeName',
        attributetype: 'attributeType',
        basefrequency: 'baseFrequency',
        baseprofile: 'baseProfile',
        calcmode: 'calcMode',
        clippathunits: 'clipPathUnits',
        diffuseconstant: 'diffuseConstant',
        edgemode: 'edgeMode',
        filterunits: 'filterUnits',
        glyphref: 'glyphRef',
        gradienttransform: 'gradientTransform',
        gradientunits: 'gradientUnits',
        kernelmatrix: 'kernelMatrix',
        kernelunitlength: 'kernelUnitLength',
        keypoints: 'keyPoints',
        keysplines: 'keySplines',
        keytimes: 'keyTimes',
        lengthadjust: 'lengthAdjust',
        limitingconeangle: 'limitingConeAngle',
        markerheight: 'markerHeight',
        markerunits: 'markerUnits',
        markerwidth: 'markerWidth',
        maskcontentunits: 'maskContentUnits',
        maskunits: 'maskUnits',
        numoctaves: 'numOctaves',
        pathlength: 'pathLength',
        patterncontentunits: 'patternContentUnits',
        patterntransform: 'patternTransform',
        patternunits: 'patternUnits',
        pointsatx: 'pointsAtX',
        pointsaty: 'pointsAtY',
        pointsatz: 'pointsAtZ',
        preservealpha: 'preserveAlpha',
        preserveaspectratio: 'preserveAspectRatio',
        primitiveunits: 'primitiveUnits',
        refx: 'refX',
        refy: 'refY',
        repeatcount: 'repeatCount',
        repeatdur: 'repeatDur',
        requiredextensions: 'requiredExtensions',
        requiredfeatures: 'requiredFeatures',
        specularconstant: 'specularConstant',
        specularexponent: 'specularExponent',
        spreadmethod: 'spreadMethod',
        startoffset: 'startOffset',
        stddeviation: 'stdDeviation',
        stitchtiles: 'stitchTiles',
        surfacescale: 'surfaceScale',
        systemlanguage: 'systemLanguage',
        tablevalues: 'tableValues',
        targetx: 'targetX',
        targety: 'targetY',
        textlength: 'textLength',
        viewbox: 'viewBox',
        viewtarget: 'viewTarget',
        xchannelselector: 'xChannelSelector',
        ychannelselector: 'yChannelSelector',
        zoomandpan: 'zoomAndPan'
      };
      var ns = {
        __proto__: null,
        altglyph: 'altGlyph',
        altglyphdef: 'altGlyphDef',
        altglyphitem: 'altGlyphItem',
        animatecolor: 'animateColor',
        animatemotion: 'animateMotion',
        animatetransform: 'animateTransform',
        clippath: 'clipPath',
        feblend: 'feBlend',
        fecolormatrix: 'feColorMatrix',
        fecomponenttransfer: 'feComponentTransfer',
        fecomposite: 'feComposite',
        feconvolvematrix: 'feConvolveMatrix',
        fediffuselighting: 'feDiffuseLighting',
        fedisplacementmap: 'feDisplacementMap',
        fedistantlight: 'feDistantLight',
        feflood: 'feFlood',
        fefunca: 'feFuncA',
        fefuncb: 'feFuncB',
        fefuncg: 'feFuncG',
        fefuncr: 'feFuncR',
        fegaussianblur: 'feGaussianBlur',
        feimage: 'feImage',
        femerge: 'feMerge',
        femergenode: 'feMergeNode',
        femorphology: 'feMorphology',
        feoffset: 'feOffset',
        fepointlight: 'fePointLight',
        fespecularlighting: 'feSpecularLighting',
        fespotlight: 'feSpotLight',
        fetile: 'feTile',
        feturbulence: 'feTurbulence',
        foreignobject: 'foreignObject',
        glyphref: 'glyphRef',
        lineargradient: 'linearGradient',
        radialgradient: 'radialGradient',
        textpath: 'textPath'
      };
      var os = {
        __proto__: null,
        0: 65533,
        128: 8364,
        130: 8218,
        131: 402,
        132: 8222,
        133: 8230,
        134: 8224,
        135: 8225,
        136: 710,
        137: 8240,
        138: 352,
        139: 8249,
        140: 338,
        142: 381,
        145: 8216,
        146: 8217,
        147: 8220,
        148: 8221,
        149: 8226,
        150: 8211,
        151: 8212,
        152: 732,
        153: 8482,
        154: 353,
        155: 8250,
        156: 339,
        158: 382,
        159: 376
      };
      var as = {
        __proto__: null,
        AElig: 198,
        'AElig;': 198,
        AMP: 38,
        'AMP;': 38,
        Aacute: 193,
        'Aacute;': 193,
        'Abreve;': 258,
        Acirc: 194,
        'Acirc;': 194,
        'Acy;': 1040,
        'Afr;': [55349, 56580],
        Agrave: 192,
        'Agrave;': 192,
        'Alpha;': 913,
        'Amacr;': 256,
        'And;': 10835,
        'Aogon;': 260,
        'Aopf;': [55349, 56632],
        'ApplyFunction;': 8289,
        Aring: 197,
        'Aring;': 197,
        'Ascr;': [55349, 56476],
        'Assign;': 8788,
        Atilde: 195,
        'Atilde;': 195,
        Auml: 196,
        'Auml;': 196,
        'Backslash;': 8726,
        'Barv;': 10983,
        'Barwed;': 8966,
        'Bcy;': 1041,
        'Because;': 8757,
        'Bernoullis;': 8492,
        'Beta;': 914,
        'Bfr;': [55349, 56581],
        'Bopf;': [55349, 56633],
        'Breve;': 728,
        'Bscr;': 8492,
        'Bumpeq;': 8782,
        'CHcy;': 1063,
        COPY: 169,
        'COPY;': 169,
        'Cacute;': 262,
        'Cap;': 8914,
        'CapitalDifferentialD;': 8517,
        'Cayleys;': 8493,
        'Ccaron;': 268,
        Ccedil: 199,
        'Ccedil;': 199,
        'Ccirc;': 264,
        'Cconint;': 8752,
        'Cdot;': 266,
        'Cedilla;': 184,
        'CenterDot;': 183,
        'Cfr;': 8493,
        'Chi;': 935,
        'CircleDot;': 8857,
        'CircleMinus;': 8854,
        'CirclePlus;': 8853,
        'CircleTimes;': 8855,
        'ClockwiseContourIntegral;': 8754,
        'CloseCurlyDoubleQuote;': 8221,
        'CloseCurlyQuote;': 8217,
        'Colon;': 8759,
        'Colone;': 10868,
        'Congruent;': 8801,
        'Conint;': 8751,
        'ContourIntegral;': 8750,
        'Copf;': 8450,
        'Coproduct;': 8720,
        'CounterClockwiseContourIntegral;': 8755,
        'Cross;': 10799,
        'Cscr;': [55349, 56478],
        'Cup;': 8915,
        'CupCap;': 8781,
        'DD;': 8517,
        'DDotrahd;': 10513,
        'DJcy;': 1026,
        'DScy;': 1029,
        'DZcy;': 1039,
        'Dagger;': 8225,
        'Darr;': 8609,
        'Dashv;': 10980,
        'Dcaron;': 270,
        'Dcy;': 1044,
        'Del;': 8711,
        'Delta;': 916,
        'Dfr;': [55349, 56583],
        'DiacriticalAcute;': 180,
        'DiacriticalDot;': 729,
        'DiacriticalDoubleAcute;': 733,
        'DiacriticalGrave;': 96,
        'DiacriticalTilde;': 732,
        'Diamond;': 8900,
        'DifferentialD;': 8518,
        'Dopf;': [55349, 56635],
        'Dot;': 168,
        'DotDot;': 8412,
        'DotEqual;': 8784,
        'DoubleContourIntegral;': 8751,
        'DoubleDot;': 168,
        'DoubleDownArrow;': 8659,
        'DoubleLeftArrow;': 8656,
        'DoubleLeftRightArrow;': 8660,
        'DoubleLeftTee;': 10980,
        'DoubleLongLeftArrow;': 10232,
        'DoubleLongLeftRightArrow;': 10234,
        'DoubleLongRightArrow;': 10233,
        'DoubleRightArrow;': 8658,
        'DoubleRightTee;': 8872,
        'DoubleUpArrow;': 8657,
        'DoubleUpDownArrow;': 8661,
        'DoubleVerticalBar;': 8741,
        'DownArrow;': 8595,
        'DownArrowBar;': 10515,
        'DownArrowUpArrow;': 8693,
        'DownBreve;': 785,
        'DownLeftRightVector;': 10576,
        'DownLeftTeeVector;': 10590,
        'DownLeftVector;': 8637,
        'DownLeftVectorBar;': 10582,
        'DownRightTeeVector;': 10591,
        'DownRightVector;': 8641,
        'DownRightVectorBar;': 10583,
        'DownTee;': 8868,
        'DownTeeArrow;': 8615,
        'Downarrow;': 8659,
        'Dscr;': [55349, 56479],
        'Dstrok;': 272,
        'ENG;': 330,
        ETH: 208,
        'ETH;': 208,
        Eacute: 201,
        'Eacute;': 201,
        'Ecaron;': 282,
        Ecirc: 202,
        'Ecirc;': 202,
        'Ecy;': 1069,
        'Edot;': 278,
        'Efr;': [55349, 56584],
        Egrave: 200,
        'Egrave;': 200,
        'Element;': 8712,
        'Emacr;': 274,
        'EmptySmallSquare;': 9723,
        'EmptyVerySmallSquare;': 9643,
        'Eogon;': 280,
        'Eopf;': [55349, 56636],
        'Epsilon;': 917,
        'Equal;': 10869,
        'EqualTilde;': 8770,
        'Equilibrium;': 8652,
        'Escr;': 8496,
        'Esim;': 10867,
        'Eta;': 919,
        Euml: 203,
        'Euml;': 203,
        'Exists;': 8707,
        'ExponentialE;': 8519,
        'Fcy;': 1060,
        'Ffr;': [55349, 56585],
        'FilledSmallSquare;': 9724,
        'FilledVerySmallSquare;': 9642,
        'Fopf;': [55349, 56637],
        'ForAll;': 8704,
        'Fouriertrf;': 8497,
        'Fscr;': 8497,
        'GJcy;': 1027,
        GT: 62,
        'GT;': 62,
        'Gamma;': 915,
        'Gammad;': 988,
        'Gbreve;': 286,
        'Gcedil;': 290,
        'Gcirc;': 284,
        'Gcy;': 1043,
        'Gdot;': 288,
        'Gfr;': [55349, 56586],
        'Gg;': 8921,
        'Gopf;': [55349, 56638],
        'GreaterEqual;': 8805,
        'GreaterEqualLess;': 8923,
        'GreaterFullEqual;': 8807,
        'GreaterGreater;': 10914,
        'GreaterLess;': 8823,
        'GreaterSlantEqual;': 10878,
        'GreaterTilde;': 8819,
        'Gscr;': [55349, 56482],
        'Gt;': 8811,
        'HARDcy;': 1066,
        'Hacek;': 711,
        'Hat;': 94,
        'Hcirc;': 292,
        'Hfr;': 8460,
        'HilbertSpace;': 8459,
        'Hopf;': 8461,
        'HorizontalLine;': 9472,
        'Hscr;': 8459,
        'Hstrok;': 294,
        'HumpDownHump;': 8782,
        'HumpEqual;': 8783,
        'IEcy;': 1045,
        'IJlig;': 306,
        'IOcy;': 1025,
        Iacute: 205,
        'Iacute;': 205,
        Icirc: 206,
        'Icirc;': 206,
        'Icy;': 1048,
        'Idot;': 304,
        'Ifr;': 8465,
        Igrave: 204,
        'Igrave;': 204,
        'Im;': 8465,
        'Imacr;': 298,
        'ImaginaryI;': 8520,
        'Implies;': 8658,
        'Int;': 8748,
        'Integral;': 8747,
        'Intersection;': 8898,
        'InvisibleComma;': 8291,
        'InvisibleTimes;': 8290,
        'Iogon;': 302,
        'Iopf;': [55349, 56640],
        'Iota;': 921,
        'Iscr;': 8464,
        'Itilde;': 296,
        'Iukcy;': 1030,
        Iuml: 207,
        'Iuml;': 207,
        'Jcirc;': 308,
        'Jcy;': 1049,
        'Jfr;': [55349, 56589],
        'Jopf;': [55349, 56641],
        'Jscr;': [55349, 56485],
        'Jsercy;': 1032,
        'Jukcy;': 1028,
        'KHcy;': 1061,
        'KJcy;': 1036,
        'Kappa;': 922,
        'Kcedil;': 310,
        'Kcy;': 1050,
        'Kfr;': [55349, 56590],
        'Kopf;': [55349, 56642],
        'Kscr;': [55349, 56486],
        'LJcy;': 1033,
        LT: 60,
        'LT;': 60,
        'Lacute;': 313,
        'Lambda;': 923,
        'Lang;': 10218,
        'Laplacetrf;': 8466,
        'Larr;': 8606,
        'Lcaron;': 317,
        'Lcedil;': 315,
        'Lcy;': 1051,
        'LeftAngleBracket;': 10216,
        'LeftArrow;': 8592,
        'LeftArrowBar;': 8676,
        'LeftArrowRightArrow;': 8646,
        'LeftCeiling;': 8968,
        'LeftDoubleBracket;': 10214,
        'LeftDownTeeVector;': 10593,
        'LeftDownVector;': 8643,
        'LeftDownVectorBar;': 10585,
        'LeftFloor;': 8970,
        'LeftRightArrow;': 8596,
        'LeftRightVector;': 10574,
        'LeftTee;': 8867,
        'LeftTeeArrow;': 8612,
        'LeftTeeVector;': 10586,
        'LeftTriangle;': 8882,
        'LeftTriangleBar;': 10703,
        'LeftTriangleEqual;': 8884,
        'LeftUpDownVector;': 10577,
        'LeftUpTeeVector;': 10592,
        'LeftUpVector;': 8639,
        'LeftUpVectorBar;': 10584,
        'LeftVector;': 8636,
        'LeftVectorBar;': 10578,
        'Leftarrow;': 8656,
        'Leftrightarrow;': 8660,
        'LessEqualGreater;': 8922,
        'LessFullEqual;': 8806,
        'LessGreater;': 8822,
        'LessLess;': 10913,
        'LessSlantEqual;': 10877,
        'LessTilde;': 8818,
        'Lfr;': [55349, 56591],
        'Ll;': 8920,
        'Lleftarrow;': 8666,
        'Lmidot;': 319,
        'LongLeftArrow;': 10229,
        'LongLeftRightArrow;': 10231,
        'LongRightArrow;': 10230,
        'Longleftarrow;': 10232,
        'Longleftrightarrow;': 10234,
        'Longrightarrow;': 10233,
        'Lopf;': [55349, 56643],
        'LowerLeftArrow;': 8601,
        'LowerRightArrow;': 8600,
        'Lscr;': 8466,
        'Lsh;': 8624,
        'Lstrok;': 321,
        'Lt;': 8810,
        'Map;': 10501,
        'Mcy;': 1052,
        'MediumSpace;': 8287,
        'Mellintrf;': 8499,
        'Mfr;': [55349, 56592],
        'MinusPlus;': 8723,
        'Mopf;': [55349, 56644],
        'Mscr;': 8499,
        'Mu;': 924,
        'NJcy;': 1034,
        'Nacute;': 323,
        'Ncaron;': 327,
        'Ncedil;': 325,
        'Ncy;': 1053,
        'NegativeMediumSpace;': 8203,
        'NegativeThickSpace;': 8203,
        'NegativeThinSpace;': 8203,
        'NegativeVeryThinSpace;': 8203,
        'NestedGreaterGreater;': 8811,
        'NestedLessLess;': 8810,
        'NewLine;': 10,
        'Nfr;': [55349, 56593],
        'NoBreak;': 8288,
        'NonBreakingSpace;': 160,
        'Nopf;': 8469,
        'Not;': 10988,
        'NotCongruent;': 8802,
        'NotCupCap;': 8813,
        'NotDoubleVerticalBar;': 8742,
        'NotElement;': 8713,
        'NotEqual;': 8800,
        'NotEqualTilde;': [8770, 824],
        'NotExists;': 8708,
        'NotGreater;': 8815,
        'NotGreaterEqual;': 8817,
        'NotGreaterFullEqual;': [8807, 824],
        'NotGreaterGreater;': [8811, 824],
        'NotGreaterLess;': 8825,
        'NotGreaterSlantEqual;': [10878, 824],
        'NotGreaterTilde;': 8821,
        'NotHumpDownHump;': [8782, 824],
        'NotHumpEqual;': [8783, 824],
        'NotLeftTriangle;': 8938,
        'NotLeftTriangleBar;': [10703, 824],
        'NotLeftTriangleEqual;': 8940,
        'NotLess;': 8814,
        'NotLessEqual;': 8816,
        'NotLessGreater;': 8824,
        'NotLessLess;': [8810, 824],
        'NotLessSlantEqual;': [10877, 824],
        'NotLessTilde;': 8820,
        'NotNestedGreaterGreater;': [10914, 824],
        'NotNestedLessLess;': [10913, 824],
        'NotPrecedes;': 8832,
        'NotPrecedesEqual;': [10927, 824],
        'NotPrecedesSlantEqual;': 8928,
        'NotReverseElement;': 8716,
        'NotRightTriangle;': 8939,
        'NotRightTriangleBar;': [10704, 824],
        'NotRightTriangleEqual;': 8941,
        'NotSquareSubset;': [8847, 824],
        'NotSquareSubsetEqual;': 8930,
        'NotSquareSuperset;': [8848, 824],
        'NotSquareSupersetEqual;': 8931,
        'NotSubset;': [8834, 8402],
        'NotSubsetEqual;': 8840,
        'NotSucceeds;': 8833,
        'NotSucceedsEqual;': [10928, 824],
        'NotSucceedsSlantEqual;': 8929,
        'NotSucceedsTilde;': [8831, 824],
        'NotSuperset;': [8835, 8402],
        'NotSupersetEqual;': 8841,
        'NotTilde;': 8769,
        'NotTildeEqual;': 8772,
        'NotTildeFullEqual;': 8775,
        'NotTildeTilde;': 8777,
        'NotVerticalBar;': 8740,
        'Nscr;': [55349, 56489],
        Ntilde: 209,
        'Ntilde;': 209,
        'Nu;': 925,
        'OElig;': 338,
        Oacute: 211,
        'Oacute;': 211,
        Ocirc: 212,
        'Ocirc;': 212,
        'Ocy;': 1054,
        'Odblac;': 336,
        'Ofr;': [55349, 56594],
        Ograve: 210,
        'Ograve;': 210,
        'Omacr;': 332,
        'Omega;': 937,
        'Omicron;': 927,
        'Oopf;': [55349, 56646],
        'OpenCurlyDoubleQuote;': 8220,
        'OpenCurlyQuote;': 8216,
        'Or;': 10836,
        'Oscr;': [55349, 56490],
        Oslash: 216,
        'Oslash;': 216,
        Otilde: 213,
        'Otilde;': 213,
        'Otimes;': 10807,
        Ouml: 214,
        'Ouml;': 214,
        'OverBar;': 8254,
        'OverBrace;': 9182,
        'OverBracket;': 9140,
        'OverParenthesis;': 9180,
        'PartialD;': 8706,
        'Pcy;': 1055,
        'Pfr;': [55349, 56595],
        'Phi;': 934,
        'Pi;': 928,
        'PlusMinus;': 177,
        'Poincareplane;': 8460,
        'Popf;': 8473,
        'Pr;': 10939,
        'Precedes;': 8826,
        'PrecedesEqual;': 10927,
        'PrecedesSlantEqual;': 8828,
        'PrecedesTilde;': 8830,
        'Prime;': 8243,
        'Product;': 8719,
        'Proportion;': 8759,
        'Proportional;': 8733,
        'Pscr;': [55349, 56491],
        'Psi;': 936,
        QUOT: 34,
        'QUOT;': 34,
        'Qfr;': [55349, 56596],
        'Qopf;': 8474,
        'Qscr;': [55349, 56492],
        'RBarr;': 10512,
        REG: 174,
        'REG;': 174,
        'Racute;': 340,
        'Rang;': 10219,
        'Rarr;': 8608,
        'Rarrtl;': 10518,
        'Rcaron;': 344,
        'Rcedil;': 342,
        'Rcy;': 1056,
        'Re;': 8476,
        'ReverseElement;': 8715,
        'ReverseEquilibrium;': 8651,
        'ReverseUpEquilibrium;': 10607,
        'Rfr;': 8476,
        'Rho;': 929,
        'RightAngleBracket;': 10217,
        'RightArrow;': 8594,
        'RightArrowBar;': 8677,
        'RightArrowLeftArrow;': 8644,
        'RightCeiling;': 8969,
        'RightDoubleBracket;': 10215,
        'RightDownTeeVector;': 10589,
        'RightDownVector;': 8642,
        'RightDownVectorBar;': 10581,
        'RightFloor;': 8971,
        'RightTee;': 8866,
        'RightTeeArrow;': 8614,
        'RightTeeVector;': 10587,
        'RightTriangle;': 8883,
        'RightTriangleBar;': 10704,
        'RightTriangleEqual;': 8885,
        'RightUpDownVector;': 10575,
        'RightUpTeeVector;': 10588,
        'RightUpVector;': 8638,
        'RightUpVectorBar;': 10580,
        'RightVector;': 8640,
        'RightVectorBar;': 10579,
        'Rightarrow;': 8658,
        'Ropf;': 8477,
        'RoundImplies;': 10608,
        'Rrightarrow;': 8667,
        'Rscr;': 8475,
        'Rsh;': 8625,
        'RuleDelayed;': 10740,
        'SHCHcy;': 1065,
        'SHcy;': 1064,
        'SOFTcy;': 1068,
        'Sacute;': 346,
        'Sc;': 10940,
        'Scaron;': 352,
        'Scedil;': 350,
        'Scirc;': 348,
        'Scy;': 1057,
        'Sfr;': [55349, 56598],
        'ShortDownArrow;': 8595,
        'ShortLeftArrow;': 8592,
        'ShortRightArrow;': 8594,
        'ShortUpArrow;': 8593,
        'Sigma;': 931,
        'SmallCircle;': 8728,
        'Sopf;': [55349, 56650],
        'Sqrt;': 8730,
        'Square;': 9633,
        'SquareIntersection;': 8851,
        'SquareSubset;': 8847,
        'SquareSubsetEqual;': 8849,
        'SquareSuperset;': 8848,
        'SquareSupersetEqual;': 8850,
        'SquareUnion;': 8852,
        'Sscr;': [55349, 56494],
        'Star;': 8902,
        'Sub;': 8912,
        'Subset;': 8912,
        'SubsetEqual;': 8838,
        'Succeeds;': 8827,
        'SucceedsEqual;': 10928,
        'SucceedsSlantEqual;': 8829,
        'SucceedsTilde;': 8831,
        'SuchThat;': 8715,
        'Sum;': 8721,
        'Sup;': 8913,
        'Superset;': 8835,
        'SupersetEqual;': 8839,
        'Supset;': 8913,
        THORN: 222,
        'THORN;': 222,
        'TRADE;': 8482,
        'TSHcy;': 1035,
        'TScy;': 1062,
        'Tab;': 9,
        'Tau;': 932,
        'Tcaron;': 356,
        'Tcedil;': 354,
        'Tcy;': 1058,
        'Tfr;': [55349, 56599],
        'Therefore;': 8756,
        'Theta;': 920,
        'ThickSpace;': [8287, 8202],
        'ThinSpace;': 8201,
        'Tilde;': 8764,
        'TildeEqual;': 8771,
        'TildeFullEqual;': 8773,
        'TildeTilde;': 8776,
        'Topf;': [55349, 56651],
        'TripleDot;': 8411,
        'Tscr;': [55349, 56495],
        'Tstrok;': 358,
        Uacute: 218,
        'Uacute;': 218,
        'Uarr;': 8607,
        'Uarrocir;': 10569,
        'Ubrcy;': 1038,
        'Ubreve;': 364,
        Ucirc: 219,
        'Ucirc;': 219,
        'Ucy;': 1059,
        'Udblac;': 368,
        'Ufr;': [55349, 56600],
        Ugrave: 217,
        'Ugrave;': 217,
        'Umacr;': 362,
        'UnderBar;': 95,
        'UnderBrace;': 9183,
        'UnderBracket;': 9141,
        'UnderParenthesis;': 9181,
        'Union;': 8899,
        'UnionPlus;': 8846,
        'Uogon;': 370,
        'Uopf;': [55349, 56652],
        'UpArrow;': 8593,
        'UpArrowBar;': 10514,
        'UpArrowDownArrow;': 8645,
        'UpDownArrow;': 8597,
        'UpEquilibrium;': 10606,
        'UpTee;': 8869,
        'UpTeeArrow;': 8613,
        'Uparrow;': 8657,
        'Updownarrow;': 8661,
        'UpperLeftArrow;': 8598,
        'UpperRightArrow;': 8599,
        'Upsi;': 978,
        'Upsilon;': 933,
        'Uring;': 366,
        'Uscr;': [55349, 56496],
        'Utilde;': 360,
        Uuml: 220,
        'Uuml;': 220,
        'VDash;': 8875,
        'Vbar;': 10987,
        'Vcy;': 1042,
        'Vdash;': 8873,
        'Vdashl;': 10982,
        'Vee;': 8897,
        'Verbar;': 8214,
        'Vert;': 8214,
        'VerticalBar;': 8739,
        'VerticalLine;': 124,
        'VerticalSeparator;': 10072,
        'VerticalTilde;': 8768,
        'VeryThinSpace;': 8202,
        'Vfr;': [55349, 56601],
        'Vopf;': [55349, 56653],
        'Vscr;': [55349, 56497],
        'Vvdash;': 8874,
        'Wcirc;': 372,
        'Wedge;': 8896,
        'Wfr;': [55349, 56602],
        'Wopf;': [55349, 56654],
        'Wscr;': [55349, 56498],
        'Xfr;': [55349, 56603],
        'Xi;': 926,
        'Xopf;': [55349, 56655],
        'Xscr;': [55349, 56499],
        'YAcy;': 1071,
        'YIcy;': 1031,
        'YUcy;': 1070,
        Yacute: 221,
        'Yacute;': 221,
        'Ycirc;': 374,
        'Ycy;': 1067,
        'Yfr;': [55349, 56604],
        'Yopf;': [55349, 56656],
        'Yscr;': [55349, 56500],
        'Yuml;': 376,
        'ZHcy;': 1046,
        'Zacute;': 377,
        'Zcaron;': 381,
        'Zcy;': 1047,
        'Zdot;': 379,
        'ZeroWidthSpace;': 8203,
        'Zeta;': 918,
        'Zfr;': 8488,
        'Zopf;': 8484,
        'Zscr;': [55349, 56501],
        aacute: 225,
        'aacute;': 225,
        'abreve;': 259,
        'ac;': 8766,
        'acE;': [8766, 819],
        'acd;': 8767,
        acirc: 226,
        'acirc;': 226,
        acute: 180,
        'acute;': 180,
        'acy;': 1072,
        aelig: 230,
        'aelig;': 230,
        'af;': 8289,
        'afr;': [55349, 56606],
        agrave: 224,
        'agrave;': 224,
        'alefsym;': 8501,
        'aleph;': 8501,
        'alpha;': 945,
        'amacr;': 257,
        'amalg;': 10815,
        amp: 38,
        'amp;': 38,
        'and;': 8743,
        'andand;': 10837,
        'andd;': 10844,
        'andslope;': 10840,
        'andv;': 10842,
        'ang;': 8736,
        'ange;': 10660,
        'angle;': 8736,
        'angmsd;': 8737,
        'angmsdaa;': 10664,
        'angmsdab;': 10665,
        'angmsdac;': 10666,
        'angmsdad;': 10667,
        'angmsdae;': 10668,
        'angmsdaf;': 10669,
        'angmsdag;': 10670,
        'angmsdah;': 10671,
        'angrt;': 8735,
        'angrtvb;': 8894,
        'angrtvbd;': 10653,
        'angsph;': 8738,
        'angst;': 197,
        'angzarr;': 9084,
        'aogon;': 261,
        'aopf;': [55349, 56658],
        'ap;': 8776,
        'apE;': 10864,
        'apacir;': 10863,
        'ape;': 8778,
        'apid;': 8779,
        'apos;': 39,
        'approx;': 8776,
        'approxeq;': 8778,
        aring: 229,
        'aring;': 229,
        'ascr;': [55349, 56502],
        'ast;': 42,
        'asymp;': 8776,
        'asympeq;': 8781,
        atilde: 227,
        'atilde;': 227,
        auml: 228,
        'auml;': 228,
        'awconint;': 8755,
        'awint;': 10769,
        'bNot;': 10989,
        'backcong;': 8780,
        'backepsilon;': 1014,
        'backprime;': 8245,
        'backsim;': 8765,
        'backsimeq;': 8909,
        'barvee;': 8893,
        'barwed;': 8965,
        'barwedge;': 8965,
        'bbrk;': 9141,
        'bbrktbrk;': 9142,
        'bcong;': 8780,
        'bcy;': 1073,
        'bdquo;': 8222,
        'becaus;': 8757,
        'because;': 8757,
        'bemptyv;': 10672,
        'bepsi;': 1014,
        'bernou;': 8492,
        'beta;': 946,
        'beth;': 8502,
        'between;': 8812,
        'bfr;': [55349, 56607],
        'bigcap;': 8898,
        'bigcirc;': 9711,
        'bigcup;': 8899,
        'bigodot;': 10752,
        'bigoplus;': 10753,
        'bigotimes;': 10754,
        'bigsqcup;': 10758,
        'bigstar;': 9733,
        'bigtriangledown;': 9661,
        'bigtriangleup;': 9651,
        'biguplus;': 10756,
        'bigvee;': 8897,
        'bigwedge;': 8896,
        'bkarow;': 10509,
        'blacklozenge;': 10731,
        'blacksquare;': 9642,
        'blacktriangle;': 9652,
        'blacktriangledown;': 9662,
        'blacktriangleleft;': 9666,
        'blacktriangleright;': 9656,
        'blank;': 9251,
        'blk12;': 9618,
        'blk14;': 9617,
        'blk34;': 9619,
        'block;': 9608,
        'bne;': [61, 8421],
        'bnequiv;': [8801, 8421],
        'bnot;': 8976,
        'bopf;': [55349, 56659],
        'bot;': 8869,
        'bottom;': 8869,
        'bowtie;': 8904,
        'boxDL;': 9559,
        'boxDR;': 9556,
        'boxDl;': 9558,
        'boxDr;': 9555,
        'boxH;': 9552,
        'boxHD;': 9574,
        'boxHU;': 9577,
        'boxHd;': 9572,
        'boxHu;': 9575,
        'boxUL;': 9565,
        'boxUR;': 9562,
        'boxUl;': 9564,
        'boxUr;': 9561,
        'boxV;': 9553,
        'boxVH;': 9580,
        'boxVL;': 9571,
        'boxVR;': 9568,
        'boxVh;': 9579,
        'boxVl;': 9570,
        'boxVr;': 9567,
        'boxbox;': 10697,
        'boxdL;': 9557,
        'boxdR;': 9554,
        'boxdl;': 9488,
        'boxdr;': 9484,
        'boxh;': 9472,
        'boxhD;': 9573,
        'boxhU;': 9576,
        'boxhd;': 9516,
        'boxhu;': 9524,
        'boxminus;': 8863,
        'boxplus;': 8862,
        'boxtimes;': 8864,
        'boxuL;': 9563,
        'boxuR;': 9560,
        'boxul;': 9496,
        'boxur;': 9492,
        'boxv;': 9474,
        'boxvH;': 9578,
        'boxvL;': 9569,
        'boxvR;': 9566,
        'boxvh;': 9532,
        'boxvl;': 9508,
        'boxvr;': 9500,
        'bprime;': 8245,
        'breve;': 728,
        brvbar: 166,
        'brvbar;': 166,
        'bscr;': [55349, 56503],
        'bsemi;': 8271,
        'bsim;': 8765,
        'bsime;': 8909,
        'bsol;': 92,
        'bsolb;': 10693,
        'bsolhsub;': 10184,
        'bull;': 8226,
        'bullet;': 8226,
        'bump;': 8782,
        'bumpE;': 10926,
        'bumpe;': 8783,
        'bumpeq;': 8783,
        'cacute;': 263,
        'cap;': 8745,
        'capand;': 10820,
        'capbrcup;': 10825,
        'capcap;': 10827,
        'capcup;': 10823,
        'capdot;': 10816,
        'caps;': [8745, 65024],
        'caret;': 8257,
        'caron;': 711,
        'ccaps;': 10829,
        'ccaron;': 269,
        ccedil: 231,
        'ccedil;': 231,
        'ccirc;': 265,
        'ccups;': 10828,
        'ccupssm;': 10832,
        'cdot;': 267,
        cedil: 184,
        'cedil;': 184,
        'cemptyv;': 10674,
        cent: 162,
        'cent;': 162,
        'centerdot;': 183,
        'cfr;': [55349, 56608],
        'chcy;': 1095,
        'check;': 10003,
        'checkmark;': 10003,
        'chi;': 967,
        'cir;': 9675,
        'cirE;': 10691,
        'circ;': 710,
        'circeq;': 8791,
        'circlearrowleft;': 8634,
        'circlearrowright;': 8635,
        'circledR;': 174,
        'circledS;': 9416,
        'circledast;': 8859,
        'circledcirc;': 8858,
        'circleddash;': 8861,
        'cire;': 8791,
        'cirfnint;': 10768,
        'cirmid;': 10991,
        'cirscir;': 10690,
        'clubs;': 9827,
        'clubsuit;': 9827,
        'colon;': 58,
        'colone;': 8788,
        'coloneq;': 8788,
        'comma;': 44,
        'commat;': 64,
        'comp;': 8705,
        'compfn;': 8728,
        'complement;': 8705,
        'complexes;': 8450,
        'cong;': 8773,
        'congdot;': 10861,
        'conint;': 8750,
        'copf;': [55349, 56660],
        'coprod;': 8720,
        copy: 169,
        'copy;': 169,
        'copysr;': 8471,
        'crarr;': 8629,
        'cross;': 10007,
        'cscr;': [55349, 56504],
        'csub;': 10959,
        'csube;': 10961,
        'csup;': 10960,
        'csupe;': 10962,
        'ctdot;': 8943,
        'cudarrl;': 10552,
        'cudarrr;': 10549,
        'cuepr;': 8926,
        'cuesc;': 8927,
        'cularr;': 8630,
        'cularrp;': 10557,
        'cup;': 8746,
        'cupbrcap;': 10824,
        'cupcap;': 10822,
        'cupcup;': 10826,
        'cupdot;': 8845,
        'cupor;': 10821,
        'cups;': [8746, 65024],
        'curarr;': 8631,
        'curarrm;': 10556,
        'curlyeqprec;': 8926,
        'curlyeqsucc;': 8927,
        'curlyvee;': 8910,
        'curlywedge;': 8911,
        curren: 164,
        'curren;': 164,
        'curvearrowleft;': 8630,
        'curvearrowright;': 8631,
        'cuvee;': 8910,
        'cuwed;': 8911,
        'cwconint;': 8754,
        'cwint;': 8753,
        'cylcty;': 9005,
        'dArr;': 8659,
        'dHar;': 10597,
        'dagger;': 8224,
        'daleth;': 8504,
        'darr;': 8595,
        'dash;': 8208,
        'dashv;': 8867,
        'dbkarow;': 10511,
        'dblac;': 733,
        'dcaron;': 271,
        'dcy;': 1076,
        'dd;': 8518,
        'ddagger;': 8225,
        'ddarr;': 8650,
        'ddotseq;': 10871,
        deg: 176,
        'deg;': 176,
        'delta;': 948,
        'demptyv;': 10673,
        'dfisht;': 10623,
        'dfr;': [55349, 56609],
        'dharl;': 8643,
        'dharr;': 8642,
        'diam;': 8900,
        'diamond;': 8900,
        'diamondsuit;': 9830,
        'diams;': 9830,
        'die;': 168,
        'digamma;': 989,
        'disin;': 8946,
        'div;': 247,
        divide: 247,
        'divide;': 247,
        'divideontimes;': 8903,
        'divonx;': 8903,
        'djcy;': 1106,
        'dlcorn;': 8990,
        'dlcrop;': 8973,
        'dollar;': 36,
        'dopf;': [55349, 56661],
        'dot;': 729,
        'doteq;': 8784,
        'doteqdot;': 8785,
        'dotminus;': 8760,
        'dotplus;': 8724,
        'dotsquare;': 8865,
        'doublebarwedge;': 8966,
        'downarrow;': 8595,
        'downdownarrows;': 8650,
        'downharpoonleft;': 8643,
        'downharpoonright;': 8642,
        'drbkarow;': 10512,
        'drcorn;': 8991,
        'drcrop;': 8972,
        'dscr;': [55349, 56505],
        'dscy;': 1109,
        'dsol;': 10742,
        'dstrok;': 273,
        'dtdot;': 8945,
        'dtri;': 9663,
        'dtrif;': 9662,
        'duarr;': 8693,
        'duhar;': 10607,
        'dwangle;': 10662,
        'dzcy;': 1119,
        'dzigrarr;': 10239,
        'eDDot;': 10871,
        'eDot;': 8785,
        eacute: 233,
        'eacute;': 233,
        'easter;': 10862,
        'ecaron;': 283,
        'ecir;': 8790,
        ecirc: 234,
        'ecirc;': 234,
        'ecolon;': 8789,
        'ecy;': 1101,
        'edot;': 279,
        'ee;': 8519,
        'efDot;': 8786,
        'efr;': [55349, 56610],
        'eg;': 10906,
        egrave: 232,
        'egrave;': 232,
        'egs;': 10902,
        'egsdot;': 10904,
        'el;': 10905,
        'elinters;': 9191,
        'ell;': 8467,
        'els;': 10901,
        'elsdot;': 10903,
        'emacr;': 275,
        'empty;': 8709,
        'emptyset;': 8709,
        'emptyv;': 8709,
        'emsp13;': 8196,
        'emsp14;': 8197,
        'emsp;': 8195,
        'eng;': 331,
        'ensp;': 8194,
        'eogon;': 281,
        'eopf;': [55349, 56662],
        'epar;': 8917,
        'eparsl;': 10723,
        'eplus;': 10865,
        'epsi;': 949,
        'epsilon;': 949,
        'epsiv;': 1013,
        'eqcirc;': 8790,
        'eqcolon;': 8789,
        'eqsim;': 8770,
        'eqslantgtr;': 10902,
        'eqslantless;': 10901,
        'equals;': 61,
        'equest;': 8799,
        'equiv;': 8801,
        'equivDD;': 10872,
        'eqvparsl;': 10725,
        'erDot;': 8787,
        'erarr;': 10609,
        'escr;': 8495,
        'esdot;': 8784,
        'esim;': 8770,
        'eta;': 951,
        eth: 240,
        'eth;': 240,
        euml: 235,
        'euml;': 235,
        'euro;': 8364,
        'excl;': 33,
        'exist;': 8707,
        'expectation;': 8496,
        'exponentiale;': 8519,
        'fallingdotseq;': 8786,
        'fcy;': 1092,
        'female;': 9792,
        'ffilig;': 64259,
        'fflig;': 64256,
        'ffllig;': 64260,
        'ffr;': [55349, 56611],
        'filig;': 64257,
        'fjlig;': [102, 106],
        'flat;': 9837,
        'fllig;': 64258,
        'fltns;': 9649,
        'fnof;': 402,
        'fopf;': [55349, 56663],
        'forall;': 8704,
        'fork;': 8916,
        'forkv;': 10969,
        'fpartint;': 10765,
        frac12: 189,
        'frac12;': 189,
        'frac13;': 8531,
        frac14: 188,
        'frac14;': 188,
        'frac15;': 8533,
        'frac16;': 8537,
        'frac18;': 8539,
        'frac23;': 8532,
        'frac25;': 8534,
        frac34: 190,
        'frac34;': 190,
        'frac35;': 8535,
        'frac38;': 8540,
        'frac45;': 8536,
        'frac56;': 8538,
        'frac58;': 8541,
        'frac78;': 8542,
        'frasl;': 8260,
        'frown;': 8994,
        'fscr;': [55349, 56507],
        'gE;': 8807,
        'gEl;': 10892,
        'gacute;': 501,
        'gamma;': 947,
        'gammad;': 989,
        'gap;': 10886,
        'gbreve;': 287,
        'gcirc;': 285,
        'gcy;': 1075,
        'gdot;': 289,
        'ge;': 8805,
        'gel;': 8923,
        'geq;': 8805,
        'geqq;': 8807,
        'geqslant;': 10878,
        'ges;': 10878,
        'gescc;': 10921,
        'gesdot;': 10880,
        'gesdoto;': 10882,
        'gesdotol;': 10884,
        'gesl;': [8923, 65024],
        'gesles;': 10900,
        'gfr;': [55349, 56612],
        'gg;': 8811,
        'ggg;': 8921,
        'gimel;': 8503,
        'gjcy;': 1107,
        'gl;': 8823,
        'glE;': 10898,
        'gla;': 10917,
        'glj;': 10916,
        'gnE;': 8809,
        'gnap;': 10890,
        'gnapprox;': 10890,
        'gne;': 10888,
        'gneq;': 10888,
        'gneqq;': 8809,
        'gnsim;': 8935,
        'gopf;': [55349, 56664],
        'grave;': 96,
        'gscr;': 8458,
        'gsim;': 8819,
        'gsime;': 10894,
        'gsiml;': 10896,
        gt: 62,
        'gt;': 62,
        'gtcc;': 10919,
        'gtcir;': 10874,
        'gtdot;': 8919,
        'gtlPar;': 10645,
        'gtquest;': 10876,
        'gtrapprox;': 10886,
        'gtrarr;': 10616,
        'gtrdot;': 8919,
        'gtreqless;': 8923,
        'gtreqqless;': 10892,
        'gtrless;': 8823,
        'gtrsim;': 8819,
        'gvertneqq;': [8809, 65024],
        'gvnE;': [8809, 65024],
        'hArr;': 8660,
        'hairsp;': 8202,
        'half;': 189,
        'hamilt;': 8459,
        'hardcy;': 1098,
        'harr;': 8596,
        'harrcir;': 10568,
        'harrw;': 8621,
        'hbar;': 8463,
        'hcirc;': 293,
        'hearts;': 9829,
        'heartsuit;': 9829,
        'hellip;': 8230,
        'hercon;': 8889,
        'hfr;': [55349, 56613],
        'hksearow;': 10533,
        'hkswarow;': 10534,
        'hoarr;': 8703,
        'homtht;': 8763,
        'hookleftarrow;': 8617,
        'hookrightarrow;': 8618,
        'hopf;': [55349, 56665],
        'horbar;': 8213,
        'hscr;': [55349, 56509],
        'hslash;': 8463,
        'hstrok;': 295,
        'hybull;': 8259,
        'hyphen;': 8208,
        iacute: 237,
        'iacute;': 237,
        'ic;': 8291,
        icirc: 238,
        'icirc;': 238,
        'icy;': 1080,
        'iecy;': 1077,
        iexcl: 161,
        'iexcl;': 161,
        'iff;': 8660,
        'ifr;': [55349, 56614],
        igrave: 236,
        'igrave;': 236,
        'ii;': 8520,
        'iiiint;': 10764,
        'iiint;': 8749,
        'iinfin;': 10716,
        'iiota;': 8489,
        'ijlig;': 307,
        'imacr;': 299,
        'image;': 8465,
        'imagline;': 8464,
        'imagpart;': 8465,
        'imath;': 305,
        'imof;': 8887,
        'imped;': 437,
        'in;': 8712,
        'incare;': 8453,
        'infin;': 8734,
        'infintie;': 10717,
        'inodot;': 305,
        'int;': 8747,
        'intcal;': 8890,
        'integers;': 8484,
        'intercal;': 8890,
        'intlarhk;': 10775,
        'intprod;': 10812,
        'iocy;': 1105,
        'iogon;': 303,
        'iopf;': [55349, 56666],
        'iota;': 953,
        'iprod;': 10812,
        iquest: 191,
        'iquest;': 191,
        'iscr;': [55349, 56510],
        'isin;': 8712,
        'isinE;': 8953,
        'isindot;': 8949,
        'isins;': 8948,
        'isinsv;': 8947,
        'isinv;': 8712,
        'it;': 8290,
        'itilde;': 297,
        'iukcy;': 1110,
        iuml: 239,
        'iuml;': 239,
        'jcirc;': 309,
        'jcy;': 1081,
        'jfr;': [55349, 56615],
        'jmath;': 567,
        'jopf;': [55349, 56667],
        'jscr;': [55349, 56511],
        'jsercy;': 1112,
        'jukcy;': 1108,
        'kappa;': 954,
        'kappav;': 1008,
        'kcedil;': 311,
        'kcy;': 1082,
        'kfr;': [55349, 56616],
        'kgreen;': 312,
        'khcy;': 1093,
        'kjcy;': 1116,
        'kopf;': [55349, 56668],
        'kscr;': [55349, 56512],
        'lAarr;': 8666,
        'lArr;': 8656,
        'lAtail;': 10523,
        'lBarr;': 10510,
        'lE;': 8806,
        'lEg;': 10891,
        'lHar;': 10594,
        'lacute;': 314,
        'laemptyv;': 10676,
        'lagran;': 8466,
        'lambda;': 955,
        'lang;': 10216,
        'langd;': 10641,
        'langle;': 10216,
        'lap;': 10885,
        laquo: 171,
        'laquo;': 171,
        'larr;': 8592,
        'larrb;': 8676,
        'larrbfs;': 10527,
        'larrfs;': 10525,
        'larrhk;': 8617,
        'larrlp;': 8619,
        'larrpl;': 10553,
        'larrsim;': 10611,
        'larrtl;': 8610,
        'lat;': 10923,
        'latail;': 10521,
        'late;': 10925,
        'lates;': [10925, 65024],
        'lbarr;': 10508,
        'lbbrk;': 10098,
        'lbrace;': 123,
        'lbrack;': 91,
        'lbrke;': 10635,
        'lbrksld;': 10639,
        'lbrkslu;': 10637,
        'lcaron;': 318,
        'lcedil;': 316,
        'lceil;': 8968,
        'lcub;': 123,
        'lcy;': 1083,
        'ldca;': 10550,
        'ldquo;': 8220,
        'ldquor;': 8222,
        'ldrdhar;': 10599,
        'ldrushar;': 10571,
        'ldsh;': 8626,
        'le;': 8804,
        'leftarrow;': 8592,
        'leftarrowtail;': 8610,
        'leftharpoondown;': 8637,
        'leftharpoonup;': 8636,
        'leftleftarrows;': 8647,
        'leftrightarrow;': 8596,
        'leftrightarrows;': 8646,
        'leftrightharpoons;': 8651,
        'leftrightsquigarrow;': 8621,
        'leftthreetimes;': 8907,
        'leg;': 8922,
        'leq;': 8804,
        'leqq;': 8806,
        'leqslant;': 10877,
        'les;': 10877,
        'lescc;': 10920,
        'lesdot;': 10879,
        'lesdoto;': 10881,
        'lesdotor;': 10883,
        'lesg;': [8922, 65024],
        'lesges;': 10899,
        'lessapprox;': 10885,
        'lessdot;': 8918,
        'lesseqgtr;': 8922,
        'lesseqqgtr;': 10891,
        'lessgtr;': 8822,
        'lesssim;': 8818,
        'lfisht;': 10620,
        'lfloor;': 8970,
        'lfr;': [55349, 56617],
        'lg;': 8822,
        'lgE;': 10897,
        'lhard;': 8637,
        'lharu;': 8636,
        'lharul;': 10602,
        'lhblk;': 9604,
        'ljcy;': 1113,
        'll;': 8810,
        'llarr;': 8647,
        'llcorner;': 8990,
        'llhard;': 10603,
        'lltri;': 9722,
        'lmidot;': 320,
        'lmoust;': 9136,
        'lmoustache;': 9136,
        'lnE;': 8808,
        'lnap;': 10889,
        'lnapprox;': 10889,
        'lne;': 10887,
        'lneq;': 10887,
        'lneqq;': 8808,
        'lnsim;': 8934,
        'loang;': 10220,
        'loarr;': 8701,
        'lobrk;': 10214,
        'longleftarrow;': 10229,
        'longleftrightarrow;': 10231,
        'longmapsto;': 10236,
        'longrightarrow;': 10230,
        'looparrowleft;': 8619,
        'looparrowright;': 8620,
        'lopar;': 10629,
        'lopf;': [55349, 56669],
        'loplus;': 10797,
        'lotimes;': 10804,
        'lowast;': 8727,
        'lowbar;': 95,
        'loz;': 9674,
        'lozenge;': 9674,
        'lozf;': 10731,
        'lpar;': 40,
        'lparlt;': 10643,
        'lrarr;': 8646,
        'lrcorner;': 8991,
        'lrhar;': 8651,
        'lrhard;': 10605,
        'lrm;': 8206,
        'lrtri;': 8895,
        'lsaquo;': 8249,
        'lscr;': [55349, 56513],
        'lsh;': 8624,
        'lsim;': 8818,
        'lsime;': 10893,
        'lsimg;': 10895,
        'lsqb;': 91,
        'lsquo;': 8216,
        'lsquor;': 8218,
        'lstrok;': 322,
        lt: 60,
        'lt;': 60,
        'ltcc;': 10918,
        'ltcir;': 10873,
        'ltdot;': 8918,
        'lthree;': 8907,
        'ltimes;': 8905,
        'ltlarr;': 10614,
        'ltquest;': 10875,
        'ltrPar;': 10646,
        'ltri;': 9667,
        'ltrie;': 8884,
        'ltrif;': 9666,
        'lurdshar;': 10570,
        'luruhar;': 10598,
        'lvertneqq;': [8808, 65024],
        'lvnE;': [8808, 65024],
        'mDDot;': 8762,
        macr: 175,
        'macr;': 175,
        'male;': 9794,
        'malt;': 10016,
        'maltese;': 10016,
        'map;': 8614,
        'mapsto;': 8614,
        'mapstodown;': 8615,
        'mapstoleft;': 8612,
        'mapstoup;': 8613,
        'marker;': 9646,
        'mcomma;': 10793,
        'mcy;': 1084,
        'mdash;': 8212,
        'measuredangle;': 8737,
        'mfr;': [55349, 56618],
        'mho;': 8487,
        micro: 181,
        'micro;': 181,
        'mid;': 8739,
        'midast;': 42,
        'midcir;': 10992,
        middot: 183,
        'middot;': 183,
        'minus;': 8722,
        'minusb;': 8863,
        'minusd;': 8760,
        'minusdu;': 10794,
        'mlcp;': 10971,
        'mldr;': 8230,
        'mnplus;': 8723,
        'models;': 8871,
        'mopf;': [55349, 56670],
        'mp;': 8723,
        'mscr;': [55349, 56514],
        'mstpos;': 8766,
        'mu;': 956,
        'multimap;': 8888,
        'mumap;': 8888,
        'nGg;': [8921, 824],
        'nGt;': [8811, 8402],
        'nGtv;': [8811, 824],
        'nLeftarrow;': 8653,
        'nLeftrightarrow;': 8654,
        'nLl;': [8920, 824],
        'nLt;': [8810, 8402],
        'nLtv;': [8810, 824],
        'nRightarrow;': 8655,
        'nVDash;': 8879,
        'nVdash;': 8878,
        'nabla;': 8711,
        'nacute;': 324,
        'nang;': [8736, 8402],
        'nap;': 8777,
        'napE;': [10864, 824],
        'napid;': [8779, 824],
        'napos;': 329,
        'napprox;': 8777,
        'natur;': 9838,
        'natural;': 9838,
        'naturals;': 8469,
        nbsp: 160,
        'nbsp;': 160,
        'nbump;': [8782, 824],
        'nbumpe;': [8783, 824],
        'ncap;': 10819,
        'ncaron;': 328,
        'ncedil;': 326,
        'ncong;': 8775,
        'ncongdot;': [10861, 824],
        'ncup;': 10818,
        'ncy;': 1085,
        'ndash;': 8211,
        'ne;': 8800,
        'neArr;': 8663,
        'nearhk;': 10532,
        'nearr;': 8599,
        'nearrow;': 8599,
        'nedot;': [8784, 824],
        'nequiv;': 8802,
        'nesear;': 10536,
        'nesim;': [8770, 824],
        'nexist;': 8708,
        'nexists;': 8708,
        'nfr;': [55349, 56619],
        'ngE;': [8807, 824],
        'nge;': 8817,
        'ngeq;': 8817,
        'ngeqq;': [8807, 824],
        'ngeqslant;': [10878, 824],
        'nges;': [10878, 824],
        'ngsim;': 8821,
        'ngt;': 8815,
        'ngtr;': 8815,
        'nhArr;': 8654,
        'nharr;': 8622,
        'nhpar;': 10994,
        'ni;': 8715,
        'nis;': 8956,
        'nisd;': 8954,
        'niv;': 8715,
        'njcy;': 1114,
        'nlArr;': 8653,
        'nlE;': [8806, 824],
        'nlarr;': 8602,
        'nldr;': 8229,
        'nle;': 8816,
        'nleftarrow;': 8602,
        'nleftrightarrow;': 8622,
        'nleq;': 8816,
        'nleqq;': [8806, 824],
        'nleqslant;': [10877, 824],
        'nles;': [10877, 824],
        'nless;': 8814,
        'nlsim;': 8820,
        'nlt;': 8814,
        'nltri;': 8938,
        'nltrie;': 8940,
        'nmid;': 8740,
        'nopf;': [55349, 56671],
        not: 172,
        'not;': 172,
        'notin;': 8713,
        'notinE;': [8953, 824],
        'notindot;': [8949, 824],
        'notinva;': 8713,
        'notinvb;': 8951,
        'notinvc;': 8950,
        'notni;': 8716,
        'notniva;': 8716,
        'notnivb;': 8958,
        'notnivc;': 8957,
        'npar;': 8742,
        'nparallel;': 8742,
        'nparsl;': [11005, 8421],
        'npart;': [8706, 824],
        'npolint;': 10772,
        'npr;': 8832,
        'nprcue;': 8928,
        'npre;': [10927, 824],
        'nprec;': 8832,
        'npreceq;': [10927, 824],
        'nrArr;': 8655,
        'nrarr;': 8603,
        'nrarrc;': [10547, 824],
        'nrarrw;': [8605, 824],
        'nrightarrow;': 8603,
        'nrtri;': 8939,
        'nrtrie;': 8941,
        'nsc;': 8833,
        'nsccue;': 8929,
        'nsce;': [10928, 824],
        'nscr;': [55349, 56515],
        'nshortmid;': 8740,
        'nshortparallel;': 8742,
        'nsim;': 8769,
        'nsime;': 8772,
        'nsimeq;': 8772,
        'nsmid;': 8740,
        'nspar;': 8742,
        'nsqsube;': 8930,
        'nsqsupe;': 8931,
        'nsub;': 8836,
        'nsubE;': [10949, 824],
        'nsube;': 8840,
        'nsubset;': [8834, 8402],
        'nsubseteq;': 8840,
        'nsubseteqq;': [10949, 824],
        'nsucc;': 8833,
        'nsucceq;': [10928, 824],
        'nsup;': 8837,
        'nsupE;': [10950, 824],
        'nsupe;': 8841,
        'nsupset;': [8835, 8402],
        'nsupseteq;': 8841,
        'nsupseteqq;': [10950, 824],
        'ntgl;': 8825,
        ntilde: 241,
        'ntilde;': 241,
        'ntlg;': 8824,
        'ntriangleleft;': 8938,
        'ntrianglelefteq;': 8940,
        'ntriangleright;': 8939,
        'ntrianglerighteq;': 8941,
        'nu;': 957,
        'num;': 35,
        'numero;': 8470,
        'numsp;': 8199,
        'nvDash;': 8877,
        'nvHarr;': 10500,
        'nvap;': [8781, 8402],
        'nvdash;': 8876,
        'nvge;': [8805, 8402],
        'nvgt;': [62, 8402],
        'nvinfin;': 10718,
        'nvlArr;': 10498,
        'nvle;': [8804, 8402],
        'nvlt;': [60, 8402],
        'nvltrie;': [8884, 8402],
        'nvrArr;': 10499,
        'nvrtrie;': [8885, 8402],
        'nvsim;': [8764, 8402],
        'nwArr;': 8662,
        'nwarhk;': 10531,
        'nwarr;': 8598,
        'nwarrow;': 8598,
        'nwnear;': 10535,
        'oS;': 9416,
        oacute: 243,
        'oacute;': 243,
        'oast;': 8859,
        'ocir;': 8858,
        ocirc: 244,
        'ocirc;': 244,
        'ocy;': 1086,
        'odash;': 8861,
        'odblac;': 337,
        'odiv;': 10808,
        'odot;': 8857,
        'odsold;': 10684,
        'oelig;': 339,
        'ofcir;': 10687,
        'ofr;': [55349, 56620],
        'ogon;': 731,
        ograve: 242,
        'ograve;': 242,
        'ogt;': 10689,
        'ohbar;': 10677,
        'ohm;': 937,
        'oint;': 8750,
        'olarr;': 8634,
        'olcir;': 10686,
        'olcross;': 10683,
        'oline;': 8254,
        'olt;': 10688,
        'omacr;': 333,
        'omega;': 969,
        'omicron;': 959,
        'omid;': 10678,
        'ominus;': 8854,
        'oopf;': [55349, 56672],
        'opar;': 10679,
        'operp;': 10681,
        'oplus;': 8853,
        'or;': 8744,
        'orarr;': 8635,
        'ord;': 10845,
        'order;': 8500,
        'orderof;': 8500,
        ordf: 170,
        'ordf;': 170,
        ordm: 186,
        'ordm;': 186,
        'origof;': 8886,
        'oror;': 10838,
        'orslope;': 10839,
        'orv;': 10843,
        'oscr;': 8500,
        oslash: 248,
        'oslash;': 248,
        'osol;': 8856,
        otilde: 245,
        'otilde;': 245,
        'otimes;': 8855,
        'otimesas;': 10806,
        ouml: 246,
        'ouml;': 246,
        'ovbar;': 9021,
        'par;': 8741,
        para: 182,
        'para;': 182,
        'parallel;': 8741,
        'parsim;': 10995,
        'parsl;': 11005,
        'part;': 8706,
        'pcy;': 1087,
        'percnt;': 37,
        'period;': 46,
        'permil;': 8240,
        'perp;': 8869,
        'pertenk;': 8241,
        'pfr;': [55349, 56621],
        'phi;': 966,
        'phiv;': 981,
        'phmmat;': 8499,
        'phone;': 9742,
        'pi;': 960,
        'pitchfork;': 8916,
        'piv;': 982,
        'planck;': 8463,
        'planckh;': 8462,
        'plankv;': 8463,
        'plus;': 43,
        'plusacir;': 10787,
        'plusb;': 8862,
        'pluscir;': 10786,
        'plusdo;': 8724,
        'plusdu;': 10789,
        'pluse;': 10866,
        plusmn: 177,
        'plusmn;': 177,
        'plussim;': 10790,
        'plustwo;': 10791,
        'pm;': 177,
        'pointint;': 10773,
        'popf;': [55349, 56673],
        pound: 163,
        'pound;': 163,
        'pr;': 8826,
        'prE;': 10931,
        'prap;': 10935,
        'prcue;': 8828,
        'pre;': 10927,
        'prec;': 8826,
        'precapprox;': 10935,
        'preccurlyeq;': 8828,
        'preceq;': 10927,
        'precnapprox;': 10937,
        'precneqq;': 10933,
        'precnsim;': 8936,
        'precsim;': 8830,
        'prime;': 8242,
        'primes;': 8473,
        'prnE;': 10933,
        'prnap;': 10937,
        'prnsim;': 8936,
        'prod;': 8719,
        'profalar;': 9006,
        'profline;': 8978,
        'profsurf;': 8979,
        'prop;': 8733,
        'propto;': 8733,
        'prsim;': 8830,
        'prurel;': 8880,
        'pscr;': [55349, 56517],
        'psi;': 968,
        'puncsp;': 8200,
        'qfr;': [55349, 56622],
        'qint;': 10764,
        'qopf;': [55349, 56674],
        'qprime;': 8279,
        'qscr;': [55349, 56518],
        'quaternions;': 8461,
        'quatint;': 10774,
        'quest;': 63,
        'questeq;': 8799,
        quot: 34,
        'quot;': 34,
        'rAarr;': 8667,
        'rArr;': 8658,
        'rAtail;': 10524,
        'rBarr;': 10511,
        'rHar;': 10596,
        'race;': [8765, 817],
        'racute;': 341,
        'radic;': 8730,
        'raemptyv;': 10675,
        'rang;': 10217,
        'rangd;': 10642,
        'range;': 10661,
        'rangle;': 10217,
        raquo: 187,
        'raquo;': 187,
        'rarr;': 8594,
        'rarrap;': 10613,
        'rarrb;': 8677,
        'rarrbfs;': 10528,
        'rarrc;': 10547,
        'rarrfs;': 10526,
        'rarrhk;': 8618,
        'rarrlp;': 8620,
        'rarrpl;': 10565,
        'rarrsim;': 10612,
        'rarrtl;': 8611,
        'rarrw;': 8605,
        'ratail;': 10522,
        'ratio;': 8758,
        'rationals;': 8474,
        'rbarr;': 10509,
        'rbbrk;': 10099,
        'rbrace;': 125,
        'rbrack;': 93,
        'rbrke;': 10636,
        'rbrksld;': 10638,
        'rbrkslu;': 10640,
        'rcaron;': 345,
        'rcedil;': 343,
        'rceil;': 8969,
        'rcub;': 125,
        'rcy;': 1088,
        'rdca;': 10551,
        'rdldhar;': 10601,
        'rdquo;': 8221,
        'rdquor;': 8221,
        'rdsh;': 8627,
        'real;': 8476,
        'realine;': 8475,
        'realpart;': 8476,
        'reals;': 8477,
        'rect;': 9645,
        reg: 174,
        'reg;': 174,
        'rfisht;': 10621,
        'rfloor;': 8971,
        'rfr;': [55349, 56623],
        'rhard;': 8641,
        'rharu;': 8640,
        'rharul;': 10604,
        'rho;': 961,
        'rhov;': 1009,
        'rightarrow;': 8594,
        'rightarrowtail;': 8611,
        'rightharpoondown;': 8641,
        'rightharpoonup;': 8640,
        'rightleftarrows;': 8644,
        'rightleftharpoons;': 8652,
        'rightrightarrows;': 8649,
        'rightsquigarrow;': 8605,
        'rightthreetimes;': 8908,
        'ring;': 730,
        'risingdotseq;': 8787,
        'rlarr;': 8644,
        'rlhar;': 8652,
        'rlm;': 8207,
        'rmoust;': 9137,
        'rmoustache;': 9137,
        'rnmid;': 10990,
        'roang;': 10221,
        'roarr;': 8702,
        'robrk;': 10215,
        'ropar;': 10630,
        'ropf;': [55349, 56675],
        'roplus;': 10798,
        'rotimes;': 10805,
        'rpar;': 41,
        'rpargt;': 10644,
        'rppolint;': 10770,
        'rrarr;': 8649,
        'rsaquo;': 8250,
        'rscr;': [55349, 56519],
        'rsh;': 8625,
        'rsqb;': 93,
        'rsquo;': 8217,
        'rsquor;': 8217,
        'rthree;': 8908,
        'rtimes;': 8906,
        'rtri;': 9657,
        'rtrie;': 8885,
        'rtrif;': 9656,
        'rtriltri;': 10702,
        'ruluhar;': 10600,
        'rx;': 8478,
        'sacute;': 347,
        'sbquo;': 8218,
        'sc;': 8827,
        'scE;': 10932,
        'scap;': 10936,
        'scaron;': 353,
        'sccue;': 8829,
        'sce;': 10928,
        'scedil;': 351,
        'scirc;': 349,
        'scnE;': 10934,
        'scnap;': 10938,
        'scnsim;': 8937,
        'scpolint;': 10771,
        'scsim;': 8831,
        'scy;': 1089,
        'sdot;': 8901,
        'sdotb;': 8865,
        'sdote;': 10854,
        'seArr;': 8664,
        'searhk;': 10533,
        'searr;': 8600,
        'searrow;': 8600,
        sect: 167,
        'sect;': 167,
        'semi;': 59,
        'seswar;': 10537,
        'setminus;': 8726,
        'setmn;': 8726,
        'sext;': 10038,
        'sfr;': [55349, 56624],
        'sfrown;': 8994,
        'sharp;': 9839,
        'shchcy;': 1097,
        'shcy;': 1096,
        'shortmid;': 8739,
        'shortparallel;': 8741,
        shy: 173,
        'shy;': 173,
        'sigma;': 963,
        'sigmaf;': 962,
        'sigmav;': 962,
        'sim;': 8764,
        'simdot;': 10858,
        'sime;': 8771,
        'simeq;': 8771,
        'simg;': 10910,
        'simgE;': 10912,
        'siml;': 10909,
        'simlE;': 10911,
        'simne;': 8774,
        'simplus;': 10788,
        'simrarr;': 10610,
        'slarr;': 8592,
        'smallsetminus;': 8726,
        'smashp;': 10803,
        'smeparsl;': 10724,
        'smid;': 8739,
        'smile;': 8995,
        'smt;': 10922,
        'smte;': 10924,
        'smtes;': [10924, 65024],
        'softcy;': 1100,
        'sol;': 47,
        'solb;': 10692,
        'solbar;': 9023,
        'sopf;': [55349, 56676],
        'spades;': 9824,
        'spadesuit;': 9824,
        'spar;': 8741,
        'sqcap;': 8851,
        'sqcaps;': [8851, 65024],
        'sqcup;': 8852,
        'sqcups;': [8852, 65024],
        'sqsub;': 8847,
        'sqsube;': 8849,
        'sqsubset;': 8847,
        'sqsubseteq;': 8849,
        'sqsup;': 8848,
        'sqsupe;': 8850,
        'sqsupset;': 8848,
        'sqsupseteq;': 8850,
        'squ;': 9633,
        'square;': 9633,
        'squarf;': 9642,
        'squf;': 9642,
        'srarr;': 8594,
        'sscr;': [55349, 56520],
        'ssetmn;': 8726,
        'ssmile;': 8995,
        'sstarf;': 8902,
        'star;': 9734,
        'starf;': 9733,
        'straightepsilon;': 1013,
        'straightphi;': 981,
        'strns;': 175,
        'sub;': 8834,
        'subE;': 10949,
        'subdot;': 10941,
        'sube;': 8838,
        'subedot;': 10947,
        'submult;': 10945,
        'subnE;': 10955,
        'subne;': 8842,
        'subplus;': 10943,
        'subrarr;': 10617,
        'subset;': 8834,
        'subseteq;': 8838,
        'subseteqq;': 10949,
        'subsetneq;': 8842,
        'subsetneqq;': 10955,
        'subsim;': 10951,
        'subsub;': 10965,
        'subsup;': 10963,
        'succ;': 8827,
        'succapprox;': 10936,
        'succcurlyeq;': 8829,
        'succeq;': 10928,
        'succnapprox;': 10938,
        'succneqq;': 10934,
        'succnsim;': 8937,
        'succsim;': 8831,
        'sum;': 8721,
        'sung;': 9834,
        sup1: 185,
        'sup1;': 185,
        sup2: 178,
        'sup2;': 178,
        sup3: 179,
        'sup3;': 179,
        'sup;': 8835,
        'supE;': 10950,
        'supdot;': 10942,
        'supdsub;': 10968,
        'supe;': 8839,
        'supedot;': 10948,
        'suphsol;': 10185,
        'suphsub;': 10967,
        'suplarr;': 10619,
        'supmult;': 10946,
        'supnE;': 10956,
        'supne;': 8843,
        'supplus;': 10944,
        'supset;': 8835,
        'supseteq;': 8839,
        'supseteqq;': 10950,
        'supsetneq;': 8843,
        'supsetneqq;': 10956,
        'supsim;': 10952,
        'supsub;': 10964,
        'supsup;': 10966,
        'swArr;': 8665,
        'swarhk;': 10534,
        'swarr;': 8601,
        'swarrow;': 8601,
        'swnwar;': 10538,
        szlig: 223,
        'szlig;': 223,
        'target;': 8982,
        'tau;': 964,
        'tbrk;': 9140,
        'tcaron;': 357,
        'tcedil;': 355,
        'tcy;': 1090,
        'tdot;': 8411,
        'telrec;': 8981,
        'tfr;': [55349, 56625],
        'there4;': 8756,
        'therefore;': 8756,
        'theta;': 952,
        'thetasym;': 977,
        'thetav;': 977,
        'thickapprox;': 8776,
        'thicksim;': 8764,
        'thinsp;': 8201,
        'thkap;': 8776,
        'thksim;': 8764,
        thorn: 254,
        'thorn;': 254,
        'tilde;': 732,
        times: 215,
        'times;': 215,
        'timesb;': 8864,
        'timesbar;': 10801,
        'timesd;': 10800,
        'tint;': 8749,
        'toea;': 10536,
        'top;': 8868,
        'topbot;': 9014,
        'topcir;': 10993,
        'topf;': [55349, 56677],
        'topfork;': 10970,
        'tosa;': 10537,
        'tprime;': 8244,
        'trade;': 8482,
        'triangle;': 9653,
        'triangledown;': 9663,
        'triangleleft;': 9667,
        'trianglelefteq;': 8884,
        'triangleq;': 8796,
        'triangleright;': 9657,
        'trianglerighteq;': 8885,
        'tridot;': 9708,
        'trie;': 8796,
        'triminus;': 10810,
        'triplus;': 10809,
        'trisb;': 10701,
        'tritime;': 10811,
        'trpezium;': 9186,
        'tscr;': [55349, 56521],
        'tscy;': 1094,
        'tshcy;': 1115,
        'tstrok;': 359,
        'twixt;': 8812,
        'twoheadleftarrow;': 8606,
        'twoheadrightarrow;': 8608,
        'uArr;': 8657,
        'uHar;': 10595,
        uacute: 250,
        'uacute;': 250,
        'uarr;': 8593,
        'ubrcy;': 1118,
        'ubreve;': 365,
        ucirc: 251,
        'ucirc;': 251,
        'ucy;': 1091,
        'udarr;': 8645,
        'udblac;': 369,
        'udhar;': 10606,
        'ufisht;': 10622,
        'ufr;': [55349, 56626],
        ugrave: 249,
        'ugrave;': 249,
        'uharl;': 8639,
        'uharr;': 8638,
        'uhblk;': 9600,
        'ulcorn;': 8988,
        'ulcorner;': 8988,
        'ulcrop;': 8975,
        'ultri;': 9720,
        'umacr;': 363,
        uml: 168,
        'uml;': 168,
        'uogon;': 371,
        'uopf;': [55349, 56678],
        'uparrow;': 8593,
        'updownarrow;': 8597,
        'upharpoonleft;': 8639,
        'upharpoonright;': 8638,
        'uplus;': 8846,
        'upsi;': 965,
        'upsih;': 978,
        'upsilon;': 965,
        'upuparrows;': 8648,
        'urcorn;': 8989,
        'urcorner;': 8989,
        'urcrop;': 8974,
        'uring;': 367,
        'urtri;': 9721,
        'uscr;': [55349, 56522],
        'utdot;': 8944,
        'utilde;': 361,
        'utri;': 9653,
        'utrif;': 9652,
        'uuarr;': 8648,
        uuml: 252,
        'uuml;': 252,
        'uwangle;': 10663,
        'vArr;': 8661,
        'vBar;': 10984,
        'vBarv;': 10985,
        'vDash;': 8872,
        'vangrt;': 10652,
        'varepsilon;': 1013,
        'varkappa;': 1008,
        'varnothing;': 8709,
        'varphi;': 981,
        'varpi;': 982,
        'varpropto;': 8733,
        'varr;': 8597,
        'varrho;': 1009,
        'varsigma;': 962,
        'varsubsetneq;': [8842, 65024],
        'varsubsetneqq;': [10955, 65024],
        'varsupsetneq;': [8843, 65024],
        'varsupsetneqq;': [10956, 65024],
        'vartheta;': 977,
        'vartriangleleft;': 8882,
        'vartriangleright;': 8883,
        'vcy;': 1074,
        'vdash;': 8866,
        'vee;': 8744,
        'veebar;': 8891,
        'veeeq;': 8794,
        'vellip;': 8942,
        'verbar;': 124,
        'vert;': 124,
        'vfr;': [55349, 56627],
        'vltri;': 8882,
        'vnsub;': [8834, 8402],
        'vnsup;': [8835, 8402],
        'vopf;': [55349, 56679],
        'vprop;': 8733,
        'vrtri;': 8883,
        'vscr;': [55349, 56523],
        'vsubnE;': [10955, 65024],
        'vsubne;': [8842, 65024],
        'vsupnE;': [10956, 65024],
        'vsupne;': [8843, 65024],
        'vzigzag;': 10650,
        'wcirc;': 373,
        'wedbar;': 10847,
        'wedge;': 8743,
        'wedgeq;': 8793,
        'weierp;': 8472,
        'wfr;': [55349, 56628],
        'wopf;': [55349, 56680],
        'wp;': 8472,
        'wr;': 8768,
        'wreath;': 8768,
        'wscr;': [55349, 56524],
        'xcap;': 8898,
        'xcirc;': 9711,
        'xcup;': 8899,
        'xdtri;': 9661,
        'xfr;': [55349, 56629],
        'xhArr;': 10234,
        'xharr;': 10231,
        'xi;': 958,
        'xlArr;': 10232,
        'xlarr;': 10229,
        'xmap;': 10236,
        'xnis;': 8955,
        'xodot;': 10752,
        'xopf;': [55349, 56681],
        'xoplus;': 10753,
        'xotime;': 10754,
        'xrArr;': 10233,
        'xrarr;': 10230,
        'xscr;': [55349, 56525],
        'xsqcup;': 10758,
        'xuplus;': 10756,
        'xutri;': 9651,
        'xvee;': 8897,
        'xwedge;': 8896,
        yacute: 253,
        'yacute;': 253,
        'yacy;': 1103,
        'ycirc;': 375,
        'ycy;': 1099,
        yen: 165,
        'yen;': 165,
        'yfr;': [55349, 56630],
        'yicy;': 1111,
        'yopf;': [55349, 56682],
        'yscr;': [55349, 56526],
        'yucy;': 1102,
        yuml: 255,
        'yuml;': 255,
        'zacute;': 378,
        'zcaron;': 382,
        'zcy;': 1079,
        'zdot;': 380,
        'zeetrf;': 8488,
        'zeta;': 950,
        'zfr;': [55349, 56631],
        'zhcy;': 1078,
        'zigrarr;': 8669,
        'zopf;': [55349, 56683],
        'zscr;': [55349, 56527],
        'zwj;': 8205,
        'zwnj;': 8204
      };
      var ls =
        /(A(?:Elig;?|MP;?|acute;?|breve;|c(?:irc;?|y;)|fr;|grave;?|lpha;|macr;|nd;|o(?:gon;|pf;)|pplyFunction;|ring;?|s(?:cr;|sign;)|tilde;?|uml;?)|B(?:a(?:ckslash;|r(?:v;|wed;))|cy;|e(?:cause;|rnoullis;|ta;)|fr;|opf;|reve;|scr;|umpeq;)|C(?:Hcy;|OPY;?|a(?:cute;|p(?:;|italDifferentialD;)|yleys;)|c(?:aron;|edil;?|irc;|onint;)|dot;|e(?:dilla;|nterDot;)|fr;|hi;|ircle(?:Dot;|Minus;|Plus;|Times;)|lo(?:ckwiseContourIntegral;|seCurly(?:DoubleQuote;|Quote;))|o(?:lon(?:;|e;)|n(?:gruent;|int;|tourIntegral;)|p(?:f;|roduct;)|unterClockwiseContourIntegral;)|ross;|scr;|up(?:;|Cap;))|D(?:D(?:;|otrahd;)|Jcy;|Scy;|Zcy;|a(?:gger;|rr;|shv;)|c(?:aron;|y;)|el(?:;|ta;)|fr;|i(?:a(?:critical(?:Acute;|Do(?:t;|ubleAcute;)|Grave;|Tilde;)|mond;)|fferentialD;)|o(?:pf;|t(?:;|Dot;|Equal;)|uble(?:ContourIntegral;|Do(?:t;|wnArrow;)|L(?:eft(?:Arrow;|RightArrow;|Tee;)|ong(?:Left(?:Arrow;|RightArrow;)|RightArrow;))|Right(?:Arrow;|Tee;)|Up(?:Arrow;|DownArrow;)|VerticalBar;)|wn(?:Arrow(?:;|Bar;|UpArrow;)|Breve;|Left(?:RightVector;|TeeVector;|Vector(?:;|Bar;))|Right(?:TeeVector;|Vector(?:;|Bar;))|Tee(?:;|Arrow;)|arrow;))|s(?:cr;|trok;))|E(?:NG;|TH;?|acute;?|c(?:aron;|irc;?|y;)|dot;|fr;|grave;?|lement;|m(?:acr;|pty(?:SmallSquare;|VerySmallSquare;))|o(?:gon;|pf;)|psilon;|qu(?:al(?:;|Tilde;)|ilibrium;)|s(?:cr;|im;)|ta;|uml;?|x(?:ists;|ponentialE;))|F(?:cy;|fr;|illed(?:SmallSquare;|VerySmallSquare;)|o(?:pf;|rAll;|uriertrf;)|scr;)|G(?:Jcy;|T;?|amma(?:;|d;)|breve;|c(?:edil;|irc;|y;)|dot;|fr;|g;|opf;|reater(?:Equal(?:;|Less;)|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|scr;|t;)|H(?:ARDcy;|a(?:cek;|t;)|circ;|fr;|ilbertSpace;|o(?:pf;|rizontalLine;)|s(?:cr;|trok;)|ump(?:DownHump;|Equal;))|I(?:Ecy;|Jlig;|Ocy;|acute;?|c(?:irc;?|y;)|dot;|fr;|grave;?|m(?:;|a(?:cr;|ginaryI;)|plies;)|n(?:t(?:;|e(?:gral;|rsection;))|visible(?:Comma;|Times;))|o(?:gon;|pf;|ta;)|scr;|tilde;|u(?:kcy;|ml;?))|J(?:c(?:irc;|y;)|fr;|opf;|s(?:cr;|ercy;)|ukcy;)|K(?:Hcy;|Jcy;|appa;|c(?:edil;|y;)|fr;|opf;|scr;)|L(?:Jcy;|T;?|a(?:cute;|mbda;|ng;|placetrf;|rr;)|c(?:aron;|edil;|y;)|e(?:ft(?:A(?:ngleBracket;|rrow(?:;|Bar;|RightArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|Right(?:Arrow;|Vector;)|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;|rightarrow;)|ss(?:EqualGreater;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;))|fr;|l(?:;|eftarrow;)|midot;|o(?:ng(?:Left(?:Arrow;|RightArrow;)|RightArrow;|left(?:arrow;|rightarrow;)|rightarrow;)|pf;|wer(?:LeftArrow;|RightArrow;))|s(?:cr;|h;|trok;)|t;)|M(?:ap;|cy;|e(?:diumSpace;|llintrf;)|fr;|inusPlus;|opf;|scr;|u;)|N(?:Jcy;|acute;|c(?:aron;|edil;|y;)|e(?:gative(?:MediumSpace;|Thi(?:ckSpace;|nSpace;)|VeryThinSpace;)|sted(?:GreaterGreater;|LessLess;)|wLine;)|fr;|o(?:Break;|nBreakingSpace;|pf;|t(?:;|C(?:ongruent;|upCap;)|DoubleVerticalBar;|E(?:lement;|qual(?:;|Tilde;)|xists;)|Greater(?:;|Equal;|FullEqual;|Greater;|Less;|SlantEqual;|Tilde;)|Hump(?:DownHump;|Equal;)|Le(?:ftTriangle(?:;|Bar;|Equal;)|ss(?:;|Equal;|Greater;|Less;|SlantEqual;|Tilde;))|Nested(?:GreaterGreater;|LessLess;)|Precedes(?:;|Equal;|SlantEqual;)|R(?:everseElement;|ightTriangle(?:;|Bar;|Equal;))|S(?:quareSu(?:bset(?:;|Equal;)|perset(?:;|Equal;))|u(?:bset(?:;|Equal;)|cceeds(?:;|Equal;|SlantEqual;|Tilde;)|perset(?:;|Equal;)))|Tilde(?:;|Equal;|FullEqual;|Tilde;)|VerticalBar;))|scr;|tilde;?|u;)|O(?:Elig;|acute;?|c(?:irc;?|y;)|dblac;|fr;|grave;?|m(?:acr;|ega;|icron;)|opf;|penCurly(?:DoubleQuote;|Quote;)|r;|s(?:cr;|lash;?)|ti(?:lde;?|mes;)|uml;?|ver(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;))|P(?:artialD;|cy;|fr;|hi;|i;|lusMinus;|o(?:incareplane;|pf;)|r(?:;|ecedes(?:;|Equal;|SlantEqual;|Tilde;)|ime;|o(?:duct;|portion(?:;|al;)))|s(?:cr;|i;))|Q(?:UOT;?|fr;|opf;|scr;)|R(?:Barr;|EG;?|a(?:cute;|ng;|rr(?:;|tl;))|c(?:aron;|edil;|y;)|e(?:;|verse(?:E(?:lement;|quilibrium;)|UpEquilibrium;))|fr;|ho;|ight(?:A(?:ngleBracket;|rrow(?:;|Bar;|LeftArrow;))|Ceiling;|Do(?:ubleBracket;|wn(?:TeeVector;|Vector(?:;|Bar;)))|Floor;|T(?:ee(?:;|Arrow;|Vector;)|riangle(?:;|Bar;|Equal;))|Up(?:DownVector;|TeeVector;|Vector(?:;|Bar;))|Vector(?:;|Bar;)|arrow;)|o(?:pf;|undImplies;)|rightarrow;|s(?:cr;|h;)|uleDelayed;)|S(?:H(?:CHcy;|cy;)|OFTcy;|acute;|c(?:;|aron;|edil;|irc;|y;)|fr;|hort(?:DownArrow;|LeftArrow;|RightArrow;|UpArrow;)|igma;|mallCircle;|opf;|q(?:rt;|uare(?:;|Intersection;|Su(?:bset(?:;|Equal;)|perset(?:;|Equal;))|Union;))|scr;|tar;|u(?:b(?:;|set(?:;|Equal;))|c(?:ceeds(?:;|Equal;|SlantEqual;|Tilde;)|hThat;)|m;|p(?:;|erset(?:;|Equal;)|set;)))|T(?:HORN;?|RADE;|S(?:Hcy;|cy;)|a(?:b;|u;)|c(?:aron;|edil;|y;)|fr;|h(?:e(?:refore;|ta;)|i(?:ckSpace;|nSpace;))|ilde(?:;|Equal;|FullEqual;|Tilde;)|opf;|ripleDot;|s(?:cr;|trok;))|U(?:a(?:cute;?|rr(?:;|ocir;))|br(?:cy;|eve;)|c(?:irc;?|y;)|dblac;|fr;|grave;?|macr;|n(?:der(?:B(?:ar;|rac(?:e;|ket;))|Parenthesis;)|ion(?:;|Plus;))|o(?:gon;|pf;)|p(?:Arrow(?:;|Bar;|DownArrow;)|DownArrow;|Equilibrium;|Tee(?:;|Arrow;)|arrow;|downarrow;|per(?:LeftArrow;|RightArrow;)|si(?:;|lon;))|ring;|scr;|tilde;|uml;?)|V(?:Dash;|bar;|cy;|dash(?:;|l;)|e(?:e;|r(?:bar;|t(?:;|ical(?:Bar;|Line;|Separator;|Tilde;))|yThinSpace;))|fr;|opf;|scr;|vdash;)|W(?:circ;|edge;|fr;|opf;|scr;)|X(?:fr;|i;|opf;|scr;)|Y(?:Acy;|Icy;|Ucy;|acute;?|c(?:irc;|y;)|fr;|opf;|scr;|uml;)|Z(?:Hcy;|acute;|c(?:aron;|y;)|dot;|e(?:roWidthSpace;|ta;)|fr;|opf;|scr;)|a(?:acute;?|breve;|c(?:;|E;|d;|irc;?|ute;?|y;)|elig;?|f(?:;|r;)|grave;?|l(?:e(?:fsym;|ph;)|pha;)|m(?:a(?:cr;|lg;)|p;?)|n(?:d(?:;|and;|d;|slope;|v;)|g(?:;|e;|le;|msd(?:;|a(?:a;|b;|c;|d;|e;|f;|g;|h;))|rt(?:;|vb(?:;|d;))|s(?:ph;|t;)|zarr;))|o(?:gon;|pf;)|p(?:;|E;|acir;|e;|id;|os;|prox(?:;|eq;))|ring;?|s(?:cr;|t;|ymp(?:;|eq;))|tilde;?|uml;?|w(?:conint;|int;))|b(?:Not;|a(?:ck(?:cong;|epsilon;|prime;|sim(?:;|eq;))|r(?:vee;|wed(?:;|ge;)))|brk(?:;|tbrk;)|c(?:ong;|y;)|dquo;|e(?:caus(?:;|e;)|mptyv;|psi;|rnou;|t(?:a;|h;|ween;))|fr;|ig(?:c(?:ap;|irc;|up;)|o(?:dot;|plus;|times;)|s(?:qcup;|tar;)|triangle(?:down;|up;)|uplus;|vee;|wedge;)|karow;|l(?:a(?:ck(?:lozenge;|square;|triangle(?:;|down;|left;|right;))|nk;)|k(?:1(?:2;|4;)|34;)|ock;)|n(?:e(?:;|quiv;)|ot;)|o(?:pf;|t(?:;|tom;)|wtie;|x(?:D(?:L;|R;|l;|r;)|H(?:;|D;|U;|d;|u;)|U(?:L;|R;|l;|r;)|V(?:;|H;|L;|R;|h;|l;|r;)|box;|d(?:L;|R;|l;|r;)|h(?:;|D;|U;|d;|u;)|minus;|plus;|times;|u(?:L;|R;|l;|r;)|v(?:;|H;|L;|R;|h;|l;|r;)))|prime;|r(?:eve;|vbar;?)|s(?:cr;|emi;|im(?:;|e;)|ol(?:;|b;|hsub;))|u(?:ll(?:;|et;)|mp(?:;|E;|e(?:;|q;))))|c(?:a(?:cute;|p(?:;|and;|brcup;|c(?:ap;|up;)|dot;|s;)|r(?:et;|on;))|c(?:a(?:ps;|ron;)|edil;?|irc;|ups(?:;|sm;))|dot;|e(?:dil;?|mptyv;|nt(?:;|erdot;|))|fr;|h(?:cy;|eck(?:;|mark;)|i;)|ir(?:;|E;|c(?:;|eq;|le(?:arrow(?:left;|right;)|d(?:R;|S;|ast;|circ;|dash;)))|e;|fnint;|mid;|scir;)|lubs(?:;|uit;)|o(?:lon(?:;|e(?:;|q;))|m(?:ma(?:;|t;)|p(?:;|fn;|le(?:ment;|xes;)))|n(?:g(?:;|dot;)|int;)|p(?:f;|rod;|y(?:;|sr;|)))|r(?:arr;|oss;)|s(?:cr;|u(?:b(?:;|e;)|p(?:;|e;)))|tdot;|u(?:darr(?:l;|r;)|e(?:pr;|sc;)|larr(?:;|p;)|p(?:;|brcap;|c(?:ap;|up;)|dot;|or;|s;)|r(?:arr(?:;|m;)|ly(?:eq(?:prec;|succ;)|vee;|wedge;)|ren;?|vearrow(?:left;|right;))|vee;|wed;)|w(?:conint;|int;)|ylcty;)|d(?:Arr;|Har;|a(?:gger;|leth;|rr;|sh(?:;|v;))|b(?:karow;|lac;)|c(?:aron;|y;)|d(?:;|a(?:gger;|rr;)|otseq;)|e(?:g;?|lta;|mptyv;)|f(?:isht;|r;)|har(?:l;|r;)|i(?:am(?:;|ond(?:;|suit;)|s;)|e;|gamma;|sin;|v(?:;|ide(?:;|ontimes;|)|onx;))|jcy;|lc(?:orn;|rop;)|o(?:llar;|pf;|t(?:;|eq(?:;|dot;)|minus;|plus;|square;)|ublebarwedge;|wn(?:arrow;|downarrows;|harpoon(?:left;|right;)))|r(?:bkarow;|c(?:orn;|rop;))|s(?:c(?:r;|y;)|ol;|trok;)|t(?:dot;|ri(?:;|f;))|u(?:arr;|har;)|wangle;|z(?:cy;|igrarr;))|e(?:D(?:Dot;|ot;)|a(?:cute;?|ster;)|c(?:aron;|ir(?:;|c;?)|olon;|y;)|dot;|e;|f(?:Dot;|r;)|g(?:;|rave;?|s(?:;|dot;))|l(?:;|inters;|l;|s(?:;|dot;))|m(?:acr;|pty(?:;|set;|v;)|sp(?:1(?:3;|4;)|;))|n(?:g;|sp;)|o(?:gon;|pf;)|p(?:ar(?:;|sl;)|lus;|si(?:;|lon;|v;))|q(?:c(?:irc;|olon;)|s(?:im;|lant(?:gtr;|less;))|u(?:als;|est;|iv(?:;|DD;))|vparsl;)|r(?:Dot;|arr;)|s(?:cr;|dot;|im;)|t(?:a;|h;?)|u(?:ml;?|ro;)|x(?:cl;|ist;|p(?:ectation;|onentiale;)))|f(?:allingdotseq;|cy;|emale;|f(?:ilig;|l(?:ig;|lig;)|r;)|ilig;|jlig;|l(?:at;|lig;|tns;)|nof;|o(?:pf;|r(?:all;|k(?:;|v;)))|partint;|r(?:a(?:c(?:1(?:2;?|3;|4;?|5;|6;|8;)|2(?:3;|5;)|3(?:4;?|5;|8;)|45;|5(?:6;|8;)|78;)|sl;)|own;)|scr;)|g(?:E(?:;|l;)|a(?:cute;|mma(?:;|d;)|p;)|breve;|c(?:irc;|y;)|dot;|e(?:;|l;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|l;))|l(?:;|es;)))|fr;|g(?:;|g;)|imel;|jcy;|l(?:;|E;|a;|j;)|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|opf;|rave;|s(?:cr;|im(?:;|e;|l;))|t(?:;|c(?:c;|ir;)|dot;|lPar;|quest;|r(?:a(?:pprox;|rr;)|dot;|eq(?:less;|qless;)|less;|sim;)|)|v(?:ertneqq;|nE;))|h(?:Arr;|a(?:irsp;|lf;|milt;|r(?:dcy;|r(?:;|cir;|w;)))|bar;|circ;|e(?:arts(?:;|uit;)|llip;|rcon;)|fr;|ks(?:earow;|warow;)|o(?:arr;|mtht;|ok(?:leftarrow;|rightarrow;)|pf;|rbar;)|s(?:cr;|lash;|trok;)|y(?:bull;|phen;))|i(?:acute;?|c(?:;|irc;?|y;)|e(?:cy;|xcl;?)|f(?:f;|r;)|grave;?|i(?:;|i(?:int;|nt;)|nfin;|ota;)|jlig;|m(?:a(?:cr;|g(?:e;|line;|part;)|th;)|of;|ped;)|n(?:;|care;|fin(?:;|tie;)|odot;|t(?:;|cal;|e(?:gers;|rcal;)|larhk;|prod;))|o(?:cy;|gon;|pf;|ta;)|prod;|quest;?|s(?:cr;|in(?:;|E;|dot;|s(?:;|v;)|v;))|t(?:;|ilde;)|u(?:kcy;|ml;?))|j(?:c(?:irc;|y;)|fr;|math;|opf;|s(?:cr;|ercy;)|ukcy;)|k(?:appa(?:;|v;)|c(?:edil;|y;)|fr;|green;|hcy;|jcy;|opf;|scr;)|l(?:A(?:arr;|rr;|tail;)|Barr;|E(?:;|g;)|Har;|a(?:cute;|emptyv;|gran;|mbda;|ng(?:;|d;|le;)|p;|quo;?|rr(?:;|b(?:;|fs;)|fs;|hk;|lp;|pl;|sim;|tl;)|t(?:;|ail;|e(?:;|s;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|quo(?:;|r;)|r(?:dhar;|ushar;)|sh;)|e(?:;|ft(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|leftarrows;|right(?:arrow(?:;|s;)|harpoons;|squigarrow;)|threetimes;)|g;|q(?:;|q;|slant;)|s(?:;|cc;|dot(?:;|o(?:;|r;))|g(?:;|es;)|s(?:approx;|dot;|eq(?:gtr;|qgtr;)|gtr;|sim;)))|f(?:isht;|loor;|r;)|g(?:;|E;)|h(?:ar(?:d;|u(?:;|l;))|blk;)|jcy;|l(?:;|arr;|corner;|hard;|tri;)|m(?:idot;|oust(?:;|ache;))|n(?:E;|ap(?:;|prox;)|e(?:;|q(?:;|q;))|sim;)|o(?:a(?:ng;|rr;)|brk;|ng(?:left(?:arrow;|rightarrow;)|mapsto;|rightarrow;)|oparrow(?:left;|right;)|p(?:ar;|f;|lus;)|times;|w(?:ast;|bar;)|z(?:;|enge;|f;))|par(?:;|lt;)|r(?:arr;|corner;|har(?:;|d;)|m;|tri;)|s(?:aquo;|cr;|h;|im(?:;|e;|g;)|q(?:b;|uo(?:;|r;))|trok;)|t(?:;|c(?:c;|ir;)|dot;|hree;|imes;|larr;|quest;|r(?:Par;|i(?:;|e;|f;))|)|ur(?:dshar;|uhar;)|v(?:ertneqq;|nE;))|m(?:DDot;|a(?:cr;?|l(?:e;|t(?:;|ese;))|p(?:;|sto(?:;|down;|left;|up;))|rker;)|c(?:omma;|y;)|dash;|easuredangle;|fr;|ho;|i(?:cro;?|d(?:;|ast;|cir;|dot;?)|nus(?:;|b;|d(?:;|u;)))|l(?:cp;|dr;)|nplus;|o(?:dels;|pf;)|p;|s(?:cr;|tpos;)|u(?:;|ltimap;|map;))|n(?:G(?:g;|t(?:;|v;))|L(?:eft(?:arrow;|rightarrow;)|l;|t(?:;|v;))|Rightarrow;|V(?:Dash;|dash;)|a(?:bla;|cute;|ng;|p(?:;|E;|id;|os;|prox;)|tur(?:;|al(?:;|s;)))|b(?:sp;?|ump(?:;|e;))|c(?:a(?:p;|ron;)|edil;|ong(?:;|dot;)|up;|y;)|dash;|e(?:;|Arr;|ar(?:hk;|r(?:;|ow;))|dot;|quiv;|s(?:ear;|im;)|xist(?:;|s;))|fr;|g(?:E;|e(?:;|q(?:;|q;|slant;)|s;)|sim;|t(?:;|r;))|h(?:Arr;|arr;|par;)|i(?:;|s(?:;|d;)|v;)|jcy;|l(?:Arr;|E;|arr;|dr;|e(?:;|ft(?:arrow;|rightarrow;)|q(?:;|q;|slant;)|s(?:;|s;))|sim;|t(?:;|ri(?:;|e;)))|mid;|o(?:pf;|t(?:;|in(?:;|E;|dot;|v(?:a;|b;|c;))|ni(?:;|v(?:a;|b;|c;))|))|p(?:ar(?:;|allel;|sl;|t;)|olint;|r(?:;|cue;|e(?:;|c(?:;|eq;))))|r(?:Arr;|arr(?:;|c;|w;)|ightarrow;|tri(?:;|e;))|s(?:c(?:;|cue;|e;|r;)|hort(?:mid;|parallel;)|im(?:;|e(?:;|q;))|mid;|par;|qsu(?:be;|pe;)|u(?:b(?:;|E;|e;|set(?:;|eq(?:;|q;)))|cc(?:;|eq;)|p(?:;|E;|e;|set(?:;|eq(?:;|q;)))))|t(?:gl;|ilde;?|lg;|riangle(?:left(?:;|eq;)|right(?:;|eq;)))|u(?:;|m(?:;|ero;|sp;))|v(?:Dash;|Harr;|ap;|dash;|g(?:e;|t;)|infin;|l(?:Arr;|e;|t(?:;|rie;))|r(?:Arr;|trie;)|sim;)|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|near;))|o(?:S;|a(?:cute;?|st;)|c(?:ir(?:;|c;?)|y;)|d(?:ash;|blac;|iv;|ot;|sold;)|elig;|f(?:cir;|r;)|g(?:on;|rave;?|t;)|h(?:bar;|m;)|int;|l(?:arr;|c(?:ir;|ross;)|ine;|t;)|m(?:acr;|ega;|i(?:cron;|d;|nus;))|opf;|p(?:ar;|erp;|lus;)|r(?:;|arr;|d(?:;|er(?:;|of;)|f;?|m;?)|igof;|or;|slope;|v;)|s(?:cr;|lash;?|ol;)|ti(?:lde;?|mes(?:;|as;))|uml;?|vbar;)|p(?:ar(?:;|a(?:;|llel;|)|s(?:im;|l;)|t;)|cy;|er(?:cnt;|iod;|mil;|p;|tenk;)|fr;|h(?:i(?:;|v;)|mmat;|one;)|i(?:;|tchfork;|v;)|l(?:an(?:ck(?:;|h;)|kv;)|us(?:;|acir;|b;|cir;|d(?:o;|u;)|e;|mn;?|sim;|two;))|m;|o(?:intint;|pf;|und;?)|r(?:;|E;|ap;|cue;|e(?:;|c(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;))|ime(?:;|s;)|n(?:E;|ap;|sim;)|o(?:d;|f(?:alar;|line;|surf;)|p(?:;|to;))|sim;|urel;)|s(?:cr;|i;)|uncsp;)|q(?:fr;|int;|opf;|prime;|scr;|u(?:at(?:ernions;|int;)|est(?:;|eq;)|ot;?))|r(?:A(?:arr;|rr;|tail;)|Barr;|Har;|a(?:c(?:e;|ute;)|dic;|emptyv;|ng(?:;|d;|e;|le;)|quo;?|rr(?:;|ap;|b(?:;|fs;)|c;|fs;|hk;|lp;|pl;|sim;|tl;|w;)|t(?:ail;|io(?:;|nals;)))|b(?:arr;|brk;|r(?:ac(?:e;|k;)|k(?:e;|sl(?:d;|u;))))|c(?:aron;|e(?:dil;|il;)|ub;|y;)|d(?:ca;|ldhar;|quo(?:;|r;)|sh;)|e(?:al(?:;|ine;|part;|s;)|ct;|g;?)|f(?:isht;|loor;|r;)|h(?:ar(?:d;|u(?:;|l;))|o(?:;|v;))|i(?:ght(?:arrow(?:;|tail;)|harpoon(?:down;|up;)|left(?:arrows;|harpoons;)|rightarrows;|squigarrow;|threetimes;)|ng;|singdotseq;)|l(?:arr;|har;|m;)|moust(?:;|ache;)|nmid;|o(?:a(?:ng;|rr;)|brk;|p(?:ar;|f;|lus;)|times;)|p(?:ar(?:;|gt;)|polint;)|rarr;|s(?:aquo;|cr;|h;|q(?:b;|uo(?:;|r;)))|t(?:hree;|imes;|ri(?:;|e;|f;|ltri;))|uluhar;|x;)|s(?:acute;|bquo;|c(?:;|E;|a(?:p;|ron;)|cue;|e(?:;|dil;)|irc;|n(?:E;|ap;|sim;)|polint;|sim;|y;)|dot(?:;|b;|e;)|e(?:Arr;|ar(?:hk;|r(?:;|ow;))|ct;?|mi;|swar;|tm(?:inus;|n;)|xt;)|fr(?:;|own;)|h(?:arp;|c(?:hcy;|y;)|ort(?:mid;|parallel;)|y;?)|i(?:gma(?:;|f;|v;)|m(?:;|dot;|e(?:;|q;)|g(?:;|E;)|l(?:;|E;)|ne;|plus;|rarr;))|larr;|m(?:a(?:llsetminus;|shp;)|eparsl;|i(?:d;|le;)|t(?:;|e(?:;|s;)))|o(?:ftcy;|l(?:;|b(?:;|ar;))|pf;)|pa(?:des(?:;|uit;)|r;)|q(?:c(?:ap(?:;|s;)|up(?:;|s;))|su(?:b(?:;|e;|set(?:;|eq;))|p(?:;|e;|set(?:;|eq;)))|u(?:;|ar(?:e;|f;)|f;))|rarr;|s(?:cr;|etmn;|mile;|tarf;)|t(?:ar(?:;|f;)|r(?:aight(?:epsilon;|phi;)|ns;))|u(?:b(?:;|E;|dot;|e(?:;|dot;)|mult;|n(?:E;|e;)|plus;|rarr;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;)))|cc(?:;|approx;|curlyeq;|eq;|n(?:approx;|eqq;|sim;)|sim;)|m;|ng;|p(?:1;?|2;?|3;?|;|E;|d(?:ot;|sub;)|e(?:;|dot;)|hs(?:ol;|ub;)|larr;|mult;|n(?:E;|e;)|plus;|s(?:et(?:;|eq(?:;|q;)|neq(?:;|q;))|im;|u(?:b;|p;))))|w(?:Arr;|ar(?:hk;|r(?:;|ow;))|nwar;)|zlig;?)|t(?:a(?:rget;|u;)|brk;|c(?:aron;|edil;|y;)|dot;|elrec;|fr;|h(?:e(?:re(?:4;|fore;)|ta(?:;|sym;|v;))|i(?:ck(?:approx;|sim;)|nsp;)|k(?:ap;|sim;)|orn;?)|i(?:lde;|mes(?:;|b(?:;|ar;)|d;|)|nt;)|o(?:ea;|p(?:;|bot;|cir;|f(?:;|ork;))|sa;)|prime;|r(?:ade;|i(?:angle(?:;|down;|left(?:;|eq;)|q;|right(?:;|eq;))|dot;|e;|minus;|plus;|sb;|time;)|pezium;)|s(?:c(?:r;|y;)|hcy;|trok;)|w(?:ixt;|ohead(?:leftarrow;|rightarrow;)))|u(?:Arr;|Har;|a(?:cute;?|rr;)|br(?:cy;|eve;)|c(?:irc;?|y;)|d(?:arr;|blac;|har;)|f(?:isht;|r;)|grave;?|h(?:ar(?:l;|r;)|blk;)|l(?:c(?:orn(?:;|er;)|rop;)|tri;)|m(?:acr;|l;?)|o(?:gon;|pf;)|p(?:arrow;|downarrow;|harpoon(?:left;|right;)|lus;|si(?:;|h;|lon;)|uparrows;)|r(?:c(?:orn(?:;|er;)|rop;)|ing;|tri;)|scr;|t(?:dot;|ilde;|ri(?:;|f;))|u(?:arr;|ml;?)|wangle;)|v(?:Arr;|Bar(?:;|v;)|Dash;|a(?:ngrt;|r(?:epsilon;|kappa;|nothing;|p(?:hi;|i;|ropto;)|r(?:;|ho;)|s(?:igma;|u(?:bsetneq(?:;|q;)|psetneq(?:;|q;)))|t(?:heta;|riangle(?:left;|right;))))|cy;|dash;|e(?:e(?:;|bar;|eq;)|llip;|r(?:bar;|t;))|fr;|ltri;|nsu(?:b;|p;)|opf;|prop;|rtri;|s(?:cr;|u(?:bn(?:E;|e;)|pn(?:E;|e;)))|zigzag;)|w(?:circ;|e(?:d(?:bar;|ge(?:;|q;))|ierp;)|fr;|opf;|p;|r(?:;|eath;)|scr;)|x(?:c(?:ap;|irc;|up;)|dtri;|fr;|h(?:Arr;|arr;)|i;|l(?:Arr;|arr;)|map;|nis;|o(?:dot;|p(?:f;|lus;)|time;)|r(?:Arr;|arr;)|s(?:cr;|qcup;)|u(?:plus;|tri;)|vee;|wedge;)|y(?:ac(?:ute;?|y;)|c(?:irc;|y;)|en;?|fr;|icy;|opf;|scr;|u(?:cy;|ml;?))|z(?:acute;|c(?:aron;|y;)|dot;|e(?:etrf;|ta;)|fr;|hcy;|igrarr;|opf;|scr;|w(?:j;|nj;)))|[\s\S]/g;
      var cs = 32;
      var As = /[^\r"&\u0000]+/g;
      var ds = /[^\r'&\u0000]+/g;
      var us = /[^\r\t\n\f &>\u0000]+/g;
      var ps = /[^\r\t\n\f \/>A-Z\u0000]+/g;
      var hs = /[^\r\t\n\f \/=>A-Z\u0000]+/g;
      var ms = /[^\]\r\u0000\uffff]*/g;
      var fs = /[^&<\r\u0000\uffff]*/g;
      var gs = /[^<\r\u0000\uffff]*/g;
      var Es = /[^\r\u0000\uffff]*/g;
      var Cs = /(?:(\/)?([a-z]+)>)|[\s\S]/g;
      var bs =
        /(?:([-a-z]+)[ \t\n\f]*=[ \t\n\f]*('[^'&\r\u0000]*'|"[^"&\r\u0000]*"|[^\t\n\r\f "&'\u0000>][^&> \t\n\r\f\u0000]*[ \t\n\f]))|[\s\S]/g;
      var ys = /[^\x09\x0A\x0C\x0D\x20]/;
      var Is = /[^\x09\x0A\x0C\x0D\x20]/g;
      var ws = /[^\x00\x09\x0A\x0C\x0D\x20]/;
      var Bs = /^[\x09\x0A\x0C\x0D\x20]+/;
      var Qs = /\x00/g;
      function buf2str(a) {
        var C = 16384;
        if (a.length < C) {
          return String.fromCharCode.apply(String, a);
        }
        var q = '';
        for (var re = 0; re < a.length; re += C) {
          q += String.fromCharCode.apply(String, a.slice(re, re + C));
        }
        return q;
      }
      function str2buf(a) {
        var C = [];
        for (var q = 0; q < a.length; q++) {
          C[q] = a.charCodeAt(q);
        }
        return C;
      }
      function isA(a, C) {
        if (typeof C === 'string') {
          return a.namespaceURI === lt.HTML && a.localName === C;
        }
        var q = C[a.namespaceURI];
        return q && q[a.localName];
      }
      function isMathmlTextIntegrationPoint(a) {
        return isA(a, es);
      }
      function isHTMLIntegrationPoint(a) {
        if (isA(a, ts)) return true;
        if (a.namespaceURI === lt.MATHML && a.localName === 'annotation-xml') {
          var C = a.getAttribute('encoding');
          if (C) C = C.toLowerCase();
          if (C === 'text/html' || C === 'application/xhtml+xml') return true;
        }
        return false;
      }
      function adjustSVGTagName(a) {
        if (a in ns) return ns[a];
        else return a;
      }
      function adjustSVGAttributes(a) {
        for (var C = 0, q = a.length; C < q; C++) {
          if (a[C][0] in ss) {
            a[C][0] = ss[a[C][0]];
          }
        }
      }
      function adjustMathMLAttributes(a) {
        for (var C = 0, q = a.length; C < q; C++) {
          if (a[C][0] === 'definitionurl') {
            a[C][0] = 'definitionURL';
            break;
          }
        }
      }
      function adjustForeignAttributes(a) {
        for (var C = 0, q = a.length; C < q; C++) {
          if (a[C][0] in rs) {
            a[C].push(rs[a[C][0]]);
          }
        }
      }
      function transferAttributes(a, C) {
        for (var q = 0, re = a.length; q < re; q++) {
          var ae = a[q][0],
            Ue = a[q][1];
          if (C.hasAttribute(ae)) continue;
          C._setAttribute(ae, Ue);
        }
      }
      HTMLParser.ElementStack = function ElementStack() {
        this.elements = [];
        this.top = null;
      };
      HTMLParser.ElementStack.prototype.push = function (a) {
        this.elements.push(a);
        this.top = a;
      };
      HTMLParser.ElementStack.prototype.pop = function (a) {
        this.elements.pop();
        this.top = this.elements[this.elements.length - 1];
      };
      HTMLParser.ElementStack.prototype.popTag = function (a) {
        for (var C = this.elements.length - 1; C > 0; C--) {
          var q = this.elements[C];
          if (isA(q, a)) break;
        }
        this.elements.length = C;
        this.top = this.elements[C - 1];
      };
      HTMLParser.ElementStack.prototype.popElementType = function (a) {
        for (var C = this.elements.length - 1; C > 0; C--) {
          if (this.elements[C] instanceof a) break;
        }
        this.elements.length = C;
        this.top = this.elements[C - 1];
      };
      HTMLParser.ElementStack.prototype.popElement = function (a) {
        for (var C = this.elements.length - 1; C > 0; C--) {
          if (this.elements[C] === a) break;
        }
        this.elements.length = C;
        this.top = this.elements[C - 1];
      };
      HTMLParser.ElementStack.prototype.removeElement = function (a) {
        if (this.top === a) this.pop();
        else {
          var C = this.elements.lastIndexOf(a);
          if (C !== -1) this.elements.splice(C, 1);
        }
      };
      HTMLParser.ElementStack.prototype.clearToContext = function (a) {
        for (var C = this.elements.length - 1; C > 0; C--) {
          if (isA(this.elements[C], a)) break;
        }
        this.elements.length = C + 1;
        this.top = this.elements[C];
      };
      HTMLParser.ElementStack.prototype.contains = function (a) {
        return this.inSpecificScope(a, Object.create(null));
      };
      HTMLParser.ElementStack.prototype.inSpecificScope = function (a, C) {
        for (var q = this.elements.length - 1; q >= 0; q--) {
          var re = this.elements[q];
          if (isA(re, a)) return true;
          if (isA(re, C)) return false;
        }
        return false;
      };
      HTMLParser.ElementStack.prototype.elementInSpecificScope = function (
        a,
        C
      ) {
        for (var q = this.elements.length - 1; q >= 0; q--) {
          var re = this.elements[q];
          if (re === a) return true;
          if (isA(re, C)) return false;
        }
        return false;
      };
      HTMLParser.ElementStack.prototype.elementTypeInSpecificScope = function (
        a,
        C
      ) {
        for (var q = this.elements.length - 1; q >= 0; q--) {
          var re = this.elements[q];
          if (re instanceof a) return true;
          if (isA(re, C)) return false;
        }
        return false;
      };
      HTMLParser.ElementStack.prototype.inScope = function (a) {
        return this.inSpecificScope(a, zr);
      };
      HTMLParser.ElementStack.prototype.elementInScope = function (a) {
        return this.elementInSpecificScope(a, zr);
      };
      HTMLParser.ElementStack.prototype.elementTypeInScope = function (a) {
        return this.elementTypeInSpecificScope(a, zr);
      };
      HTMLParser.ElementStack.prototype.inButtonScope = function (a) {
        return this.inSpecificScope(a, Kr);
      };
      HTMLParser.ElementStack.prototype.inListItemScope = function (a) {
        return this.inSpecificScope(a, $r);
      };
      HTMLParser.ElementStack.prototype.inTableScope = function (a) {
        return this.inSpecificScope(a, Xr);
      };
      HTMLParser.ElementStack.prototype.inSelectScope = function (a) {
        for (var C = this.elements.length - 1; C >= 0; C--) {
          var q = this.elements[C];
          if (q.namespaceURI !== lt.HTML) return false;
          var re = q.localName;
          if (re === a) return true;
          if (re !== 'optgroup' && re !== 'option') return false;
        }
        return false;
      };
      HTMLParser.ElementStack.prototype.generateImpliedEndTags = function (
        a,
        C
      ) {
        var q = C ? Vr : Hr;
        for (var re = this.elements.length - 1; re >= 0; re--) {
          var ae = this.elements[re];
          if (a && isA(ae, a)) break;
          if (!isA(this.elements[re], q)) break;
        }
        this.elements.length = re + 1;
        this.top = this.elements[re];
      };
      HTMLParser.ActiveFormattingElements = function AFE() {
        this.list = [];
        this.attrs = [];
      };
      HTMLParser.ActiveFormattingElements.prototype.MARKER = { localName: '|' };
      HTMLParser.ActiveFormattingElements.prototype.insertMarker = function () {
        this.list.push(this.MARKER);
        this.attrs.push(this.MARKER);
      };
      HTMLParser.ActiveFormattingElements.prototype.push = function (a, C) {
        var q = 0;
        for (var re = this.list.length - 1; re >= 0; re--) {
          if (this.list[re] === this.MARKER) break;
          if (equal(a, this.list[re], this.attrs[re])) {
            q++;
            if (q === 3) {
              this.list.splice(re, 1);
              this.attrs.splice(re, 1);
              break;
            }
          }
        }
        this.list.push(a);
        var ae = [];
        for (var Ue = 0; Ue < C.length; Ue++) {
          ae[Ue] = C[Ue];
        }
        this.attrs.push(ae);
        function equal(a, C, q) {
          if (a.localName !== C.localName) return false;
          if (a._numattrs !== q.length) return false;
          for (var re = 0, ae = q.length; re < ae; re++) {
            var Ue = q[re][0];
            var lt = q[re][1];
            if (!a.hasAttribute(Ue)) return false;
            if (a.getAttribute(Ue) !== lt) return false;
          }
          return true;
        }
      };
      HTMLParser.ActiveFormattingElements.prototype.clearToMarker =
        function () {
          for (var a = this.list.length - 1; a >= 0; a--) {
            if (this.list[a] === this.MARKER) break;
          }
          if (a < 0) a = 0;
          this.list.length = a;
          this.attrs.length = a;
        };
      HTMLParser.ActiveFormattingElements.prototype.findElementByTag =
        function (a) {
          for (var C = this.list.length - 1; C >= 0; C--) {
            var q = this.list[C];
            if (q === this.MARKER) break;
            if (q.localName === a) return q;
          }
          return null;
        };
      HTMLParser.ActiveFormattingElements.prototype.indexOf = function (a) {
        return this.list.lastIndexOf(a);
      };
      HTMLParser.ActiveFormattingElements.prototype.remove = function (a) {
        var C = this.list.lastIndexOf(a);
        if (C !== -1) {
          this.list.splice(C, 1);
          this.attrs.splice(C, 1);
        }
      };
      HTMLParser.ActiveFormattingElements.prototype.replace = function (
        a,
        C,
        q
      ) {
        var re = this.list.lastIndexOf(a);
        if (re !== -1) {
          this.list[re] = C;
          this.attrs[re] = q;
        }
      };
      HTMLParser.ActiveFormattingElements.prototype.insertAfter = function (
        a,
        C
      ) {
        var q = this.list.lastIndexOf(a);
        if (q !== -1) {
          this.list.splice(q, 0, C);
          this.attrs.splice(q, 0, C);
        }
      };
      function HTMLParser(a, C, q) {
        var Hr = null;
        var Vr = 0;
        var zr = 0;
        var $r = false;
        var Kr = false;
        var Xr = 0;
        var Zr = [];
        var es = '';
        var ts = true;
        var rs = 0;
        var ss = data_state;
        var ns;
        var vs;
        var Ss = '';
        var _s = '';
        var Ts = [];
        var ks = '';
        var Rs = '';
        var Ds = [];
        var Ns = [];
        var Ls = [];
        var Fs = [];
        var Ms = [];
        var Ps = false;
        var Os = initial_mode;
        var xs = null;
        var Us = [];
        var Gs = new HTMLParser.ElementStack();
        var Hs = new HTMLParser.ActiveFormattingElements();
        var qs = C !== undefined;
        var Vs = null;
        var Ws = null;
        var Ys = true;
        if (C) {
          Ys = C.ownerDocument._scripting_enabled;
        }
        if (q && q.scripting_enabled === false) Ys = false;
        var js = true;
        var Js = false;
        var zs;
        var $s;
        var Ks = [];
        var Xs = false;
        var Zs = false;
        var en = {
          document: function () {
            return tn;
          },
          _asDocumentFragment: function () {
            var a = tn.createDocumentFragment();
            var C = tn.firstChild;
            while (C.hasChildNodes()) {
              a.appendChild(C.firstChild);
            }
            return a;
          },
          pause: function () {
            rs++;
          },
          resume: function () {
            rs--;
            this.parse('');
          },
          parse: function (a, C, q) {
            var re;
            if (rs > 0) {
              es += a;
              return true;
            }
            if (Xr === 0) {
              if (es) {
                a = es + a;
                es = '';
              }
              if (C) {
                a += '￿';
                $r = true;
              }
              Hr = a;
              Vr = a.length;
              zr = 0;
              if (ts) {
                ts = false;
                if (Hr.charCodeAt(0) === 65279) zr = 1;
              }
              Xr++;
              re = scanChars(q);
              es = Hr.substring(zr, Vr);
              Xr--;
            } else {
              Xr++;
              Zr.push(Hr, Vr, zr);
              Hr = a;
              Vr = a.length;
              zr = 0;
              scanChars();
              re = false;
              es = Hr.substring(zr, Vr);
              zr = Zr.pop();
              Vr = Zr.pop();
              Hr = Zr.pop();
              if (es) {
                Hr = es + Hr.substring(zr);
                Vr = Hr.length;
                zr = 0;
                es = '';
              }
              Xr--;
            }
            return re;
          }
        };
        var tn = new re(true, a);
        tn._parser = en;
        tn._scripting_enabled = Ys;
        if (C) {
          if (C.ownerDocument._quirks) tn._quirks = true;
          if (C.ownerDocument._limitedQuirks) tn._limitedQuirks = true;
          if (C.namespaceURI === lt.HTML) {
            switch (C.localName) {
              case 'title':
              case 'textarea':
                ss = rcdata_state;
                break;
              case 'style':
              case 'xmp':
              case 'iframe':
              case 'noembed':
              case 'noframes':
              case 'script':
              case 'plaintext':
                ss = plaintext_state;
                break;
            }
          }
          var rn = tn.createElement('html');
          tn._appendChild(rn);
          Gs.push(rn);
          if (C instanceof Wt.HTMLTemplateElement) {
            Us.push(in_template_mode);
          }
          resetInsertionMode();
          for (var sn = C; sn !== null; sn = sn.parentElement) {
            if (sn instanceof Wt.HTMLFormElement) {
              Ws = sn;
              break;
            }
          }
        }
        function scanChars(a) {
          var C, q, re, ae;
          while (zr < Vr) {
            if (rs > 0 || (a && a())) {
              return true;
            }
            switch (typeof ss.lookahead) {
              case 'undefined':
                C = Hr.charCodeAt(zr++);
                if (Kr) {
                  Kr = false;
                  if (C === 10) {
                    zr++;
                    continue;
                  }
                }
                switch (C) {
                  case 13:
                    if (zr < Vr) {
                      if (Hr.charCodeAt(zr) === 10) zr++;
                    } else {
                      Kr = true;
                    }
                    ss(10);
                    break;
                  case 65535:
                    if ($r && zr === Vr) {
                      ss(Er);
                      break;
                    }
                  default:
                    ss(C);
                    break;
                }
                break;
              case 'number':
                C = Hr.charCodeAt(zr);
                var Ue = ss.lookahead;
                var lt = true;
                if (Ue < 0) {
                  lt = false;
                  Ue = -Ue;
                }
                if (Ue < Vr - zr) {
                  q = lt ? Hr.substring(zr, zr + Ue) : null;
                  ae = false;
                } else {
                  if ($r) {
                    q = lt ? Hr.substring(zr, Vr) : null;
                    ae = true;
                    if (C === 65535 && zr === Vr - 1) C = Er;
                  } else {
                    return true;
                  }
                }
                ss(C, q, ae);
                break;
              case 'string':
                C = Hr.charCodeAt(zr);
                re = ss.lookahead;
                var Pt = Hr.indexOf(re, zr);
                if (Pt !== -1) {
                  q = Hr.substring(zr, Pt + re.length);
                  ae = false;
                } else {
                  if (!$r) return true;
                  q = Hr.substring(zr, Vr);
                  if (C === 65535 && zr === Vr - 1) C = Er;
                  ae = true;
                }
                ss(C, q, ae);
                break;
            }
          }
          return false;
        }
        function addAttribute(a, C) {
          for (var q = 0; q < Ms.length; q++) {
            if (Ms[q][0] === a) return;
          }
          if (C !== undefined) {
            Ms.push([a, C]);
          } else {
            Ms.push([a]);
          }
        }
        function handleSimpleAttribute() {
          bs.lastIndex = zr - 1;
          var a = bs.exec(Hr);
          if (!a) throw new Error('should never happen');
          var C = a[1];
          if (!C) return false;
          var q = a[2];
          var re = q.length;
          switch (q[0]) {
            case '"':
            case "'":
              q = q.substring(1, re - 1);
              zr += a[0].length - 1;
              ss = after_attribute_value_quoted_state;
              break;
            default:
              ss = before_attribute_name_state;
              zr += a[0].length - 1;
              q = q.substring(0, re - 1);
              break;
          }
          for (var ae = 0; ae < Ms.length; ae++) {
            if (Ms[ae][0] === C) return true;
          }
          Ms.push([C, q]);
          return true;
        }
        function beginTagName() {
          Ps = false;
          Ss = '';
          Ms.length = 0;
        }
        function beginEndTagName() {
          Ps = true;
          Ss = '';
          Ms.length = 0;
        }
        function beginTempBuf() {
          Ts.length = 0;
        }
        function beginAttrName() {
          ks = '';
        }
        function beginAttrValue() {
          Rs = '';
        }
        function beginComment() {
          Ds.length = 0;
        }
        function beginDoctype() {
          Ns.length = 0;
          Ls = null;
          Fs = null;
        }
        function beginDoctypePublicId() {
          Ls = [];
        }
        function beginDoctypeSystemId() {
          Fs = [];
        }
        function forcequirks() {
          Js = true;
        }
        function cdataAllowed() {
          return (
            Gs.top && Gs.top.namespaceURI !== 'http://www.w3.org/1999/xhtml'
          );
        }
        function appropriateEndTag(a) {
          return _s === a;
        }
        function flushText() {
          if (Ks.length > 0) {
            var a = buf2str(Ks);
            Ks.length = 0;
            if (Zs) {
              Zs = false;
              if (a[0] === '\n') a = a.substring(1);
              if (a.length === 0) return;
            }
            nn(Ir, a);
            Xs = false;
          }
          Zs = false;
        }
        function getMatchingChars(a) {
          a.lastIndex = zr - 1;
          var C = a.exec(Hr);
          if (C && C.index === zr - 1) {
            C = C[0];
            zr += C.length - 1;
            if ($r && zr === Vr) {
              C = C.slice(0, -1);
              zr--;
            }
            return C;
          } else {
            throw new Error('should never happen');
          }
        }
        function emitCharsWhile(a) {
          a.lastIndex = zr - 1;
          var C = a.exec(Hr)[0];
          if (!C) return false;
          emitCharString(C);
          zr += C.length - 1;
          return true;
        }
        function emitCharString(a) {
          if (Ks.length > 0) flushText();
          if (Zs) {
            Zs = false;
            if (a[0] === '\n') a = a.substring(1);
            if (a.length === 0) return;
          }
          nn(Ir, a);
        }
        function emitTag() {
          if (Ps) nn(Qr, Ss);
          else {
            var a = Ss;
            Ss = '';
            _s = a;
            nn(Br, a, Ms);
          }
        }
        function emitSimpleTag() {
          if (zr === Vr) {
            return false;
          }
          Cs.lastIndex = zr;
          var a = Cs.exec(Hr);
          if (!a) throw new Error('should never happen');
          var C = a[2];
          if (!C) return false;
          var q = a[1];
          if (q) {
            zr += C.length + 2;
            nn(Qr, C);
          } else {
            zr += C.length + 1;
            _s = C;
            nn(Br, C, Nr);
          }
          return true;
        }
        function emitSelfClosingTag() {
          if (Ps) nn(Qr, Ss, null, true);
          else {
            nn(Br, Ss, Ms, true);
          }
        }
        function emitDoctype() {
          nn(
            Dr,
            buf2str(Ns),
            Ls ? buf2str(Ls) : undefined,
            Fs ? buf2str(Fs) : undefined
          );
        }
        function emitEOF() {
          flushText();
          Os(Er);
          tn.modclock = 1;
        }
        var nn = (en.insertToken = function insertToken(a, C, q, re) {
          flushText();
          var ae = Gs.top;
          if (!ae || ae.namespaceURI === lt.HTML) {
            Os(a, C, q, re);
          } else {
            if (a !== Br && a !== Ir) {
              insertForeignToken(a, C, q, re);
            } else {
              if (
                (isMathmlTextIntegrationPoint(ae) &&
                  (a === Ir ||
                    (a === Br && C !== 'mglyph' && C !== 'malignmark'))) ||
                (a === Br &&
                  C === 'svg' &&
                  ae.namespaceURI === lt.MATHML &&
                  ae.localName === 'annotation-xml') ||
                isHTMLIntegrationPoint(ae)
              ) {
                $s = true;
                Os(a, C, q, re);
                $s = false;
              } else {
                insertForeignToken(a, C, q, re);
              }
            }
          }
        });
        function insertComment(a) {
          var C = Gs.top;
          if (on && isA(C, Gr)) {
            fosterParent(function (C) {
              return C.createComment(a);
            });
          } else {
            if (C instanceof Wt.HTMLTemplateElement) {
              C = C.content;
            }
            C._appendChild(C.ownerDocument.createComment(a));
          }
        }
        function insertText(a) {
          var C = Gs.top;
          if (on && isA(C, Gr)) {
            fosterParent(function (C) {
              return C.createTextNode(a);
            });
          } else {
            if (C instanceof Wt.HTMLTemplateElement) {
              C = C.content;
            }
            var q = C.lastChild;
            if (q && q.nodeType === Ue.TEXT_NODE) {
              q.appendData(a);
            } else {
              C._appendChild(C.ownerDocument.createTextNode(a));
            }
          }
        }
        function createHTMLElt(a, C, q) {
          var re = Pt.createElement(a, C, null);
          if (q) {
            for (var ae = 0, Ue = q.length; ae < Ue; ae++) {
              re._setAttribute(q[ae][0], q[ae][1]);
            }
          }
          return re;
        }
        var on = false;
        function insertHTMLElement(a, C) {
          var q = insertElement(function (q) {
            return createHTMLElt(q, a, C);
          });
          if (isA(q, Jr)) {
            q._form = Ws;
          }
          return q;
        }
        function insertElement(a) {
          var C;
          if (on && isA(Gs.top, Gr)) {
            C = fosterParent(a);
          } else if (Gs.top instanceof Wt.HTMLTemplateElement) {
            C = a(Gs.top.content.ownerDocument);
            Gs.top.content._appendChild(C);
          } else {
            C = a(Gs.top.ownerDocument);
            Gs.top._appendChild(C);
          }
          Gs.push(C);
          return C;
        }
        function insertForeignElement(a, C, q) {
          return insertElement(function (re) {
            var ae = re._createElementNS(a, q, null);
            if (C) {
              for (var Ue = 0, lt = C.length; Ue < lt; Ue++) {
                var Pt = C[Ue];
                if (Pt.length === 2) ae._setAttribute(Pt[0], Pt[1]);
                else {
                  ae._setAttributeNS(Pt[2], Pt[0], Pt[1]);
                }
              }
            }
            return ae;
          });
        }
        function lastElementOfType(a) {
          for (var C = Gs.elements.length - 1; C >= 0; C--) {
            if (Gs.elements[C] instanceof a) {
              return C;
            }
          }
          return -1;
        }
        function fosterParent(a) {
          var C,
            q,
            re = -1,
            ae = -1,
            lt;
          re = lastElementOfType(Wt.HTMLTableElement);
          ae = lastElementOfType(Wt.HTMLTemplateElement);
          if (ae >= 0 && (re < 0 || ae > re)) {
            C = Gs.elements[ae];
          } else if (re >= 0) {
            C = Gs.elements[re].parentNode;
            if (C) {
              q = Gs.elements[re];
            } else {
              C = Gs.elements[re - 1];
            }
          }
          if (!C) C = Gs.elements[0];
          if (C instanceof Wt.HTMLTemplateElement) {
            C = C.content;
          }
          lt = a(C.ownerDocument);
          if (lt.nodeType === Ue.TEXT_NODE) {
            var Pt;
            if (q) Pt = q.previousSibling;
            else Pt = C.lastChild;
            if (Pt && Pt.nodeType === Ue.TEXT_NODE) {
              Pt.appendData(lt.data);
              return lt;
            }
          }
          if (q) C.insertBefore(lt, q);
          else C._appendChild(lt);
          return lt;
        }
        function resetInsertionMode() {
          var a = false;
          for (var q = Gs.elements.length - 1; q >= 0; q--) {
            var re = Gs.elements[q];
            if (q === 0) {
              a = true;
              if (qs) {
                re = C;
              }
            }
            if (re.namespaceURI === lt.HTML) {
              var ae = re.localName;
              switch (ae) {
                case 'select':
                  for (var Ue = q; Ue > 0; ) {
                    var Pt = Gs.elements[--Ue];
                    if (Pt instanceof Wt.HTMLTemplateElement) {
                      break;
                    } else if (Pt instanceof Wt.HTMLTableElement) {
                      Os = in_select_in_table_mode;
                      return;
                    }
                  }
                  Os = in_select_mode;
                  return;
                case 'tr':
                  Os = in_row_mode;
                  return;
                case 'tbody':
                case 'tfoot':
                case 'thead':
                  Os = in_table_body_mode;
                  return;
                case 'caption':
                  Os = in_caption_mode;
                  return;
                case 'colgroup':
                  Os = in_column_group_mode;
                  return;
                case 'table':
                  Os = in_table_mode;
                  return;
                case 'template':
                  Os = Us[Us.length - 1];
                  return;
                case 'body':
                  Os = in_body_mode;
                  return;
                case 'frameset':
                  Os = in_frameset_mode;
                  return;
                case 'html':
                  if (Vs === null) {
                    Os = before_head_mode;
                  } else {
                    Os = after_head_mode;
                  }
                  return;
                default:
                  if (!a) {
                    if (ae === 'head') {
                      Os = in_head_mode;
                      return;
                    }
                    if (ae === 'td' || ae === 'th') {
                      Os = in_cell_mode;
                      return;
                    }
                  }
              }
            }
            if (a) {
              Os = in_body_mode;
              return;
            }
          }
        }
        function parseRawText(a, C) {
          insertHTMLElement(a, C);
          ss = rawtext_state;
          xs = Os;
          Os = text_mode;
        }
        function parseRCDATA(a, C) {
          insertHTMLElement(a, C);
          ss = rcdata_state;
          xs = Os;
          Os = text_mode;
        }
        function afeclone(a, C) {
          return {
            elt: createHTMLElt(a, Hs.list[C].localName, Hs.attrs[C]),
            attrs: Hs.attrs[C]
          };
        }
        function afereconstruct() {
          if (Hs.list.length === 0) return;
          var a = Hs.list[Hs.list.length - 1];
          if (a === Hs.MARKER) return;
          if (Gs.elements.lastIndexOf(a) !== -1) return;
          for (var C = Hs.list.length - 2; C >= 0; C--) {
            a = Hs.list[C];
            if (a === Hs.MARKER) break;
            if (Gs.elements.lastIndexOf(a) !== -1) break;
          }
          for (C = C + 1; C < Hs.list.length; C++) {
            var q = insertElement(function (a) {
              return afeclone(a, C).elt;
            });
            Hs.list[C] = q;
          }
        }
        var an = { localName: 'BM' };
        function adoptionAgency(a) {
          if (isA(Gs.top, a) && Hs.indexOf(Gs.top) === -1) {
            Gs.pop();
            return true;
          }
          var C = 0;
          while (C < 8) {
            C++;
            var q = Hs.findElementByTag(a);
            if (!q) {
              return false;
            }
            var re = Gs.elements.lastIndexOf(q);
            if (re === -1) {
              Hs.remove(q);
              return true;
            }
            if (!Gs.elementInScope(q)) {
              return true;
            }
            var ae = null,
              Ue;
            for (var lt = re + 1; lt < Gs.elements.length; lt++) {
              if (isA(Gs.elements[lt], Or)) {
                ae = Gs.elements[lt];
                Ue = lt;
                break;
              }
            }
            if (!ae) {
              Gs.popElement(q);
              Hs.remove(q);
              return true;
            } else {
              var Pt = Gs.elements[re - 1];
              Hs.insertAfter(q, an);
              var Ar = ae;
              var Er = ae;
              var Ir = Ue;
              var Br;
              var Qr = 0;
              while (true) {
                Qr++;
                Ar = Gs.elements[--Ir];
                if (Ar === q) break;
                Br = Hs.indexOf(Ar);
                if (Qr > 3 && Br !== -1) {
                  Hs.remove(Ar);
                  Br = -1;
                }
                if (Br === -1) {
                  Gs.removeElement(Ar);
                  continue;
                }
                var kr = afeclone(Pt.ownerDocument, Br);
                Hs.replace(Ar, kr.elt, kr.attrs);
                Gs.elements[Ir] = kr.elt;
                Ar = kr.elt;
                if (Er === ae) {
                  Hs.remove(an);
                  Hs.insertAfter(kr.elt, an);
                }
                Ar._appendChild(Er);
                Er = Ar;
              }
              if (on && isA(Pt, Gr)) {
                fosterParent(function () {
                  return Er;
                });
              } else if (Pt instanceof Wt.HTMLTemplateElement) {
                Pt.content._appendChild(Er);
              } else {
                Pt._appendChild(Er);
              }
              var Dr = afeclone(ae.ownerDocument, Hs.indexOf(q));
              while (ae.hasChildNodes()) {
                Dr.elt._appendChild(ae.firstChild);
              }
              ae._appendChild(Dr.elt);
              Hs.remove(q);
              Hs.replace(an, Dr.elt, Dr.attrs);
              Gs.removeElement(q);
              var Nr = Gs.elements.lastIndexOf(ae);
              Gs.elements.splice(Nr + 1, 0, Dr.elt);
            }
          }
          return true;
        }
        function handleScriptEnd() {
          Gs.pop();
          Os = xs;
          return;
        }
        function stopParsing() {
          delete tn._parser;
          Gs.elements.length = 0;
          if (tn.defaultView) {
            tn.defaultView.dispatchEvent(new Wt.Event('load', {}));
          }
        }
        function reconsume(a, C) {
          ss = C;
          zr--;
        }
        function data_state(a) {
          switch (a) {
            case 38:
              ns = data_state;
              ss = character_reference_state;
              break;
            case 60:
              if (emitSimpleTag()) break;
              ss = tag_open_state;
              break;
            case 0:
              Ks.push(a);
              Xs = true;
              break;
            case -1:
              emitEOF();
              break;
            default:
              emitCharsWhile(fs) || Ks.push(a);
              break;
          }
        }
        function rcdata_state(a) {
          switch (a) {
            case 38:
              ns = rcdata_state;
              ss = character_reference_state;
              break;
            case 60:
              ss = rcdata_less_than_sign_state;
              break;
            case 0:
              Ks.push(65533);
              Xs = true;
              break;
            case -1:
              emitEOF();
              break;
            default:
              Ks.push(a);
              break;
          }
        }
        function rawtext_state(a) {
          switch (a) {
            case 60:
              ss = rawtext_less_than_sign_state;
              break;
            case 0:
              Ks.push(65533);
              break;
            case -1:
              emitEOF();
              break;
            default:
              emitCharsWhile(gs) || Ks.push(a);
              break;
          }
        }
        function script_data_state(a) {
          switch (a) {
            case 60:
              ss = script_data_less_than_sign_state;
              break;
            case 0:
              Ks.push(65533);
              break;
            case -1:
              emitEOF();
              break;
            default:
              emitCharsWhile(gs) || Ks.push(a);
              break;
          }
        }
        function plaintext_state(a) {
          switch (a) {
            case 0:
              Ks.push(65533);
              break;
            case -1:
              emitEOF();
              break;
            default:
              emitCharsWhile(Es) || Ks.push(a);
              break;
          }
        }
        function tag_open_state(a) {
          switch (a) {
            case 33:
              ss = markup_declaration_open_state;
              break;
            case 47:
              ss = end_tag_open_state;
              break;
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              beginTagName();
              reconsume(a, tag_name_state);
              break;
            case 63:
              reconsume(a, bogus_comment_state);
              break;
            default:
              Ks.push(60);
              reconsume(a, data_state);
              break;
          }
        }
        function end_tag_open_state(a) {
          switch (a) {
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              beginEndTagName();
              reconsume(a, tag_name_state);
              break;
            case 62:
              ss = data_state;
              break;
            case -1:
              Ks.push(60);
              Ks.push(47);
              emitEOF();
              break;
            default:
              reconsume(a, bogus_comment_state);
              break;
          }
        }
        function tag_name_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              ss = before_attribute_name_state;
              break;
            case 47:
              ss = self_closing_start_tag_state;
              break;
            case 62:
              ss = data_state;
              emitTag();
              break;
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
              Ss += String.fromCharCode(a + 32);
              break;
            case 0:
              Ss += String.fromCharCode(65533);
              break;
            case -1:
              emitEOF();
              break;
            default:
              Ss += getMatchingChars(ps);
              break;
          }
        }
        function rcdata_less_than_sign_state(a) {
          if (a === 47) {
            beginTempBuf();
            ss = rcdata_end_tag_open_state;
          } else {
            Ks.push(60);
            reconsume(a, rcdata_state);
          }
        }
        function rcdata_end_tag_open_state(a) {
          switch (a) {
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              beginEndTagName();
              reconsume(a, rcdata_end_tag_name_state);
              break;
            default:
              Ks.push(60);
              Ks.push(47);
              reconsume(a, rcdata_state);
              break;
          }
        }
        function rcdata_end_tag_name_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              if (appropriateEndTag(Ss)) {
                ss = before_attribute_name_state;
                return;
              }
              break;
            case 47:
              if (appropriateEndTag(Ss)) {
                ss = self_closing_start_tag_state;
                return;
              }
              break;
            case 62:
              if (appropriateEndTag(Ss)) {
                ss = data_state;
                emitTag();
                return;
              }
              break;
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
              Ss += String.fromCharCode(a + 32);
              Ts.push(a);
              return;
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              Ss += String.fromCharCode(a);
              Ts.push(a);
              return;
            default:
              break;
          }
          Ks.push(60);
          Ks.push(47);
          Ar(Ks, Ts);
          reconsume(a, rcdata_state);
        }
        function rawtext_less_than_sign_state(a) {
          if (a === 47) {
            beginTempBuf();
            ss = rawtext_end_tag_open_state;
          } else {
            Ks.push(60);
            reconsume(a, rawtext_state);
          }
        }
        function rawtext_end_tag_open_state(a) {
          switch (a) {
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              beginEndTagName();
              reconsume(a, rawtext_end_tag_name_state);
              break;
            default:
              Ks.push(60);
              Ks.push(47);
              reconsume(a, rawtext_state);
              break;
          }
        }
        function rawtext_end_tag_name_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              if (appropriateEndTag(Ss)) {
                ss = before_attribute_name_state;
                return;
              }
              break;
            case 47:
              if (appropriateEndTag(Ss)) {
                ss = self_closing_start_tag_state;
                return;
              }
              break;
            case 62:
              if (appropriateEndTag(Ss)) {
                ss = data_state;
                emitTag();
                return;
              }
              break;
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
              Ss += String.fromCharCode(a + 32);
              Ts.push(a);
              return;
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              Ss += String.fromCharCode(a);
              Ts.push(a);
              return;
            default:
              break;
          }
          Ks.push(60);
          Ks.push(47);
          Ar(Ks, Ts);
          reconsume(a, rawtext_state);
        }
        function script_data_less_than_sign_state(a) {
          switch (a) {
            case 47:
              beginTempBuf();
              ss = script_data_end_tag_open_state;
              break;
            case 33:
              ss = script_data_escape_start_state;
              Ks.push(60);
              Ks.push(33);
              break;
            default:
              Ks.push(60);
              reconsume(a, script_data_state);
              break;
          }
        }
        function script_data_end_tag_open_state(a) {
          switch (a) {
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              beginEndTagName();
              reconsume(a, script_data_end_tag_name_state);
              break;
            default:
              Ks.push(60);
              Ks.push(47);
              reconsume(a, script_data_state);
              break;
          }
        }
        function script_data_end_tag_name_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              if (appropriateEndTag(Ss)) {
                ss = before_attribute_name_state;
                return;
              }
              break;
            case 47:
              if (appropriateEndTag(Ss)) {
                ss = self_closing_start_tag_state;
                return;
              }
              break;
            case 62:
              if (appropriateEndTag(Ss)) {
                ss = data_state;
                emitTag();
                return;
              }
              break;
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
              Ss += String.fromCharCode(a + 32);
              Ts.push(a);
              return;
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              Ss += String.fromCharCode(a);
              Ts.push(a);
              return;
            default:
              break;
          }
          Ks.push(60);
          Ks.push(47);
          Ar(Ks, Ts);
          reconsume(a, script_data_state);
        }
        function script_data_escape_start_state(a) {
          if (a === 45) {
            ss = script_data_escape_start_dash_state;
            Ks.push(45);
          } else {
            reconsume(a, script_data_state);
          }
        }
        function script_data_escape_start_dash_state(a) {
          if (a === 45) {
            ss = script_data_escaped_dash_dash_state;
            Ks.push(45);
          } else {
            reconsume(a, script_data_state);
          }
        }
        function script_data_escaped_state(a) {
          switch (a) {
            case 45:
              ss = script_data_escaped_dash_state;
              Ks.push(45);
              break;
            case 60:
              ss = script_data_escaped_less_than_sign_state;
              break;
            case 0:
              Ks.push(65533);
              break;
            case -1:
              emitEOF();
              break;
            default:
              Ks.push(a);
              break;
          }
        }
        function script_data_escaped_dash_state(a) {
          switch (a) {
            case 45:
              ss = script_data_escaped_dash_dash_state;
              Ks.push(45);
              break;
            case 60:
              ss = script_data_escaped_less_than_sign_state;
              break;
            case 0:
              ss = script_data_escaped_state;
              Ks.push(65533);
              break;
            case -1:
              emitEOF();
              break;
            default:
              ss = script_data_escaped_state;
              Ks.push(a);
              break;
          }
        }
        function script_data_escaped_dash_dash_state(a) {
          switch (a) {
            case 45:
              Ks.push(45);
              break;
            case 60:
              ss = script_data_escaped_less_than_sign_state;
              break;
            case 62:
              ss = script_data_state;
              Ks.push(62);
              break;
            case 0:
              ss = script_data_escaped_state;
              Ks.push(65533);
              break;
            case -1:
              emitEOF();
              break;
            default:
              ss = script_data_escaped_state;
              Ks.push(a);
              break;
          }
        }
        function script_data_escaped_less_than_sign_state(a) {
          switch (a) {
            case 47:
              beginTempBuf();
              ss = script_data_escaped_end_tag_open_state;
              break;
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              beginTempBuf();
              Ks.push(60);
              reconsume(a, script_data_double_escape_start_state);
              break;
            default:
              Ks.push(60);
              reconsume(a, script_data_escaped_state);
              break;
          }
        }
        function script_data_escaped_end_tag_open_state(a) {
          switch (a) {
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              beginEndTagName();
              reconsume(a, script_data_escaped_end_tag_name_state);
              break;
            default:
              Ks.push(60);
              Ks.push(47);
              reconsume(a, script_data_escaped_state);
              break;
          }
        }
        function script_data_escaped_end_tag_name_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              if (appropriateEndTag(Ss)) {
                ss = before_attribute_name_state;
                return;
              }
              break;
            case 47:
              if (appropriateEndTag(Ss)) {
                ss = self_closing_start_tag_state;
                return;
              }
              break;
            case 62:
              if (appropriateEndTag(Ss)) {
                ss = data_state;
                emitTag();
                return;
              }
              break;
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
              Ss += String.fromCharCode(a + 32);
              Ts.push(a);
              return;
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              Ss += String.fromCharCode(a);
              Ts.push(a);
              return;
            default:
              break;
          }
          Ks.push(60);
          Ks.push(47);
          Ar(Ks, Ts);
          reconsume(a, script_data_escaped_state);
        }
        function script_data_double_escape_start_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
            case 47:
            case 62:
              if (buf2str(Ts) === 'script') {
                ss = script_data_double_escaped_state;
              } else {
                ss = script_data_escaped_state;
              }
              Ks.push(a);
              break;
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
              Ts.push(a + 32);
              Ks.push(a);
              break;
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              Ts.push(a);
              Ks.push(a);
              break;
            default:
              reconsume(a, script_data_escaped_state);
              break;
          }
        }
        function script_data_double_escaped_state(a) {
          switch (a) {
            case 45:
              ss = script_data_double_escaped_dash_state;
              Ks.push(45);
              break;
            case 60:
              ss = script_data_double_escaped_less_than_sign_state;
              Ks.push(60);
              break;
            case 0:
              Ks.push(65533);
              break;
            case -1:
              emitEOF();
              break;
            default:
              Ks.push(a);
              break;
          }
        }
        function script_data_double_escaped_dash_state(a) {
          switch (a) {
            case 45:
              ss = script_data_double_escaped_dash_dash_state;
              Ks.push(45);
              break;
            case 60:
              ss = script_data_double_escaped_less_than_sign_state;
              Ks.push(60);
              break;
            case 0:
              ss = script_data_double_escaped_state;
              Ks.push(65533);
              break;
            case -1:
              emitEOF();
              break;
            default:
              ss = script_data_double_escaped_state;
              Ks.push(a);
              break;
          }
        }
        function script_data_double_escaped_dash_dash_state(a) {
          switch (a) {
            case 45:
              Ks.push(45);
              break;
            case 60:
              ss = script_data_double_escaped_less_than_sign_state;
              Ks.push(60);
              break;
            case 62:
              ss = script_data_state;
              Ks.push(62);
              break;
            case 0:
              ss = script_data_double_escaped_state;
              Ks.push(65533);
              break;
            case -1:
              emitEOF();
              break;
            default:
              ss = script_data_double_escaped_state;
              Ks.push(a);
              break;
          }
        }
        function script_data_double_escaped_less_than_sign_state(a) {
          if (a === 47) {
            beginTempBuf();
            ss = script_data_double_escape_end_state;
            Ks.push(47);
          } else {
            reconsume(a, script_data_double_escaped_state);
          }
        }
        function script_data_double_escape_end_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
            case 47:
            case 62:
              if (buf2str(Ts) === 'script') {
                ss = script_data_escaped_state;
              } else {
                ss = script_data_double_escaped_state;
              }
              Ks.push(a);
              break;
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
              Ts.push(a + 32);
              Ks.push(a);
              break;
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
            case 103:
            case 104:
            case 105:
            case 106:
            case 107:
            case 108:
            case 109:
            case 110:
            case 111:
            case 112:
            case 113:
            case 114:
            case 115:
            case 116:
            case 117:
            case 118:
            case 119:
            case 120:
            case 121:
            case 122:
              Ts.push(a);
              Ks.push(a);
              break;
            default:
              reconsume(a, script_data_double_escaped_state);
              break;
          }
        }
        function before_attribute_name_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              break;
            case 47:
              ss = self_closing_start_tag_state;
              break;
            case 62:
              ss = data_state;
              emitTag();
              break;
            case -1:
              emitEOF();
              break;
            case 61:
              beginAttrName();
              ks += String.fromCharCode(a);
              ss = attribute_name_state;
              break;
            default:
              if (handleSimpleAttribute()) break;
              beginAttrName();
              reconsume(a, attribute_name_state);
              break;
          }
        }
        function attribute_name_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
            case 47:
            case 62:
            case -1:
              reconsume(a, after_attribute_name_state);
              break;
            case 61:
              ss = before_attribute_value_state;
              break;
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
              ks += String.fromCharCode(a + 32);
              break;
            case 0:
              ks += String.fromCharCode(65533);
              break;
            case 34:
            case 39:
            case 60:
            default:
              ks += getMatchingChars(hs);
              break;
          }
        }
        function after_attribute_name_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              break;
            case 47:
              addAttribute(ks);
              ss = self_closing_start_tag_state;
              break;
            case 61:
              ss = before_attribute_value_state;
              break;
            case 62:
              ss = data_state;
              addAttribute(ks);
              emitTag();
              break;
            case -1:
              addAttribute(ks);
              emitEOF();
              break;
            default:
              addAttribute(ks);
              beginAttrName();
              reconsume(a, attribute_name_state);
              break;
          }
        }
        function before_attribute_value_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              break;
            case 34:
              beginAttrValue();
              ss = attribute_value_double_quoted_state;
              break;
            case 39:
              beginAttrValue();
              ss = attribute_value_single_quoted_state;
              break;
            case 62:
            default:
              beginAttrValue();
              reconsume(a, attribute_value_unquoted_state);
              break;
          }
        }
        function attribute_value_double_quoted_state(a) {
          switch (a) {
            case 34:
              addAttribute(ks, Rs);
              ss = after_attribute_value_quoted_state;
              break;
            case 38:
              ns = attribute_value_double_quoted_state;
              ss = character_reference_state;
              break;
            case 0:
              Rs += String.fromCharCode(65533);
              break;
            case -1:
              emitEOF();
              break;
            case 10:
              Rs += String.fromCharCode(a);
              break;
            default:
              Rs += getMatchingChars(As);
              break;
          }
        }
        function attribute_value_single_quoted_state(a) {
          switch (a) {
            case 39:
              addAttribute(ks, Rs);
              ss = after_attribute_value_quoted_state;
              break;
            case 38:
              ns = attribute_value_single_quoted_state;
              ss = character_reference_state;
              break;
            case 0:
              Rs += String.fromCharCode(65533);
              break;
            case -1:
              emitEOF();
              break;
            case 10:
              Rs += String.fromCharCode(a);
              break;
            default:
              Rs += getMatchingChars(ds);
              break;
          }
        }
        function attribute_value_unquoted_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              addAttribute(ks, Rs);
              ss = before_attribute_name_state;
              break;
            case 38:
              ns = attribute_value_unquoted_state;
              ss = character_reference_state;
              break;
            case 62:
              addAttribute(ks, Rs);
              ss = data_state;
              emitTag();
              break;
            case 0:
              Rs += String.fromCharCode(65533);
              break;
            case -1:
              zr--;
              ss = data_state;
              break;
            case 34:
            case 39:
            case 60:
            case 61:
            case 96:
            default:
              Rs += getMatchingChars(us);
              break;
          }
        }
        function after_attribute_value_quoted_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              ss = before_attribute_name_state;
              break;
            case 47:
              ss = self_closing_start_tag_state;
              break;
            case 62:
              ss = data_state;
              emitTag();
              break;
            case -1:
              emitEOF();
              break;
            default:
              reconsume(a, before_attribute_name_state);
              break;
          }
        }
        function self_closing_start_tag_state(a) {
          switch (a) {
            case 62:
              ss = data_state;
              emitSelfClosingTag(true);
              break;
            case -1:
              emitEOF();
              break;
            default:
              reconsume(a, before_attribute_name_state);
              break;
          }
        }
        function bogus_comment_state(a, C, q) {
          var re = C.length;
          if (q) {
            zr += re - 1;
          } else {
            zr += re;
          }
          var ae = C.substring(0, re - 1);
          ae = ae.replace(/\u0000/g, '�');
          ae = ae.replace(/\u000D\u000A/g, '\n');
          ae = ae.replace(/\u000D/g, '\n');
          nn(kr, ae);
          ss = data_state;
        }
        bogus_comment_state.lookahead = '>';
        function markup_declaration_open_state(a, C, q) {
          if (C[0] === '-' && C[1] === '-') {
            zr += 2;
            beginComment();
            ss = comment_start_state;
            return;
          }
          if (C.toUpperCase() === 'DOCTYPE') {
            zr += 7;
            ss = doctype_state;
          } else if (C === '[CDATA[' && cdataAllowed()) {
            zr += 7;
            ss = cdata_section_state;
          } else {
            ss = bogus_comment_state;
          }
        }
        markup_declaration_open_state.lookahead = 7;
        function comment_start_state(a) {
          beginComment();
          switch (a) {
            case 45:
              ss = comment_start_dash_state;
              break;
            case 62:
              ss = data_state;
              nn(kr, buf2str(Ds));
              break;
            default:
              reconsume(a, comment_state);
              break;
          }
        }
        function comment_start_dash_state(a) {
          switch (a) {
            case 45:
              ss = comment_end_state;
              break;
            case 62:
              ss = data_state;
              nn(kr, buf2str(Ds));
              break;
            case -1:
              nn(kr, buf2str(Ds));
              emitEOF();
              break;
            default:
              Ds.push(45);
              reconsume(a, comment_state);
              break;
          }
        }
        function comment_state(a) {
          switch (a) {
            case 60:
              Ds.push(a);
              ss = comment_less_than_sign_state;
              break;
            case 45:
              ss = comment_end_dash_state;
              break;
            case 0:
              Ds.push(65533);
              break;
            case -1:
              nn(kr, buf2str(Ds));
              emitEOF();
              break;
            default:
              Ds.push(a);
              break;
          }
        }
        function comment_less_than_sign_state(a) {
          switch (a) {
            case 33:
              Ds.push(a);
              ss = comment_less_than_sign_bang_state;
              break;
            case 60:
              Ds.push(a);
              break;
            default:
              reconsume(a, comment_state);
              break;
          }
        }
        function comment_less_than_sign_bang_state(a) {
          switch (a) {
            case 45:
              ss = comment_less_than_sign_bang_dash_state;
              break;
            default:
              reconsume(a, comment_state);
              break;
          }
        }
        function comment_less_than_sign_bang_dash_state(a) {
          switch (a) {
            case 45:
              ss = comment_less_than_sign_bang_dash_dash_state;
              break;
            default:
              reconsume(a, comment_end_dash_state);
              break;
          }
        }
        function comment_less_than_sign_bang_dash_dash_state(a) {
          switch (a) {
            case 62:
            case -1:
              reconsume(a, comment_end_state);
              break;
            default:
              reconsume(a, comment_end_state);
              break;
          }
        }
        function comment_end_dash_state(a) {
          switch (a) {
            case 45:
              ss = comment_end_state;
              break;
            case -1:
              nn(kr, buf2str(Ds));
              emitEOF();
              break;
            default:
              Ds.push(45);
              reconsume(a, comment_state);
              break;
          }
        }
        function comment_end_state(a) {
          switch (a) {
            case 62:
              ss = data_state;
              nn(kr, buf2str(Ds));
              break;
            case 33:
              ss = comment_end_bang_state;
              break;
            case 45:
              Ds.push(45);
              break;
            case -1:
              nn(kr, buf2str(Ds));
              emitEOF();
              break;
            default:
              Ds.push(45);
              Ds.push(45);
              reconsume(a, comment_state);
              break;
          }
        }
        function comment_end_bang_state(a) {
          switch (a) {
            case 45:
              Ds.push(45);
              Ds.push(45);
              Ds.push(33);
              ss = comment_end_dash_state;
              break;
            case 62:
              ss = data_state;
              nn(kr, buf2str(Ds));
              break;
            case -1:
              nn(kr, buf2str(Ds));
              emitEOF();
              break;
            default:
              Ds.push(45);
              Ds.push(45);
              Ds.push(33);
              reconsume(a, comment_state);
              break;
          }
        }
        function doctype_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              ss = before_doctype_name_state;
              break;
            case -1:
              beginDoctype();
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              reconsume(a, before_doctype_name_state);
              break;
          }
        }
        function before_doctype_name_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              break;
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
              beginDoctype();
              Ns.push(a + 32);
              ss = doctype_name_state;
              break;
            case 0:
              beginDoctype();
              Ns.push(65533);
              ss = doctype_name_state;
              break;
            case 62:
              beginDoctype();
              forcequirks();
              ss = data_state;
              emitDoctype();
              break;
            case -1:
              beginDoctype();
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              beginDoctype();
              Ns.push(a);
              ss = doctype_name_state;
              break;
          }
        }
        function doctype_name_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              ss = after_doctype_name_state;
              break;
            case 62:
              ss = data_state;
              emitDoctype();
              break;
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 82:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
              Ns.push(a + 32);
              break;
            case 0:
              Ns.push(65533);
              break;
            case -1:
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              Ns.push(a);
              break;
          }
        }
        function after_doctype_name_state(a, C, q) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              zr += 1;
              break;
            case 62:
              ss = data_state;
              zr += 1;
              emitDoctype();
              break;
            case -1:
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              C = C.toUpperCase();
              if (C === 'PUBLIC') {
                zr += 6;
                ss = after_doctype_public_keyword_state;
              } else if (C === 'SYSTEM') {
                zr += 6;
                ss = after_doctype_system_keyword_state;
              } else {
                forcequirks();
                ss = bogus_doctype_state;
              }
              break;
          }
        }
        after_doctype_name_state.lookahead = 6;
        function after_doctype_public_keyword_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              ss = before_doctype_public_identifier_state;
              break;
            case 34:
              beginDoctypePublicId();
              ss = doctype_public_identifier_double_quoted_state;
              break;
            case 39:
              beginDoctypePublicId();
              ss = doctype_public_identifier_single_quoted_state;
              break;
            case 62:
              forcequirks();
              ss = data_state;
              emitDoctype();
              break;
            case -1:
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              forcequirks();
              ss = bogus_doctype_state;
              break;
          }
        }
        function before_doctype_public_identifier_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              break;
            case 34:
              beginDoctypePublicId();
              ss = doctype_public_identifier_double_quoted_state;
              break;
            case 39:
              beginDoctypePublicId();
              ss = doctype_public_identifier_single_quoted_state;
              break;
            case 62:
              forcequirks();
              ss = data_state;
              emitDoctype();
              break;
            case -1:
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              forcequirks();
              ss = bogus_doctype_state;
              break;
          }
        }
        function doctype_public_identifier_double_quoted_state(a) {
          switch (a) {
            case 34:
              ss = after_doctype_public_identifier_state;
              break;
            case 0:
              Ls.push(65533);
              break;
            case 62:
              forcequirks();
              ss = data_state;
              emitDoctype();
              break;
            case -1:
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              Ls.push(a);
              break;
          }
        }
        function doctype_public_identifier_single_quoted_state(a) {
          switch (a) {
            case 39:
              ss = after_doctype_public_identifier_state;
              break;
            case 0:
              Ls.push(65533);
              break;
            case 62:
              forcequirks();
              ss = data_state;
              emitDoctype();
              break;
            case -1:
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              Ls.push(a);
              break;
          }
        }
        function after_doctype_public_identifier_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              ss = between_doctype_public_and_system_identifiers_state;
              break;
            case 62:
              ss = data_state;
              emitDoctype();
              break;
            case 34:
              beginDoctypeSystemId();
              ss = doctype_system_identifier_double_quoted_state;
              break;
            case 39:
              beginDoctypeSystemId();
              ss = doctype_system_identifier_single_quoted_state;
              break;
            case -1:
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              forcequirks();
              ss = bogus_doctype_state;
              break;
          }
        }
        function between_doctype_public_and_system_identifiers_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              break;
            case 62:
              ss = data_state;
              emitDoctype();
              break;
            case 34:
              beginDoctypeSystemId();
              ss = doctype_system_identifier_double_quoted_state;
              break;
            case 39:
              beginDoctypeSystemId();
              ss = doctype_system_identifier_single_quoted_state;
              break;
            case -1:
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              forcequirks();
              ss = bogus_doctype_state;
              break;
          }
        }
        function after_doctype_system_keyword_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              ss = before_doctype_system_identifier_state;
              break;
            case 34:
              beginDoctypeSystemId();
              ss = doctype_system_identifier_double_quoted_state;
              break;
            case 39:
              beginDoctypeSystemId();
              ss = doctype_system_identifier_single_quoted_state;
              break;
            case 62:
              forcequirks();
              ss = data_state;
              emitDoctype();
              break;
            case -1:
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              forcequirks();
              ss = bogus_doctype_state;
              break;
          }
        }
        function before_doctype_system_identifier_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              break;
            case 34:
              beginDoctypeSystemId();
              ss = doctype_system_identifier_double_quoted_state;
              break;
            case 39:
              beginDoctypeSystemId();
              ss = doctype_system_identifier_single_quoted_state;
              break;
            case 62:
              forcequirks();
              ss = data_state;
              emitDoctype();
              break;
            case -1:
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              forcequirks();
              ss = bogus_doctype_state;
              break;
          }
        }
        function doctype_system_identifier_double_quoted_state(a) {
          switch (a) {
            case 34:
              ss = after_doctype_system_identifier_state;
              break;
            case 0:
              Fs.push(65533);
              break;
            case 62:
              forcequirks();
              ss = data_state;
              emitDoctype();
              break;
            case -1:
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              Fs.push(a);
              break;
          }
        }
        function doctype_system_identifier_single_quoted_state(a) {
          switch (a) {
            case 39:
              ss = after_doctype_system_identifier_state;
              break;
            case 0:
              Fs.push(65533);
              break;
            case 62:
              forcequirks();
              ss = data_state;
              emitDoctype();
              break;
            case -1:
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              Fs.push(a);
              break;
          }
        }
        function after_doctype_system_identifier_state(a) {
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
              break;
            case 62:
              ss = data_state;
              emitDoctype();
              break;
            case -1:
              forcequirks();
              emitDoctype();
              emitEOF();
              break;
            default:
              ss = bogus_doctype_state;
              break;
          }
        }
        function bogus_doctype_state(a) {
          switch (a) {
            case 62:
              ss = data_state;
              emitDoctype();
              break;
            case -1:
              emitDoctype();
              emitEOF();
              break;
            default:
              break;
          }
        }
        function cdata_section_state(a) {
          switch (a) {
            case 93:
              ss = cdata_section_bracket_state;
              break;
            case -1:
              emitEOF();
              break;
            case 0:
              Xs = true;
            default:
              emitCharsWhile(ms) || Ks.push(a);
              break;
          }
        }
        function cdata_section_bracket_state(a) {
          switch (a) {
            case 93:
              ss = cdata_section_end_state;
              break;
            default:
              Ks.push(93);
              reconsume(a, cdata_section_state);
              break;
          }
        }
        function cdata_section_end_state(a) {
          switch (a) {
            case 93:
              Ks.push(93);
              break;
            case 62:
              flushText();
              ss = data_state;
              break;
            default:
              Ks.push(93);
              Ks.push(93);
              reconsume(a, cdata_section_state);
              break;
          }
        }
        function character_reference_state(a) {
          beginTempBuf();
          Ts.push(38);
          switch (a) {
            case 9:
            case 10:
            case 12:
            case 32:
            case 60:
            case 38:
            case -1:
              reconsume(a, character_reference_end_state);
              break;
            case 35:
              Ts.push(a);
              ss = numeric_character_reference_state;
              break;
            default:
              reconsume(a, named_character_reference_state);
              break;
          }
        }
        function named_character_reference_state(a) {
          ls.lastIndex = zr;
          var C = ls.exec(Hr);
          if (!C) throw new Error('should never happen');
          var q = C[1];
          if (!q) {
            ss = character_reference_end_state;
            return;
          }
          zr += q.length;
          Ar(Ts, str2buf(q));
          switch (ns) {
            case attribute_value_double_quoted_state:
            case attribute_value_single_quoted_state:
            case attribute_value_unquoted_state:
              if (q[q.length - 1] !== ';') {
                if (/[=A-Za-z0-9]/.test(Hr[zr])) {
                  ss = character_reference_end_state;
                  return;
                }
              }
              break;
            default:
              break;
          }
          beginTempBuf();
          var re = as[q];
          if (typeof re === 'number') {
            Ts.push(re);
          } else {
            Ar(Ts, re);
          }
          ss = character_reference_end_state;
        }
        named_character_reference_state.lookahead = -cs;
        function numeric_character_reference_state(a) {
          vs = 0;
          switch (a) {
            case 120:
            case 88:
              Ts.push(a);
              ss = hexadecimal_character_reference_start_state;
              break;
            default:
              reconsume(a, decimal_character_reference_start_state);
              break;
          }
        }
        function hexadecimal_character_reference_start_state(a) {
          switch (a) {
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
              reconsume(a, hexadecimal_character_reference_state);
              break;
            default:
              reconsume(a, character_reference_end_state);
              break;
          }
        }
        function decimal_character_reference_start_state(a) {
          switch (a) {
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              reconsume(a, decimal_character_reference_state);
              break;
            default:
              reconsume(a, character_reference_end_state);
              break;
          }
        }
        function hexadecimal_character_reference_state(a) {
          switch (a) {
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
              vs *= 16;
              vs += a - 55;
              break;
            case 97:
            case 98:
            case 99:
            case 100:
            case 101:
            case 102:
              vs *= 16;
              vs += a - 87;
              break;
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              vs *= 16;
              vs += a - 48;
              break;
            case 59:
              ss = numeric_character_reference_end_state;
              break;
            default:
              reconsume(a, numeric_character_reference_end_state);
              break;
          }
        }
        function decimal_character_reference_state(a) {
          switch (a) {
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
            case 56:
            case 57:
              vs *= 10;
              vs += a - 48;
              break;
            case 59:
              ss = numeric_character_reference_end_state;
              break;
            default:
              reconsume(a, numeric_character_reference_end_state);
              break;
          }
        }
        function numeric_character_reference_end_state(a) {
          if (vs in os) {
            vs = os[vs];
          } else if (vs > 1114111 || (vs >= 55296 && vs < 57344)) {
            vs = 65533;
          }
          beginTempBuf();
          if (vs <= 65535) {
            Ts.push(vs);
          } else {
            vs = vs - 65536;
            Ts.push(55296 + (vs >> 10));
            Ts.push(56320 + (vs & 1023));
          }
          reconsume(a, character_reference_end_state);
        }
        function character_reference_end_state(a) {
          switch (ns) {
            case attribute_value_double_quoted_state:
            case attribute_value_single_quoted_state:
            case attribute_value_unquoted_state:
              Rs += buf2str(Ts);
              break;
            default:
              Ar(Ks, Ts);
              break;
          }
          reconsume(a, ns);
        }
        function initial_mode(a, C, q, re) {
          switch (a) {
            case 1:
              C = C.replace(Bs, '');
              if (C.length === 0) return;
              break;
            case 4:
              tn._appendChild(tn.createComment(C));
              return;
            case 5:
              var Ue = C;
              var lt = q;
              var Pt = re;
              tn.appendChild(new ae(tn, Ue, lt, Pt));
              if (
                Js ||
                Ue.toLowerCase() !== 'html' ||
                Lr.test(lt) ||
                (Pt && Pt.toLowerCase() === Fr) ||
                (Pt === undefined && Mr.test(lt))
              )
                tn._quirks = true;
              else if (Pr.test(lt) || (Pt !== undefined && Mr.test(lt)))
                tn._limitedQuirks = true;
              Os = before_html_mode;
              return;
          }
          tn._quirks = true;
          Os = before_html_mode;
          Os(a, C, q, re);
        }
        function before_html_mode(a, C, q, re) {
          var ae;
          switch (a) {
            case 1:
              C = C.replace(Bs, '');
              if (C.length === 0) return;
              break;
            case 5:
              return;
            case 4:
              tn._appendChild(tn.createComment(C));
              return;
            case 2:
              if (C === 'html') {
                ae = createHTMLElt(tn, C, q);
                Gs.push(ae);
                tn.appendChild(ae);
                Os = before_head_mode;
                return;
              }
              break;
            case 3:
              switch (C) {
                case 'html':
                case 'head':
                case 'body':
                case 'br':
                  break;
                default:
                  return;
              }
          }
          ae = createHTMLElt(tn, 'html', null);
          Gs.push(ae);
          tn.appendChild(ae);
          Os = before_head_mode;
          Os(a, C, q, re);
        }
        function before_head_mode(a, C, q, re) {
          switch (a) {
            case 1:
              C = C.replace(Bs, '');
              if (C.length === 0) return;
              break;
            case 5:
              return;
            case 4:
              insertComment(C);
              return;
            case 2:
              switch (C) {
                case 'html':
                  in_body_mode(a, C, q, re);
                  return;
                case 'head':
                  var ae = insertHTMLElement(C, q);
                  Vs = ae;
                  Os = in_head_mode;
                  return;
              }
              break;
            case 3:
              switch (C) {
                case 'html':
                case 'head':
                case 'body':
                case 'br':
                  break;
                default:
                  return;
              }
          }
          before_head_mode(Br, 'head', null);
          Os(a, C, q, re);
        }
        function in_head_mode(a, C, q, re) {
          switch (a) {
            case 1:
              var ae = C.match(Bs);
              if (ae) {
                insertText(ae[0]);
                C = C.substring(ae[0].length);
              }
              if (C.length === 0) return;
              break;
            case 4:
              insertComment(C);
              return;
            case 5:
              return;
            case 2:
              switch (C) {
                case 'html':
                  in_body_mode(a, C, q, re);
                  return;
                case 'meta':
                case 'base':
                case 'basefont':
                case 'bgsound':
                case 'link':
                  insertHTMLElement(C, q);
                  Gs.pop();
                  return;
                case 'title':
                  parseRCDATA(C, q);
                  return;
                case 'noscript':
                  if (!Ys) {
                    insertHTMLElement(C, q);
                    Os = in_head_noscript_mode;
                    return;
                  }
                case 'noframes':
                case 'style':
                  parseRawText(C, q);
                  return;
                case 'script':
                  insertElement(function (a) {
                    var re = createHTMLElt(a, C, q);
                    re._parser_inserted = true;
                    re._force_async = false;
                    if (qs) re._already_started = true;
                    flushText();
                    return re;
                  });
                  ss = script_data_state;
                  xs = Os;
                  Os = text_mode;
                  return;
                case 'template':
                  insertHTMLElement(C, q);
                  Hs.insertMarker();
                  js = false;
                  Os = in_template_mode;
                  Us.push(Os);
                  return;
                case 'head':
                  return;
              }
              break;
            case 3:
              switch (C) {
                case 'head':
                  Gs.pop();
                  Os = after_head_mode;
                  return;
                case 'body':
                case 'html':
                case 'br':
                  break;
                case 'template':
                  if (!Gs.contains('template')) {
                    return;
                  }
                  Gs.generateImpliedEndTags(null, 'thorough');
                  Gs.popTag('template');
                  Hs.clearToMarker();
                  Us.pop();
                  resetInsertionMode();
                  return;
                default:
                  return;
              }
              break;
          }
          in_head_mode(Qr, 'head', null);
          Os(a, C, q, re);
        }
        function in_head_noscript_mode(a, C, q, re) {
          switch (a) {
            case 5:
              return;
            case 4:
              in_head_mode(a, C);
              return;
            case 1:
              var ae = C.match(Bs);
              if (ae) {
                in_head_mode(a, ae[0]);
                C = C.substring(ae[0].length);
              }
              if (C.length === 0) return;
              break;
            case 2:
              switch (C) {
                case 'html':
                  in_body_mode(a, C, q, re);
                  return;
                case 'basefont':
                case 'bgsound':
                case 'link':
                case 'meta':
                case 'noframes':
                case 'style':
                  in_head_mode(a, C, q);
                  return;
                case 'head':
                case 'noscript':
                  return;
              }
              break;
            case 3:
              switch (C) {
                case 'noscript':
                  Gs.pop();
                  Os = in_head_mode;
                  return;
                case 'br':
                  break;
                default:
                  return;
              }
              break;
          }
          in_head_noscript_mode(Qr, 'noscript', null);
          Os(a, C, q, re);
        }
        function after_head_mode(a, C, q, re) {
          switch (a) {
            case 1:
              var ae = C.match(Bs);
              if (ae) {
                insertText(ae[0]);
                C = C.substring(ae[0].length);
              }
              if (C.length === 0) return;
              break;
            case 4:
              insertComment(C);
              return;
            case 5:
              return;
            case 2:
              switch (C) {
                case 'html':
                  in_body_mode(a, C, q, re);
                  return;
                case 'body':
                  insertHTMLElement(C, q);
                  js = false;
                  Os = in_body_mode;
                  return;
                case 'frameset':
                  insertHTMLElement(C, q);
                  Os = in_frameset_mode;
                  return;
                case 'base':
                case 'basefont':
                case 'bgsound':
                case 'link':
                case 'meta':
                case 'noframes':
                case 'script':
                case 'style':
                case 'template':
                case 'title':
                  Gs.push(Vs);
                  in_head_mode(Br, C, q);
                  Gs.removeElement(Vs);
                  return;
                case 'head':
                  return;
              }
              break;
            case 3:
              switch (C) {
                case 'template':
                  return in_head_mode(a, C, q, re);
                case 'body':
                case 'html':
                case 'br':
                  break;
                default:
                  return;
              }
              break;
          }
          after_head_mode(Br, 'body', null);
          js = true;
          Os(a, C, q, re);
        }
        function in_body_mode(a, C, q, re) {
          var ae, Ue, Pt, Ar;
          switch (a) {
            case 1:
              if (Xs) {
                C = C.replace(Qs, '');
                if (C.length === 0) return;
              }
              if (js && ys.test(C)) js = false;
              afereconstruct();
              insertText(C);
              return;
            case 5:
              return;
            case 4:
              insertComment(C);
              return;
            case -1:
              if (Us.length) {
                return in_template_mode(a);
              }
              stopParsing();
              return;
            case 2:
              switch (C) {
                case 'html':
                  if (Gs.contains('template')) {
                    return;
                  }
                  transferAttributes(q, Gs.elements[0]);
                  return;
                case 'base':
                case 'basefont':
                case 'bgsound':
                case 'link':
                case 'meta':
                case 'noframes':
                case 'script':
                case 'style':
                case 'template':
                case 'title':
                  in_head_mode(Br, C, q);
                  return;
                case 'body':
                  ae = Gs.elements[1];
                  if (
                    !ae ||
                    !(ae instanceof Wt.HTMLBodyElement) ||
                    Gs.contains('template')
                  )
                    return;
                  js = false;
                  transferAttributes(q, ae);
                  return;
                case 'frameset':
                  if (!js) return;
                  ae = Gs.elements[1];
                  if (!ae || !(ae instanceof Wt.HTMLBodyElement)) return;
                  if (ae.parentNode) ae.parentNode.removeChild(ae);
                  while (!(Gs.top instanceof Wt.HTMLHtmlElement)) Gs.pop();
                  insertHTMLElement(C, q);
                  Os = in_frameset_mode;
                  return;
                case 'address':
                case 'article':
                case 'aside':
                case 'blockquote':
                case 'center':
                case 'details':
                case 'dialog':
                case 'dir':
                case 'div':
                case 'dl':
                case 'fieldset':
                case 'figcaption':
                case 'figure':
                case 'footer':
                case 'header':
                case 'hgroup':
                case 'main':
                case 'nav':
                case 'ol':
                case 'p':
                case 'section':
                case 'summary':
                case 'ul':
                  if (Gs.inButtonScope('p')) in_body_mode(Qr, 'p');
                  insertHTMLElement(C, q);
                  return;
                case 'menu':
                  if (Gs.inButtonScope('p')) in_body_mode(Qr, 'p');
                  if (isA(Gs.top, 'menuitem')) {
                    Gs.pop();
                  }
                  insertHTMLElement(C, q);
                  return;
                case 'h1':
                case 'h2':
                case 'h3':
                case 'h4':
                case 'h5':
                case 'h6':
                  if (Gs.inButtonScope('p')) in_body_mode(Qr, 'p');
                  if (Gs.top instanceof Wt.HTMLHeadingElement) Gs.pop();
                  insertHTMLElement(C, q);
                  return;
                case 'pre':
                case 'listing':
                  if (Gs.inButtonScope('p')) in_body_mode(Qr, 'p');
                  insertHTMLElement(C, q);
                  Zs = true;
                  js = false;
                  return;
                case 'form':
                  if (Ws && !Gs.contains('template')) return;
                  if (Gs.inButtonScope('p')) in_body_mode(Qr, 'p');
                  Ar = insertHTMLElement(C, q);
                  if (!Gs.contains('template')) Ws = Ar;
                  return;
                case 'li':
                  js = false;
                  for (Ue = Gs.elements.length - 1; Ue >= 0; Ue--) {
                    Pt = Gs.elements[Ue];
                    if (Pt instanceof Wt.HTMLLIElement) {
                      in_body_mode(Qr, 'li');
                      break;
                    }
                    if (isA(Pt, Or) && !isA(Pt, xr)) break;
                  }
                  if (Gs.inButtonScope('p')) in_body_mode(Qr, 'p');
                  insertHTMLElement(C, q);
                  return;
                case 'dd':
                case 'dt':
                  js = false;
                  for (Ue = Gs.elements.length - 1; Ue >= 0; Ue--) {
                    Pt = Gs.elements[Ue];
                    if (isA(Pt, Ur)) {
                      in_body_mode(Qr, Pt.localName);
                      break;
                    }
                    if (isA(Pt, Or) && !isA(Pt, xr)) break;
                  }
                  if (Gs.inButtonScope('p')) in_body_mode(Qr, 'p');
                  insertHTMLElement(C, q);
                  return;
                case 'plaintext':
                  if (Gs.inButtonScope('p')) in_body_mode(Qr, 'p');
                  insertHTMLElement(C, q);
                  ss = plaintext_state;
                  return;
                case 'button':
                  if (Gs.inScope('button')) {
                    in_body_mode(Qr, 'button');
                    Os(a, C, q, re);
                  } else {
                    afereconstruct();
                    insertHTMLElement(C, q);
                    js = false;
                  }
                  return;
                case 'a':
                  var Er = Hs.findElementByTag('a');
                  if (Er) {
                    in_body_mode(Qr, C);
                    Hs.remove(Er);
                    Gs.removeElement(Er);
                  }
                case 'b':
                case 'big':
                case 'code':
                case 'em':
                case 'font':
                case 'i':
                case 's':
                case 'small':
                case 'strike':
                case 'strong':
                case 'tt':
                case 'u':
                  afereconstruct();
                  Hs.push(insertHTMLElement(C, q), q);
                  return;
                case 'nobr':
                  afereconstruct();
                  if (Gs.inScope(C)) {
                    in_body_mode(Qr, C);
                    afereconstruct();
                  }
                  Hs.push(insertHTMLElement(C, q), q);
                  return;
                case 'applet':
                case 'marquee':
                case 'object':
                  afereconstruct();
                  insertHTMLElement(C, q);
                  Hs.insertMarker();
                  js = false;
                  return;
                case 'table':
                  if (!tn._quirks && Gs.inButtonScope('p')) {
                    in_body_mode(Qr, 'p');
                  }
                  insertHTMLElement(C, q);
                  js = false;
                  Os = in_table_mode;
                  return;
                case 'area':
                case 'br':
                case 'embed':
                case 'img':
                case 'keygen':
                case 'wbr':
                  afereconstruct();
                  insertHTMLElement(C, q);
                  Gs.pop();
                  js = false;
                  return;
                case 'input':
                  afereconstruct();
                  Ar = insertHTMLElement(C, q);
                  Gs.pop();
                  var Ir = Ar.getAttribute('type');
                  if (!Ir || Ir.toLowerCase() !== 'hidden') js = false;
                  return;
                case 'param':
                case 'source':
                case 'track':
                  insertHTMLElement(C, q);
                  Gs.pop();
                  return;
                case 'hr':
                  if (Gs.inButtonScope('p')) in_body_mode(Qr, 'p');
                  if (isA(Gs.top, 'menuitem')) {
                    Gs.pop();
                  }
                  insertHTMLElement(C, q);
                  Gs.pop();
                  js = false;
                  return;
                case 'image':
                  in_body_mode(Br, 'img', q, re);
                  return;
                case 'textarea':
                  insertHTMLElement(C, q);
                  Zs = true;
                  js = false;
                  ss = rcdata_state;
                  xs = Os;
                  Os = text_mode;
                  return;
                case 'xmp':
                  if (Gs.inButtonScope('p')) in_body_mode(Qr, 'p');
                  afereconstruct();
                  js = false;
                  parseRawText(C, q);
                  return;
                case 'iframe':
                  js = false;
                  parseRawText(C, q);
                  return;
                case 'noembed':
                  parseRawText(C, q);
                  return;
                case 'select':
                  afereconstruct();
                  insertHTMLElement(C, q);
                  js = false;
                  if (
                    Os === in_table_mode ||
                    Os === in_caption_mode ||
                    Os === in_table_body_mode ||
                    Os === in_row_mode ||
                    Os === in_cell_mode
                  )
                    Os = in_select_in_table_mode;
                  else Os = in_select_mode;
                  return;
                case 'optgroup':
                case 'option':
                  if (Gs.top instanceof Wt.HTMLOptionElement) {
                    in_body_mode(Qr, 'option');
                  }
                  afereconstruct();
                  insertHTMLElement(C, q);
                  return;
                case 'menuitem':
                  if (isA(Gs.top, 'menuitem')) {
                    Gs.pop();
                  }
                  afereconstruct();
                  insertHTMLElement(C, q);
                  return;
                case 'rb':
                case 'rtc':
                  if (Gs.inScope('ruby')) {
                    Gs.generateImpliedEndTags();
                  }
                  insertHTMLElement(C, q);
                  return;
                case 'rp':
                case 'rt':
                  if (Gs.inScope('ruby')) {
                    Gs.generateImpliedEndTags('rtc');
                  }
                  insertHTMLElement(C, q);
                  return;
                case 'math':
                  afereconstruct();
                  adjustMathMLAttributes(q);
                  adjustForeignAttributes(q);
                  insertForeignElement(C, q, lt.MATHML);
                  if (re) Gs.pop();
                  return;
                case 'svg':
                  afereconstruct();
                  adjustSVGAttributes(q);
                  adjustForeignAttributes(q);
                  insertForeignElement(C, q, lt.SVG);
                  if (re) Gs.pop();
                  return;
                case 'caption':
                case 'col':
                case 'colgroup':
                case 'frame':
                case 'head':
                case 'tbody':
                case 'td':
                case 'tfoot':
                case 'th':
                case 'thead':
                case 'tr':
                  return;
              }
              afereconstruct();
              insertHTMLElement(C, q);
              return;
            case 3:
              switch (C) {
                case 'template':
                  in_head_mode(Qr, C, q);
                  return;
                case 'body':
                  if (!Gs.inScope('body')) return;
                  Os = after_body_mode;
                  return;
                case 'html':
                  if (!Gs.inScope('body')) return;
                  Os = after_body_mode;
                  Os(a, C, q);
                  return;
                case 'address':
                case 'article':
                case 'aside':
                case 'blockquote':
                case 'button':
                case 'center':
                case 'details':
                case 'dialog':
                case 'dir':
                case 'div':
                case 'dl':
                case 'fieldset':
                case 'figcaption':
                case 'figure':
                case 'footer':
                case 'header':
                case 'hgroup':
                case 'listing':
                case 'main':
                case 'menu':
                case 'nav':
                case 'ol':
                case 'pre':
                case 'section':
                case 'summary':
                case 'ul':
                  if (!Gs.inScope(C)) return;
                  Gs.generateImpliedEndTags();
                  Gs.popTag(C);
                  return;
                case 'form':
                  if (!Gs.contains('template')) {
                    var kr = Ws;
                    Ws = null;
                    if (!kr || !Gs.elementInScope(kr)) return;
                    Gs.generateImpliedEndTags();
                    Gs.removeElement(kr);
                  } else {
                    if (!Gs.inScope('form')) return;
                    Gs.generateImpliedEndTags();
                    Gs.popTag('form');
                  }
                  return;
                case 'p':
                  if (!Gs.inButtonScope(C)) {
                    in_body_mode(Br, C, null);
                    Os(a, C, q, re);
                  } else {
                    Gs.generateImpliedEndTags(C);
                    Gs.popTag(C);
                  }
                  return;
                case 'li':
                  if (!Gs.inListItemScope(C)) return;
                  Gs.generateImpliedEndTags(C);
                  Gs.popTag(C);
                  return;
                case 'dd':
                case 'dt':
                  if (!Gs.inScope(C)) return;
                  Gs.generateImpliedEndTags(C);
                  Gs.popTag(C);
                  return;
                case 'h1':
                case 'h2':
                case 'h3':
                case 'h4':
                case 'h5':
                case 'h6':
                  if (!Gs.elementTypeInScope(Wt.HTMLHeadingElement)) return;
                  Gs.generateImpliedEndTags();
                  Gs.popElementType(Wt.HTMLHeadingElement);
                  return;
                case 'sarcasm':
                  break;
                case 'a':
                case 'b':
                case 'big':
                case 'code':
                case 'em':
                case 'font':
                case 'i':
                case 'nobr':
                case 's':
                case 'small':
                case 'strike':
                case 'strong':
                case 'tt':
                case 'u':
                  var Dr = adoptionAgency(C);
                  if (Dr) return;
                  break;
                case 'applet':
                case 'marquee':
                case 'object':
                  if (!Gs.inScope(C)) return;
                  Gs.generateImpliedEndTags();
                  Gs.popTag(C);
                  Hs.clearToMarker();
                  return;
                case 'br':
                  in_body_mode(Br, C, null);
                  return;
              }
              for (Ue = Gs.elements.length - 1; Ue >= 0; Ue--) {
                Pt = Gs.elements[Ue];
                if (isA(Pt, C)) {
                  Gs.generateImpliedEndTags(C);
                  Gs.popElement(Pt);
                  break;
                } else if (isA(Pt, Or)) {
                  return;
                }
              }
              return;
          }
        }
        function text_mode(a, C, q, re) {
          switch (a) {
            case 1:
              insertText(C);
              return;
            case -1:
              if (Gs.top instanceof Wt.HTMLScriptElement)
                Gs.top._already_started = true;
              Gs.pop();
              Os = xs;
              Os(a);
              return;
            case 3:
              if (C === 'script') {
                handleScriptEnd();
              } else {
                Gs.pop();
                Os = xs;
              }
              return;
            default:
              return;
          }
        }
        function in_table_mode(a, C, q, re) {
          function getTypeAttr(a) {
            for (var C = 0, q = a.length; C < q; C++) {
              if (a[C][0] === 'type') return a[C][1].toLowerCase();
            }
            return null;
          }
          switch (a) {
            case 1:
              if ($s) {
                in_body_mode(a, C, q, re);
                return;
              } else if (isA(Gs.top, Gr)) {
                zs = [];
                xs = Os;
                Os = in_table_text_mode;
                Os(a, C, q, re);
                return;
              }
              break;
            case 4:
              insertComment(C);
              return;
            case 5:
              return;
            case 2:
              switch (C) {
                case 'caption':
                  Gs.clearToContext(Wr);
                  Hs.insertMarker();
                  insertHTMLElement(C, q);
                  Os = in_caption_mode;
                  return;
                case 'colgroup':
                  Gs.clearToContext(Wr);
                  insertHTMLElement(C, q);
                  Os = in_column_group_mode;
                  return;
                case 'col':
                  in_table_mode(Br, 'colgroup', null);
                  Os(a, C, q, re);
                  return;
                case 'tbody':
                case 'tfoot':
                case 'thead':
                  Gs.clearToContext(Wr);
                  insertHTMLElement(C, q);
                  Os = in_table_body_mode;
                  return;
                case 'td':
                case 'th':
                case 'tr':
                  in_table_mode(Br, 'tbody', null);
                  Os(a, C, q, re);
                  return;
                case 'table':
                  if (!Gs.inTableScope(C)) {
                    return;
                  }
                  in_table_mode(Qr, C);
                  Os(a, C, q, re);
                  return;
                case 'style':
                case 'script':
                case 'template':
                  in_head_mode(a, C, q, re);
                  return;
                case 'input':
                  var ae = getTypeAttr(q);
                  if (ae !== 'hidden') break;
                  insertHTMLElement(C, q);
                  Gs.pop();
                  return;
                case 'form':
                  if (Ws || Gs.contains('template')) return;
                  Ws = insertHTMLElement(C, q);
                  Gs.popElement(Ws);
                  return;
              }
              break;
            case 3:
              switch (C) {
                case 'table':
                  if (!Gs.inTableScope(C)) return;
                  Gs.popTag(C);
                  resetInsertionMode();
                  return;
                case 'body':
                case 'caption':
                case 'col':
                case 'colgroup':
                case 'html':
                case 'tbody':
                case 'td':
                case 'tfoot':
                case 'th':
                case 'thead':
                case 'tr':
                  return;
                case 'template':
                  in_head_mode(a, C, q, re);
                  return;
              }
              break;
            case -1:
              in_body_mode(a, C, q, re);
              return;
          }
          on = true;
          in_body_mode(a, C, q, re);
          on = false;
        }
        function in_table_text_mode(a, C, q, re) {
          if (a === Ir) {
            if (Xs) {
              C = C.replace(Qs, '');
              if (C.length === 0) return;
            }
            zs.push(C);
          } else {
            var ae = zs.join('');
            zs.length = 0;
            if (ys.test(ae)) {
              on = true;
              in_body_mode(Ir, ae);
              on = false;
            } else {
              insertText(ae);
            }
            Os = xs;
            Os(a, C, q, re);
          }
        }
        function in_caption_mode(a, C, q, re) {
          function end_caption() {
            if (!Gs.inTableScope('caption')) return false;
            Gs.generateImpliedEndTags();
            Gs.popTag('caption');
            Hs.clearToMarker();
            Os = in_table_mode;
            return true;
          }
          switch (a) {
            case 2:
              switch (C) {
                case 'caption':
                case 'col':
                case 'colgroup':
                case 'tbody':
                case 'td':
                case 'tfoot':
                case 'th':
                case 'thead':
                case 'tr':
                  if (end_caption()) Os(a, C, q, re);
                  return;
              }
              break;
            case 3:
              switch (C) {
                case 'caption':
                  end_caption();
                  return;
                case 'table':
                  if (end_caption()) Os(a, C, q, re);
                  return;
                case 'body':
                case 'col':
                case 'colgroup':
                case 'html':
                case 'tbody':
                case 'td':
                case 'tfoot':
                case 'th':
                case 'thead':
                case 'tr':
                  return;
              }
              break;
          }
          in_body_mode(a, C, q, re);
        }
        function in_column_group_mode(a, C, q, re) {
          switch (a) {
            case 1:
              var ae = C.match(Bs);
              if (ae) {
                insertText(ae[0]);
                C = C.substring(ae[0].length);
              }
              if (C.length === 0) return;
              break;
            case 4:
              insertComment(C);
              return;
            case 5:
              return;
            case 2:
              switch (C) {
                case 'html':
                  in_body_mode(a, C, q, re);
                  return;
                case 'col':
                  insertHTMLElement(C, q);
                  Gs.pop();
                  return;
                case 'template':
                  in_head_mode(a, C, q, re);
                  return;
              }
              break;
            case 3:
              switch (C) {
                case 'colgroup':
                  if (!isA(Gs.top, 'colgroup')) {
                    return;
                  }
                  Gs.pop();
                  Os = in_table_mode;
                  return;
                case 'col':
                  return;
                case 'template':
                  in_head_mode(a, C, q, re);
                  return;
              }
              break;
            case -1:
              in_body_mode(a, C, q, re);
              return;
          }
          if (!isA(Gs.top, 'colgroup')) {
            return;
          }
          in_column_group_mode(Qr, 'colgroup');
          Os(a, C, q, re);
        }
        function in_table_body_mode(a, C, q, re) {
          function endsect() {
            if (
              !Gs.inTableScope('tbody') &&
              !Gs.inTableScope('thead') &&
              !Gs.inTableScope('tfoot')
            )
              return;
            Gs.clearToContext(Yr);
            in_table_body_mode(Qr, Gs.top.localName, null);
            Os(a, C, q, re);
          }
          switch (a) {
            case 2:
              switch (C) {
                case 'tr':
                  Gs.clearToContext(Yr);
                  insertHTMLElement(C, q);
                  Os = in_row_mode;
                  return;
                case 'th':
                case 'td':
                  in_table_body_mode(Br, 'tr', null);
                  Os(a, C, q, re);
                  return;
                case 'caption':
                case 'col':
                case 'colgroup':
                case 'tbody':
                case 'tfoot':
                case 'thead':
                  endsect();
                  return;
              }
              break;
            case 3:
              switch (C) {
                case 'table':
                  endsect();
                  return;
                case 'tbody':
                case 'tfoot':
                case 'thead':
                  if (Gs.inTableScope(C)) {
                    Gs.clearToContext(Yr);
                    Gs.pop();
                    Os = in_table_mode;
                  }
                  return;
                case 'body':
                case 'caption':
                case 'col':
                case 'colgroup':
                case 'html':
                case 'td':
                case 'th':
                case 'tr':
                  return;
              }
              break;
          }
          in_table_mode(a, C, q, re);
        }
        function in_row_mode(a, C, q, re) {
          function endrow() {
            if (!Gs.inTableScope('tr')) return false;
            Gs.clearToContext(jr);
            Gs.pop();
            Os = in_table_body_mode;
            return true;
          }
          switch (a) {
            case 2:
              switch (C) {
                case 'th':
                case 'td':
                  Gs.clearToContext(jr);
                  insertHTMLElement(C, q);
                  Os = in_cell_mode;
                  Hs.insertMarker();
                  return;
                case 'caption':
                case 'col':
                case 'colgroup':
                case 'tbody':
                case 'tfoot':
                case 'thead':
                case 'tr':
                  if (endrow()) Os(a, C, q, re);
                  return;
              }
              break;
            case 3:
              switch (C) {
                case 'tr':
                  endrow();
                  return;
                case 'table':
                  if (endrow()) Os(a, C, q, re);
                  return;
                case 'tbody':
                case 'tfoot':
                case 'thead':
                  if (Gs.inTableScope(C)) {
                    if (endrow()) Os(a, C, q, re);
                  }
                  return;
                case 'body':
                case 'caption':
                case 'col':
                case 'colgroup':
                case 'html':
                case 'td':
                case 'th':
                  return;
              }
              break;
          }
          in_table_mode(a, C, q, re);
        }
        function in_cell_mode(a, C, q, re) {
          switch (a) {
            case 2:
              switch (C) {
                case 'caption':
                case 'col':
                case 'colgroup':
                case 'tbody':
                case 'td':
                case 'tfoot':
                case 'th':
                case 'thead':
                case 'tr':
                  if (Gs.inTableScope('td')) {
                    in_cell_mode(Qr, 'td');
                    Os(a, C, q, re);
                  } else if (Gs.inTableScope('th')) {
                    in_cell_mode(Qr, 'th');
                    Os(a, C, q, re);
                  }
                  return;
              }
              break;
            case 3:
              switch (C) {
                case 'td':
                case 'th':
                  if (!Gs.inTableScope(C)) return;
                  Gs.generateImpliedEndTags();
                  Gs.popTag(C);
                  Hs.clearToMarker();
                  Os = in_row_mode;
                  return;
                case 'body':
                case 'caption':
                case 'col':
                case 'colgroup':
                case 'html':
                  return;
                case 'table':
                case 'tbody':
                case 'tfoot':
                case 'thead':
                case 'tr':
                  if (!Gs.inTableScope(C)) return;
                  in_cell_mode(Qr, Gs.inTableScope('td') ? 'td' : 'th');
                  Os(a, C, q, re);
                  return;
              }
              break;
          }
          in_body_mode(a, C, q, re);
        }
        function in_select_mode(a, C, q, re) {
          switch (a) {
            case 1:
              if (Xs) {
                C = C.replace(Qs, '');
                if (C.length === 0) return;
              }
              insertText(C);
              return;
            case 4:
              insertComment(C);
              return;
            case 5:
              return;
            case -1:
              in_body_mode(a, C, q, re);
              return;
            case 2:
              switch (C) {
                case 'html':
                  in_body_mode(a, C, q, re);
                  return;
                case 'option':
                  if (Gs.top instanceof Wt.HTMLOptionElement)
                    in_select_mode(Qr, C);
                  insertHTMLElement(C, q);
                  return;
                case 'optgroup':
                  if (Gs.top instanceof Wt.HTMLOptionElement)
                    in_select_mode(Qr, 'option');
                  if (Gs.top instanceof Wt.HTMLOptGroupElement)
                    in_select_mode(Qr, C);
                  insertHTMLElement(C, q);
                  return;
                case 'select':
                  in_select_mode(Qr, C);
                  return;
                case 'input':
                case 'keygen':
                case 'textarea':
                  if (!Gs.inSelectScope('select')) return;
                  in_select_mode(Qr, 'select');
                  Os(a, C, q, re);
                  return;
                case 'script':
                case 'template':
                  in_head_mode(a, C, q, re);
                  return;
              }
              break;
            case 3:
              switch (C) {
                case 'optgroup':
                  if (
                    Gs.top instanceof Wt.HTMLOptionElement &&
                    Gs.elements[Gs.elements.length - 2] instanceof
                      Wt.HTMLOptGroupElement
                  ) {
                    in_select_mode(Qr, 'option');
                  }
                  if (Gs.top instanceof Wt.HTMLOptGroupElement) Gs.pop();
                  return;
                case 'option':
                  if (Gs.top instanceof Wt.HTMLOptionElement) Gs.pop();
                  return;
                case 'select':
                  if (!Gs.inSelectScope(C)) return;
                  Gs.popTag(C);
                  resetInsertionMode();
                  return;
                case 'template':
                  in_head_mode(a, C, q, re);
                  return;
              }
              break;
          }
        }
        function in_select_in_table_mode(a, C, q, re) {
          switch (C) {
            case 'caption':
            case 'table':
            case 'tbody':
            case 'tfoot':
            case 'thead':
            case 'tr':
            case 'td':
            case 'th':
              switch (a) {
                case 2:
                  in_select_in_table_mode(Qr, 'select');
                  Os(a, C, q, re);
                  return;
                case 3:
                  if (Gs.inTableScope(C)) {
                    in_select_in_table_mode(Qr, 'select');
                    Os(a, C, q, re);
                  }
                  return;
              }
          }
          in_select_mode(a, C, q, re);
        }
        function in_template_mode(a, C, q, re) {
          function switchModeAndReprocess(ae) {
            Os = ae;
            Us[Us.length - 1] = Os;
            Os(a, C, q, re);
          }
          switch (a) {
            case 1:
            case 4:
            case 5:
              in_body_mode(a, C, q, re);
              return;
            case -1:
              if (!Gs.contains('template')) {
                stopParsing();
              } else {
                Gs.popTag('template');
                Hs.clearToMarker();
                Us.pop();
                resetInsertionMode();
                Os(a, C, q, re);
              }
              return;
            case 2:
              switch (C) {
                case 'base':
                case 'basefont':
                case 'bgsound':
                case 'link':
                case 'meta':
                case 'noframes':
                case 'script':
                case 'style':
                case 'template':
                case 'title':
                  in_head_mode(a, C, q, re);
                  return;
                case 'caption':
                case 'colgroup':
                case 'tbody':
                case 'tfoot':
                case 'thead':
                  switchModeAndReprocess(in_table_mode);
                  return;
                case 'col':
                  switchModeAndReprocess(in_column_group_mode);
                  return;
                case 'tr':
                  switchModeAndReprocess(in_table_body_mode);
                  return;
                case 'td':
                case 'th':
                  switchModeAndReprocess(in_row_mode);
                  return;
              }
              switchModeAndReprocess(in_body_mode);
              return;
            case 3:
              switch (C) {
                case 'template':
                  in_head_mode(a, C, q, re);
                  return;
                default:
                  return;
              }
          }
        }
        function after_body_mode(a, C, q, re) {
          switch (a) {
            case 1:
              if (ys.test(C)) break;
              in_body_mode(a, C);
              return;
            case 4:
              Gs.elements[0]._appendChild(tn.createComment(C));
              return;
            case 5:
              return;
            case -1:
              stopParsing();
              return;
            case 2:
              if (C === 'html') {
                in_body_mode(a, C, q, re);
                return;
              }
              break;
            case 3:
              if (C === 'html') {
                if (qs) return;
                Os = after_after_body_mode;
                return;
              }
              break;
          }
          Os = in_body_mode;
          Os(a, C, q, re);
        }
        function in_frameset_mode(a, C, q, re) {
          switch (a) {
            case 1:
              C = C.replace(Is, '');
              if (C.length > 0) insertText(C);
              return;
            case 4:
              insertComment(C);
              return;
            case 5:
              return;
            case -1:
              stopParsing();
              return;
            case 2:
              switch (C) {
                case 'html':
                  in_body_mode(a, C, q, re);
                  return;
                case 'frameset':
                  insertHTMLElement(C, q);
                  return;
                case 'frame':
                  insertHTMLElement(C, q);
                  Gs.pop();
                  return;
                case 'noframes':
                  in_head_mode(a, C, q, re);
                  return;
              }
              break;
            case 3:
              if (C === 'frameset') {
                if (qs && Gs.top instanceof Wt.HTMLHtmlElement) return;
                Gs.pop();
                if (!qs && !(Gs.top instanceof Wt.HTMLFrameSetElement))
                  Os = after_frameset_mode;
                return;
              }
              break;
          }
        }
        function after_frameset_mode(a, C, q, re) {
          switch (a) {
            case 1:
              C = C.replace(Is, '');
              if (C.length > 0) insertText(C);
              return;
            case 4:
              insertComment(C);
              return;
            case 5:
              return;
            case -1:
              stopParsing();
              return;
            case 2:
              switch (C) {
                case 'html':
                  in_body_mode(a, C, q, re);
                  return;
                case 'noframes':
                  in_head_mode(a, C, q, re);
                  return;
              }
              break;
            case 3:
              if (C === 'html') {
                Os = after_after_frameset_mode;
                return;
              }
              break;
          }
        }
        function after_after_body_mode(a, C, q, re) {
          switch (a) {
            case 1:
              if (ys.test(C)) break;
              in_body_mode(a, C, q, re);
              return;
            case 4:
              tn._appendChild(tn.createComment(C));
              return;
            case 5:
              in_body_mode(a, C, q, re);
              return;
            case -1:
              stopParsing();
              return;
            case 2:
              if (C === 'html') {
                in_body_mode(a, C, q, re);
                return;
              }
              break;
          }
          Os = in_body_mode;
          Os(a, C, q, re);
        }
        function after_after_frameset_mode(a, C, q, re) {
          switch (a) {
            case 1:
              C = C.replace(Is, '');
              if (C.length > 0) in_body_mode(a, C, q, re);
              return;
            case 4:
              tn._appendChild(tn.createComment(C));
              return;
            case 5:
              in_body_mode(a, C, q, re);
              return;
            case -1:
              stopParsing();
              return;
            case 2:
              switch (C) {
                case 'html':
                  in_body_mode(a, C, q, re);
                  return;
                case 'noframes':
                  in_head_mode(a, C, q, re);
                  return;
              }
              break;
          }
        }
        function insertForeignToken(a, q, re, ae) {
          function isHTMLFont(a) {
            for (var C = 0, q = a.length; C < q; C++) {
              switch (a[C][0]) {
                case 'color':
                case 'face':
                case 'size':
                  return true;
              }
            }
            return false;
          }
          var Ue;
          switch (a) {
            case 1:
              if (js && ws.test(q)) js = false;
              if (Xs) {
                q = q.replace(Qs, '�');
              }
              insertText(q);
              return;
            case 4:
              insertComment(q);
              return;
            case 5:
              return;
            case 2:
              switch (q) {
                case 'font':
                  if (!isHTMLFont(re)) break;
                case 'b':
                case 'big':
                case 'blockquote':
                case 'body':
                case 'br':
                case 'center':
                case 'code':
                case 'dd':
                case 'div':
                case 'dl':
                case 'dt':
                case 'em':
                case 'embed':
                case 'h1':
                case 'h2':
                case 'h3':
                case 'h4':
                case 'h5':
                case 'h6':
                case 'head':
                case 'hr':
                case 'i':
                case 'img':
                case 'li':
                case 'listing':
                case 'menu':
                case 'meta':
                case 'nobr':
                case 'ol':
                case 'p':
                case 'pre':
                case 'ruby':
                case 's':
                case 'small':
                case 'span':
                case 'strong':
                case 'strike':
                case 'sub':
                case 'sup':
                case 'table':
                case 'tt':
                case 'u':
                case 'ul':
                case 'var':
                  if (qs) {
                    break;
                  }
                  do {
                    Gs.pop();
                    Ue = Gs.top;
                  } while (
                    Ue.namespaceURI !== lt.HTML &&
                    !isMathmlTextIntegrationPoint(Ue) &&
                    !isHTMLIntegrationPoint(Ue)
                  );
                  nn(a, q, re, ae);
                  return;
              }
              Ue = Gs.elements.length === 1 && qs ? C : Gs.top;
              if (Ue.namespaceURI === lt.MATHML) {
                adjustMathMLAttributes(re);
              } else if (Ue.namespaceURI === lt.SVG) {
                q = adjustSVGTagName(q);
                adjustSVGAttributes(re);
              }
              adjustForeignAttributes(re);
              insertForeignElement(q, re, Ue.namespaceURI);
              if (ae) {
                if (q === 'script' && Ue.namespaceURI === lt.SVG) {
                }
                Gs.pop();
              }
              return;
            case 3:
              Ue = Gs.top;
              if (
                q === 'script' &&
                Ue.namespaceURI === lt.SVG &&
                Ue.localName === 'script'
              ) {
                Gs.pop();
              } else {
                var Pt = Gs.elements.length - 1;
                var Wt = Gs.elements[Pt];
                for (;;) {
                  if (Wt.localName.toLowerCase() === q) {
                    Gs.popElement(Wt);
                    break;
                  }
                  Wt = Gs.elements[--Pt];
                  if (Wt.namespaceURI !== lt.HTML) continue;
                  Os(a, q, re, ae);
                  break;
                }
              }
              return;
          }
        }
        en.testTokenizer = function (a, C, q, re) {
          var ae = [];
          switch (C) {
            case 'PCDATA state':
              ss = data_state;
              break;
            case 'RCDATA state':
              ss = rcdata_state;
              break;
            case 'RAWTEXT state':
              ss = rawtext_state;
              break;
            case 'PLAINTEXT state':
              ss = plaintext_state;
              break;
          }
          if (q) {
            _s = q;
          }
          nn = function (a, C, q, re) {
            flushText();
            switch (a) {
              case 1:
                if (ae.length > 0 && ae[ae.length - 1][0] === 'Character') {
                  ae[ae.length - 1][1] += C;
                } else ae.push(['Character', C]);
                break;
              case 4:
                ae.push(['Comment', C]);
                break;
              case 5:
                ae.push([
                  'DOCTYPE',
                  C,
                  q === undefined ? null : q,
                  re === undefined ? null : re,
                  !Js
                ]);
                break;
              case 2:
                var Ue = Object.create(null);
                for (var lt = 0; lt < q.length; lt++) {
                  var Pt = q[lt];
                  if (Pt.length === 1) {
                    Ue[Pt[0]] = '';
                  } else {
                    Ue[Pt[0]] = Pt[1];
                  }
                }
                var Wt = ['StartTag', C, Ue];
                if (re) Wt.push(true);
                ae.push(Wt);
                break;
              case 3:
                ae.push(['EndTag', C]);
                break;
              case -1:
                break;
            }
          };
          if (!re) {
            this.parse(a, true);
          } else {
            for (var Ue = 0; Ue < a.length; Ue++) {
              this.parse(a[Ue]);
            }
            this.parse('', true);
          }
          return ae;
        };
        return en;
      }
    },
    6889: (a, C, q) => {
      'use strict';
      a.exports = Leaf;
      var re = q(4976);
      var ae = q(3209);
      var Ue = q(3573);
      var lt = Ue.HierarchyRequestError;
      var Pt = Ue.NotFoundError;
      function Leaf() {
        re.call(this);
      }
      Leaf.prototype = Object.create(re.prototype, {
        hasChildNodes: {
          value: function () {
            return false;
          }
        },
        firstChild: { value: null },
        lastChild: { value: null },
        insertBefore: {
          value: function (a, C) {
            if (!a.nodeType) throw new TypeError('not a node');
            lt();
          }
        },
        replaceChild: {
          value: function (a, C) {
            if (!a.nodeType) throw new TypeError('not a node');
            lt();
          }
        },
        removeChild: {
          value: function (a) {
            if (!a.nodeType) throw new TypeError('not a node');
            Pt();
          }
        },
        removeChildren: { value: function () {} },
        childNodes: {
          get: function () {
            if (!this._childNodes) this._childNodes = new ae();
            return this._childNodes;
          }
        }
      });
    },
    9271: (a, C, q) => {
      'use strict';
      var re = q(3573);
      var ae = (a.exports = {
        valid: function (a) {
          re.assert(a, 'list falsy');
          re.assert(a._previousSibling, 'previous falsy');
          re.assert(a._nextSibling, 'next falsy');
          return true;
        },
        insertBefore: function (a, C) {
          re.assert(ae.valid(a) && ae.valid(C));
          var q = a,
            Ue = a._previousSibling;
          var lt = C,
            Pt = C._previousSibling;
          q._previousSibling = Pt;
          Ue._nextSibling = lt;
          Pt._nextSibling = q;
          lt._previousSibling = Ue;
          re.assert(ae.valid(a) && ae.valid(C));
        },
        replace: function (a, C) {
          re.assert(ae.valid(a) && (C === null || ae.valid(C)));
          if (C !== null) {
            ae.insertBefore(C, a);
          }
          ae.remove(a);
          re.assert(ae.valid(a) && (C === null || ae.valid(C)));
        },
        remove: function (a) {
          re.assert(ae.valid(a));
          var C = a._previousSibling;
          if (C === a) {
            return;
          }
          var q = a._nextSibling;
          C._nextSibling = q;
          q._previousSibling = C;
          a._previousSibling = a._nextSibling = a;
          re.assert(ae.valid(a));
        }
      });
    },
    1355: (a, C, q) => {
      'use strict';
      var re = q(1026);
      var ae = q(3103);
      a.exports = Location;
      function Location(a, C) {
        this._window = a;
        this._href = C;
      }
      Location.prototype = Object.create(ae.prototype, {
        constructor: { value: Location },
        href: {
          get: function () {
            return this._href;
          },
          set: function (a) {
            this.assign(a);
          }
        },
        assign: {
          value: function (a) {
            var C = new re(this._href);
            var q = C.resolve(a);
            this._href = q;
          }
        },
        replace: {
          value: function (a) {
            this.assign(a);
          }
        },
        reload: {
          value: function () {
            this.assign(this.href);
          }
        },
        toString: {
          value: function () {
            return this.href;
          }
        }
      });
    },
    3162: (a, C, q) => {
      'use strict';
      var re = q(7620);
      a.exports = MouseEvent;
      function MouseEvent() {
        re.call(this);
        this.screenX = this.screenY = this.clientX = this.clientY = 0;
        this.ctrlKey = this.altKey = this.shiftKey = this.metaKey = false;
        this.button = 0;
        this.buttons = 1;
        this.relatedTarget = null;
      }
      MouseEvent.prototype = Object.create(re.prototype, {
        constructor: { value: MouseEvent },
        initMouseEvent: {
          value: function (
            a,
            C,
            q,
            re,
            ae,
            Ue,
            lt,
            Pt,
            Wt,
            Ar,
            Er,
            Ir,
            Br,
            Qr,
            kr
          ) {
            this.initEvent(a, C, q, re, ae);
            this.screenX = Ue;
            this.screenY = lt;
            this.clientX = Pt;
            this.clientY = Wt;
            this.ctrlKey = Ar;
            this.altKey = Er;
            this.shiftKey = Ir;
            this.metaKey = Br;
            this.button = Qr;
            switch (Qr) {
              case 0:
                this.buttons = 1;
                break;
              case 1:
                this.buttons = 4;
                break;
              case 2:
                this.buttons = 2;
                break;
              default:
                this.buttons = 0;
                break;
            }
            this.relatedTarget = kr;
          }
        },
        getModifierState: {
          value: function (a) {
            switch (a) {
              case 'Alt':
                return this.altKey;
              case 'Control':
                return this.ctrlKey;
              case 'Shift':
                return this.shiftKey;
              case 'Meta':
                return this.metaKey;
              default:
                return false;
            }
          }
        }
      });
    },
    7535: (a) => {
      'use strict';
      a.exports = {
        VALUE: 1,
        ATTR: 2,
        REMOVE_ATTR: 3,
        REMOVE: 4,
        MOVE: 5,
        INSERT: 6
      };
    },
    8601: (a, C, q) => {
      'use strict';
      a.exports = NamedNodeMap;
      var re = q(3573);
      function NamedNodeMap(a) {
        this.element = a;
      }
      Object.defineProperties(NamedNodeMap.prototype, {
        length: { get: re.shouldOverride },
        item: { value: re.shouldOverride },
        getNamedItem: {
          value: function getNamedItem(a) {
            return this.element.getAttributeNode(a);
          }
        },
        getNamedItemNS: {
          value: function getNamedItemNS(a, C) {
            return this.element.getAttributeNodeNS(a, C);
          }
        },
        setNamedItem: { value: re.nyi },
        setNamedItemNS: { value: re.nyi },
        removeNamedItem: {
          value: function removeNamedItem(a) {
            var C = this.element.getAttributeNode(a);
            if (C) {
              this.element.removeAttribute(a);
              return C;
            }
            re.NotFoundError();
          }
        },
        removeNamedItemNS: {
          value: function removeNamedItemNS(a, C) {
            var q = this.element.getAttributeNodeNS(a, C);
            if (q) {
              this.element.removeAttributeNS(a, C);
              return q;
            }
            re.NotFoundError();
          }
        }
      });
    },
    6601: (a) => {
      'use strict';
      var C = Object.create(null, {
        appCodeName: { value: 'Mozilla' },
        appName: { value: 'Netscape' },
        appVersion: { value: '4.0' },
        platform: { value: '' },
        product: { value: 'Gecko' },
        productSub: { value: '20100101' },
        userAgent: { value: '' },
        vendor: { value: '' },
        vendorSub: { value: '' },
        taintEnabled: {
          value: function () {
            return false;
          }
        }
      });
      a.exports = C;
    },
    4976: (a, C, q) => {
      'use strict';
      a.exports = Node;
      var re = q(802);
      var ae = q(9271);
      var Ue = q(9976);
      var lt = q(3573);
      function Node() {
        re.call(this);
        this.parentNode = null;
        this._nextSibling = this._previousSibling = this;
        this._index = undefined;
      }
      var Pt = (Node.ELEMENT_NODE = 1);
      var Wt = (Node.ATTRIBUTE_NODE = 2);
      var Ar = (Node.TEXT_NODE = 3);
      var Er = (Node.CDATA_SECTION_NODE = 4);
      var Ir = (Node.ENTITY_REFERENCE_NODE = 5);
      var Br = (Node.ENTITY_NODE = 6);
      var Qr = (Node.PROCESSING_INSTRUCTION_NODE = 7);
      var kr = (Node.COMMENT_NODE = 8);
      var Dr = (Node.DOCUMENT_NODE = 9);
      var Nr = (Node.DOCUMENT_TYPE_NODE = 10);
      var Lr = (Node.DOCUMENT_FRAGMENT_NODE = 11);
      var Fr = (Node.NOTATION_NODE = 12);
      var Mr = (Node.DOCUMENT_POSITION_DISCONNECTED = 1);
      var Pr = (Node.DOCUMENT_POSITION_PRECEDING = 2);
      var Or = (Node.DOCUMENT_POSITION_FOLLOWING = 4);
      var xr = (Node.DOCUMENT_POSITION_CONTAINS = 8);
      var Ur = (Node.DOCUMENT_POSITION_CONTAINED_BY = 16);
      var Gr = (Node.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32);
      Node.prototype = Object.create(re.prototype, {
        baseURI: { get: lt.nyi },
        parentElement: {
          get: function () {
            return this.parentNode && this.parentNode.nodeType === Pt
              ? this.parentNode
              : null;
          }
        },
        hasChildNodes: { value: lt.shouldOverride },
        firstChild: { get: lt.shouldOverride },
        lastChild: { get: lt.shouldOverride },
        isConnected: {
          get: function () {
            let a = this;
            while (a != null) {
              if (a.nodeType === Node.DOCUMENT_NODE) {
                return true;
              }
              a = a.parentNode;
              if (a != null && a.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
                a = a.host;
              }
            }
            return false;
          }
        },
        previousSibling: {
          get: function () {
            var a = this.parentNode;
            if (!a) return null;
            if (this === a.firstChild) return null;
            return this._previousSibling;
          }
        },
        nextSibling: {
          get: function () {
            var a = this.parentNode,
              C = this._nextSibling;
            if (!a) return null;
            if (C === a.firstChild) return null;
            return C;
          }
        },
        textContent: {
          get: function () {
            return null;
          },
          set: function (a) {}
        },
        innerText: {
          get: function () {
            return null;
          },
          set: function (a) {}
        },
        _countChildrenOfType: {
          value: function (a) {
            var C = 0;
            for (var q = this.firstChild; q !== null; q = q.nextSibling) {
              if (q.nodeType === a) C++;
            }
            return C;
          }
        },
        _ensureInsertValid: {
          value: function _ensureInsertValid(a, C, q) {
            var re = this,
              ae,
              Ue;
            if (!a.nodeType) throw new TypeError('not a node');
            switch (re.nodeType) {
              case Dr:
              case Lr:
              case Pt:
                break;
              default:
                lt.HierarchyRequestError();
            }
            if (a.isAncestor(re)) lt.HierarchyRequestError();
            if (C !== null || !q) {
              if (C.parentNode !== re) lt.NotFoundError();
            }
            switch (a.nodeType) {
              case Lr:
              case Nr:
              case Pt:
              case Ar:
              case Qr:
              case kr:
                break;
              default:
                lt.HierarchyRequestError();
            }
            if (re.nodeType === Dr) {
              switch (a.nodeType) {
                case Ar:
                  lt.HierarchyRequestError();
                  break;
                case Lr:
                  if (a._countChildrenOfType(Ar) > 0)
                    lt.HierarchyRequestError();
                  switch (a._countChildrenOfType(Pt)) {
                    case 0:
                      break;
                    case 1:
                      if (C !== null) {
                        if (q && C.nodeType === Nr) lt.HierarchyRequestError();
                        for (
                          Ue = C.nextSibling;
                          Ue !== null;
                          Ue = Ue.nextSibling
                        ) {
                          if (Ue.nodeType === Nr) lt.HierarchyRequestError();
                        }
                      }
                      ae = re._countChildrenOfType(Pt);
                      if (q) {
                        if (ae > 0) lt.HierarchyRequestError();
                      } else {
                        if (ae > 1 || (ae === 1 && C.nodeType !== Pt))
                          lt.HierarchyRequestError();
                      }
                      break;
                    default:
                      lt.HierarchyRequestError();
                  }
                  break;
                case Pt:
                  if (C !== null) {
                    if (q && C.nodeType === Nr) lt.HierarchyRequestError();
                    for (Ue = C.nextSibling; Ue !== null; Ue = Ue.nextSibling) {
                      if (Ue.nodeType === Nr) lt.HierarchyRequestError();
                    }
                  }
                  ae = re._countChildrenOfType(Pt);
                  if (q) {
                    if (ae > 0) lt.HierarchyRequestError();
                  } else {
                    if (ae > 1 || (ae === 1 && C.nodeType !== Pt))
                      lt.HierarchyRequestError();
                  }
                  break;
                case Nr:
                  if (C === null) {
                    if (re._countChildrenOfType(Pt)) lt.HierarchyRequestError();
                  } else {
                    for (Ue = re.firstChild; Ue !== null; Ue = Ue.nextSibling) {
                      if (Ue === C) break;
                      if (Ue.nodeType === Pt) lt.HierarchyRequestError();
                    }
                  }
                  ae = re._countChildrenOfType(Nr);
                  if (q) {
                    if (ae > 0) lt.HierarchyRequestError();
                  } else {
                    if (ae > 1 || (ae === 1 && C.nodeType !== Nr))
                      lt.HierarchyRequestError();
                  }
                  break;
              }
            } else {
              if (a.nodeType === Nr) lt.HierarchyRequestError();
            }
          }
        },
        insertBefore: {
          value: function insertBefore(a, C) {
            var q = this;
            q._ensureInsertValid(a, C, true);
            var re = C;
            if (re === a) {
              re = a.nextSibling;
            }
            q.doc.adoptNode(a);
            a._insertOrReplace(q, re, false);
            return a;
          }
        },
        appendChild: {
          value: function (a) {
            return this.insertBefore(a, null);
          }
        },
        _appendChild: {
          value: function (a) {
            a._insertOrReplace(this, null, false);
          }
        },
        removeChild: {
          value: function removeChild(a) {
            var C = this;
            if (!a.nodeType) throw new TypeError('not a node');
            if (a.parentNode !== C) lt.NotFoundError();
            a.remove();
            return a;
          }
        },
        replaceChild: {
          value: function replaceChild(a, C) {
            var q = this;
            q._ensureInsertValid(a, C, false);
            if (a.doc !== q.doc) {
              q.doc.adoptNode(a);
            }
            a._insertOrReplace(q, C, true);
            return C;
          }
        },
        contains: {
          value: function contains(a) {
            if (a === null) {
              return false;
            }
            if (this === a) {
              return true;
            }
            return (this.compareDocumentPosition(a) & Ur) !== 0;
          }
        },
        compareDocumentPosition: {
          value: function compareDocumentPosition(a) {
            if (this === a) return 0;
            if (this.doc !== a.doc || this.rooted !== a.rooted) return Mr + Gr;
            var C = [],
              q = [];
            for (var re = this; re !== null; re = re.parentNode) C.push(re);
            for (re = a; re !== null; re = re.parentNode) q.push(re);
            C.reverse();
            q.reverse();
            if (C[0] !== q[0]) return Mr + Gr;
            re = Math.min(C.length, q.length);
            for (var ae = 1; ae < re; ae++) {
              if (C[ae] !== q[ae]) {
                if (C[ae].index < q[ae].index) return Or;
                else return Pr;
              }
            }
            if (C.length < q.length) return Or + Ur;
            else return Pr + xr;
          }
        },
        isSameNode: {
          value: function isSameNode(a) {
            return this === a;
          }
        },
        isEqualNode: {
          value: function isEqualNode(a) {
            if (!a) return false;
            if (a.nodeType !== this.nodeType) return false;
            if (!this.isEqual(a)) return false;
            for (
              var C = this.firstChild, q = a.firstChild;
              C && q;
              C = C.nextSibling, q = q.nextSibling
            ) {
              if (!C.isEqualNode(q)) return false;
            }
            return C === null && q === null;
          }
        },
        cloneNode: {
          value: function (a) {
            var C = this.clone();
            if (a) {
              for (var q = this.firstChild; q !== null; q = q.nextSibling) {
                C._appendChild(q.cloneNode(true));
              }
            }
            return C;
          }
        },
        lookupPrefix: {
          value: function lookupPrefix(a) {
            var C;
            if (a === '' || a === null || a === undefined) return null;
            switch (this.nodeType) {
              case Pt:
                return this._lookupNamespacePrefix(a, this);
              case Dr:
                C = this.documentElement;
                return C ? C.lookupPrefix(a) : null;
              case Br:
              case Fr:
              case Lr:
              case Nr:
                return null;
              case Wt:
                C = this.ownerElement;
                return C ? C.lookupPrefix(a) : null;
              default:
                C = this.parentElement;
                return C ? C.lookupPrefix(a) : null;
            }
          }
        },
        lookupNamespaceURI: {
          value: function lookupNamespaceURI(a) {
            if (a === '' || a === undefined) {
              a = null;
            }
            var C;
            switch (this.nodeType) {
              case Pt:
                return lt.shouldOverride();
              case Dr:
                C = this.documentElement;
                return C ? C.lookupNamespaceURI(a) : null;
              case Br:
              case Fr:
              case Nr:
              case Lr:
                return null;
              case Wt:
                C = this.ownerElement;
                return C ? C.lookupNamespaceURI(a) : null;
              default:
                C = this.parentElement;
                return C ? C.lookupNamespaceURI(a) : null;
            }
          }
        },
        isDefaultNamespace: {
          value: function isDefaultNamespace(a) {
            if (a === '' || a === undefined) {
              a = null;
            }
            var C = this.lookupNamespaceURI(null);
            return C === a;
          }
        },
        index: {
          get: function () {
            var a = this.parentNode;
            if (this === a.firstChild) return 0;
            var C = a.childNodes;
            if (this._index === undefined || C[this._index] !== this) {
              for (var q = 0; q < C.length; q++) {
                C[q]._index = q;
              }
              lt.assert(C[this._index] === this);
            }
            return this._index;
          }
        },
        isAncestor: {
          value: function (a) {
            if (this.doc !== a.doc) return false;
            if (this.rooted !== a.rooted) return false;
            for (var C = a; C; C = C.parentNode) {
              if (C === this) return true;
            }
            return false;
          }
        },
        ensureSameDoc: {
          value: function (a) {
            if (a.ownerDocument === null) {
              a.ownerDocument = this.doc;
            } else if (a.ownerDocument !== this.doc) {
              lt.WrongDocumentError();
            }
          }
        },
        removeChildren: { value: lt.shouldOverride },
        _insertOrReplace: {
          value: function _insertOrReplace(a, C, q) {
            var re = this,
              Ue,
              Pt;
            if (re.nodeType === Lr && re.rooted) {
              lt.HierarchyRequestError();
            }
            if (a._childNodes) {
              Ue = C === null ? a._childNodes.length : C.index;
              if (re.parentNode === a) {
                var Wt = re.index;
                if (Wt < Ue) {
                  Ue--;
                }
              }
            }
            if (q) {
              if (C.rooted) C.doc.mutateRemove(C);
              C.parentNode = null;
            }
            var Ar = C;
            if (Ar === null) {
              Ar = a.firstChild;
            }
            var Er = re.rooted && a.rooted;
            if (re.nodeType === Lr) {
              var Ir = [0, q ? 1 : 0],
                Br;
              for (var Qr = re.firstChild; Qr !== null; Qr = Br) {
                Br = Qr.nextSibling;
                Ir.push(Qr);
                Qr.parentNode = a;
              }
              var kr = Ir.length;
              if (q) {
                ae.replace(Ar, kr > 2 ? Ir[2] : null);
              } else if (kr > 2 && Ar !== null) {
                ae.insertBefore(Ir[2], Ar);
              }
              if (a._childNodes) {
                Ir[0] = C === null ? a._childNodes.length : C._index;
                a._childNodes.splice.apply(a._childNodes, Ir);
                for (Pt = 2; Pt < kr; Pt++) {
                  Ir[Pt]._index = Ir[0] + (Pt - 2);
                }
              } else if (a._firstChild === C) {
                if (kr > 2) {
                  a._firstChild = Ir[2];
                } else if (q) {
                  a._firstChild = null;
                }
              }
              if (re._childNodes) {
                re._childNodes.length = 0;
              } else {
                re._firstChild = null;
              }
              if (a.rooted) {
                a.modify();
                for (Pt = 2; Pt < kr; Pt++) {
                  a.doc.mutateInsert(Ir[Pt]);
                }
              }
            } else {
              if (C === re) {
                return;
              }
              if (Er) {
                re._remove();
              } else if (re.parentNode) {
                re.remove();
              }
              re.parentNode = a;
              if (q) {
                ae.replace(Ar, re);
                if (a._childNodes) {
                  re._index = Ue;
                  a._childNodes[Ue] = re;
                } else if (a._firstChild === C) {
                  a._firstChild = re;
                }
              } else {
                if (Ar !== null) {
                  ae.insertBefore(re, Ar);
                }
                if (a._childNodes) {
                  re._index = Ue;
                  a._childNodes.splice(Ue, 0, re);
                } else if (a._firstChild === C) {
                  a._firstChild = re;
                }
              }
              if (Er) {
                a.modify();
                a.doc.mutateMove(re);
              } else if (a.rooted) {
                a.modify();
                a.doc.mutateInsert(re);
              }
            }
          }
        },
        lastModTime: {
          get: function () {
            if (!this._lastModTime) {
              this._lastModTime = this.doc.modclock;
            }
            return this._lastModTime;
          }
        },
        modify: {
          value: function () {
            if (this.doc.modclock) {
              var a = ++this.doc.modclock;
              for (var C = this; C; C = C.parentElement) {
                if (C._lastModTime) {
                  C._lastModTime = a;
                }
              }
            }
          }
        },
        doc: {
          get: function () {
            return this.ownerDocument || this;
          }
        },
        rooted: {
          get: function () {
            return !!this._nid;
          }
        },
        normalize: {
          value: function () {
            var a;
            for (var C = this.firstChild; C !== null; C = a) {
              a = C.nextSibling;
              if (C.normalize) {
                C.normalize();
              }
              if (C.nodeType !== Node.TEXT_NODE) {
                continue;
              }
              if (C.nodeValue === '') {
                this.removeChild(C);
                continue;
              }
              var q = C.previousSibling;
              if (q === null) {
                continue;
              } else if (q.nodeType === Node.TEXT_NODE) {
                q.appendData(C.nodeValue);
                this.removeChild(C);
              }
            }
          }
        },
        serialize: {
          value: function () {
            if (this._innerHTML) {
              return this._innerHTML;
            }
            var a = '';
            for (var C = this.firstChild; C !== null; C = C.nextSibling) {
              a += Ue.serializeOne(C, this);
            }
            return a;
          }
        },
        outerHTML: {
          get: function () {
            return Ue.serializeOne(this, { nodeType: 0 });
          },
          set: lt.nyi
        },
        ELEMENT_NODE: { value: Pt },
        ATTRIBUTE_NODE: { value: Wt },
        TEXT_NODE: { value: Ar },
        CDATA_SECTION_NODE: { value: Er },
        ENTITY_REFERENCE_NODE: { value: Ir },
        ENTITY_NODE: { value: Br },
        PROCESSING_INSTRUCTION_NODE: { value: Qr },
        COMMENT_NODE: { value: kr },
        DOCUMENT_NODE: { value: Dr },
        DOCUMENT_TYPE_NODE: { value: Nr },
        DOCUMENT_FRAGMENT_NODE: { value: Lr },
        NOTATION_NODE: { value: Fr },
        DOCUMENT_POSITION_DISCONNECTED: { value: Mr },
        DOCUMENT_POSITION_PRECEDING: { value: Pr },
        DOCUMENT_POSITION_FOLLOWING: { value: Or },
        DOCUMENT_POSITION_CONTAINS: { value: xr },
        DOCUMENT_POSITION_CONTAINED_BY: { value: Ur },
        DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: { value: Gr }
      });
    },
    3587: (a) => {
      'use strict';
      var C = {
        FILTER_ACCEPT: 1,
        FILTER_REJECT: 2,
        FILTER_SKIP: 3,
        SHOW_ALL: 4294967295,
        SHOW_ELEMENT: 1,
        SHOW_ATTRIBUTE: 2,
        SHOW_TEXT: 4,
        SHOW_CDATA_SECTION: 8,
        SHOW_ENTITY_REFERENCE: 16,
        SHOW_ENTITY: 32,
        SHOW_PROCESSING_INSTRUCTION: 64,
        SHOW_COMMENT: 128,
        SHOW_DOCUMENT: 256,
        SHOW_DOCUMENT_TYPE: 512,
        SHOW_DOCUMENT_FRAGMENT: 1024,
        SHOW_NOTATION: 2048
      };
      a.exports = C.constructor = C.prototype = C;
    },
    9410: (a, C, q) => {
      'use strict';
      a.exports = NodeIterator;
      var re = q(3587);
      var ae = q(9547);
      var Ue = q(3573);
      function move(a, C, q) {
        if (q) {
          return ae.next(a, C);
        } else {
          if (a === C) {
            return null;
          }
          return ae.previous(a, null);
        }
      }
      function isInclusiveAncestor(a, C) {
        for (; C; C = C.parentNode) {
          if (a === C) {
            return true;
          }
        }
        return false;
      }
      function traverse(a, C) {
        var q, ae;
        q = a._referenceNode;
        ae = a._pointerBeforeReferenceNode;
        while (true) {
          if (ae === C) {
            ae = !ae;
          } else {
            q = move(q, a._root, C);
            if (q === null) {
              return null;
            }
          }
          var Ue = a._internalFilter(q);
          if (Ue === re.FILTER_ACCEPT) {
            break;
          }
        }
        a._referenceNode = q;
        a._pointerBeforeReferenceNode = ae;
        return q;
      }
      function NodeIterator(a, C, q) {
        if (!a || !a.nodeType) {
          Ue.NotSupportedError();
        }
        this._root = a;
        this._referenceNode = a;
        this._pointerBeforeReferenceNode = true;
        this._whatToShow = Number(C) || 0;
        this._filter = q || null;
        this._active = false;
        a.doc._attachNodeIterator(this);
      }
      Object.defineProperties(NodeIterator.prototype, {
        root: {
          get: function root() {
            return this._root;
          }
        },
        referenceNode: {
          get: function referenceNode() {
            return this._referenceNode;
          }
        },
        pointerBeforeReferenceNode: {
          get: function pointerBeforeReferenceNode() {
            return this._pointerBeforeReferenceNode;
          }
        },
        whatToShow: {
          get: function whatToShow() {
            return this._whatToShow;
          }
        },
        filter: {
          get: function filter() {
            return this._filter;
          }
        },
        _internalFilter: {
          value: function _internalFilter(a) {
            var C, q;
            if (this._active) {
              Ue.InvalidStateError();
            }
            if (!((1 << (a.nodeType - 1)) & this._whatToShow)) {
              return re.FILTER_SKIP;
            }
            q = this._filter;
            if (q === null) {
              C = re.FILTER_ACCEPT;
            } else {
              this._active = true;
              try {
                if (typeof q === 'function') {
                  C = q(a);
                } else {
                  C = q.acceptNode(a);
                }
              } finally {
                this._active = false;
              }
            }
            return +C;
          }
        },
        _preremove: {
          value: function _preremove(a) {
            if (isInclusiveAncestor(a, this._root)) {
              return;
            }
            if (!isInclusiveAncestor(a, this._referenceNode)) {
              return;
            }
            if (this._pointerBeforeReferenceNode) {
              var C = a;
              while (C.lastChild) {
                C = C.lastChild;
              }
              C = ae.next(C, this.root);
              if (C) {
                this._referenceNode = C;
                return;
              }
              this._pointerBeforeReferenceNode = false;
            }
            if (a.previousSibling === null) {
              this._referenceNode = a.parentNode;
            } else {
              this._referenceNode = a.previousSibling;
              var q;
              for (
                q = this._referenceNode.lastChild;
                q;
                q = this._referenceNode.lastChild
              ) {
                this._referenceNode = q;
              }
            }
          }
        },
        nextNode: {
          value: function nextNode() {
            return traverse(this, true);
          }
        },
        previousNode: {
          value: function previousNode() {
            return traverse(this, false);
          }
        },
        detach: { value: function detach() {} },
        toString: {
          value: function toString() {
            return '[object NodeIterator]';
          }
        }
      });
    },
    7630: (a) => {
      'use strict';
      function item(a) {
        return this[a] || null;
      }
      function NodeList(a) {
        if (!a) a = [];
        a.item = item;
        return a;
      }
      a.exports = NodeList;
    },
    165: (a) => {
      'use strict';
      a.exports = class NodeList extends Array {
        constructor(a) {
          super((a && a.length) || 0);
          if (a) {
            for (var C in a) {
              this[C] = a[C];
            }
          }
        }
        item(a) {
          return this[a] || null;
        }
      };
    },
    3209: (a, C, q) => {
      'use strict';
      var re;
      try {
        re = q(165);
      } catch (a) {
        re = q(7630);
      }
      a.exports = re;
    },
    9547: (a) => {
      'use strict';
      var C = (a.exports = {
        nextSkippingChildren: nextSkippingChildren,
        nextAncestorSibling: nextAncestorSibling,
        next: next,
        previous: previous,
        deepLastChild: deepLastChild
      });
      function nextSkippingChildren(a, C) {
        if (a === C) {
          return null;
        }
        if (a.nextSibling !== null) {
          return a.nextSibling;
        }
        return nextAncestorSibling(a, C);
      }
      function nextAncestorSibling(a, C) {
        for (a = a.parentNode; a !== null; a = a.parentNode) {
          if (a === C) {
            return null;
          }
          if (a.nextSibling !== null) {
            return a.nextSibling;
          }
        }
        return null;
      }
      function next(a, C) {
        var q;
        q = a.firstChild;
        if (q !== null) {
          return q;
        }
        if (a === C) {
          return null;
        }
        q = a.nextSibling;
        if (q !== null) {
          return q;
        }
        return nextAncestorSibling(a, C);
      }
      function deepLastChild(a) {
        while (a.lastChild) {
          a = a.lastChild;
        }
        return a;
      }
      function previous(a, C) {
        var q;
        q = a.previousSibling;
        if (q !== null) {
          return deepLastChild(q);
        }
        q = a.parentNode;
        if (q === C) {
          return null;
        }
        return q;
      }
    },
    9976: (a, C, q) => {
      'use strict';
      a.exports = {
        serializeOne: serializeOne,
        ɵescapeMatchingClosingTag: escapeMatchingClosingTag,
        ɵescapeClosingCommentTag: escapeClosingCommentTag,
        ɵescapeProcessingInstructionContent: escapeProcessingInstructionContent
      };
      var re = q(3573);
      var ae = re.NAMESPACE;
      var Ue = {
        STYLE: true,
        SCRIPT: true,
        XMP: true,
        IFRAME: true,
        NOEMBED: true,
        NOFRAMES: true,
        PLAINTEXT: true
      };
      var lt = {
        area: true,
        base: true,
        basefont: true,
        bgsound: true,
        br: true,
        col: true,
        embed: true,
        frame: true,
        hr: true,
        img: true,
        input: true,
        keygen: true,
        link: true,
        meta: true,
        param: true,
        source: true,
        track: true,
        wbr: true
      };
      var Pt = {};
      const Wt = /[&<>\u00A0]/g;
      const Ar = /[&"<>\u00A0]/g;
      function escape(a) {
        if (!Wt.test(a)) {
          return a;
        }
        return a.replace(Wt, (a) => {
          switch (a) {
            case '&':
              return '&amp;';
            case '<':
              return '&lt;';
            case '>':
              return '&gt;';
            case ' ':
              return '&nbsp;';
          }
        });
      }
      function escapeAttr(a) {
        if (!Ar.test(a)) {
          return a;
        }
        return a.replace(Ar, (a) => {
          switch (a) {
            case '<':
              return '&lt;';
            case '>':
              return '&gt;';
            case '&':
              return '&amp;';
            case '"':
              return '&quot;';
            case ' ':
              return '&nbsp;';
          }
        });
      }
      function attrname(a) {
        var C = a.namespaceURI;
        if (!C) return a.localName;
        if (C === ae.XML) return 'xml:' + a.localName;
        if (C === ae.XLINK) return 'xlink:' + a.localName;
        if (C === ae.XMLNS) {
          if (a.localName === 'xmlns') return 'xmlns';
          else return 'xmlns:' + a.localName;
        }
        return a.name;
      }
      function escapeMatchingClosingTag(a, C) {
        const q = '</' + C;
        if (!a.toLowerCase().includes(q)) {
          return a;
        }
        const re = [...a];
        const ae = a.matchAll(new RegExp(q, 'ig'));
        for (const a of ae) {
          re[a.index] = '&lt;';
        }
        return re.join('');
      }
      const Er = /--!?>/;
      function escapeClosingCommentTag(a) {
        if (!Er.test(a)) {
          return a;
        }
        return a.replace(/(--\!?)>/g, '$1&gt;');
      }
      function escapeProcessingInstructionContent(a) {
        return a.includes('>') ? a.replaceAll('>', '&gt;') : a;
      }
      function serializeOne(a, C) {
        var q = '';
        switch (a.nodeType) {
          case 1:
            var Wt = a.namespaceURI;
            var Ar = Wt === ae.HTML;
            var Er =
              Ar || Wt === ae.SVG || Wt === ae.MATHML ? a.localName : a.tagName;
            q += '<' + Er;
            for (var Ir = 0, Br = a._numattrs; Ir < Br; Ir++) {
              var Qr = a._attr(Ir);
              q += ' ' + attrname(Qr);
              if (Qr.value !== undefined)
                q += '="' + escapeAttr(Qr.value) + '"';
            }
            q += '>';
            if (!(Ar && lt[Er])) {
              var kr = a.serialize();
              if (Ue[Er.toUpperCase()]) {
                kr = escapeMatchingClosingTag(kr, Er);
              }
              if (Ar && Pt[Er] && kr.charAt(0) === '\n') q += '\n';
              q += kr;
              q += '</' + Er + '>';
            }
            break;
          case 3:
          case 4:
            var Dr;
            if (C.nodeType === 1 && C.namespaceURI === ae.HTML) Dr = C.tagName;
            else Dr = '';
            if (
              Ue[Dr] ||
              (Dr === 'NOSCRIPT' && C.ownerDocument._scripting_enabled)
            ) {
              q += a.data;
            } else {
              q += escape(a.data);
            }
            break;
          case 8:
            q += '\x3c!--' + escapeClosingCommentTag(a.data) + '--\x3e';
            break;
          case 7:
            const Nr = escapeProcessingInstructionContent(a.data);
            q += '<?' + a.target + ' ' + Nr + '?>';
            break;
          case 10:
            q += '<!DOCTYPE ' + a.name;
            if (false) {
            }
            q += '>';
            break;
          default:
            re.InvalidStateError();
        }
        return q;
      }
    },
    4813: (a, C, q) => {
      'use strict';
      var re = q(4976);
      var ae = {
        nextElementSibling: {
          get: function () {
            if (this.parentNode) {
              for (var a = this.nextSibling; a !== null; a = a.nextSibling) {
                if (a.nodeType === re.ELEMENT_NODE) return a;
              }
            }
            return null;
          }
        },
        previousElementSibling: {
          get: function () {
            if (this.parentNode) {
              for (
                var a = this.previousSibling;
                a !== null;
                a = a.previousSibling
              ) {
                if (a.nodeType === re.ELEMENT_NODE) return a;
              }
            }
            return null;
          }
        }
      };
      a.exports = ae;
    },
    4430: (a, C, q) => {
      'use strict';
      a.exports = ProcessingInstruction;
      var re = q(4976);
      var ae = q(5995);
      function ProcessingInstruction(a, C, q) {
        ae.call(this);
        this.nodeType = re.PROCESSING_INSTRUCTION_NODE;
        this.ownerDocument = a;
        this.target = C;
        this._data = q;
      }
      var Ue = {
        get: function () {
          return this._data;
        },
        set: function (a) {
          if (a === null || a === undefined) {
            a = '';
          } else {
            a = String(a);
          }
          this._data = a;
          if (this.rooted) this.ownerDocument.mutateValue(this);
        }
      };
      ProcessingInstruction.prototype = Object.create(ae.prototype, {
        nodeName: {
          get: function () {
            return this.target;
          }
        },
        nodeValue: Ue,
        textContent: Ue,
        innerText: Ue,
        data: {
          get: Ue.get,
          set: function (a) {
            Ue.set.call(this, a === null ? '' : String(a));
          }
        },
        clone: {
          value: function clone() {
            return new ProcessingInstruction(
              this.ownerDocument,
              this.target,
              this._data
            );
          }
        },
        isEqual: {
          value: function isEqual(a) {
            return this.target === a.target && this._data === a._data;
          }
        }
      });
    },
    1207: (a, C, q) => {
      'use strict';
      a.exports = Text;
      var re = q(3573);
      var ae = q(4976);
      var Ue = q(5995);
      function Text(a, C) {
        Ue.call(this);
        this.nodeType = ae.TEXT_NODE;
        this.ownerDocument = a;
        this._data = C;
        this._index = undefined;
      }
      var lt = {
        get: function () {
          return this._data;
        },
        set: function (a) {
          if (a === null || a === undefined) {
            a = '';
          } else {
            a = String(a);
          }
          if (a === this._data) return;
          this._data = a;
          if (this.rooted) this.ownerDocument.mutateValue(this);
          if (this.parentNode && this.parentNode._textchangehook)
            this.parentNode._textchangehook(this);
        }
      };
      Text.prototype = Object.create(Ue.prototype, {
        nodeName: { value: '#text' },
        nodeValue: lt,
        textContent: lt,
        innerText: lt,
        data: {
          get: lt.get,
          set: function (a) {
            lt.set.call(this, a === null ? '' : String(a));
          }
        },
        splitText: {
          value: function splitText(a) {
            if (a > this._data.length || a < 0) re.IndexSizeError();
            var C = this._data.substring(a),
              q = this.ownerDocument.createTextNode(C);
            this.data = this.data.substring(0, a);
            var ae = this.parentNode;
            if (ae !== null) ae.insertBefore(q, this.nextSibling);
            return q;
          }
        },
        wholeText: {
          get: function wholeText() {
            var a = this.textContent;
            for (var C = this.nextSibling; C; C = C.nextSibling) {
              if (C.nodeType !== ae.TEXT_NODE) {
                break;
              }
              a += C.textContent;
            }
            return a;
          }
        },
        replaceWholeText: { value: re.nyi },
        clone: {
          value: function clone() {
            return new Text(this.ownerDocument, this._data);
          }
        }
      });
    },
    8772: (a, C, q) => {
      'use strict';
      a.exports = TreeWalker;
      var re = q(4976);
      var ae = q(3587);
      var Ue = q(9547);
      var lt = q(3573);
      var Pt = {
        first: 'firstChild',
        last: 'lastChild',
        next: 'firstChild',
        previous: 'lastChild'
      };
      var Wt = {
        first: 'nextSibling',
        last: 'previousSibling',
        next: 'nextSibling',
        previous: 'previousSibling'
      };
      function traverseChildren(a, C) {
        var q, re, Ue, lt, Ar;
        re = a._currentNode[Pt[C]];
        while (re !== null) {
          lt = a._internalFilter(re);
          if (lt === ae.FILTER_ACCEPT) {
            a._currentNode = re;
            return re;
          }
          if (lt === ae.FILTER_SKIP) {
            q = re[Pt[C]];
            if (q !== null) {
              re = q;
              continue;
            }
          }
          while (re !== null) {
            Ar = re[Wt[C]];
            if (Ar !== null) {
              re = Ar;
              break;
            }
            Ue = re.parentNode;
            if (Ue === null || Ue === a.root || Ue === a._currentNode) {
              return null;
            } else {
              re = Ue;
            }
          }
        }
        return null;
      }
      function traverseSiblings(a, C) {
        var q, re, Ue;
        q = a._currentNode;
        if (q === a.root) {
          return null;
        }
        while (true) {
          Ue = q[Wt[C]];
          while (Ue !== null) {
            q = Ue;
            re = a._internalFilter(q);
            if (re === ae.FILTER_ACCEPT) {
              a._currentNode = q;
              return q;
            }
            Ue = q[Pt[C]];
            if (re === ae.FILTER_REJECT || Ue === null) {
              Ue = q[Wt[C]];
            }
          }
          q = q.parentNode;
          if (q === null || q === a.root) {
            return null;
          }
          if (a._internalFilter(q) === ae.FILTER_ACCEPT) {
            return null;
          }
        }
      }
      function TreeWalker(a, C, q) {
        if (!a || !a.nodeType) {
          lt.NotSupportedError();
        }
        this._root = a;
        this._whatToShow = Number(C) || 0;
        this._filter = q || null;
        this._active = false;
        this._currentNode = a;
      }
      Object.defineProperties(TreeWalker.prototype, {
        root: {
          get: function () {
            return this._root;
          }
        },
        whatToShow: {
          get: function () {
            return this._whatToShow;
          }
        },
        filter: {
          get: function () {
            return this._filter;
          }
        },
        currentNode: {
          get: function currentNode() {
            return this._currentNode;
          },
          set: function setCurrentNode(a) {
            if (!(a instanceof re)) {
              throw new TypeError('Not a Node');
            }
            this._currentNode = a;
          }
        },
        _internalFilter: {
          value: function _internalFilter(a) {
            var C, q;
            if (this._active) {
              lt.InvalidStateError();
            }
            if (!((1 << (a.nodeType - 1)) & this._whatToShow)) {
              return ae.FILTER_SKIP;
            }
            q = this._filter;
            if (q === null) {
              C = ae.FILTER_ACCEPT;
            } else {
              this._active = true;
              try {
                if (typeof q === 'function') {
                  C = q(a);
                } else {
                  C = q.acceptNode(a);
                }
              } finally {
                this._active = false;
              }
            }
            return +C;
          }
        },
        parentNode: {
          value: function parentNode() {
            var a = this._currentNode;
            while (a !== this.root) {
              a = a.parentNode;
              if (a === null) {
                return null;
              }
              if (this._internalFilter(a) === ae.FILTER_ACCEPT) {
                this._currentNode = a;
                return a;
              }
            }
            return null;
          }
        },
        firstChild: {
          value: function firstChild() {
            return traverseChildren(this, 'first');
          }
        },
        lastChild: {
          value: function lastChild() {
            return traverseChildren(this, 'last');
          }
        },
        previousSibling: {
          value: function previousSibling() {
            return traverseSiblings(this, 'previous');
          }
        },
        nextSibling: {
          value: function nextSibling() {
            return traverseSiblings(this, 'next');
          }
        },
        previousNode: {
          value: function previousNode() {
            var a, C, q, re;
            a = this._currentNode;
            while (a !== this._root) {
              for (q = a.previousSibling; q; q = a.previousSibling) {
                a = q;
                C = this._internalFilter(a);
                if (C === ae.FILTER_REJECT) {
                  continue;
                }
                for (re = a.lastChild; re; re = a.lastChild) {
                  a = re;
                  C = this._internalFilter(a);
                  if (C === ae.FILTER_REJECT) {
                    break;
                  }
                }
                if (C === ae.FILTER_ACCEPT) {
                  this._currentNode = a;
                  return a;
                }
              }
              if (a === this.root || a.parentNode === null) {
                return null;
              }
              a = a.parentNode;
              if (this._internalFilter(a) === ae.FILTER_ACCEPT) {
                this._currentNode = a;
                return a;
              }
            }
            return null;
          }
        },
        nextNode: {
          value: function nextNode() {
            var a, C, q, re;
            a = this._currentNode;
            C = ae.FILTER_ACCEPT;
            e: while (true) {
              for (q = a.firstChild; q; q = a.firstChild) {
                a = q;
                C = this._internalFilter(a);
                if (C === ae.FILTER_ACCEPT) {
                  this._currentNode = a;
                  return a;
                } else if (C === ae.FILTER_REJECT) {
                  break;
                }
              }
              for (
                re = Ue.nextSkippingChildren(a, this.root);
                re;
                re = Ue.nextSkippingChildren(a, this.root)
              ) {
                a = re;
                C = this._internalFilter(a);
                if (C === ae.FILTER_ACCEPT) {
                  this._currentNode = a;
                  return a;
                } else if (C === ae.FILTER_SKIP) {
                  continue e;
                }
              }
              return null;
            }
          }
        },
        toString: {
          value: function toString() {
            return '[object TreeWalker]';
          }
        }
      });
    },
    7620: (a, C, q) => {
      'use strict';
      var re = q(5137);
      a.exports = UIEvent;
      function UIEvent() {
        re.call(this);
        this.view = null;
        this.detail = 0;
      }
      UIEvent.prototype = Object.create(re.prototype, {
        constructor: { value: UIEvent },
        initUIEvent: {
          value: function (a, C, q, re, ae) {
            this.initEvent(a, C, q);
            this.view = re;
            this.detail = ae;
          }
        }
      });
    },
    1026: (a) => {
      'use strict';
      a.exports = URL;
      function URL(a) {
        if (!a) return Object.create(URL.prototype);
        this.url = a.replace(/^[ \t\n\r\f]+|[ \t\n\r\f]+$/g, '');
        var C = URL.pattern.exec(this.url);
        if (C) {
          if (C[2]) this.scheme = C[2];
          if (C[4]) {
            var q = C[4].match(URL.userinfoPattern);
            if (q) {
              this.username = q[1];
              this.password = q[3];
              C[4] = C[4].substring(q[0].length);
            }
            if (C[4].match(URL.portPattern)) {
              var re = C[4].lastIndexOf(':');
              this.host = C[4].substring(0, re);
              this.port = C[4].substring(re + 1);
            } else {
              this.host = C[4];
            }
          }
          if (C[5]) this.path = C[5];
          if (C[6]) this.query = C[7];
          if (C[8]) this.fragment = C[9];
        }
      }
      URL.pattern =
        /^(([^:\/?#]+):)?(\/\/([^\/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/;
      URL.userinfoPattern = /^([^@:]*)(:([^@]*))?@/;
      URL.portPattern = /:\d+$/;
      URL.authorityPattern = /^[^:\/?#]+:\/\//;
      URL.hierarchyPattern = /^[^:\/?#]+:\//;
      URL.percentEncode = function percentEncode(a) {
        var C = a.charCodeAt(0);
        if (C < 256) return '%' + C.toString(16);
        else throw Error("can't percent-encode codepoints > 255 yet");
      };
      URL.prototype = {
        constructor: URL,
        isAbsolute: function () {
          return !!this.scheme;
        },
        isAuthorityBased: function () {
          return URL.authorityPattern.test(this.url);
        },
        isHierarchical: function () {
          return URL.hierarchyPattern.test(this.url);
        },
        toString: function () {
          var a = '';
          if (this.scheme !== undefined) a += this.scheme + ':';
          if (this.isAbsolute()) {
            a += '//';
            if (this.username || this.password) {
              a += this.username || '';
              if (this.password) {
                a += ':' + this.password;
              }
              a += '@';
            }
            if (this.host) {
              a += this.host;
            }
          }
          if (this.port !== undefined) a += ':' + this.port;
          if (this.path !== undefined) a += this.path;
          if (this.query !== undefined) a += '?' + this.query;
          if (this.fragment !== undefined) a += '#' + this.fragment;
          return a;
        },
        resolve: function (a) {
          var C = this;
          var q = new URL(a);
          var re = new URL();
          if (q.scheme !== undefined) {
            re.scheme = q.scheme;
            re.username = q.username;
            re.password = q.password;
            re.host = q.host;
            re.port = q.port;
            re.path = remove_dot_segments(q.path);
            re.query = q.query;
          } else {
            re.scheme = C.scheme;
            if (q.host !== undefined) {
              re.username = q.username;
              re.password = q.password;
              re.host = q.host;
              re.port = q.port;
              re.path = remove_dot_segments(q.path);
              re.query = q.query;
            } else {
              re.username = C.username;
              re.password = C.password;
              re.host = C.host;
              re.port = C.port;
              if (!q.path) {
                re.path = C.path;
                if (q.query !== undefined) re.query = q.query;
                else re.query = C.query;
              } else {
                if (q.path.charAt(0) === '/') {
                  re.path = remove_dot_segments(q.path);
                } else {
                  re.path = merge(C.path, q.path);
                  re.path = remove_dot_segments(re.path);
                }
                re.query = q.query;
              }
            }
          }
          re.fragment = q.fragment;
          return re.toString();
          function merge(a, q) {
            if (C.host !== undefined && !C.path) return '/' + q;
            var re = a.lastIndexOf('/');
            if (re === -1) return q;
            else return a.substring(0, re + 1) + q;
          }
          function remove_dot_segments(a) {
            if (!a) return a;
            var C = '';
            while (a.length > 0) {
              if (a === '.' || a === '..') {
                a = '';
                break;
              }
              var q = a.substring(0, 2);
              var re = a.substring(0, 3);
              var ae = a.substring(0, 4);
              if (re === '../') {
                a = a.substring(3);
              } else if (q === './') {
                a = a.substring(2);
              } else if (re === '/./') {
                a = '/' + a.substring(3);
              } else if (q === '/.' && a.length === 2) {
                a = '/';
              } else if (ae === '/../' || (re === '/..' && a.length === 3)) {
                a = '/' + a.substring(4);
                C = C.replace(/\/?[^\/]*$/, '');
              } else {
                var Ue = a.match(/(\/?([^\/]*))/)[0];
                C += Ue;
                a = a.substring(Ue.length);
              }
            }
            return C;
          }
        }
      };
    },
    3103: (a, C, q) => {
      'use strict';
      var re = q(1026);
      a.exports = URLUtils;
      function URLUtils() {}
      URLUtils.prototype = Object.create(Object.prototype, {
        _url: {
          get: function () {
            return new re(this.href);
          }
        },
        protocol: {
          get: function () {
            var a = this._url;
            if (a && a.scheme) return a.scheme + ':';
            else return ':';
          },
          set: function (a) {
            var C = this.href;
            var q = new re(C);
            if (q.isAbsolute()) {
              a = a.replace(/:+$/, '');
              a = a.replace(/[^-+\.a-zA-Z0-9]/g, re.percentEncode);
              if (a.length > 0) {
                q.scheme = a;
                C = q.toString();
              }
            }
            this.href = C;
          }
        },
        host: {
          get: function () {
            var a = this._url;
            if (a.isAbsolute() && a.isAuthorityBased())
              return a.host + (a.port ? ':' + a.port : '');
            else return '';
          },
          set: function (a) {
            var C = this.href;
            var q = new re(C);
            if (q.isAbsolute() && q.isAuthorityBased()) {
              a = a.replace(/[^-+\._~!$&'()*,;:=a-zA-Z0-9]/g, re.percentEncode);
              if (a.length > 0) {
                q.host = a;
                delete q.port;
                C = q.toString();
              }
            }
            this.href = C;
          }
        },
        hostname: {
          get: function () {
            var a = this._url;
            if (a.isAbsolute() && a.isAuthorityBased()) return a.host;
            else return '';
          },
          set: function (a) {
            var C = this.href;
            var q = new re(C);
            if (q.isAbsolute() && q.isAuthorityBased()) {
              a = a.replace(/^\/+/, '');
              a = a.replace(/[^-+\._~!$&'()*,;:=a-zA-Z0-9]/g, re.percentEncode);
              if (a.length > 0) {
                q.host = a;
                C = q.toString();
              }
            }
            this.href = C;
          }
        },
        port: {
          get: function () {
            var a = this._url;
            if (a.isAbsolute() && a.isAuthorityBased() && a.port !== undefined)
              return a.port;
            else return '';
          },
          set: function (a) {
            var C = this.href;
            var q = new re(C);
            if (q.isAbsolute() && q.isAuthorityBased()) {
              a = '' + a;
              a = a.replace(/[^0-9].*$/, '');
              a = a.replace(/^0+/, '');
              if (a.length === 0) a = '0';
              if (parseInt(a, 10) <= 65535) {
                q.port = a;
                C = q.toString();
              }
            }
            this.href = C;
          }
        },
        pathname: {
          get: function () {
            var a = this._url;
            if (a.isAbsolute() && a.isHierarchical()) return a.path;
            else return '';
          },
          set: function (a) {
            var C = this.href;
            var q = new re(C);
            if (q.isAbsolute() && q.isHierarchical()) {
              if (a.charAt(0) !== '/') a = '/' + a;
              a = a.replace(
                /[^-+\._~!$&'()*,;:=@\/a-zA-Z0-9]/g,
                re.percentEncode
              );
              q.path = a;
              C = q.toString();
            }
            this.href = C;
          }
        },
        search: {
          get: function () {
            var a = this._url;
            if (a.isAbsolute() && a.isHierarchical() && a.query !== undefined)
              return '?' + a.query;
            else return '';
          },
          set: function (a) {
            var C = this.href;
            var q = new re(C);
            if (q.isAbsolute() && q.isHierarchical()) {
              if (a.charAt(0) === '?') a = a.substring(1);
              a = a.replace(
                /[^-+\._~!$&'()*,;:=@\/?a-zA-Z0-9]/g,
                re.percentEncode
              );
              q.query = a;
              C = q.toString();
            }
            this.href = C;
          }
        },
        hash: {
          get: function () {
            var a = this._url;
            if (a == null || a.fragment == null || a.fragment === '') {
              return '';
            } else {
              return '#' + a.fragment;
            }
          },
          set: function (a) {
            var C = this.href;
            var q = new re(C);
            if (a.charAt(0) === '#') a = a.substring(1);
            a = a.replace(
              /[^-+\._~!$&'()*,;:=@\/?a-zA-Z0-9]/g,
              re.percentEncode
            );
            q.fragment = a;
            C = q.toString();
            this.href = C;
          }
        },
        username: {
          get: function () {
            var a = this._url;
            return a.username || '';
          },
          set: function (a) {
            var C = this.href;
            var q = new re(C);
            if (q.isAbsolute()) {
              a = a.replace(
                /[\x00-\x1F\x7F-\uFFFF "#<>?`\/@\\:]/g,
                re.percentEncode
              );
              q.username = a;
              C = q.toString();
            }
            this.href = C;
          }
        },
        password: {
          get: function () {
            var a = this._url;
            return a.password || '';
          },
          set: function (a) {
            var C = this.href;
            var q = new re(C);
            if (q.isAbsolute()) {
              if (a === '') {
                q.password = null;
              } else {
                a = a.replace(
                  /[\x00-\x1F\x7F-\uFFFF "#<>?`\/@\\]/g,
                  re.percentEncode
                );
                q.password = a;
              }
              C = q.toString();
            }
            this.href = C;
          }
        },
        origin: {
          get: function () {
            var a = this._url;
            if (a == null) {
              return '';
            }
            var originForPort = function (C) {
              var q = [a.scheme, a.host, +a.port || C];
              return q[0] + '://' + q[1] + (q[2] === C ? '' : ':' + q[2]);
            };
            switch (a.scheme) {
              case 'ftp':
                return originForPort(21);
              case 'gopher':
                return originForPort(70);
              case 'http':
              case 'ws':
                return originForPort(80);
              case 'https':
              case 'wss':
                return originForPort(443);
              default:
                return a.scheme + '://';
            }
          }
        }
      });
      URLUtils._inherit = function (a) {
        Object.getOwnPropertyNames(URLUtils.prototype).forEach(function (C) {
          if (C === 'constructor' || C === 'href') {
            return;
          }
          var q = Object.getOwnPropertyDescriptor(URLUtils.prototype, C);
          Object.defineProperty(a, C, q);
        });
      };
    },
    4967: (a, C, q) => {
      'use strict';
      var re = q(956);
      var ae = q(802);
      var Ue = q(1355);
      var lt = q(3573);
      a.exports = Window;
      function Window(a) {
        this.document = a || new re(null).createHTMLDocument('');
        this.document._scripting_enabled = true;
        this.document.defaultView = this;
        this.location = new Ue(this, this.document._address || 'about:blank');
      }
      Window.prototype = Object.create(ae.prototype, {
        console: { value: console },
        history: { value: { back: lt.nyi, forward: lt.nyi, go: lt.nyi } },
        navigator: { value: q(6601) },
        window: {
          get: function () {
            return this;
          }
        },
        self: {
          get: function () {
            return this;
          }
        },
        frames: {
          get: function () {
            return this;
          }
        },
        parent: {
          get: function () {
            return this;
          }
        },
        top: {
          get: function () {
            return this;
          }
        },
        length: { value: 0 },
        frameElement: { value: null },
        opener: { value: null },
        onload: {
          get: function () {
            return this._getEventHandler('load');
          },
          set: function (a) {
            this._setEventHandler('load', a);
          }
        },
        getComputedStyle: {
          value: function getComputedStyle(a) {
            return a.style;
          }
        }
      });
      lt.expose(q(8429), Window);
      lt.expose(q(6783), Window);
    },
    8429: (a) => {
      'use strict';
      var C = {
        setTimeout: setTimeout,
        clearTimeout: clearTimeout,
        setInterval: setInterval,
        clearInterval: clearInterval
      };
      a.exports = C;
    },
    8510: (a, C, q) => {
      'use strict';
      var re = q(3573);
      C.property = function (a) {
        if (Array.isArray(a.type)) {
          var C = Object.create(null);
          a.type.forEach(function (a) {
            C[a.value || a] = a.alias || a;
          });
          var q = a.missing;
          if (q === undefined) {
            q = null;
          }
          var re = a.invalid;
          if (re === undefined) {
            re = q;
          }
          return {
            get: function () {
              var ae = this._getattr(a.name);
              if (ae === null) return q;
              ae = C[ae.toLowerCase()];
              if (ae !== undefined) return ae;
              if (re !== null) return re;
              return ae;
            },
            set: function (C) {
              this._setattr(a.name, C);
            }
          };
        } else if (a.type === Boolean) {
          return {
            get: function () {
              return this.hasAttribute(a.name);
            },
            set: function (C) {
              if (C) {
                this._setattr(a.name, '');
              } else {
                this.removeAttribute(a.name);
              }
            }
          };
        } else if (
          a.type === Number ||
          a.type === 'long' ||
          a.type === 'unsigned long' ||
          a.type === 'limited unsigned long with fallback'
        ) {
          return numberPropDesc(a);
        } else if (!a.type || a.type === String) {
          return {
            get: function () {
              return this._getattr(a.name) || '';
            },
            set: function (C) {
              if (a.treatNullAsEmptyString && C === null) {
                C = '';
              }
              this._setattr(a.name, C);
            }
          };
        } else if (typeof a.type === 'function') {
          return a.type(a.name, a);
        }
        throw new Error('Invalid attribute definition');
      };
      function numberPropDesc(a) {
        var C;
        if (typeof a.default === 'function') {
          C = a.default;
        } else if (typeof a.default === 'number') {
          C = function () {
            return a.default;
          };
        } else {
          C = function () {
            re.assert(false, typeof a.default);
          };
        }
        var q = a.type === 'unsigned long';
        var ae = a.type === 'long';
        var Ue = a.type === 'limited unsigned long with fallback';
        var lt = a.min,
          Pt = a.max,
          Wt = a.setmin;
        if (lt === undefined) {
          if (q) lt = 0;
          if (ae) lt = -2147483648;
          if (Ue) lt = 1;
        }
        if (Pt === undefined) {
          if (q || ae || Ue) Pt = 2147483647;
        }
        return {
          get: function () {
            var re = this._getattr(a.name);
            var Wt = a.float ? parseFloat(re) : parseInt(re, 10);
            if (
              re === null ||
              !isFinite(Wt) ||
              (lt !== undefined && Wt < lt) ||
              (Pt !== undefined && Wt > Pt)
            ) {
              return C.call(this);
            }
            if (q || ae || Ue) {
              if (!/^[ \t\n\f\r]*[-+]?[0-9]/.test(re)) {
                return C.call(this);
              }
              Wt = Wt | 0;
            }
            return Wt;
          },
          set: function (lt) {
            if (!a.float) {
              lt = Math.floor(lt);
            }
            if (Wt !== undefined && lt < Wt) {
              re.IndexSizeError(a.name + ' set to ' + lt);
            }
            if (q) {
              lt = lt < 0 || lt > 2147483647 ? C.call(this) : lt | 0;
            } else if (Ue) {
              lt = lt < 1 || lt > 2147483647 ? C.call(this) : lt | 0;
            } else if (ae) {
              lt = lt < -2147483648 || lt > 2147483647 ? C.call(this) : lt | 0;
            }
            this._setattr(a.name, String(lt));
          }
        };
      }
      C.registerChangeHandler = function (a, C, q) {
        var re = a.prototype;
        if (
          !Object.prototype.hasOwnProperty.call(re, '_attributeChangeHandlers')
        ) {
          re._attributeChangeHandlers = Object.create(
            re._attributeChangeHandlers || null
          );
        }
        re._attributeChangeHandlers[C] = q;
      };
    },
    1617: (a, C) => {
      C.S = !globalThis.__domino_frozen__;
    },
    333: (a, C, q) => {
      'use strict';
      var re = q(8510);
      var ae = q(1617).S;
      a.exports = function (a, C, q, Ue) {
        var lt = a.ctor;
        if (lt) {
          var Pt = a.props || {};
          if (a.attributes) {
            for (var Wt in a.attributes) {
              var Ar = a.attributes[Wt];
              if (typeof Ar !== 'object' || Array.isArray(Ar))
                Ar = { type: Ar };
              if (!Ar.name) Ar.name = Wt.toLowerCase();
              Pt[Wt] = re.property(Ar);
            }
          }
          Pt.constructor = { value: lt, writable: ae };
          lt.prototype = Object.create((a.superclass || C).prototype, Pt);
          if (a.events) {
            addEventHandlers(lt, a.events);
          }
          q[a.name] = lt;
        } else {
          lt = C;
        }
        (a.tags || (a.tag && [a.tag]) || []).forEach(function (a) {
          Ue[a] = lt;
        });
        return lt;
      };
      function EventHandlerBuilder(a, C, q, re) {
        this.body = a;
        this.document = C;
        this.form = q;
        this.element = re;
      }
      EventHandlerBuilder.prototype.build = function () {
        return () => {};
      };
      function EventHandlerChangeHandler(a, C, q, re) {
        var ae = a.ownerDocument || Object.create(null);
        var Ue = a.form || Object.create(null);
        a[C] = new EventHandlerBuilder(re, ae, Ue, a).build();
      }
      function addEventHandlers(a, C) {
        var q = a.prototype;
        C.forEach(function (C) {
          Object.defineProperty(q, 'on' + C, {
            get: function () {
              return this._getEventHandler(C);
            },
            set: function (a) {
              this._setEventHandler(C, a);
            }
          });
          re.registerChangeHandler(a, 'on' + C, EventHandlerChangeHandler);
        });
      }
    },
    6287: (a, C, q) => {
      'use strict';
      a.exports = {
        Event: q(5137),
        UIEvent: q(7620),
        MouseEvent: q(3162),
        CustomEvent: q(3643)
      };
    },
    1364: (a, C, q) => {
      'use strict';
      var re = q(4976);
      var ae = q(3032);
      var Ue = q(6557);
      var lt = q(3573);
      var Pt = q(3103);
      var Wt = q(333);
      var Ar = (C.elements = {});
      var Er = Object.create(null);
      C.createElement = function (a, C, q) {
        var re = Er[C] || kr;
        return new re(a, C, q);
      };
      function define(a) {
        return Wt(a, Qr, Ar, Er);
      }
      function URL(a) {
        return {
          get: function () {
            var C = this._getattr(a);
            if (C === null) {
              return '';
            }
            var q = this.doc._resolve(C);
            return q === null ? C : q;
          },
          set: function (C) {
            this._setattr(a, C);
          }
        };
      }
      function CORS(a) {
        return {
          get: function () {
            var C = this._getattr(a);
            if (C === null) {
              return null;
            }
            if (C.toLowerCase() === 'use-credentials') {
              return 'use-credentials';
            }
            return 'anonymous';
          },
          set: function (C) {
            if (C === null || C === undefined) {
              this.removeAttribute(a);
            } else {
              this._setattr(a, C);
            }
          }
        };
      }
      const Ir = {
        type: [
          '',
          'no-referrer',
          'no-referrer-when-downgrade',
          'same-origin',
          'origin',
          'strict-origin',
          'origin-when-cross-origin',
          'strict-origin-when-cross-origin',
          'unsafe-url'
        ],
        missing: ''
      };
      var Br = {
        A: true,
        LINK: true,
        BUTTON: true,
        INPUT: true,
        SELECT: true,
        TEXTAREA: true,
        COMMAND: true
      };
      var HTMLFormElement = function (a, C, q) {
        Qr.call(this, a, C, q);
        this._form = null;
      };
      var Qr = (C.HTMLElement = define({
        superclass: ae,
        name: 'HTMLElement',
        ctor: function HTMLElement(a, C, q) {
          ae.call(this, a, C, lt.NAMESPACE.HTML, q);
        },
        props: {
          dangerouslySetInnerHTML: {
            set: function (a) {
              this._innerHTML = a;
            }
          },
          innerHTML: {
            get: function () {
              return this.serialize();
            },
            set: function (a) {
              var C = this.ownerDocument.implementation.mozHTMLParser(
                this.ownerDocument._address,
                this
              );
              C.parse(a === null ? '' : String(a), true);
              var q = this instanceof Er.template ? this.content : this;
              while (q.hasChildNodes()) q.removeChild(q.firstChild);
              q.appendChild(C._asDocumentFragment());
            }
          },
          style: {
            get: function () {
              if (!this._style) this._style = new Ue(this);
              return this._style;
            },
            set: function (a) {
              if (a === null || a === undefined) {
                a = '';
              }
              this._setattr('style', String(a));
            }
          },
          blur: { value: function () {} },
          focus: { value: function () {} },
          forceSpellCheck: { value: function () {} },
          click: {
            value: function () {
              if (this._click_in_progress) return;
              this._click_in_progress = true;
              try {
                if (this._pre_click_activation_steps)
                  this._pre_click_activation_steps();
                var a = this.ownerDocument.createEvent('MouseEvent');
                a.initMouseEvent(
                  'click',
                  true,
                  true,
                  this.ownerDocument.defaultView,
                  1,
                  0,
                  0,
                  0,
                  0,
                  false,
                  false,
                  false,
                  false,
                  0,
                  null
                );
                var C = this.dispatchEvent(a);
                if (C) {
                  if (this._post_click_activation_steps)
                    this._post_click_activation_steps(a);
                } else {
                  if (this._cancelled_activation_steps)
                    this._cancelled_activation_steps();
                }
              } finally {
                this._click_in_progress = false;
              }
            }
          },
          submit: { value: lt.nyi }
        },
        attributes: {
          title: String,
          lang: String,
          dir: { type: ['ltr', 'rtl', 'auto'], missing: '' },
          draggable: { type: ['true', 'false'], treatNullAsEmptyString: true },
          spellcheck: { type: ['true', 'false'], missing: '' },
          enterKeyHint: {
            type: ['enter', 'done', 'go', 'next', 'previous', 'search', 'send'],
            missing: ''
          },
          autoCapitalize: {
            type: ['off', 'on', 'none', 'sentences', 'words', 'characters'],
            missing: ''
          },
          autoFocus: Boolean,
          accessKey: String,
          nonce: String,
          hidden: Boolean,
          translate: { type: ['no', 'yes'], missing: '' },
          tabIndex: {
            type: 'long',
            default: function () {
              if (this.tagName in Br || this.contentEditable) return 0;
              else return -1;
            }
          }
        },
        events: [
          'abort',
          'canplay',
          'canplaythrough',
          'change',
          'click',
          'contextmenu',
          'cuechange',
          'dblclick',
          'drag',
          'dragend',
          'dragenter',
          'dragleave',
          'dragover',
          'dragstart',
          'drop',
          'durationchange',
          'emptied',
          'ended',
          'input',
          'invalid',
          'keydown',
          'keypress',
          'keyup',
          'loadeddata',
          'loadedmetadata',
          'loadstart',
          'mousedown',
          'mousemove',
          'mouseout',
          'mouseover',
          'mouseup',
          'mousewheel',
          'pause',
          'play',
          'playing',
          'progress',
          'ratechange',
          'readystatechange',
          'reset',
          'seeked',
          'seeking',
          'select',
          'show',
          'stalled',
          'submit',
          'suspend',
          'timeupdate',
          'volumechange',
          'waiting',
          'blur',
          'error',
          'focus',
          'load',
          'scroll'
        ]
      }));
      var kr = define({
        name: 'HTMLUnknownElement',
        ctor: function HTMLUnknownElement(a, C, q) {
          Qr.call(this, a, C, q);
        }
      });
      var Dr = {
        form: {
          get: function () {
            return this._form;
          }
        }
      };
      define({
        tag: 'a',
        name: 'HTMLAnchorElement',
        ctor: function HTMLAnchorElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        props: {
          _post_click_activation_steps: {
            value: function (a) {
              if (this.href) {
                this.ownerDocument.defaultView.location = this.href;
              }
            }
          }
        },
        attributes: {
          href: URL,
          ping: String,
          download: String,
          target: String,
          rel: String,
          media: String,
          hreflang: String,
          type: String,
          referrerPolicy: Ir,
          coords: String,
          charset: String,
          name: String,
          rev: String,
          shape: String
        }
      });
      Pt._inherit(Er.a.prototype);
      define({
        tag: 'area',
        name: 'HTMLAreaElement',
        ctor: function HTMLAreaElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          alt: String,
          target: String,
          download: String,
          rel: String,
          media: String,
          href: URL,
          hreflang: String,
          type: String,
          shape: String,
          coords: String,
          ping: String,
          referrerPolicy: Ir,
          noHref: Boolean
        }
      });
      Pt._inherit(Er.area.prototype);
      define({
        tag: 'br',
        name: 'HTMLBRElement',
        ctor: function HTMLBRElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { clear: String }
      });
      define({
        tag: 'base',
        name: 'HTMLBaseElement',
        ctor: function HTMLBaseElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { target: String }
      });
      define({
        tag: 'body',
        name: 'HTMLBodyElement',
        ctor: function HTMLBodyElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        events: [
          'afterprint',
          'beforeprint',
          'beforeunload',
          'blur',
          'error',
          'focus',
          'hashchange',
          'load',
          'message',
          'offline',
          'online',
          'pagehide',
          'pageshow',
          'popstate',
          'resize',
          'scroll',
          'storage',
          'unload'
        ],
        attributes: {
          text: { type: String, treatNullAsEmptyString: true },
          link: { type: String, treatNullAsEmptyString: true },
          vLink: { type: String, treatNullAsEmptyString: true },
          aLink: { type: String, treatNullAsEmptyString: true },
          bgColor: { type: String, treatNullAsEmptyString: true },
          background: String
        }
      });
      define({
        tag: 'button',
        name: 'HTMLButtonElement',
        ctor: function HTMLButtonElement(a, C, q) {
          HTMLFormElement.call(this, a, C, q);
        },
        props: Dr,
        attributes: {
          name: String,
          value: String,
          disabled: Boolean,
          autofocus: Boolean,
          type: {
            type: ['submit', 'reset', 'button', 'menu'],
            missing: 'submit'
          },
          formTarget: String,
          formAction: URL,
          formNoValidate: Boolean,
          formMethod: {
            type: ['get', 'post', 'dialog'],
            invalid: 'get',
            missing: ''
          },
          formEnctype: {
            type: [
              'application/x-www-form-urlencoded',
              'multipart/form-data',
              'text/plain'
            ],
            invalid: 'application/x-www-form-urlencoded',
            missing: ''
          }
        }
      });
      define({
        tag: 'dl',
        name: 'HTMLDListElement',
        ctor: function HTMLDListElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { compact: Boolean }
      });
      define({
        tag: 'data',
        name: 'HTMLDataElement',
        ctor: function HTMLDataElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { value: String }
      });
      define({
        tag: 'datalist',
        name: 'HTMLDataListElement',
        ctor: function HTMLDataListElement(a, C, q) {
          Qr.call(this, a, C, q);
        }
      });
      define({
        tag: 'details',
        name: 'HTMLDetailsElement',
        ctor: function HTMLDetailsElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { open: Boolean }
      });
      define({
        tag: 'div',
        name: 'HTMLDivElement',
        ctor: function HTMLDivElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { align: String }
      });
      define({
        tag: 'embed',
        name: 'HTMLEmbedElement',
        ctor: function HTMLEmbedElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          src: URL,
          type: String,
          width: String,
          height: String,
          align: String,
          name: String
        }
      });
      define({
        tag: 'fieldset',
        name: 'HTMLFieldSetElement',
        ctor: function HTMLFieldSetElement(a, C, q) {
          HTMLFormElement.call(this, a, C, q);
        },
        props: Dr,
        attributes: { disabled: Boolean, name: String }
      });
      define({
        tag: 'form',
        name: 'HTMLFormElement',
        ctor: function HTMLFormElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          action: String,
          autocomplete: { type: ['on', 'off'], missing: 'on' },
          name: String,
          acceptCharset: { name: 'accept-charset' },
          target: String,
          noValidate: Boolean,
          method: {
            type: ['get', 'post', 'dialog'],
            invalid: 'get',
            missing: 'get'
          },
          enctype: {
            type: [
              'application/x-www-form-urlencoded',
              'multipart/form-data',
              'text/plain'
            ],
            invalid: 'application/x-www-form-urlencoded',
            missing: 'application/x-www-form-urlencoded'
          },
          encoding: {
            name: 'enctype',
            type: [
              'application/x-www-form-urlencoded',
              'multipart/form-data',
              'text/plain'
            ],
            invalid: 'application/x-www-form-urlencoded',
            missing: 'application/x-www-form-urlencoded'
          }
        }
      });
      define({
        tag: 'hr',
        name: 'HTMLHRElement',
        ctor: function HTMLHRElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          align: String,
          color: String,
          noShade: Boolean,
          size: String,
          width: String
        }
      });
      define({
        tag: 'head',
        name: 'HTMLHeadElement',
        ctor: function HTMLHeadElement(a, C, q) {
          Qr.call(this, a, C, q);
        }
      });
      define({
        tags: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        name: 'HTMLHeadingElement',
        ctor: function HTMLHeadingElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { align: String }
      });
      define({
        tag: 'html',
        name: 'HTMLHtmlElement',
        ctor: function HTMLHtmlElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { xmlns: URL, version: String }
      });
      define({
        tag: 'iframe',
        name: 'HTMLIFrameElement',
        ctor: function HTMLIFrameElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          src: URL,
          srcdoc: String,
          name: String,
          width: String,
          height: String,
          seamless: Boolean,
          allow: Boolean,
          allowFullscreen: Boolean,
          allowUserMedia: Boolean,
          allowPaymentRequest: Boolean,
          referrerPolicy: Ir,
          loading: { type: ['eager', 'lazy'], treatNullAsEmptyString: true },
          align: String,
          scrolling: String,
          frameBorder: String,
          longDesc: URL,
          marginHeight: { type: String, treatNullAsEmptyString: true },
          marginWidth: { type: String, treatNullAsEmptyString: true }
        }
      });
      define({
        tag: 'img',
        name: 'HTMLImageElement',
        ctor: function HTMLImageElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          alt: String,
          src: URL,
          srcset: String,
          crossOrigin: CORS,
          useMap: String,
          isMap: Boolean,
          sizes: String,
          height: { type: 'unsigned long', default: 0 },
          width: { type: 'unsigned long', default: 0 },
          referrerPolicy: Ir,
          loading: { type: ['eager', 'lazy'], missing: '' },
          name: String,
          lowsrc: URL,
          align: String,
          hspace: { type: 'unsigned long', default: 0 },
          vspace: { type: 'unsigned long', default: 0 },
          longDesc: URL,
          border: { type: String, treatNullAsEmptyString: true }
        }
      });
      define({
        tag: 'input',
        name: 'HTMLInputElement',
        ctor: function HTMLInputElement(a, C, q) {
          HTMLFormElement.call(this, a, C, q);
        },
        props: {
          form: Dr.form,
          _post_click_activation_steps: {
            value: function (a) {
              if (this.type === 'checkbox') {
                this.checked = !this.checked;
              } else if (this.type === 'radio') {
                var C = this.form.getElementsByName(this.name);
                for (var q = C.length - 1; q >= 0; q--) {
                  var re = C[q];
                  re.checked = re === this;
                }
              }
            }
          }
        },
        attributes: {
          name: String,
          disabled: Boolean,
          autofocus: Boolean,
          accept: String,
          alt: String,
          max: String,
          min: String,
          pattern: String,
          placeholder: String,
          step: String,
          dirName: String,
          defaultValue: { name: 'value' },
          multiple: Boolean,
          required: Boolean,
          readOnly: Boolean,
          checked: Boolean,
          value: String,
          src: URL,
          defaultChecked: { name: 'checked', type: Boolean },
          size: { type: 'unsigned long', default: 20, min: 1, setmin: 1 },
          width: { type: 'unsigned long', min: 0, setmin: 0, default: 0 },
          height: { type: 'unsigned long', min: 0, setmin: 0, default: 0 },
          minLength: { type: 'unsigned long', min: 0, setmin: 0, default: -1 },
          maxLength: { type: 'unsigned long', min: 0, setmin: 0, default: -1 },
          autocomplete: String,
          type: {
            type: [
              'text',
              'hidden',
              'search',
              'tel',
              'url',
              'email',
              'password',
              'datetime',
              'date',
              'month',
              'week',
              'time',
              'datetime-local',
              'number',
              'range',
              'color',
              'checkbox',
              'radio',
              'file',
              'submit',
              'image',
              'reset',
              'button'
            ],
            missing: 'text'
          },
          formTarget: String,
          formNoValidate: Boolean,
          formMethod: { type: ['get', 'post'], invalid: 'get', missing: '' },
          formEnctype: {
            type: [
              'application/x-www-form-urlencoded',
              'multipart/form-data',
              'text/plain'
            ],
            invalid: 'application/x-www-form-urlencoded',
            missing: ''
          },
          inputMode: {
            type: [
              'verbatim',
              'latin',
              'latin-name',
              'latin-prose',
              'full-width-latin',
              'kana',
              'kana-name',
              'katakana',
              'numeric',
              'tel',
              'email',
              'url'
            ],
            missing: ''
          },
          align: String,
          useMap: String
        }
      });
      define({
        tag: 'keygen',
        name: 'HTMLKeygenElement',
        ctor: function HTMLKeygenElement(a, C, q) {
          HTMLFormElement.call(this, a, C, q);
        },
        props: Dr,
        attributes: {
          name: String,
          disabled: Boolean,
          autofocus: Boolean,
          challenge: String,
          keytype: { type: ['rsa'], missing: '' }
        }
      });
      define({
        tag: 'li',
        name: 'HTMLLIElement',
        ctor: function HTMLLIElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { value: { type: 'long', default: 0 }, type: String }
      });
      define({
        tag: 'label',
        name: 'HTMLLabelElement',
        ctor: function HTMLLabelElement(a, C, q) {
          HTMLFormElement.call(this, a, C, q);
        },
        props: Dr,
        attributes: { htmlFor: { name: 'for', type: String } }
      });
      define({
        tag: 'legend',
        name: 'HTMLLegendElement',
        ctor: function HTMLLegendElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { align: String }
      });
      define({
        tag: 'link',
        name: 'HTMLLinkElement',
        ctor: function HTMLLinkElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          href: URL,
          rel: String,
          media: String,
          hreflang: String,
          type: String,
          crossOrigin: CORS,
          nonce: String,
          integrity: String,
          referrerPolicy: Ir,
          imageSizes: String,
          imageSrcset: String,
          charset: String,
          rev: String,
          target: String
        }
      });
      define({
        tag: 'map',
        name: 'HTMLMapElement',
        ctor: function HTMLMapElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { name: String }
      });
      define({
        tag: 'menu',
        name: 'HTMLMenuElement',
        ctor: function HTMLMenuElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          type: { type: ['context', 'popup', 'toolbar'], missing: 'toolbar' },
          label: String,
          compact: Boolean
        }
      });
      define({
        tag: 'meta',
        name: 'HTMLMetaElement',
        ctor: function HTMLMetaElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          name: String,
          content: String,
          httpEquiv: { name: 'http-equiv', type: String },
          scheme: String
        }
      });
      define({
        tag: 'meter',
        name: 'HTMLMeterElement',
        ctor: function HTMLMeterElement(a, C, q) {
          HTMLFormElement.call(this, a, C, q);
        },
        props: Dr
      });
      define({
        tags: ['ins', 'del'],
        name: 'HTMLModElement',
        ctor: function HTMLModElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { cite: URL, dateTime: String }
      });
      define({
        tag: 'ol',
        name: 'HTMLOListElement',
        ctor: function HTMLOListElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        props: {
          _numitems: {
            get: function () {
              var a = 0;
              this.childNodes.forEach(function (C) {
                if (C.nodeType === re.ELEMENT_NODE && C.tagName === 'LI') a++;
              });
              return a;
            }
          }
        },
        attributes: {
          type: String,
          reversed: Boolean,
          start: {
            type: 'long',
            default: function () {
              if (this.reversed) return this._numitems;
              else return 1;
            }
          },
          compact: Boolean
        }
      });
      define({
        tag: 'object',
        name: 'HTMLObjectElement',
        ctor: function HTMLObjectElement(a, C, q) {
          HTMLFormElement.call(this, a, C, q);
        },
        props: Dr,
        attributes: {
          data: URL,
          type: String,
          name: String,
          useMap: String,
          typeMustMatch: Boolean,
          width: String,
          height: String,
          align: String,
          archive: String,
          code: String,
          declare: Boolean,
          hspace: { type: 'unsigned long', default: 0 },
          standby: String,
          vspace: { type: 'unsigned long', default: 0 },
          codeBase: URL,
          codeType: String,
          border: { type: String, treatNullAsEmptyString: true }
        }
      });
      define({
        tag: 'optgroup',
        name: 'HTMLOptGroupElement',
        ctor: function HTMLOptGroupElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { disabled: Boolean, label: String }
      });
      define({
        tag: 'option',
        name: 'HTMLOptionElement',
        ctor: function HTMLOptionElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        props: {
          form: {
            get: function () {
              var a = this.parentNode;
              while (a && a.nodeType === re.ELEMENT_NODE) {
                if (a.localName === 'select') return a.form;
                a = a.parentNode;
              }
            }
          },
          value: {
            get: function () {
              return this._getattr('value') || this.text;
            },
            set: function (a) {
              this._setattr('value', a);
            }
          },
          text: {
            get: function () {
              return this.textContent.replace(/[ \t\n\f\r]+/g, ' ').trim();
            },
            set: function (a) {
              this.textContent = a;
            }
          }
        },
        attributes: {
          disabled: Boolean,
          defaultSelected: { name: 'selected', type: Boolean },
          label: String
        }
      });
      define({
        tag: 'output',
        name: 'HTMLOutputElement',
        ctor: function HTMLOutputElement(a, C, q) {
          HTMLFormElement.call(this, a, C, q);
        },
        props: Dr,
        attributes: { name: String }
      });
      define({
        tag: 'p',
        name: 'HTMLParagraphElement',
        ctor: function HTMLParagraphElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { align: String }
      });
      define({
        tag: 'param',
        name: 'HTMLParamElement',
        ctor: function HTMLParamElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          name: String,
          value: String,
          type: String,
          valueType: String
        }
      });
      define({
        tags: ['pre', 'listing', 'xmp'],
        name: 'HTMLPreElement',
        ctor: function HTMLPreElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { width: { type: 'long', default: 0 } }
      });
      define({
        tag: 'progress',
        name: 'HTMLProgressElement',
        ctor: function HTMLProgressElement(a, C, q) {
          HTMLFormElement.call(this, a, C, q);
        },
        props: Dr,
        attributes: { max: { type: Number, float: true, default: 1, min: 0 } }
      });
      define({
        tags: ['q', 'blockquote'],
        name: 'HTMLQuoteElement',
        ctor: function HTMLQuoteElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { cite: URL }
      });
      define({
        tag: 'script',
        name: 'HTMLScriptElement',
        ctor: function HTMLScriptElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        props: {
          text: {
            get: function () {
              var a = '';
              for (var C = 0, q = this.childNodes.length; C < q; C++) {
                var ae = this.childNodes[C];
                if (ae.nodeType === re.TEXT_NODE) a += ae._data;
              }
              return a;
            },
            set: function (a) {
              this.removeChildren();
              if (a !== null && a !== '') {
                this.appendChild(this.ownerDocument.createTextNode(a));
              }
            }
          }
        },
        attributes: {
          src: URL,
          type: String,
          charset: String,
          referrerPolicy: Ir,
          defer: Boolean,
          async: Boolean,
          nomodule: Boolean,
          crossOrigin: CORS,
          nonce: String,
          integrity: String
        }
      });
      define({
        tag: 'select',
        name: 'HTMLSelectElement',
        ctor: function HTMLSelectElement(a, C, q) {
          HTMLFormElement.call(this, a, C, q);
        },
        props: {
          form: Dr.form,
          options: {
            get: function () {
              return this.getElementsByTagName('option');
            }
          }
        },
        attributes: {
          autocomplete: String,
          name: String,
          disabled: Boolean,
          autofocus: Boolean,
          multiple: Boolean,
          required: Boolean,
          size: { type: 'unsigned long', default: 0 }
        }
      });
      define({
        tag: 'span',
        name: 'HTMLSpanElement',
        ctor: function HTMLSpanElement(a, C, q) {
          Qr.call(this, a, C, q);
        }
      });
      define({
        tag: 'style',
        name: 'HTMLStyleElement',
        ctor: function HTMLStyleElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { media: String, type: String, scoped: Boolean }
      });
      define({
        tag: 'caption',
        name: 'HTMLTableCaptionElement',
        ctor: function HTMLTableCaptionElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { align: String }
      });
      define({
        name: 'HTMLTableCellElement',
        ctor: function HTMLTableCellElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          colSpan: { type: 'unsigned long', default: 1 },
          rowSpan: { type: 'unsigned long', default: 1 },
          scope: { type: ['row', 'col', 'rowgroup', 'colgroup'], missing: '' },
          abbr: String,
          align: String,
          axis: String,
          height: String,
          width: String,
          ch: { name: 'char', type: String },
          chOff: { name: 'charoff', type: String },
          noWrap: Boolean,
          vAlign: String,
          bgColor: { type: String, treatNullAsEmptyString: true }
        }
      });
      define({
        tags: ['col', 'colgroup'],
        name: 'HTMLTableColElement',
        ctor: function HTMLTableColElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          span: {
            type: 'limited unsigned long with fallback',
            default: 1,
            min: 1
          },
          align: String,
          ch: { name: 'char', type: String },
          chOff: { name: 'charoff', type: String },
          vAlign: String,
          width: String
        }
      });
      define({
        tag: 'table',
        name: 'HTMLTableElement',
        ctor: function HTMLTableElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        props: {
          rows: {
            get: function () {
              return this.getElementsByTagName('tr');
            }
          }
        },
        attributes: {
          align: String,
          border: String,
          frame: String,
          rules: String,
          summary: String,
          width: String,
          bgColor: { type: String, treatNullAsEmptyString: true },
          cellPadding: { type: String, treatNullAsEmptyString: true },
          cellSpacing: { type: String, treatNullAsEmptyString: true }
        }
      });
      define({
        tag: 'template',
        name: 'HTMLTemplateElement',
        ctor: function HTMLTemplateElement(a, C, q) {
          Qr.call(this, a, C, q);
          this._contentFragment = a._templateDoc.createDocumentFragment();
        },
        props: {
          content: {
            get: function () {
              return this._contentFragment;
            }
          },
          serialize: {
            value: function () {
              return this.content.serialize();
            }
          }
        }
      });
      define({
        tag: 'tr',
        name: 'HTMLTableRowElement',
        ctor: function HTMLTableRowElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        props: {
          cells: {
            get: function () {
              return this.querySelectorAll('td,th');
            }
          }
        },
        attributes: {
          align: String,
          ch: { name: 'char', type: String },
          chOff: { name: 'charoff', type: String },
          vAlign: String,
          bgColor: { type: String, treatNullAsEmptyString: true }
        }
      });
      define({
        tags: ['thead', 'tfoot', 'tbody'],
        name: 'HTMLTableSectionElement',
        ctor: function HTMLTableSectionElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        props: {
          rows: {
            get: function () {
              return this.getElementsByTagName('tr');
            }
          }
        },
        attributes: {
          align: String,
          ch: { name: 'char', type: String },
          chOff: { name: 'charoff', type: String },
          vAlign: String
        }
      });
      define({
        tag: 'textarea',
        name: 'HTMLTextAreaElement',
        ctor: function HTMLTextAreaElement(a, C, q) {
          HTMLFormElement.call(this, a, C, q);
        },
        props: {
          form: Dr.form,
          type: {
            get: function () {
              return 'textarea';
            }
          },
          defaultValue: {
            get: function () {
              return this.textContent;
            },
            set: function (a) {
              this.textContent = a;
            }
          },
          value: {
            get: function () {
              return this.defaultValue;
            },
            set: function (a) {
              this.defaultValue = a;
            }
          },
          textLength: {
            get: function () {
              return this.value.length;
            }
          }
        },
        attributes: {
          autocomplete: String,
          name: String,
          disabled: Boolean,
          autofocus: Boolean,
          placeholder: String,
          wrap: String,
          dirName: String,
          required: Boolean,
          readOnly: Boolean,
          rows: { type: 'limited unsigned long with fallback', default: 2 },
          cols: { type: 'limited unsigned long with fallback', default: 20 },
          maxLength: { type: 'unsigned long', min: 0, setmin: 0, default: -1 },
          minLength: { type: 'unsigned long', min: 0, setmin: 0, default: -1 },
          inputMode: {
            type: [
              'verbatim',
              'latin',
              'latin-name',
              'latin-prose',
              'full-width-latin',
              'kana',
              'kana-name',
              'katakana',
              'numeric',
              'tel',
              'email',
              'url'
            ],
            missing: ''
          }
        }
      });
      define({
        tag: 'time',
        name: 'HTMLTimeElement',
        ctor: function HTMLTimeElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { dateTime: String, pubDate: Boolean }
      });
      define({
        tag: 'title',
        name: 'HTMLTitleElement',
        ctor: function HTMLTitleElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        props: {
          text: {
            get: function () {
              return this.textContent;
            }
          }
        }
      });
      define({
        tag: 'ul',
        name: 'HTMLUListElement',
        ctor: function HTMLUListElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { type: String, compact: Boolean }
      });
      define({
        name: 'HTMLMediaElement',
        ctor: function HTMLMediaElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          src: URL,
          crossOrigin: CORS,
          preload: {
            type: ['metadata', 'none', 'auto', { value: '', alias: 'auto' }],
            missing: 'auto'
          },
          loop: Boolean,
          autoplay: Boolean,
          mediaGroup: String,
          controls: Boolean,
          defaultMuted: { name: 'muted', type: Boolean }
        }
      });
      define({
        name: 'HTMLAudioElement',
        tag: 'audio',
        superclass: Ar.HTMLMediaElement,
        ctor: function HTMLAudioElement(a, C, q) {
          Ar.HTMLMediaElement.call(this, a, C, q);
        }
      });
      define({
        name: 'HTMLVideoElement',
        tag: 'video',
        superclass: Ar.HTMLMediaElement,
        ctor: function HTMLVideoElement(a, C, q) {
          Ar.HTMLMediaElement.call(this, a, C, q);
        },
        attributes: {
          poster: URL,
          width: { type: 'unsigned long', min: 0, default: 0 },
          height: { type: 'unsigned long', min: 0, default: 0 }
        }
      });
      define({
        tag: 'td',
        name: 'HTMLTableDataCellElement',
        superclass: Ar.HTMLTableCellElement,
        ctor: function HTMLTableDataCellElement(a, C, q) {
          Ar.HTMLTableCellElement.call(this, a, C, q);
        }
      });
      define({
        tag: 'th',
        name: 'HTMLTableHeaderCellElement',
        superclass: Ar.HTMLTableCellElement,
        ctor: function HTMLTableHeaderCellElement(a, C, q) {
          Ar.HTMLTableCellElement.call(this, a, C, q);
        }
      });
      define({
        tag: 'frameset',
        name: 'HTMLFrameSetElement',
        ctor: function HTMLFrameSetElement(a, C, q) {
          Qr.call(this, a, C, q);
        }
      });
      define({
        tag: 'frame',
        name: 'HTMLFrameElement',
        ctor: function HTMLFrameElement(a, C, q) {
          Qr.call(this, a, C, q);
        }
      });
      define({
        tag: 'canvas',
        name: 'HTMLCanvasElement',
        ctor: function HTMLCanvasElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        props: {
          getContext: { value: lt.nyi },
          probablySupportsContext: { value: lt.nyi },
          setContext: { value: lt.nyi },
          transferControlToProxy: { value: lt.nyi },
          toDataURL: { value: lt.nyi },
          toBlob: { value: lt.nyi }
        },
        attributes: {
          width: { type: 'unsigned long', default: 300 },
          height: { type: 'unsigned long', default: 150 }
        }
      });
      define({
        tag: 'dialog',
        name: 'HTMLDialogElement',
        ctor: function HTMLDialogElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        props: {
          show: { value: lt.nyi },
          showModal: { value: lt.nyi },
          close: { value: lt.nyi }
        },
        attributes: { open: Boolean, returnValue: String }
      });
      define({
        tag: 'menuitem',
        name: 'HTMLMenuItemElement',
        ctor: function HTMLMenuItemElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        props: {
          _label: {
            get: function () {
              var a = this._getattr('label');
              if (a !== null && a !== '') {
                return a;
              }
              a = this.textContent;
              return a.replace(/[ \t\n\f\r]+/g, ' ').trim();
            }
          },
          label: {
            get: function () {
              var a = this._getattr('label');
              if (a !== null) {
                return a;
              }
              return this._label;
            },
            set: function (a) {
              this._setattr('label', a);
            }
          }
        },
        attributes: {
          type: { type: ['command', 'checkbox', 'radio'], missing: 'command' },
          icon: URL,
          disabled: Boolean,
          checked: Boolean,
          radiogroup: String,
          default: Boolean
        }
      });
      define({
        tag: 'source',
        name: 'HTMLSourceElement',
        ctor: function HTMLSourceElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          srcset: String,
          sizes: String,
          media: String,
          src: URL,
          type: String,
          width: String,
          height: String
        }
      });
      define({
        tag: 'track',
        name: 'HTMLTrackElement',
        ctor: function HTMLTrackElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          src: URL,
          srclang: String,
          label: String,
          default: Boolean,
          kind: {
            type: [
              'subtitles',
              'captions',
              'descriptions',
              'chapters',
              'metadata'
            ],
            missing: 'subtitles',
            invalid: 'metadata'
          }
        },
        props: {
          NONE: {
            get: function () {
              return 0;
            }
          },
          LOADING: {
            get: function () {
              return 1;
            }
          },
          LOADED: {
            get: function () {
              return 2;
            }
          },
          ERROR: {
            get: function () {
              return 3;
            }
          },
          readyState: { get: lt.nyi },
          track: { get: lt.nyi }
        }
      });
      define({
        tag: 'font',
        name: 'HTMLFontElement',
        ctor: function HTMLFontElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: {
          color: { type: String, treatNullAsEmptyString: true },
          face: { type: String },
          size: { type: String }
        }
      });
      define({
        tag: 'dir',
        name: 'HTMLDirectoryElement',
        ctor: function HTMLDirectoryElement(a, C, q) {
          Qr.call(this, a, C, q);
        },
        attributes: { compact: Boolean }
      });
      define({
        tags: [
          'abbr',
          'address',
          'article',
          'aside',
          'b',
          'bdi',
          'bdo',
          'cite',
          'content',
          'code',
          'dd',
          'dfn',
          'dt',
          'em',
          'figcaption',
          'figure',
          'footer',
          'header',
          'hgroup',
          'i',
          'kbd',
          'main',
          'mark',
          'nav',
          'noscript',
          'rb',
          'rp',
          'rt',
          'rtc',
          'ruby',
          's',
          'samp',
          'section',
          'small',
          'strong',
          'sub',
          'summary',
          'sup',
          'u',
          'var',
          'wbr',
          'acronym',
          'basefont',
          'big',
          'center',
          'nobr',
          'noembed',
          'noframes',
          'plaintext',
          'strike',
          'tt'
        ]
      });
    },
    6783: (a, C, q) => {
      'use strict';
      var re = q(3573);
      C = a.exports = {
        CSSStyleDeclaration: q(6557),
        CharacterData: q(5995),
        Comment: q(8715),
        DOMException: q(9984),
        DOMImplementation: q(956),
        DOMTokenList: q(9386),
        Document: q(5960),
        DocumentFragment: q(3816),
        DocumentType: q(7718),
        Element: q(3032),
        HTMLParser: q(4483),
        NamedNodeMap: q(8601),
        Node: q(4976),
        NodeList: q(3209),
        NodeFilter: q(3587),
        ProcessingInstruction: q(4430),
        Text: q(1207),
        Window: q(4967)
      };
      re.merge(C, q(6287));
      re.merge(C, q(1364).elements);
      re.merge(C, q(9454).elements);
    },
    5050: (a, C, q) => {
      'use strict';
      var re = q(956);
      var ae = q(4483);
      var Ue = q(4967);
      var lt = q(6783);
      C.createDOMImplementation = function () {
        return new re(null);
      };
      C.createDocument = function (a, C) {
        if (a || C) {
          var q = new ae();
          q.parse(a || '', true);
          return q.document();
        }
        return new re(null).createHTMLDocument('');
      };
      C.createIncrementalHTMLParser = function () {
        var a = new ae();
        return {
          write: function (C) {
            if (C.length > 0) {
              a.parse(C, false, function () {
                return true;
              });
            }
          },
          end: function (C) {
            a.parse(C || '', true, function () {
              return true;
            });
          },
          process: function (C) {
            return a.parse('', false, C);
          },
          document: function () {
            return a.document();
          }
        };
      };
      C.createWindow = function (a, q) {
        var re = C.createDocument(a);
        if (q !== undefined) {
          re._address = q;
        }
        return new lt.Window(re);
      };
      C.impl = lt;
    },
    1444: (a, C) => {
      'use strict';
      var q = Object.create(null, {
        location: {
          get: function () {
            throw new Error('window.location is not supported.');
          }
        }
      });
      var compareDocumentPosition = function (a, C) {
        return a.compareDocumentPosition(C);
      };
      var order = function (a, C) {
        return compareDocumentPosition(a, C) & 2 ? 1 : -1;
      };
      var next = function (a) {
        while ((a = a.nextSibling) && a.nodeType !== 1);
        return a;
      };
      var prev = function (a) {
        while ((a = a.previousSibling) && a.nodeType !== 1);
        return a;
      };
      var child = function (a) {
        if ((a = a.firstChild)) {
          while (a.nodeType !== 1 && (a = a.nextSibling));
        }
        return a;
      };
      var lastChild = function (a) {
        if ((a = a.lastChild)) {
          while (a.nodeType !== 1 && (a = a.previousSibling));
        }
        return a;
      };
      var parentIsElement = function (a) {
        if (!a.parentNode) {
          return false;
        }
        var C = a.parentNode.nodeType;
        return C === 1 || C === 9;
      };
      var unquote = function (a) {
        if (!a) return a;
        var C = a[0];
        if (C === '"' || C === "'") {
          if (a[a.length - 1] === C) {
            a = a.slice(1, -1);
          } else {
            a = a.slice(1);
          }
          return a.replace(Pt.str_escape, function (a) {
            var C = /^\\(?:([0-9A-Fa-f]+)|([\r\n\f]+))/.exec(a);
            if (!C) {
              return a.slice(1);
            }
            if (C[2]) {
              return '';
            }
            var q = parseInt(C[1], 16);
            return String.fromCodePoint
              ? String.fromCodePoint(q)
              : String.fromCharCode(q);
          });
        } else if (Pt.ident.test(a)) {
          return decodeid(a);
        } else {
          return a;
        }
      };
      var decodeid = function (a) {
        return a.replace(Pt.escape, function (a) {
          var C = /^\\([0-9A-Fa-f]+)/.exec(a);
          if (!C) {
            return a[1];
          }
          var q = parseInt(C[1], 16);
          return String.fromCodePoint
            ? String.fromCodePoint(q)
            : String.fromCharCode(q);
        });
      };
      var re = (function () {
        if (Array.prototype.indexOf) {
          return Array.prototype.indexOf;
        }
        return function (a, C) {
          var q = this.length;
          while (q--) {
            if (this[q] === C) return q;
          }
          return -1;
        };
      })();
      var makeInside = function (a, C) {
        var q = Pt.inside.source.replace(/</g, a).replace(/>/g, C);
        return new RegExp(q);
      };
      var replace = function (a, C, q) {
        a = a.source;
        a = a.replace(C, q.source || q);
        return new RegExp(a);
      };
      var truncateUrl = function (a, C) {
        return a
          .replace(/^(?:\w+:\/\/|\/+)/, '')
          .replace(/(?:\/+|\/*#.*?)$/, '')
          .split('/', C)
          .join('/');
      };
      var parseNth = function (a, C) {
        var q = a.replace(/\s+/g, ''),
          re;
        if (q === 'even') {
          q = '2n+0';
        } else if (q === 'odd') {
          q = '2n+1';
        } else if (q.indexOf('n') === -1) {
          q = '0n' + q;
        }
        re = /^([+-])?(\d+)?n([+-])?(\d+)?$/.exec(q);
        return {
          group: re[1] === '-' ? -(re[2] || 1) : +(re[2] || 1),
          offset: re[4] ? (re[3] === '-' ? -re[4] : +re[4]) : 0
        };
      };
      var nth = function (a, C, q) {
        var re = parseNth(a),
          ae = re.group,
          Ue = re.offset,
          lt = !q ? child : lastChild,
          Pt = !q ? next : prev;
        return function (a) {
          if (!parentIsElement(a)) return;
          var q = lt(a.parentNode),
            re = 0;
          while (q) {
            if (C(q, a)) re++;
            if (q === a) {
              re -= Ue;
              return ae && re ? re % ae === 0 && re < 0 === ae < 0 : !re;
            }
            q = Pt(q);
          }
        };
      };
      var ae = {
        '*': (function () {
          if (false) {
          }
          return function () {
            return true;
          };
        })(),
        type: function (a) {
          a = a.toLowerCase();
          return function (C) {
            return C.nodeName.toLowerCase() === a;
          };
        },
        attr: function (a, C, q, re) {
          C = Ue[C];
          return function (ae) {
            var Ue;
            switch (a) {
              case 'for':
                Ue = ae.htmlFor;
                break;
              case 'class':
                Ue = ae.className;
                if (Ue === '' && ae.getAttribute('class') == null) {
                  Ue = null;
                }
                break;
              case 'href':
              case 'src':
                Ue = ae.getAttribute(a, 2);
                break;
              case 'title':
                Ue = ae.getAttribute('title') || null;
                break;
              case 'id':
              case 'lang':
              case 'dir':
              case 'accessKey':
              case 'hidden':
              case 'tabIndex':
              case 'style':
                if (ae.getAttribute) {
                  Ue = ae.getAttribute(a);
                  break;
                }
              default:
                if (ae.hasAttribute && !ae.hasAttribute(a)) {
                  break;
                }
                Ue =
                  ae[a] != null ? ae[a] : ae.getAttribute && ae.getAttribute(a);
                break;
            }
            if (Ue == null) return;
            Ue = Ue + '';
            if (re) {
              Ue = Ue.toLowerCase();
              q = q.toLowerCase();
            }
            return C(Ue, q);
          };
        },
        ':first-child': function (a) {
          return !prev(a) && parentIsElement(a);
        },
        ':last-child': function (a) {
          return !next(a) && parentIsElement(a);
        },
        ':only-child': function (a) {
          return !prev(a) && !next(a) && parentIsElement(a);
        },
        ':nth-child': function (a, C) {
          return nth(
            a,
            function () {
              return true;
            },
            C
          );
        },
        ':nth-last-child': function (a) {
          return ae[':nth-child'](a, true);
        },
        ':root': function (a) {
          return a.ownerDocument.documentElement === a;
        },
        ':empty': function (a) {
          return !a.firstChild;
        },
        ':not': function (a) {
          var C = compileGroup(a);
          return function (a) {
            return !C(a);
          };
        },
        ':first-of-type': function (a) {
          if (!parentIsElement(a)) return;
          var C = a.nodeName;
          while ((a = prev(a))) {
            if (a.nodeName === C) return;
          }
          return true;
        },
        ':last-of-type': function (a) {
          if (!parentIsElement(a)) return;
          var C = a.nodeName;
          while ((a = next(a))) {
            if (a.nodeName === C) return;
          }
          return true;
        },
        ':only-of-type': function (a) {
          return ae[':first-of-type'](a) && ae[':last-of-type'](a);
        },
        ':nth-of-type': function (a, C) {
          return nth(
            a,
            function (a, C) {
              return a.nodeName === C.nodeName;
            },
            C
          );
        },
        ':nth-last-of-type': function (a) {
          return ae[':nth-of-type'](a, true);
        },
        ':checked': function (a) {
          return !!(a.checked || a.selected);
        },
        ':indeterminate': function (a) {
          return !ae[':checked'](a);
        },
        ':enabled': function (a) {
          return !a.disabled && a.type !== 'hidden';
        },
        ':disabled': function (a) {
          return !!a.disabled;
        },
        ':target': function (a) {
          return a.id === q.location.hash.substring(1);
        },
        ':focus': function (a) {
          return a === a.ownerDocument.activeElement;
        },
        ':is': function (a) {
          return compileGroup(a);
        },
        ':matches': function (a) {
          return ae[':is'](a);
        },
        ':nth-match': function (a, C) {
          var q = a.split(/\s*,\s*/),
            re = q.shift(),
            ae = compileGroup(q.join(','));
          return nth(re, ae, C);
        },
        ':nth-last-match': function (a) {
          return ae[':nth-match'](a, true);
        },
        ':links-here': function (a) {
          return a + '' === q.location + '';
        },
        ':lang': function (a) {
          return function (C) {
            while (C) {
              if (C.lang) return C.lang.indexOf(a) === 0;
              C = C.parentNode;
            }
          };
        },
        ':dir': function (a) {
          return function (C) {
            while (C) {
              if (C.dir) return C.dir === a;
              C = C.parentNode;
            }
          };
        },
        ':scope': function (a, C) {
          var q = C || a.ownerDocument;
          if (q.nodeType === 9) {
            return a === q.documentElement;
          }
          return a === q;
        },
        ':any-link': function (a) {
          return typeof a.href === 'string';
        },
        ':local-link': function (a) {
          if (a.nodeName) {
            return a.href && a.host === q.location.host;
          }
          var C = +a + 1;
          return function (a) {
            if (!a.href) return;
            var re = q.location + '',
              ae = a + '';
            return truncateUrl(re, C) === truncateUrl(ae, C);
          };
        },
        ':default': function (a) {
          return !!a.defaultSelected;
        },
        ':valid': function (a) {
          return a.willValidate || (a.validity && a.validity.valid);
        },
        ':invalid': function (a) {
          return !ae[':valid'](a);
        },
        ':in-range': function (a) {
          return a.value > a.min && a.value <= a.max;
        },
        ':out-of-range': function (a) {
          return !ae[':in-range'](a);
        },
        ':required': function (a) {
          return !!a.required;
        },
        ':optional': function (a) {
          return !a.required;
        },
        ':read-only': function (a) {
          if (a.readOnly) return true;
          var C = a.getAttribute('contenteditable'),
            q = a.contentEditable,
            re = a.nodeName.toLowerCase();
          re = re !== 'input' && re !== 'textarea';
          return (re || a.disabled) && C == null && q !== 'true';
        },
        ':read-write': function (a) {
          return !ae[':read-only'](a);
        },
        ':hover': function () {
          throw new Error(':hover is not supported.');
        },
        ':active': function () {
          throw new Error(':active is not supported.');
        },
        ':link': function () {
          throw new Error(':link is not supported.');
        },
        ':visited': function () {
          throw new Error(':visited is not supported.');
        },
        ':column': function () {
          throw new Error(':column is not supported.');
        },
        ':nth-column': function () {
          throw new Error(':nth-column is not supported.');
        },
        ':nth-last-column': function () {
          throw new Error(':nth-last-column is not supported.');
        },
        ':current': function () {
          throw new Error(':current is not supported.');
        },
        ':past': function () {
          throw new Error(':past is not supported.');
        },
        ':future': function () {
          throw new Error(':future is not supported.');
        },
        ':contains': function (a) {
          return function (C) {
            var q = C.innerText || C.textContent || C.value || '';
            return q.indexOf(a) !== -1;
          };
        },
        ':has': function (a) {
          return function (C) {
            return find(a, C).length > 0;
          };
        }
      };
      var Ue = {
        '-': function () {
          return true;
        },
        '=': function (a, C) {
          return a === C;
        },
        '*=': function (a, C) {
          return a.indexOf(C) !== -1;
        },
        '~=': function (a, C) {
          var q, re, ae, Ue;
          for (re = 0; true; re = q + 1) {
            q = a.indexOf(C, re);
            if (q === -1) return false;
            ae = a[q - 1];
            Ue = a[q + C.length];
            if ((!ae || ae === ' ') && (!Ue || Ue === ' ')) return true;
          }
        },
        '|=': function (a, C) {
          var q = a.indexOf(C),
            re;
          if (q !== 0) return;
          re = a[q + C.length];
          return re === '-' || !re;
        },
        '^=': function (a, C) {
          return a.indexOf(C) === 0;
        },
        '$=': function (a, C) {
          var q = a.lastIndexOf(C);
          return q !== -1 && q + C.length === a.length;
        },
        '!=': function (a, C) {
          return a !== C;
        }
      };
      var lt = {
        ' ': function (a) {
          return function (C) {
            while ((C = C.parentNode)) {
              if (a(C)) return C;
            }
          };
        },
        '>': function (a) {
          return function (C) {
            if ((C = C.parentNode)) {
              return a(C) && C;
            }
          };
        },
        '+': function (a) {
          return function (C) {
            if ((C = prev(C))) {
              return a(C) && C;
            }
          };
        },
        '~': function (a) {
          return function (C) {
            while ((C = prev(C))) {
              if (a(C)) return C;
            }
          };
        },
        noop: function (a) {
          return function (C) {
            return a(C) && C;
          };
        },
        ref: function (a, C) {
          var q;
          function ref(a) {
            var C = a.ownerDocument,
              re = C.getElementsByTagName('*'),
              ae = re.length;
            while (ae--) {
              q = re[ae];
              if (ref.test(a)) {
                q = null;
                return true;
              }
            }
            q = null;
          }
          ref.combinator = function (re) {
            if (!q || !q.getAttribute) return;
            var ae = q.getAttribute(C) || '';
            if (ae[0] === '#') ae = ae.substring(1);
            if (ae === re.id && a(q)) {
              return q;
            }
          };
          return ref;
        }
      };
      var Pt = {
        escape: /\\(?:[^0-9A-Fa-f\r\n]|[0-9A-Fa-f]{1,6}[\r\n\t ]?)/g,
        str_escape: /(escape)|\\(\n|\r\n?|\f)/g,
        nonascii: /[\u00A0-\uFFFF]/,
        cssid: /(?:(?!-?[0-9])(?:escape|nonascii|[-_a-zA-Z0-9])+)/,
        qname: /^ *(cssid|\*)/,
        simple: /^(?:([.#]cssid)|pseudo|attr)/,
        ref: /^ *\/(cssid)\/ */,
        combinator: /^(?: +([^ \w*.#\\]) +|( )+|([^ \w*.#\\]))(?! *$)/,
        attr: /^\[(cssid)(?:([^\w]?=)(inside))?\]/,
        pseudo: /^(:cssid)(?:\((inside)\))?/,
        inside: /(?:"(?:\\"|[^"])*"|'(?:\\'|[^'])*'|<[^"'>]*>|\\["'>]|[^"'>])*/,
        ident: /^(cssid)$/
      };
      Pt.cssid = replace(Pt.cssid, 'nonascii', Pt.nonascii);
      Pt.cssid = replace(Pt.cssid, 'escape', Pt.escape);
      Pt.qname = replace(Pt.qname, 'cssid', Pt.cssid);
      Pt.simple = replace(Pt.simple, 'cssid', Pt.cssid);
      Pt.ref = replace(Pt.ref, 'cssid', Pt.cssid);
      Pt.attr = replace(Pt.attr, 'cssid', Pt.cssid);
      Pt.pseudo = replace(Pt.pseudo, 'cssid', Pt.cssid);
      Pt.inside = replace(Pt.inside, '[^"\'>]*', Pt.inside);
      Pt.attr = replace(Pt.attr, 'inside', makeInside('\\[', '\\]'));
      Pt.pseudo = replace(Pt.pseudo, 'inside', makeInside('\\(', '\\)'));
      Pt.simple = replace(Pt.simple, 'pseudo', Pt.pseudo);
      Pt.simple = replace(Pt.simple, 'attr', Pt.attr);
      Pt.ident = replace(Pt.ident, 'cssid', Pt.cssid);
      Pt.str_escape = replace(Pt.str_escape, 'escape', Pt.escape);
      var compile = function (a) {
        var C = a.replace(/^\s+|\s+$/g, ''),
          q,
          re = [],
          ae = [],
          Ue,
          Wt,
          Ar,
          Er,
          Ir;
        while (C) {
          if ((Ar = Pt.qname.exec(C))) {
            C = C.substring(Ar[0].length);
            Wt = decodeid(Ar[1]);
            ae.push(tok(Wt, true));
          } else if ((Ar = Pt.simple.exec(C))) {
            C = C.substring(Ar[0].length);
            Wt = '*';
            ae.push(tok(Wt, true));
            ae.push(tok(Ar));
          } else {
            throw new SyntaxError('Invalid selector.');
          }
          while ((Ar = Pt.simple.exec(C))) {
            C = C.substring(Ar[0].length);
            ae.push(tok(Ar));
          }
          if (C[0] === '!') {
            C = C.substring(1);
            Ue = makeSubject();
            Ue.qname = Wt;
            ae.push(Ue.simple);
          }
          if ((Ar = Pt.ref.exec(C))) {
            C = C.substring(Ar[0].length);
            Ir = lt.ref(makeSimple(ae), decodeid(Ar[1]));
            re.push(Ir.combinator);
            ae = [];
            continue;
          }
          if ((Ar = Pt.combinator.exec(C))) {
            C = C.substring(Ar[0].length);
            Er = Ar[1] || Ar[2] || Ar[3];
            if (Er === ',') {
              re.push(lt.noop(makeSimple(ae)));
              break;
            }
          } else {
            Er = 'noop';
          }
          if (!lt[Er]) {
            throw new SyntaxError('Bad combinator.');
          }
          re.push(lt[Er](makeSimple(ae)));
          ae = [];
        }
        q = makeTest(re);
        q.qname = Wt;
        q.sel = C;
        if (Ue) {
          Ue.lname = q.qname;
          Ue.test = q;
          Ue.qname = Ue.qname;
          Ue.sel = q.sel;
          q = Ue;
        }
        if (Ir) {
          Ir.test = q;
          Ir.qname = q.qname;
          Ir.sel = q.sel;
          q = Ir;
        }
        return q;
      };
      var tok = function (a, C) {
        if (C) {
          return a === '*' ? ae['*'] : ae.type(a);
        }
        if (a[1]) {
          return a[1][0] === '.'
            ? ae.attr('class', '~=', decodeid(a[1].substring(1)), false)
            : ae.attr('id', '=', decodeid(a[1].substring(1)), false);
        }
        if (a[2]) {
          return a[3] ? ae[decodeid(a[2])](unquote(a[3])) : ae[decodeid(a[2])];
        }
        if (a[4]) {
          var q = a[6];
          var re = /["'\s]\s*I$/i.test(q);
          if (re) {
            q = q.replace(/\s*I$/i, '');
          }
          return ae.attr(decodeid(a[4]), a[5] || '-', unquote(q), re);
        }
        throw new SyntaxError('Unknown Selector.');
      };
      var makeSimple = function (a) {
        var C = a.length,
          q;
        if (C < 2) return a[0];
        return function (re) {
          if (!re) return;
          for (q = 0; q < C; q++) {
            if (!a[q](re)) return;
          }
          return true;
        };
      };
      var makeTest = function (a) {
        if (a.length < 2) {
          return function (C) {
            return !!a[0](C);
          };
        }
        return function (C) {
          var q = a.length;
          while (q--) {
            if (!(C = a[q](C))) return;
          }
          return true;
        };
      };
      var makeSubject = function () {
        var a;
        function subject(C) {
          var q = C.ownerDocument,
            re = q.getElementsByTagName(subject.lname),
            ae = re.length;
          while (ae--) {
            if (subject.test(re[ae]) && a === C) {
              a = null;
              return true;
            }
          }
          a = null;
        }
        subject.simple = function (C) {
          a = C;
          return true;
        };
        return subject;
      };
      var compileGroup = function (a) {
        var C = compile(a),
          q = [C];
        while (C.sel) {
          C = compile(C.sel);
          q.push(C);
        }
        if (q.length < 2) return C;
        return function (a) {
          var C = q.length,
            re = 0;
          for (; re < C; re++) {
            if (q[re](a)) return true;
          }
        };
      };
      var find = function (a, C) {
        var q = [],
          ae = compile(a),
          Ue = C.getElementsByTagName(ae.qname),
          lt = 0,
          Pt;
        while ((Pt = Ue[lt++])) {
          if (ae(Pt)) q.push(Pt);
        }
        if (ae.sel) {
          while (ae.sel) {
            ae = compile(ae.sel);
            Ue = C.getElementsByTagName(ae.qname);
            lt = 0;
            while ((Pt = Ue[lt++])) {
              if (ae(Pt) && re.call(q, Pt) === -1) {
                q.push(Pt);
              }
            }
          }
          q.sort(order);
        }
        return q;
      };
      a.exports = C = function (a, C) {
        var q, re;
        if (C.nodeType !== 11 && a.indexOf(' ') === -1) {
          if (a[0] === '#' && C.rooted && /^#[A-Z_][-A-Z0-9_]*$/i.test(a)) {
            if (C.doc._hasMultipleElementsWithId) {
              q = a.substring(1);
              if (!C.doc._hasMultipleElementsWithId(q)) {
                re = C.doc.getElementById(q);
                return re ? [re] : [];
              }
            }
          }
          if (a[0] === '.' && /^\.\w+$/.test(a)) {
            return C.getElementsByClassName(a.substring(1));
          }
          if (/^\w+$/.test(a)) {
            return C.getElementsByTagName(a);
          }
        }
        return find(a, C);
      };
      C.selectors = ae;
      C.operators = Ue;
      C.combinators = lt;
      C.matches = function (a, C) {
        var q = { sel: C };
        do {
          q = compile(q.sel);
          if (q(a)) {
            return true;
          }
        } while (q.sel);
        return false;
      };
    },
    6288: (a, C) => {
      'use strict';
      /**
       * @license
       * Copyright Google LLC All Rights Reserved.
       *
       * Use of this source code is governed by an MIT-style license that can be
       * found in the LICENSE file at https://angular.io/license
       */ Object.defineProperty(C, '__esModule', { value: true });
      C.hyphenate = C.parse = void 0;
      function parse(a) {
        const C = [];
        let q = 0;
        let re = 0;
        let ae = 0;
        let Ue = 0;
        let lt = 0;
        let Pt = null;
        while (q < a.length) {
          const Wt = a.charCodeAt(q++);
          switch (Wt) {
            case 40:
              re++;
              break;
            case 41:
              re--;
              break;
            case 39:
              if (ae === 0) {
                ae = 39;
              } else if (ae === 39 && a.charCodeAt(q - 1) !== 92) {
                ae = 0;
              }
              break;
            case 34:
              if (ae === 0) {
                ae = 34;
              } else if (ae === 34 && a.charCodeAt(q - 1) !== 92) {
                ae = 0;
              }
              break;
            case 58:
              if (!Pt && re === 0 && ae === 0) {
                Pt = hyphenate(a.substring(lt, q - 1).trim());
                Ue = q;
              }
              break;
            case 59:
              if (Pt && Ue > 0 && re === 0 && ae === 0) {
                const re = a.substring(Ue, q - 1).trim();
                C.push(Pt, re);
                lt = q;
                Ue = 0;
                Pt = null;
              }
              break;
          }
        }
        if (Pt && Ue) {
          const q = a.slice(Ue).trim();
          C.push(Pt, q);
        }
        return C;
      }
      C.parse = parse;
      function hyphenate(a) {
        return a
          .replace(/[a-z][A-Z]/g, (a) => a.charAt(0) + '-' + a.charAt(1))
          .toLowerCase();
      }
      C.hyphenate = hyphenate;
    },
    9454: (a, C, q) => {
      'use strict';
      var re = q(3032);
      var ae = q(333);
      var Ue = q(3573);
      var lt = q(6557);
      var Pt = (C.elements = {});
      var Wt = Object.create(null);
      C.createElement = function (a, C, q) {
        var re = Wt[C] || Ar;
        return new re(a, C, q);
      };
      function define(a) {
        return ae(a, Ar, Pt, Wt);
      }
      var Ar = define({
        superclass: re,
        name: 'SVGElement',
        ctor: function SVGElement(a, C, q) {
          re.call(this, a, C, Ue.NAMESPACE.SVG, q);
        },
        props: {
          style: {
            get: function () {
              if (!this._style) this._style = new lt(this);
              return this._style;
            }
          }
        }
      });
      define({
        name: 'SVGSVGElement',
        ctor: function SVGSVGElement(a, C, q) {
          Ar.call(this, a, C, q);
        },
        tag: 'svg',
        props: {
          createSVGRect: {
            value: function () {
              return C.createElement(this.ownerDocument, 'rect', null);
            }
          }
        }
      });
      define({
        tags: [
          'a',
          'altGlyph',
          'altGlyphDef',
          'altGlyphItem',
          'animate',
          'animateColor',
          'animateMotion',
          'animateTransform',
          'circle',
          'clipPath',
          'color-profile',
          'cursor',
          'defs',
          'desc',
          'ellipse',
          'feBlend',
          'feColorMatrix',
          'feComponentTransfer',
          'feComposite',
          'feConvolveMatrix',
          'feDiffuseLighting',
          'feDisplacementMap',
          'feDistantLight',
          'feFlood',
          'feFuncA',
          'feFuncB',
          'feFuncG',
          'feFuncR',
          'feGaussianBlur',
          'feImage',
          'feMerge',
          'feMergeNode',
          'feMorphology',
          'feOffset',
          'fePointLight',
          'feSpecularLighting',
          'feSpotLight',
          'feTile',
          'feTurbulence',
          'filter',
          'font',
          'font-face',
          'font-face-format',
          'font-face-name',
          'font-face-src',
          'font-face-uri',
          'foreignObject',
          'g',
          'glyph',
          'glyphRef',
          'hkern',
          'image',
          'line',
          'linearGradient',
          'marker',
          'mask',
          'metadata',
          'missing-glyph',
          'mpath',
          'path',
          'pattern',
          'polygon',
          'polyline',
          'radialGradient',
          'rect',
          'script',
          'set',
          'stop',
          'style',
          'switch',
          'symbol',
          'text',
          'textPath',
          'title',
          'tref',
          'tspan',
          'use',
          'view',
          'vkern'
        ]
      });
    },
    3573: (a, C, q) => {
      'use strict';
      var re = q(9984);
      var ae = re;
      var Ue = q(1617).S;
      C.NAMESPACE = {
        HTML: 'http://www.w3.org/1999/xhtml',
        XML: 'http://www.w3.org/XML/1998/namespace',
        XMLNS: 'http://www.w3.org/2000/xmlns/',
        MATHML: 'http://www.w3.org/1998/Math/MathML',
        SVG: 'http://www.w3.org/2000/svg',
        XLINK: 'http://www.w3.org/1999/xlink'
      };
      C.IndexSizeError = function () {
        throw new re(ae.INDEX_SIZE_ERR);
      };
      C.HierarchyRequestError = function () {
        throw new re(ae.HIERARCHY_REQUEST_ERR);
      };
      C.WrongDocumentError = function () {
        throw new re(ae.WRONG_DOCUMENT_ERR);
      };
      C.InvalidCharacterError = function () {
        throw new re(ae.INVALID_CHARACTER_ERR);
      };
      C.NoModificationAllowedError = function () {
        throw new re(ae.NO_MODIFICATION_ALLOWED_ERR);
      };
      C.NotFoundError = function () {
        throw new re(ae.NOT_FOUND_ERR);
      };
      C.NotSupportedError = function () {
        throw new re(ae.NOT_SUPPORTED_ERR);
      };
      C.InvalidStateError = function () {
        throw new re(ae.INVALID_STATE_ERR);
      };
      C.SyntaxError = function () {
        throw new re(ae.SYNTAX_ERR);
      };
      C.InvalidModificationError = function () {
        throw new re(ae.INVALID_MODIFICATION_ERR);
      };
      C.NamespaceError = function () {
        throw new re(ae.NAMESPACE_ERR);
      };
      C.InvalidAccessError = function () {
        throw new re(ae.INVALID_ACCESS_ERR);
      };
      C.TypeMismatchError = function () {
        throw new re(ae.TYPE_MISMATCH_ERR);
      };
      C.SecurityError = function () {
        throw new re(ae.SECURITY_ERR);
      };
      C.NetworkError = function () {
        throw new re(ae.NETWORK_ERR);
      };
      C.AbortError = function () {
        throw new re(ae.ABORT_ERR);
      };
      C.UrlMismatchError = function () {
        throw new re(ae.URL_MISMATCH_ERR);
      };
      C.QuotaExceededError = function () {
        throw new re(ae.QUOTA_EXCEEDED_ERR);
      };
      C.TimeoutError = function () {
        throw new re(ae.TIMEOUT_ERR);
      };
      C.InvalidNodeTypeError = function () {
        throw new re(ae.INVALID_NODE_TYPE_ERR);
      };
      C.DataCloneError = function () {
        throw new re(ae.DATA_CLONE_ERR);
      };
      C.nyi = function () {
        throw new Error('NotYetImplemented');
      };
      C.shouldOverride = function () {
        throw new Error('Abstract function; should be overriding in subclass.');
      };
      C.assert = function (a, C) {
        if (!a) {
          throw new Error(
            'Assertion failed: ' + (C || '') + '\n' + new Error().stack
          );
        }
      };
      C.expose = function (a, C) {
        for (var q in a) {
          Object.defineProperty(C.prototype, q, { value: a[q], writable: Ue });
        }
      };
      C.merge = function (a, C) {
        for (var q in C) {
          a[q] = C[q];
        }
      };
      C.documentOrder = function (a, C) {
        return 3 - (a.compareDocumentPosition(C) & 6);
      };
      C.toASCIILowerCase = function (a) {
        return a.replace(/[A-Z]+/g, function (a) {
          return a.toLowerCase();
        });
      };
      C.toASCIIUpperCase = function (a) {
        return a.replace(/[a-z]+/g, function (a) {
          return a.toUpperCase();
        });
      };
    },
    8726: (a, C) => {
      'use strict';
      C.isValidName = isValidName;
      C.isValidQName = isValidQName;
      var q = /^[_:A-Za-z][-.:\w]+$/;
      var re = /^([_A-Za-z][-.\w]+|[_A-Za-z][-.\w]+:[_A-Za-z][-.\w]+)$/;
      var ae = '_A-Za-zÀ-ÖØ-öø-˿Ͱ-ͽͿ-῿‌-‍⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�';
      var Ue = '-._A-Za-z0-9·À-ÖØ-öø-˿̀-ͽͿ-῿‌‍‿⁀⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�';
      var lt = '[' + ae + '][' + Ue + ']*';
      var Pt = ae + ':';
      var Wt = Ue + ':';
      var Ar = new RegExp('^[' + Pt + ']' + '[' + Wt + ']*$');
      var Er = new RegExp('^(' + lt + '|' + lt + ':' + lt + ')$');
      var Ir = /[\uD800-\uDB7F\uDC00-\uDFFF]/;
      var Br = /[\uD800-\uDB7F\uDC00-\uDFFF]/g;
      var Qr = /[\uD800-\uDB7F][\uDC00-\uDFFF]/g;
      ae += '\ud800-󯰀-\udfff';
      Ue += '\ud800-󯰀-\udfff';
      lt = '[' + ae + '][' + Ue + ']*';
      Pt = ae + ':';
      Wt = Ue + ':';
      var kr = new RegExp('^[' + Pt + ']' + '[' + Wt + ']*$');
      var Dr = new RegExp('^(' + lt + '|' + lt + ':' + lt + ')$');
      function isValidName(a) {
        if (q.test(a)) return true;
        if (Ar.test(a)) return true;
        if (!Ir.test(a)) return false;
        if (!kr.test(a)) return false;
        var C = a.match(Br),
          re = a.match(Qr);
        return re !== null && 2 * re.length === C.length;
      }
      function isValidQName(a) {
        if (re.test(a)) return true;
        if (Er.test(a)) return true;
        if (!Ir.test(a)) return false;
        if (!Dr.test(a)) return false;
        var C = a.match(Br),
          q = a.match(Qr);
        return q !== null && 2 * q.length === C.length;
      }
    },
    1410: (a) => {
      'use strict';
      var C = Object.defineProperty;
      var q = Object.getOwnPropertyDescriptor;
      var re = Object.getOwnPropertyNames;
      var ae = Object.prototype.hasOwnProperty;
      var __export = (a, q) => {
        for (var re in q) C(a, re, { get: q[re], enumerable: true });
      };
      var __copyProps = (a, Ue, lt, Pt) => {
        if ((Ue && typeof Ue === 'object') || typeof Ue === 'function') {
          for (let Wt of re(Ue))
            if (!ae.call(a, Wt) && Wt !== lt)
              C(a, Wt, {
                get: () => Ue[Wt],
                enumerable: !(Pt = q(Ue, Wt)) || Pt.enumerable
              });
        }
        return a;
      };
      var __toCommonJS = (a) =>
        __copyProps(C({}, '__esModule', { value: true }), a);
      var Ue = {};
      __export(Ue, { createTokenAuth: () => Ar });
      a.exports = __toCommonJS(Ue);
      var lt = /^v1\./;
      var Pt = /^ghs_/;
      var Wt = /^ghu_/;
      async function auth(a) {
        const C = a.split(/\./).length === 3;
        const q = lt.test(a) || Pt.test(a);
        const re = Wt.test(a);
        const ae = C
          ? 'app'
          : q
            ? 'installation'
            : re
              ? 'user-to-server'
              : 'oauth';
        return { type: 'token', token: a, tokenType: ae };
      }
      function withAuthorizationPrefix(a) {
        if (a.split(/\./).length === 3) {
          return `bearer ${a}`;
        }
        return `token ${a}`;
      }
      async function hook(a, C, q, re) {
        const ae = C.endpoint.merge(q, re);
        ae.headers.authorization = withAuthorizationPrefix(a);
        return C(ae);
      }
      var Ar = function createTokenAuth2(a) {
        if (!a) {
          throw new Error(
            '[@octokit/auth-token] No token passed to createTokenAuth'
          );
        }
        if (typeof a !== 'string') {
          throw new Error(
            '[@octokit/auth-token] Token passed to createTokenAuth is not a string'
          );
        }
        a = a.replace(/^(token|bearer) +/i, '');
        return Object.assign(auth.bind(null, a), { hook: hook.bind(null, a) });
      };
      0 && 0;
    },
    9437: (a, C, q) => {
      'use strict';
      var re = Object.defineProperty;
      var ae = Object.getOwnPropertyDescriptor;
      var Ue = Object.getOwnPropertyNames;
      var lt = Object.prototype.hasOwnProperty;
      var __export = (a, C) => {
        for (var q in C) re(a, q, { get: C[q], enumerable: true });
      };
      var __copyProps = (a, C, q, Pt) => {
        if ((C && typeof C === 'object') || typeof C === 'function') {
          for (let Wt of Ue(C))
            if (!lt.call(a, Wt) && Wt !== q)
              re(a, Wt, {
                get: () => C[Wt],
                enumerable: !(Pt = ae(C, Wt)) || Pt.enumerable
              });
        }
        return a;
      };
      var __toCommonJS = (a) =>
        __copyProps(re({}, '__esModule', { value: true }), a);
      var Pt = {};
      __export(Pt, { Octokit: () => Lr });
      a.exports = __toCommonJS(Pt);
      var Wt = q(5592);
      var Ar = q(3990);
      var Er = q(4970);
      var Ir = q(4212);
      var Br = q(1410);
      var Qr = '5.2.0';
      var noop = () => {};
      var kr = console.warn.bind(console);
      var Dr = console.error.bind(console);
      var Nr = `octokit-core.js/${Qr} ${(0, Wt.getUserAgent)()}`;
      var Lr = class {
        static {
          this.VERSION = Qr;
        }
        static defaults(a) {
          const C = class extends this {
            constructor(...C) {
              const q = C[0] || {};
              if (typeof a === 'function') {
                super(a(q));
                return;
              }
              super(
                Object.assign(
                  {},
                  a,
                  q,
                  q.userAgent && a.userAgent
                    ? { userAgent: `${q.userAgent} ${a.userAgent}` }
                    : null
                )
              );
            }
          };
          return C;
        }
        static {
          this.plugins = [];
        }
        static plugin(...a) {
          const C = this.plugins;
          const q = class extends this {
            static {
              this.plugins = C.concat(a.filter((a) => !C.includes(a)));
            }
          };
          return q;
        }
        constructor(a = {}) {
          const C = new Ar.Collection();
          const q = {
            baseUrl: Er.request.endpoint.DEFAULTS.baseUrl,
            headers: {},
            request: Object.assign({}, a.request, {
              hook: C.bind(null, 'request')
            }),
            mediaType: { previews: [], format: '' }
          };
          q.headers['user-agent'] = a.userAgent ? `${a.userAgent} ${Nr}` : Nr;
          if (a.baseUrl) {
            q.baseUrl = a.baseUrl;
          }
          if (a.previews) {
            q.mediaType.previews = a.previews;
          }
          if (a.timeZone) {
            q.headers['time-zone'] = a.timeZone;
          }
          this.request = Er.request.defaults(q);
          this.graphql = (0, Ir.withCustomRequest)(this.request).defaults(q);
          this.log = Object.assign(
            { debug: noop, info: noop, warn: kr, error: Dr },
            a.log
          );
          this.hook = C;
          if (!a.authStrategy) {
            if (!a.auth) {
              this.auth = async () => ({ type: 'unauthenticated' });
            } else {
              const q = (0, Br.createTokenAuth)(a.auth);
              C.wrap('request', q.hook);
              this.auth = q;
            }
          } else {
            const { authStrategy: q, ...re } = a;
            const ae = q(
              Object.assign(
                {
                  request: this.request,
                  log: this.log,
                  octokit: this,
                  octokitOptions: re
                },
                a.auth
              )
            );
            C.wrap('request', ae.hook);
            this.auth = ae;
          }
          const re = this.constructor;
          for (let C = 0; C < re.plugins.length; ++C) {
            Object.assign(this, re.plugins[C](this, a));
          }
        }
      };
      0 && 0;
    },
    794: (a, C, q) => {
      'use strict';
      var re = Object.defineProperty;
      var ae = Object.getOwnPropertyDescriptor;
      var Ue = Object.getOwnPropertyNames;
      var lt = Object.prototype.hasOwnProperty;
      var __export = (a, C) => {
        for (var q in C) re(a, q, { get: C[q], enumerable: true });
      };
      var __copyProps = (a, C, q, Pt) => {
        if ((C && typeof C === 'object') || typeof C === 'function') {
          for (let Wt of Ue(C))
            if (!lt.call(a, Wt) && Wt !== q)
              re(a, Wt, {
                get: () => C[Wt],
                enumerable: !(Pt = ae(C, Wt)) || Pt.enumerable
              });
        }
        return a;
      };
      var __toCommonJS = (a) =>
        __copyProps(re({}, '__esModule', { value: true }), a);
      var Pt = {};
      __export(Pt, { endpoint: () => Qr });
      a.exports = __toCommonJS(Pt);
      var Wt = q(5592);
      var Ar = '9.0.5';
      var Er = `octokit-endpoint.js/${Ar} ${(0, Wt.getUserAgent)()}`;
      var Ir = {
        method: 'GET',
        baseUrl: 'https://api.github.com',
        headers: { accept: 'application/vnd.github.v3+json', 'user-agent': Er },
        mediaType: { format: '' }
      };
      function lowercaseKeys(a) {
        if (!a) {
          return {};
        }
        return Object.keys(a).reduce((C, q) => {
          C[q.toLowerCase()] = a[q];
          return C;
        }, {});
      }
      function isPlainObject(a) {
        if (typeof a !== 'object' || a === null) return false;
        if (Object.prototype.toString.call(a) !== '[object Object]')
          return false;
        const C = Object.getPrototypeOf(a);
        if (C === null) return true;
        const q =
          Object.prototype.hasOwnProperty.call(C, 'constructor') &&
          C.constructor;
        return (
          typeof q === 'function' &&
          q instanceof q &&
          Function.prototype.call(q) === Function.prototype.call(a)
        );
      }
      function mergeDeep(a, C) {
        const q = Object.assign({}, a);
        Object.keys(C).forEach((re) => {
          if (isPlainObject(C[re])) {
            if (!(re in a)) Object.assign(q, { [re]: C[re] });
            else q[re] = mergeDeep(a[re], C[re]);
          } else {
            Object.assign(q, { [re]: C[re] });
          }
        });
        return q;
      }
      function removeUndefinedProperties(a) {
        for (const C in a) {
          if (a[C] === void 0) {
            delete a[C];
          }
        }
        return a;
      }
      function merge(a, C, q) {
        if (typeof C === 'string') {
          let [a, re] = C.split(' ');
          q = Object.assign(re ? { method: a, url: re } : { url: a }, q);
        } else {
          q = Object.assign({}, C);
        }
        q.headers = lowercaseKeys(q.headers);
        removeUndefinedProperties(q);
        removeUndefinedProperties(q.headers);
        const re = mergeDeep(a || {}, q);
        if (q.url === '/graphql') {
          if (a && a.mediaType.previews?.length) {
            re.mediaType.previews = a.mediaType.previews
              .filter((a) => !re.mediaType.previews.includes(a))
              .concat(re.mediaType.previews);
          }
          re.mediaType.previews = (re.mediaType.previews || []).map((a) =>
            a.replace(/-preview/, '')
          );
        }
        return re;
      }
      function addQueryParameters(a, C) {
        const q = /\?/.test(a) ? '&' : '?';
        const re = Object.keys(C);
        if (re.length === 0) {
          return a;
        }
        return (
          a +
          q +
          re
            .map((a) => {
              if (a === 'q') {
                return 'q=' + C.q.split('+').map(encodeURIComponent).join('+');
              }
              return `${a}=${encodeURIComponent(C[a])}`;
            })
            .join('&')
        );
      }
      var Br = /\{[^}]+\}/g;
      function removeNonChars(a) {
        return a.replace(/^\W+|\W+$/g, '').split(/,/);
      }
      function extractUrlVariableNames(a) {
        const C = a.match(Br);
        if (!C) {
          return [];
        }
        return C.map(removeNonChars).reduce((a, C) => a.concat(C), []);
      }
      function omit(a, C) {
        const q = { __proto__: null };
        for (const re of Object.keys(a)) {
          if (C.indexOf(re) === -1) {
            q[re] = a[re];
          }
        }
        return q;
      }
      function encodeReserved(a) {
        return a
          .split(/(%[0-9A-Fa-f]{2})/g)
          .map(function (a) {
            if (!/%[0-9A-Fa-f]/.test(a)) {
              a = encodeURI(a).replace(/%5B/g, '[').replace(/%5D/g, ']');
            }
            return a;
          })
          .join('');
      }
      function encodeUnreserved(a) {
        return encodeURIComponent(a).replace(/[!'()*]/g, function (a) {
          return '%' + a.charCodeAt(0).toString(16).toUpperCase();
        });
      }
      function encodeValue(a, C, q) {
        C = a === '+' || a === '#' ? encodeReserved(C) : encodeUnreserved(C);
        if (q) {
          return encodeUnreserved(q) + '=' + C;
        } else {
          return C;
        }
      }
      function isDefined(a) {
        return a !== void 0 && a !== null;
      }
      function isKeyOperator(a) {
        return a === ';' || a === '&' || a === '?';
      }
      function getValues(a, C, q, re) {
        var ae = a[q],
          Ue = [];
        if (isDefined(ae) && ae !== '') {
          if (
            typeof ae === 'string' ||
            typeof ae === 'number' ||
            typeof ae === 'boolean'
          ) {
            ae = ae.toString();
            if (re && re !== '*') {
              ae = ae.substring(0, parseInt(re, 10));
            }
            Ue.push(encodeValue(C, ae, isKeyOperator(C) ? q : ''));
          } else {
            if (re === '*') {
              if (Array.isArray(ae)) {
                ae.filter(isDefined).forEach(function (a) {
                  Ue.push(encodeValue(C, a, isKeyOperator(C) ? q : ''));
                });
              } else {
                Object.keys(ae).forEach(function (a) {
                  if (isDefined(ae[a])) {
                    Ue.push(encodeValue(C, ae[a], a));
                  }
                });
              }
            } else {
              const a = [];
              if (Array.isArray(ae)) {
                ae.filter(isDefined).forEach(function (q) {
                  a.push(encodeValue(C, q));
                });
              } else {
                Object.keys(ae).forEach(function (q) {
                  if (isDefined(ae[q])) {
                    a.push(encodeUnreserved(q));
                    a.push(encodeValue(C, ae[q].toString()));
                  }
                });
              }
              if (isKeyOperator(C)) {
                Ue.push(encodeUnreserved(q) + '=' + a.join(','));
              } else if (a.length !== 0) {
                Ue.push(a.join(','));
              }
            }
          }
        } else {
          if (C === ';') {
            if (isDefined(ae)) {
              Ue.push(encodeUnreserved(q));
            }
          } else if (ae === '' && (C === '&' || C === '?')) {
            Ue.push(encodeUnreserved(q) + '=');
          } else if (ae === '') {
            Ue.push('');
          }
        }
        return Ue;
      }
      function parseUrl(a) {
        return { expand: expand.bind(null, a) };
      }
      function expand(a, C) {
        var q = ['+', '#', '.', '/', ';', '?', '&'];
        a = a.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (a, re, ae) {
          if (re) {
            let a = '';
            const ae = [];
            if (q.indexOf(re.charAt(0)) !== -1) {
              a = re.charAt(0);
              re = re.substr(1);
            }
            re.split(/,/g).forEach(function (q) {
              var re = /([^:\*]*)(?::(\d+)|(\*))?/.exec(q);
              ae.push(getValues(C, a, re[1], re[2] || re[3]));
            });
            if (a && a !== '+') {
              var Ue = ',';
              if (a === '?') {
                Ue = '&';
              } else if (a !== '#') {
                Ue = a;
              }
              return (ae.length !== 0 ? a : '') + ae.join(Ue);
            } else {
              return ae.join(',');
            }
          } else {
            return encodeReserved(ae);
          }
        });
        if (a === '/') {
          return a;
        } else {
          return a.replace(/\/$/, '');
        }
      }
      function parse(a) {
        let C = a.method.toUpperCase();
        let q = (a.url || '/').replace(/:([a-z]\w+)/g, '{$1}');
        let re = Object.assign({}, a.headers);
        let ae;
        let Ue = omit(a, [
          'method',
          'baseUrl',
          'url',
          'headers',
          'request',
          'mediaType'
        ]);
        const lt = extractUrlVariableNames(q);
        q = parseUrl(q).expand(Ue);
        if (!/^http/.test(q)) {
          q = a.baseUrl + q;
        }
        const Pt = Object.keys(a)
          .filter((a) => lt.includes(a))
          .concat('baseUrl');
        const Wt = omit(Ue, Pt);
        const Ar = /application\/octet-stream/i.test(re.accept);
        if (!Ar) {
          if (a.mediaType.format) {
            re.accept = re.accept
              .split(/,/)
              .map((C) =>
                C.replace(
                  /application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,
                  `application/vnd$1$2.${a.mediaType.format}`
                )
              )
              .join(',');
          }
          if (q.endsWith('/graphql')) {
            if (a.mediaType.previews?.length) {
              const C = re.accept.match(/[\w-]+(?=-preview)/g) || [];
              re.accept = C.concat(a.mediaType.previews)
                .map((C) => {
                  const q = a.mediaType.format
                    ? `.${a.mediaType.format}`
                    : '+json';
                  return `application/vnd.github.${C}-preview${q}`;
                })
                .join(',');
            }
          }
        }
        if (['GET', 'HEAD'].includes(C)) {
          q = addQueryParameters(q, Wt);
        } else {
          if ('data' in Wt) {
            ae = Wt.data;
          } else {
            if (Object.keys(Wt).length) {
              ae = Wt;
            }
          }
        }
        if (!re['content-type'] && typeof ae !== 'undefined') {
          re['content-type'] = 'application/json; charset=utf-8';
        }
        if (['PATCH', 'PUT'].includes(C) && typeof ae === 'undefined') {
          ae = '';
        }
        return Object.assign(
          { method: C, url: q, headers: re },
          typeof ae !== 'undefined' ? { body: ae } : null,
          a.request ? { request: a.request } : null
        );
      }
      function endpointWithDefaults(a, C, q) {
        return parse(merge(a, C, q));
      }
      function withDefaults(a, C) {
        const q = merge(a, C);
        const re = endpointWithDefaults.bind(null, q);
        return Object.assign(re, {
          DEFAULTS: q,
          defaults: withDefaults.bind(null, q),
          merge: merge.bind(null, q),
          parse: parse
        });
      }
      var Qr = withDefaults(null, Ir);
      0 && 0;
    },
    4212: (a, C, q) => {
      'use strict';
      var re = Object.defineProperty;
      var ae = Object.getOwnPropertyDescriptor;
      var Ue = Object.getOwnPropertyNames;
      var lt = Object.prototype.hasOwnProperty;
      var __export = (a, C) => {
        for (var q in C) re(a, q, { get: C[q], enumerable: true });
      };
      var __copyProps = (a, C, q, Pt) => {
        if ((C && typeof C === 'object') || typeof C === 'function') {
          for (let Wt of Ue(C))
            if (!lt.call(a, Wt) && Wt !== q)
              re(a, Wt, {
                get: () => C[Wt],
                enumerable: !(Pt = ae(C, Wt)) || Pt.enumerable
              });
        }
        return a;
      };
      var __toCommonJS = (a) =>
        __copyProps(re({}, '__esModule', { value: true }), a);
      var Pt = {};
      __export(Pt, {
        GraphqlResponseError: () => Qr,
        graphql: () => Lr,
        withCustomRequest: () => withCustomRequest
      });
      a.exports = __toCommonJS(Pt);
      var Wt = q(4970);
      var Ar = q(5592);
      var Er = '7.1.0';
      var Ir = q(4970);
      var Br = q(4970);
      function _buildMessageForResponseErrors(a) {
        return (
          `Request failed due to following response errors:\n` +
          a.errors.map((a) => ` - ${a.message}`).join('\n')
        );
      }
      var Qr = class extends Error {
        constructor(a, C, q) {
          super(_buildMessageForResponseErrors(q));
          this.request = a;
          this.headers = C;
          this.response = q;
          this.name = 'GraphqlResponseError';
          this.errors = q.errors;
          this.data = q.data;
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          }
        }
      };
      var kr = [
        'method',
        'baseUrl',
        'url',
        'headers',
        'request',
        'query',
        'mediaType'
      ];
      var Dr = ['query', 'method', 'url'];
      var Nr = /\/api\/v3\/?$/;
      function graphql(a, C, q) {
        if (q) {
          if (typeof C === 'string' && 'query' in q) {
            return Promise.reject(
              new Error(
                `[@octokit/graphql] "query" cannot be used as variable name`
              )
            );
          }
          for (const a in q) {
            if (!Dr.includes(a)) continue;
            return Promise.reject(
              new Error(
                `[@octokit/graphql] "${a}" cannot be used as variable name`
              )
            );
          }
        }
        const re = typeof C === 'string' ? Object.assign({ query: C }, q) : C;
        const ae = Object.keys(re).reduce((a, C) => {
          if (kr.includes(C)) {
            a[C] = re[C];
            return a;
          }
          if (!a.variables) {
            a.variables = {};
          }
          a.variables[C] = re[C];
          return a;
        }, {});
        const Ue = re.baseUrl || a.endpoint.DEFAULTS.baseUrl;
        if (Nr.test(Ue)) {
          ae.url = Ue.replace(Nr, '/api/graphql');
        }
        return a(ae).then((a) => {
          if (a.data.errors) {
            const C = {};
            for (const q of Object.keys(a.headers)) {
              C[q] = a.headers[q];
            }
            throw new Qr(ae, C, a.data);
          }
          return a.data.data;
        });
      }
      function withDefaults(a, C) {
        const q = a.defaults(C);
        const newApi = (a, C) => graphql(q, a, C);
        return Object.assign(newApi, {
          defaults: withDefaults.bind(null, q),
          endpoint: q.endpoint
        });
      }
      var Lr = withDefaults(Wt.request, {
        headers: {
          'user-agent': `octokit-graphql.js/${Er} ${(0, Ar.getUserAgent)()}`
        },
        method: 'POST',
        url: '/graphql'
      });
      function withCustomRequest(a) {
        return withDefaults(a, { method: 'POST', url: '/graphql' });
      }
      0 && 0;
    },
    8927: (a) => {
      'use strict';
      var C = Object.defineProperty;
      var q = Object.getOwnPropertyDescriptor;
      var re = Object.getOwnPropertyNames;
      var ae = Object.prototype.hasOwnProperty;
      var __export = (a, q) => {
        for (var re in q) C(a, re, { get: q[re], enumerable: true });
      };
      var __copyProps = (a, Ue, lt, Pt) => {
        if ((Ue && typeof Ue === 'object') || typeof Ue === 'function') {
          for (let Wt of re(Ue))
            if (!ae.call(a, Wt) && Wt !== lt)
              C(a, Wt, {
                get: () => Ue[Wt],
                enumerable: !(Pt = q(Ue, Wt)) || Pt.enumerable
              });
        }
        return a;
      };
      var __toCommonJS = (a) =>
        __copyProps(C({}, '__esModule', { value: true }), a);
      var Ue = {};
      __export(Ue, {
        composePaginateRest: () => Pt,
        isPaginatingEndpoint: () => isPaginatingEndpoint,
        paginateRest: () => paginateRest,
        paginatingEndpoints: () => Wt
      });
      a.exports = __toCommonJS(Ue);
      var lt = '9.2.1';
      function normalizePaginatedListResponse(a) {
        if (!a.data) {
          return { ...a, data: [] };
        }
        const C = 'total_count' in a.data && !('url' in a.data);
        if (!C) return a;
        const q = a.data.incomplete_results;
        const re = a.data.repository_selection;
        const ae = a.data.total_count;
        delete a.data.incomplete_results;
        delete a.data.repository_selection;
        delete a.data.total_count;
        const Ue = Object.keys(a.data)[0];
        const lt = a.data[Ue];
        a.data = lt;
        if (typeof q !== 'undefined') {
          a.data.incomplete_results = q;
        }
        if (typeof re !== 'undefined') {
          a.data.repository_selection = re;
        }
        a.data.total_count = ae;
        return a;
      }
      function iterator(a, C, q) {
        const re =
          typeof C === 'function' ? C.endpoint(q) : a.request.endpoint(C, q);
        const ae = typeof C === 'function' ? C : a.request;
        const Ue = re.method;
        const lt = re.headers;
        let Pt = re.url;
        return {
          [Symbol.asyncIterator]: () => ({
            async next() {
              if (!Pt) return { done: true };
              try {
                const a = await ae({ method: Ue, url: Pt, headers: lt });
                const C = normalizePaginatedListResponse(a);
                Pt = ((C.headers.link || '').match(/<([^>]+)>;\s*rel="next"/) ||
                  [])[1];
                return { value: C };
              } catch (a) {
                if (a.status !== 409) throw a;
                Pt = '';
                return { value: { status: 200, headers: {}, data: [] } };
              }
            }
          })
        };
      }
      function paginate(a, C, q, re) {
        if (typeof q === 'function') {
          re = q;
          q = void 0;
        }
        return gather(a, [], iterator(a, C, q)[Symbol.asyncIterator](), re);
      }
      function gather(a, C, q, re) {
        return q.next().then((ae) => {
          if (ae.done) {
            return C;
          }
          let Ue = false;
          function done() {
            Ue = true;
          }
          C = C.concat(re ? re(ae.value, done) : ae.value.data);
          if (Ue) {
            return C;
          }
          return gather(a, C, q, re);
        });
      }
      var Pt = Object.assign(paginate, { iterator: iterator });
      var Wt = [
        'GET /advisories',
        'GET /app/hook/deliveries',
        'GET /app/installation-requests',
        'GET /app/installations',
        'GET /assignments/{assignment_id}/accepted_assignments',
        'GET /classrooms',
        'GET /classrooms/{classroom_id}/assignments',
        'GET /enterprises/{enterprise}/dependabot/alerts',
        'GET /enterprises/{enterprise}/secret-scanning/alerts',
        'GET /events',
        'GET /gists',
        'GET /gists/public',
        'GET /gists/starred',
        'GET /gists/{gist_id}/comments',
        'GET /gists/{gist_id}/commits',
        'GET /gists/{gist_id}/forks',
        'GET /installation/repositories',
        'GET /issues',
        'GET /licenses',
        'GET /marketplace_listing/plans',
        'GET /marketplace_listing/plans/{plan_id}/accounts',
        'GET /marketplace_listing/stubbed/plans',
        'GET /marketplace_listing/stubbed/plans/{plan_id}/accounts',
        'GET /networks/{owner}/{repo}/events',
        'GET /notifications',
        'GET /organizations',
        'GET /orgs/{org}/actions/cache/usage-by-repository',
        'GET /orgs/{org}/actions/permissions/repositories',
        'GET /orgs/{org}/actions/runners',
        'GET /orgs/{org}/actions/secrets',
        'GET /orgs/{org}/actions/secrets/{secret_name}/repositories',
        'GET /orgs/{org}/actions/variables',
        'GET /orgs/{org}/actions/variables/{name}/repositories',
        'GET /orgs/{org}/blocks',
        'GET /orgs/{org}/code-scanning/alerts',
        'GET /orgs/{org}/codespaces',
        'GET /orgs/{org}/codespaces/secrets',
        'GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories',
        'GET /orgs/{org}/copilot/billing/seats',
        'GET /orgs/{org}/dependabot/alerts',
        'GET /orgs/{org}/dependabot/secrets',
        'GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories',
        'GET /orgs/{org}/events',
        'GET /orgs/{org}/failed_invitations',
        'GET /orgs/{org}/hooks',
        'GET /orgs/{org}/hooks/{hook_id}/deliveries',
        'GET /orgs/{org}/installations',
        'GET /orgs/{org}/invitations',
        'GET /orgs/{org}/invitations/{invitation_id}/teams',
        'GET /orgs/{org}/issues',
        'GET /orgs/{org}/members',
        'GET /orgs/{org}/members/{username}/codespaces',
        'GET /orgs/{org}/migrations',
        'GET /orgs/{org}/migrations/{migration_id}/repositories',
        'GET /orgs/{org}/organization-roles/{role_id}/teams',
        'GET /orgs/{org}/organization-roles/{role_id}/users',
        'GET /orgs/{org}/outside_collaborators',
        'GET /orgs/{org}/packages',
        'GET /orgs/{org}/packages/{package_type}/{package_name}/versions',
        'GET /orgs/{org}/personal-access-token-requests',
        'GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories',
        'GET /orgs/{org}/personal-access-tokens',
        'GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories',
        'GET /orgs/{org}/projects',
        'GET /orgs/{org}/properties/values',
        'GET /orgs/{org}/public_members',
        'GET /orgs/{org}/repos',
        'GET /orgs/{org}/rulesets',
        'GET /orgs/{org}/rulesets/rule-suites',
        'GET /orgs/{org}/secret-scanning/alerts',
        'GET /orgs/{org}/security-advisories',
        'GET /orgs/{org}/teams',
        'GET /orgs/{org}/teams/{team_slug}/discussions',
        'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments',
        'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions',
        'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions',
        'GET /orgs/{org}/teams/{team_slug}/invitations',
        'GET /orgs/{org}/teams/{team_slug}/members',
        'GET /orgs/{org}/teams/{team_slug}/projects',
        'GET /orgs/{org}/teams/{team_slug}/repos',
        'GET /orgs/{org}/teams/{team_slug}/teams',
        'GET /projects/columns/{column_id}/cards',
        'GET /projects/{project_id}/collaborators',
        'GET /projects/{project_id}/columns',
        'GET /repos/{owner}/{repo}/actions/artifacts',
        'GET /repos/{owner}/{repo}/actions/caches',
        'GET /repos/{owner}/{repo}/actions/organization-secrets',
        'GET /repos/{owner}/{repo}/actions/organization-variables',
        'GET /repos/{owner}/{repo}/actions/runners',
        'GET /repos/{owner}/{repo}/actions/runs',
        'GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts',
        'GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs',
        'GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs',
        'GET /repos/{owner}/{repo}/actions/secrets',
        'GET /repos/{owner}/{repo}/actions/variables',
        'GET /repos/{owner}/{repo}/actions/workflows',
        'GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs',
        'GET /repos/{owner}/{repo}/activity',
        'GET /repos/{owner}/{repo}/assignees',
        'GET /repos/{owner}/{repo}/branches',
        'GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations',
        'GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs',
        'GET /repos/{owner}/{repo}/code-scanning/alerts',
        'GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances',
        'GET /repos/{owner}/{repo}/code-scanning/analyses',
        'GET /repos/{owner}/{repo}/codespaces',
        'GET /repos/{owner}/{repo}/codespaces/devcontainers',
        'GET /repos/{owner}/{repo}/codespaces/secrets',
        'GET /repos/{owner}/{repo}/collaborators',
        'GET /repos/{owner}/{repo}/comments',
        'GET /repos/{owner}/{repo}/comments/{comment_id}/reactions',
        'GET /repos/{owner}/{repo}/commits',
        'GET /repos/{owner}/{repo}/commits/{commit_sha}/comments',
        'GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls',
        'GET /repos/{owner}/{repo}/commits/{ref}/check-runs',
        'GET /repos/{owner}/{repo}/commits/{ref}/check-suites',
        'GET /repos/{owner}/{repo}/commits/{ref}/status',
        'GET /repos/{owner}/{repo}/commits/{ref}/statuses',
        'GET /repos/{owner}/{repo}/contributors',
        'GET /repos/{owner}/{repo}/dependabot/alerts',
        'GET /repos/{owner}/{repo}/dependabot/secrets',
        'GET /repos/{owner}/{repo}/deployments',
        'GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses',
        'GET /repos/{owner}/{repo}/environments',
        'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies',
        'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps',
        'GET /repos/{owner}/{repo}/events',
        'GET /repos/{owner}/{repo}/forks',
        'GET /repos/{owner}/{repo}/hooks',
        'GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries',
        'GET /repos/{owner}/{repo}/invitations',
        'GET /repos/{owner}/{repo}/issues',
        'GET /repos/{owner}/{repo}/issues/comments',
        'GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions',
        'GET /repos/{owner}/{repo}/issues/events',
        'GET /repos/{owner}/{repo}/issues/{issue_number}/comments',
        'GET /repos/{owner}/{repo}/issues/{issue_number}/events',
        'GET /repos/{owner}/{repo}/issues/{issue_number}/labels',
        'GET /repos/{owner}/{repo}/issues/{issue_number}/reactions',
        'GET /repos/{owner}/{repo}/issues/{issue_number}/timeline',
        'GET /repos/{owner}/{repo}/keys',
        'GET /repos/{owner}/{repo}/labels',
        'GET /repos/{owner}/{repo}/milestones',
        'GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels',
        'GET /repos/{owner}/{repo}/notifications',
        'GET /repos/{owner}/{repo}/pages/builds',
        'GET /repos/{owner}/{repo}/projects',
        'GET /repos/{owner}/{repo}/pulls',
        'GET /repos/{owner}/{repo}/pulls/comments',
        'GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions',
        'GET /repos/{owner}/{repo}/pulls/{pull_number}/comments',
        'GET /repos/{owner}/{repo}/pulls/{pull_number}/commits',
        'GET /repos/{owner}/{repo}/pulls/{pull_number}/files',
        'GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews',
        'GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments',
        'GET /repos/{owner}/{repo}/releases',
        'GET /repos/{owner}/{repo}/releases/{release_id}/assets',
        'GET /repos/{owner}/{repo}/releases/{release_id}/reactions',
        'GET /repos/{owner}/{repo}/rules/branches/{branch}',
        'GET /repos/{owner}/{repo}/rulesets',
        'GET /repos/{owner}/{repo}/rulesets/rule-suites',
        'GET /repos/{owner}/{repo}/secret-scanning/alerts',
        'GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations',
        'GET /repos/{owner}/{repo}/security-advisories',
        'GET /repos/{owner}/{repo}/stargazers',
        'GET /repos/{owner}/{repo}/subscribers',
        'GET /repos/{owner}/{repo}/tags',
        'GET /repos/{owner}/{repo}/teams',
        'GET /repos/{owner}/{repo}/topics',
        'GET /repositories',
        'GET /repositories/{repository_id}/environments/{environment_name}/secrets',
        'GET /repositories/{repository_id}/environments/{environment_name}/variables',
        'GET /search/code',
        'GET /search/commits',
        'GET /search/issues',
        'GET /search/labels',
        'GET /search/repositories',
        'GET /search/topics',
        'GET /search/users',
        'GET /teams/{team_id}/discussions',
        'GET /teams/{team_id}/discussions/{discussion_number}/comments',
        'GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions',
        'GET /teams/{team_id}/discussions/{discussion_number}/reactions',
        'GET /teams/{team_id}/invitations',
        'GET /teams/{team_id}/members',
        'GET /teams/{team_id}/projects',
        'GET /teams/{team_id}/repos',
        'GET /teams/{team_id}/teams',
        'GET /user/blocks',
        'GET /user/codespaces',
        'GET /user/codespaces/secrets',
        'GET /user/emails',
        'GET /user/followers',
        'GET /user/following',
        'GET /user/gpg_keys',
        'GET /user/installations',
        'GET /user/installations/{installation_id}/repositories',
        'GET /user/issues',
        'GET /user/keys',
        'GET /user/marketplace_purchases',
        'GET /user/marketplace_purchases/stubbed',
        'GET /user/memberships/orgs',
        'GET /user/migrations',
        'GET /user/migrations/{migration_id}/repositories',
        'GET /user/orgs',
        'GET /user/packages',
        'GET /user/packages/{package_type}/{package_name}/versions',
        'GET /user/public_emails',
        'GET /user/repos',
        'GET /user/repository_invitations',
        'GET /user/social_accounts',
        'GET /user/ssh_signing_keys',
        'GET /user/starred',
        'GET /user/subscriptions',
        'GET /user/teams',
        'GET /users',
        'GET /users/{username}/events',
        'GET /users/{username}/events/orgs/{org}',
        'GET /users/{username}/events/public',
        'GET /users/{username}/followers',
        'GET /users/{username}/following',
        'GET /users/{username}/gists',
        'GET /users/{username}/gpg_keys',
        'GET /users/{username}/keys',
        'GET /users/{username}/orgs',
        'GET /users/{username}/packages',
        'GET /users/{username}/projects',
        'GET /users/{username}/received_events',
        'GET /users/{username}/received_events/public',
        'GET /users/{username}/repos',
        'GET /users/{username}/social_accounts',
        'GET /users/{username}/ssh_signing_keys',
        'GET /users/{username}/starred',
        'GET /users/{username}/subscriptions'
      ];
      function isPaginatingEndpoint(a) {
        if (typeof a === 'string') {
          return Wt.includes(a);
        } else {
          return false;
        }
      }
      function paginateRest(a) {
        return {
          paginate: Object.assign(paginate.bind(null, a), {
            iterator: iterator.bind(null, a)
          })
        };
      }
      paginateRest.VERSION = lt;
      0 && 0;
    },
    3418: (a) => {
      'use strict';
      var C = Object.defineProperty;
      var q = Object.getOwnPropertyDescriptor;
      var re = Object.getOwnPropertyNames;
      var ae = Object.prototype.hasOwnProperty;
      var __export = (a, q) => {
        for (var re in q) C(a, re, { get: q[re], enumerable: true });
      };
      var __copyProps = (a, Ue, lt, Pt) => {
        if ((Ue && typeof Ue === 'object') || typeof Ue === 'function') {
          for (let Wt of re(Ue))
            if (!ae.call(a, Wt) && Wt !== lt)
              C(a, Wt, {
                get: () => Ue[Wt],
                enumerable: !(Pt = q(Ue, Wt)) || Pt.enumerable
              });
        }
        return a;
      };
      var __toCommonJS = (a) =>
        __copyProps(C({}, '__esModule', { value: true }), a);
      var Ue = {};
      __export(Ue, {
        legacyRestEndpointMethods: () => legacyRestEndpointMethods,
        restEndpointMethods: () => restEndpointMethods
      });
      a.exports = __toCommonJS(Ue);
      var lt = '10.4.1';
      var Pt = {
        actions: {
          addCustomLabelsToSelfHostedRunnerForOrg: [
            'POST /orgs/{org}/actions/runners/{runner_id}/labels'
          ],
          addCustomLabelsToSelfHostedRunnerForRepo: [
            'POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels'
          ],
          addSelectedRepoToOrgSecret: [
            'PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'
          ],
          addSelectedRepoToOrgVariable: [
            'PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}'
          ],
          approveWorkflowRun: [
            'POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve'
          ],
          cancelWorkflowRun: [
            'POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel'
          ],
          createEnvironmentVariable: [
            'POST /repositories/{repository_id}/environments/{environment_name}/variables'
          ],
          createOrUpdateEnvironmentSecret: [
            'PUT /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}'
          ],
          createOrUpdateOrgSecret: [
            'PUT /orgs/{org}/actions/secrets/{secret_name}'
          ],
          createOrUpdateRepoSecret: [
            'PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}'
          ],
          createOrgVariable: ['POST /orgs/{org}/actions/variables'],
          createRegistrationTokenForOrg: [
            'POST /orgs/{org}/actions/runners/registration-token'
          ],
          createRegistrationTokenForRepo: [
            'POST /repos/{owner}/{repo}/actions/runners/registration-token'
          ],
          createRemoveTokenForOrg: [
            'POST /orgs/{org}/actions/runners/remove-token'
          ],
          createRemoveTokenForRepo: [
            'POST /repos/{owner}/{repo}/actions/runners/remove-token'
          ],
          createRepoVariable: ['POST /repos/{owner}/{repo}/actions/variables'],
          createWorkflowDispatch: [
            'POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches'
          ],
          deleteActionsCacheById: [
            'DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}'
          ],
          deleteActionsCacheByKey: [
            'DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}'
          ],
          deleteArtifact: [
            'DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}'
          ],
          deleteEnvironmentSecret: [
            'DELETE /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}'
          ],
          deleteEnvironmentVariable: [
            'DELETE /repositories/{repository_id}/environments/{environment_name}/variables/{name}'
          ],
          deleteOrgSecret: ['DELETE /orgs/{org}/actions/secrets/{secret_name}'],
          deleteOrgVariable: ['DELETE /orgs/{org}/actions/variables/{name}'],
          deleteRepoSecret: [
            'DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}'
          ],
          deleteRepoVariable: [
            'DELETE /repos/{owner}/{repo}/actions/variables/{name}'
          ],
          deleteSelfHostedRunnerFromOrg: [
            'DELETE /orgs/{org}/actions/runners/{runner_id}'
          ],
          deleteSelfHostedRunnerFromRepo: [
            'DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}'
          ],
          deleteWorkflowRun: [
            'DELETE /repos/{owner}/{repo}/actions/runs/{run_id}'
          ],
          deleteWorkflowRunLogs: [
            'DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs'
          ],
          disableSelectedRepositoryGithubActionsOrganization: [
            'DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}'
          ],
          disableWorkflow: [
            'PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable'
          ],
          downloadArtifact: [
            'GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}'
          ],
          downloadJobLogsForWorkflowRun: [
            'GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs'
          ],
          downloadWorkflowRunAttemptLogs: [
            'GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs'
          ],
          downloadWorkflowRunLogs: [
            'GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs'
          ],
          enableSelectedRepositoryGithubActionsOrganization: [
            'PUT /orgs/{org}/actions/permissions/repositories/{repository_id}'
          ],
          enableWorkflow: [
            'PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable'
          ],
          forceCancelWorkflowRun: [
            'POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel'
          ],
          generateRunnerJitconfigForOrg: [
            'POST /orgs/{org}/actions/runners/generate-jitconfig'
          ],
          generateRunnerJitconfigForRepo: [
            'POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig'
          ],
          getActionsCacheList: ['GET /repos/{owner}/{repo}/actions/caches'],
          getActionsCacheUsage: [
            'GET /repos/{owner}/{repo}/actions/cache/usage'
          ],
          getActionsCacheUsageByRepoForOrg: [
            'GET /orgs/{org}/actions/cache/usage-by-repository'
          ],
          getActionsCacheUsageForOrg: ['GET /orgs/{org}/actions/cache/usage'],
          getAllowedActionsOrganization: [
            'GET /orgs/{org}/actions/permissions/selected-actions'
          ],
          getAllowedActionsRepository: [
            'GET /repos/{owner}/{repo}/actions/permissions/selected-actions'
          ],
          getArtifact: [
            'GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}'
          ],
          getCustomOidcSubClaimForRepo: [
            'GET /repos/{owner}/{repo}/actions/oidc/customization/sub'
          ],
          getEnvironmentPublicKey: [
            'GET /repositories/{repository_id}/environments/{environment_name}/secrets/public-key'
          ],
          getEnvironmentSecret: [
            'GET /repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}'
          ],
          getEnvironmentVariable: [
            'GET /repositories/{repository_id}/environments/{environment_name}/variables/{name}'
          ],
          getGithubActionsDefaultWorkflowPermissionsOrganization: [
            'GET /orgs/{org}/actions/permissions/workflow'
          ],
          getGithubActionsDefaultWorkflowPermissionsRepository: [
            'GET /repos/{owner}/{repo}/actions/permissions/workflow'
          ],
          getGithubActionsPermissionsOrganization: [
            'GET /orgs/{org}/actions/permissions'
          ],
          getGithubActionsPermissionsRepository: [
            'GET /repos/{owner}/{repo}/actions/permissions'
          ],
          getJobForWorkflowRun: [
            'GET /repos/{owner}/{repo}/actions/jobs/{job_id}'
          ],
          getOrgPublicKey: ['GET /orgs/{org}/actions/secrets/public-key'],
          getOrgSecret: ['GET /orgs/{org}/actions/secrets/{secret_name}'],
          getOrgVariable: ['GET /orgs/{org}/actions/variables/{name}'],
          getPendingDeploymentsForRun: [
            'GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments'
          ],
          getRepoPermissions: [
            'GET /repos/{owner}/{repo}/actions/permissions',
            {},
            { renamed: ['actions', 'getGithubActionsPermissionsRepository'] }
          ],
          getRepoPublicKey: [
            'GET /repos/{owner}/{repo}/actions/secrets/public-key'
          ],
          getRepoSecret: [
            'GET /repos/{owner}/{repo}/actions/secrets/{secret_name}'
          ],
          getRepoVariable: [
            'GET /repos/{owner}/{repo}/actions/variables/{name}'
          ],
          getReviewsForRun: [
            'GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals'
          ],
          getSelfHostedRunnerForOrg: [
            'GET /orgs/{org}/actions/runners/{runner_id}'
          ],
          getSelfHostedRunnerForRepo: [
            'GET /repos/{owner}/{repo}/actions/runners/{runner_id}'
          ],
          getWorkflow: [
            'GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}'
          ],
          getWorkflowAccessToRepository: [
            'GET /repos/{owner}/{repo}/actions/permissions/access'
          ],
          getWorkflowRun: ['GET /repos/{owner}/{repo}/actions/runs/{run_id}'],
          getWorkflowRunAttempt: [
            'GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}'
          ],
          getWorkflowRunUsage: [
            'GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing'
          ],
          getWorkflowUsage: [
            'GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing'
          ],
          listArtifactsForRepo: ['GET /repos/{owner}/{repo}/actions/artifacts'],
          listEnvironmentSecrets: [
            'GET /repositories/{repository_id}/environments/{environment_name}/secrets'
          ],
          listEnvironmentVariables: [
            'GET /repositories/{repository_id}/environments/{environment_name}/variables'
          ],
          listJobsForWorkflowRun: [
            'GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs'
          ],
          listJobsForWorkflowRunAttempt: [
            'GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs'
          ],
          listLabelsForSelfHostedRunnerForOrg: [
            'GET /orgs/{org}/actions/runners/{runner_id}/labels'
          ],
          listLabelsForSelfHostedRunnerForRepo: [
            'GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels'
          ],
          listOrgSecrets: ['GET /orgs/{org}/actions/secrets'],
          listOrgVariables: ['GET /orgs/{org}/actions/variables'],
          listRepoOrganizationSecrets: [
            'GET /repos/{owner}/{repo}/actions/organization-secrets'
          ],
          listRepoOrganizationVariables: [
            'GET /repos/{owner}/{repo}/actions/organization-variables'
          ],
          listRepoSecrets: ['GET /repos/{owner}/{repo}/actions/secrets'],
          listRepoVariables: ['GET /repos/{owner}/{repo}/actions/variables'],
          listRepoWorkflows: ['GET /repos/{owner}/{repo}/actions/workflows'],
          listRunnerApplicationsForOrg: [
            'GET /orgs/{org}/actions/runners/downloads'
          ],
          listRunnerApplicationsForRepo: [
            'GET /repos/{owner}/{repo}/actions/runners/downloads'
          ],
          listSelectedReposForOrgSecret: [
            'GET /orgs/{org}/actions/secrets/{secret_name}/repositories'
          ],
          listSelectedReposForOrgVariable: [
            'GET /orgs/{org}/actions/variables/{name}/repositories'
          ],
          listSelectedRepositoriesEnabledGithubActionsOrganization: [
            'GET /orgs/{org}/actions/permissions/repositories'
          ],
          listSelfHostedRunnersForOrg: ['GET /orgs/{org}/actions/runners'],
          listSelfHostedRunnersForRepo: [
            'GET /repos/{owner}/{repo}/actions/runners'
          ],
          listWorkflowRunArtifacts: [
            'GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts'
          ],
          listWorkflowRuns: [
            'GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs'
          ],
          listWorkflowRunsForRepo: ['GET /repos/{owner}/{repo}/actions/runs'],
          reRunJobForWorkflowRun: [
            'POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun'
          ],
          reRunWorkflow: [
            'POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun'
          ],
          reRunWorkflowFailedJobs: [
            'POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs'
          ],
          removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
            'DELETE /orgs/{org}/actions/runners/{runner_id}/labels'
          ],
          removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
            'DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels'
          ],
          removeCustomLabelFromSelfHostedRunnerForOrg: [
            'DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}'
          ],
          removeCustomLabelFromSelfHostedRunnerForRepo: [
            'DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}'
          ],
          removeSelectedRepoFromOrgSecret: [
            'DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'
          ],
          removeSelectedRepoFromOrgVariable: [
            'DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}'
          ],
          reviewCustomGatesForRun: [
            'POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule'
          ],
          reviewPendingDeploymentsForRun: [
            'POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments'
          ],
          setAllowedActionsOrganization: [
            'PUT /orgs/{org}/actions/permissions/selected-actions'
          ],
          setAllowedActionsRepository: [
            'PUT /repos/{owner}/{repo}/actions/permissions/selected-actions'
          ],
          setCustomLabelsForSelfHostedRunnerForOrg: [
            'PUT /orgs/{org}/actions/runners/{runner_id}/labels'
          ],
          setCustomLabelsForSelfHostedRunnerForRepo: [
            'PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels'
          ],
          setCustomOidcSubClaimForRepo: [
            'PUT /repos/{owner}/{repo}/actions/oidc/customization/sub'
          ],
          setGithubActionsDefaultWorkflowPermissionsOrganization: [
            'PUT /orgs/{org}/actions/permissions/workflow'
          ],
          setGithubActionsDefaultWorkflowPermissionsRepository: [
            'PUT /repos/{owner}/{repo}/actions/permissions/workflow'
          ],
          setGithubActionsPermissionsOrganization: [
            'PUT /orgs/{org}/actions/permissions'
          ],
          setGithubActionsPermissionsRepository: [
            'PUT /repos/{owner}/{repo}/actions/permissions'
          ],
          setSelectedReposForOrgSecret: [
            'PUT /orgs/{org}/actions/secrets/{secret_name}/repositories'
          ],
          setSelectedReposForOrgVariable: [
            'PUT /orgs/{org}/actions/variables/{name}/repositories'
          ],
          setSelectedRepositoriesEnabledGithubActionsOrganization: [
            'PUT /orgs/{org}/actions/permissions/repositories'
          ],
          setWorkflowAccessToRepository: [
            'PUT /repos/{owner}/{repo}/actions/permissions/access'
          ],
          updateEnvironmentVariable: [
            'PATCH /repositories/{repository_id}/environments/{environment_name}/variables/{name}'
          ],
          updateOrgVariable: ['PATCH /orgs/{org}/actions/variables/{name}'],
          updateRepoVariable: [
            'PATCH /repos/{owner}/{repo}/actions/variables/{name}'
          ]
        },
        activity: {
          checkRepoIsStarredByAuthenticatedUser: [
            'GET /user/starred/{owner}/{repo}'
          ],
          deleteRepoSubscription: ['DELETE /repos/{owner}/{repo}/subscription'],
          deleteThreadSubscription: [
            'DELETE /notifications/threads/{thread_id}/subscription'
          ],
          getFeeds: ['GET /feeds'],
          getRepoSubscription: ['GET /repos/{owner}/{repo}/subscription'],
          getThread: ['GET /notifications/threads/{thread_id}'],
          getThreadSubscriptionForAuthenticatedUser: [
            'GET /notifications/threads/{thread_id}/subscription'
          ],
          listEventsForAuthenticatedUser: ['GET /users/{username}/events'],
          listNotificationsForAuthenticatedUser: ['GET /notifications'],
          listOrgEventsForAuthenticatedUser: [
            'GET /users/{username}/events/orgs/{org}'
          ],
          listPublicEvents: ['GET /events'],
          listPublicEventsForRepoNetwork: [
            'GET /networks/{owner}/{repo}/events'
          ],
          listPublicEventsForUser: ['GET /users/{username}/events/public'],
          listPublicOrgEvents: ['GET /orgs/{org}/events'],
          listReceivedEventsForUser: ['GET /users/{username}/received_events'],
          listReceivedPublicEventsForUser: [
            'GET /users/{username}/received_events/public'
          ],
          listRepoEvents: ['GET /repos/{owner}/{repo}/events'],
          listRepoNotificationsForAuthenticatedUser: [
            'GET /repos/{owner}/{repo}/notifications'
          ],
          listReposStarredByAuthenticatedUser: ['GET /user/starred'],
          listReposStarredByUser: ['GET /users/{username}/starred'],
          listReposWatchedByUser: ['GET /users/{username}/subscriptions'],
          listStargazersForRepo: ['GET /repos/{owner}/{repo}/stargazers'],
          listWatchedReposForAuthenticatedUser: ['GET /user/subscriptions'],
          listWatchersForRepo: ['GET /repos/{owner}/{repo}/subscribers'],
          markNotificationsAsRead: ['PUT /notifications'],
          markRepoNotificationsAsRead: [
            'PUT /repos/{owner}/{repo}/notifications'
          ],
          markThreadAsDone: ['DELETE /notifications/threads/{thread_id}'],
          markThreadAsRead: ['PATCH /notifications/threads/{thread_id}'],
          setRepoSubscription: ['PUT /repos/{owner}/{repo}/subscription'],
          setThreadSubscription: [
            'PUT /notifications/threads/{thread_id}/subscription'
          ],
          starRepoForAuthenticatedUser: ['PUT /user/starred/{owner}/{repo}'],
          unstarRepoForAuthenticatedUser: [
            'DELETE /user/starred/{owner}/{repo}'
          ]
        },
        apps: {
          addRepoToInstallation: [
            'PUT /user/installations/{installation_id}/repositories/{repository_id}',
            {},
            { renamed: ['apps', 'addRepoToInstallationForAuthenticatedUser'] }
          ],
          addRepoToInstallationForAuthenticatedUser: [
            'PUT /user/installations/{installation_id}/repositories/{repository_id}'
          ],
          checkToken: ['POST /applications/{client_id}/token'],
          createFromManifest: ['POST /app-manifests/{code}/conversions'],
          createInstallationAccessToken: [
            'POST /app/installations/{installation_id}/access_tokens'
          ],
          deleteAuthorization: ['DELETE /applications/{client_id}/grant'],
          deleteInstallation: ['DELETE /app/installations/{installation_id}'],
          deleteToken: ['DELETE /applications/{client_id}/token'],
          getAuthenticated: ['GET /app'],
          getBySlug: ['GET /apps/{app_slug}'],
          getInstallation: ['GET /app/installations/{installation_id}'],
          getOrgInstallation: ['GET /orgs/{org}/installation'],
          getRepoInstallation: ['GET /repos/{owner}/{repo}/installation'],
          getSubscriptionPlanForAccount: [
            'GET /marketplace_listing/accounts/{account_id}'
          ],
          getSubscriptionPlanForAccountStubbed: [
            'GET /marketplace_listing/stubbed/accounts/{account_id}'
          ],
          getUserInstallation: ['GET /users/{username}/installation'],
          getWebhookConfigForApp: ['GET /app/hook/config'],
          getWebhookDelivery: ['GET /app/hook/deliveries/{delivery_id}'],
          listAccountsForPlan: [
            'GET /marketplace_listing/plans/{plan_id}/accounts'
          ],
          listAccountsForPlanStubbed: [
            'GET /marketplace_listing/stubbed/plans/{plan_id}/accounts'
          ],
          listInstallationReposForAuthenticatedUser: [
            'GET /user/installations/{installation_id}/repositories'
          ],
          listInstallationRequestsForAuthenticatedApp: [
            'GET /app/installation-requests'
          ],
          listInstallations: ['GET /app/installations'],
          listInstallationsForAuthenticatedUser: ['GET /user/installations'],
          listPlans: ['GET /marketplace_listing/plans'],
          listPlansStubbed: ['GET /marketplace_listing/stubbed/plans'],
          listReposAccessibleToInstallation: ['GET /installation/repositories'],
          listSubscriptionsForAuthenticatedUser: [
            'GET /user/marketplace_purchases'
          ],
          listSubscriptionsForAuthenticatedUserStubbed: [
            'GET /user/marketplace_purchases/stubbed'
          ],
          listWebhookDeliveries: ['GET /app/hook/deliveries'],
          redeliverWebhookDelivery: [
            'POST /app/hook/deliveries/{delivery_id}/attempts'
          ],
          removeRepoFromInstallation: [
            'DELETE /user/installations/{installation_id}/repositories/{repository_id}',
            {},
            {
              renamed: [
                'apps',
                'removeRepoFromInstallationForAuthenticatedUser'
              ]
            }
          ],
          removeRepoFromInstallationForAuthenticatedUser: [
            'DELETE /user/installations/{installation_id}/repositories/{repository_id}'
          ],
          resetToken: ['PATCH /applications/{client_id}/token'],
          revokeInstallationAccessToken: ['DELETE /installation/token'],
          scopeToken: ['POST /applications/{client_id}/token/scoped'],
          suspendInstallation: [
            'PUT /app/installations/{installation_id}/suspended'
          ],
          unsuspendInstallation: [
            'DELETE /app/installations/{installation_id}/suspended'
          ],
          updateWebhookConfigForApp: ['PATCH /app/hook/config']
        },
        billing: {
          getGithubActionsBillingOrg: [
            'GET /orgs/{org}/settings/billing/actions'
          ],
          getGithubActionsBillingUser: [
            'GET /users/{username}/settings/billing/actions'
          ],
          getGithubPackagesBillingOrg: [
            'GET /orgs/{org}/settings/billing/packages'
          ],
          getGithubPackagesBillingUser: [
            'GET /users/{username}/settings/billing/packages'
          ],
          getSharedStorageBillingOrg: [
            'GET /orgs/{org}/settings/billing/shared-storage'
          ],
          getSharedStorageBillingUser: [
            'GET /users/{username}/settings/billing/shared-storage'
          ]
        },
        checks: {
          create: ['POST /repos/{owner}/{repo}/check-runs'],
          createSuite: ['POST /repos/{owner}/{repo}/check-suites'],
          get: ['GET /repos/{owner}/{repo}/check-runs/{check_run_id}'],
          getSuite: ['GET /repos/{owner}/{repo}/check-suites/{check_suite_id}'],
          listAnnotations: [
            'GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations'
          ],
          listForRef: ['GET /repos/{owner}/{repo}/commits/{ref}/check-runs'],
          listForSuite: [
            'GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs'
          ],
          listSuitesForRef: [
            'GET /repos/{owner}/{repo}/commits/{ref}/check-suites'
          ],
          rerequestRun: [
            'POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest'
          ],
          rerequestSuite: [
            'POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest'
          ],
          setSuitesPreferences: [
            'PATCH /repos/{owner}/{repo}/check-suites/preferences'
          ],
          update: ['PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}']
        },
        codeScanning: {
          deleteAnalysis: [
            'DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}'
          ],
          getAlert: [
            'GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}',
            {},
            { renamedParameters: { alert_id: 'alert_number' } }
          ],
          getAnalysis: [
            'GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}'
          ],
          getCodeqlDatabase: [
            'GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}'
          ],
          getDefaultSetup: [
            'GET /repos/{owner}/{repo}/code-scanning/default-setup'
          ],
          getSarif: [
            'GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}'
          ],
          listAlertInstances: [
            'GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances'
          ],
          listAlertsForOrg: ['GET /orgs/{org}/code-scanning/alerts'],
          listAlertsForRepo: ['GET /repos/{owner}/{repo}/code-scanning/alerts'],
          listAlertsInstances: [
            'GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances',
            {},
            { renamed: ['codeScanning', 'listAlertInstances'] }
          ],
          listCodeqlDatabases: [
            'GET /repos/{owner}/{repo}/code-scanning/codeql/databases'
          ],
          listRecentAnalyses: [
            'GET /repos/{owner}/{repo}/code-scanning/analyses'
          ],
          updateAlert: [
            'PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}'
          ],
          updateDefaultSetup: [
            'PATCH /repos/{owner}/{repo}/code-scanning/default-setup'
          ],
          uploadSarif: ['POST /repos/{owner}/{repo}/code-scanning/sarifs']
        },
        codesOfConduct: {
          getAllCodesOfConduct: ['GET /codes_of_conduct'],
          getConductCode: ['GET /codes_of_conduct/{key}']
        },
        codespaces: {
          addRepositoryForSecretForAuthenticatedUser: [
            'PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}'
          ],
          addSelectedRepoToOrgSecret: [
            'PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}'
          ],
          checkPermissionsForDevcontainer: [
            'GET /repos/{owner}/{repo}/codespaces/permissions_check'
          ],
          codespaceMachinesForAuthenticatedUser: [
            'GET /user/codespaces/{codespace_name}/machines'
          ],
          createForAuthenticatedUser: ['POST /user/codespaces'],
          createOrUpdateOrgSecret: [
            'PUT /orgs/{org}/codespaces/secrets/{secret_name}'
          ],
          createOrUpdateRepoSecret: [
            'PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}'
          ],
          createOrUpdateSecretForAuthenticatedUser: [
            'PUT /user/codespaces/secrets/{secret_name}'
          ],
          createWithPrForAuthenticatedUser: [
            'POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces'
          ],
          createWithRepoForAuthenticatedUser: [
            'POST /repos/{owner}/{repo}/codespaces'
          ],
          deleteForAuthenticatedUser: [
            'DELETE /user/codespaces/{codespace_name}'
          ],
          deleteFromOrganization: [
            'DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}'
          ],
          deleteOrgSecret: [
            'DELETE /orgs/{org}/codespaces/secrets/{secret_name}'
          ],
          deleteRepoSecret: [
            'DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}'
          ],
          deleteSecretForAuthenticatedUser: [
            'DELETE /user/codespaces/secrets/{secret_name}'
          ],
          exportForAuthenticatedUser: [
            'POST /user/codespaces/{codespace_name}/exports'
          ],
          getCodespacesForUserInOrg: [
            'GET /orgs/{org}/members/{username}/codespaces'
          ],
          getExportDetailsForAuthenticatedUser: [
            'GET /user/codespaces/{codespace_name}/exports/{export_id}'
          ],
          getForAuthenticatedUser: ['GET /user/codespaces/{codespace_name}'],
          getOrgPublicKey: ['GET /orgs/{org}/codespaces/secrets/public-key'],
          getOrgSecret: ['GET /orgs/{org}/codespaces/secrets/{secret_name}'],
          getPublicKeyForAuthenticatedUser: [
            'GET /user/codespaces/secrets/public-key'
          ],
          getRepoPublicKey: [
            'GET /repos/{owner}/{repo}/codespaces/secrets/public-key'
          ],
          getRepoSecret: [
            'GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}'
          ],
          getSecretForAuthenticatedUser: [
            'GET /user/codespaces/secrets/{secret_name}'
          ],
          listDevcontainersInRepositoryForAuthenticatedUser: [
            'GET /repos/{owner}/{repo}/codespaces/devcontainers'
          ],
          listForAuthenticatedUser: ['GET /user/codespaces'],
          listInOrganization: [
            'GET /orgs/{org}/codespaces',
            {},
            { renamedParameters: { org_id: 'org' } }
          ],
          listInRepositoryForAuthenticatedUser: [
            'GET /repos/{owner}/{repo}/codespaces'
          ],
          listOrgSecrets: ['GET /orgs/{org}/codespaces/secrets'],
          listRepoSecrets: ['GET /repos/{owner}/{repo}/codespaces/secrets'],
          listRepositoriesForSecretForAuthenticatedUser: [
            'GET /user/codespaces/secrets/{secret_name}/repositories'
          ],
          listSecretsForAuthenticatedUser: ['GET /user/codespaces/secrets'],
          listSelectedReposForOrgSecret: [
            'GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories'
          ],
          preFlightWithRepoForAuthenticatedUser: [
            'GET /repos/{owner}/{repo}/codespaces/new'
          ],
          publishForAuthenticatedUser: [
            'POST /user/codespaces/{codespace_name}/publish'
          ],
          removeRepositoryForSecretForAuthenticatedUser: [
            'DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}'
          ],
          removeSelectedRepoFromOrgSecret: [
            'DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}'
          ],
          repoMachinesForAuthenticatedUser: [
            'GET /repos/{owner}/{repo}/codespaces/machines'
          ],
          setRepositoriesForSecretForAuthenticatedUser: [
            'PUT /user/codespaces/secrets/{secret_name}/repositories'
          ],
          setSelectedReposForOrgSecret: [
            'PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories'
          ],
          startForAuthenticatedUser: [
            'POST /user/codespaces/{codespace_name}/start'
          ],
          stopForAuthenticatedUser: [
            'POST /user/codespaces/{codespace_name}/stop'
          ],
          stopInOrganization: [
            'POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop'
          ],
          updateForAuthenticatedUser: [
            'PATCH /user/codespaces/{codespace_name}'
          ]
        },
        copilot: {
          addCopilotSeatsForTeams: [
            'POST /orgs/{org}/copilot/billing/selected_teams'
          ],
          addCopilotSeatsForUsers: [
            'POST /orgs/{org}/copilot/billing/selected_users'
          ],
          cancelCopilotSeatAssignmentForTeams: [
            'DELETE /orgs/{org}/copilot/billing/selected_teams'
          ],
          cancelCopilotSeatAssignmentForUsers: [
            'DELETE /orgs/{org}/copilot/billing/selected_users'
          ],
          getCopilotOrganizationDetails: ['GET /orgs/{org}/copilot/billing'],
          getCopilotSeatDetailsForUser: [
            'GET /orgs/{org}/members/{username}/copilot'
          ],
          listCopilotSeats: ['GET /orgs/{org}/copilot/billing/seats']
        },
        dependabot: {
          addSelectedRepoToOrgSecret: [
            'PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}'
          ],
          createOrUpdateOrgSecret: [
            'PUT /orgs/{org}/dependabot/secrets/{secret_name}'
          ],
          createOrUpdateRepoSecret: [
            'PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}'
          ],
          deleteOrgSecret: [
            'DELETE /orgs/{org}/dependabot/secrets/{secret_name}'
          ],
          deleteRepoSecret: [
            'DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}'
          ],
          getAlert: [
            'GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}'
          ],
          getOrgPublicKey: ['GET /orgs/{org}/dependabot/secrets/public-key'],
          getOrgSecret: ['GET /orgs/{org}/dependabot/secrets/{secret_name}'],
          getRepoPublicKey: [
            'GET /repos/{owner}/{repo}/dependabot/secrets/public-key'
          ],
          getRepoSecret: [
            'GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}'
          ],
          listAlertsForEnterprise: [
            'GET /enterprises/{enterprise}/dependabot/alerts'
          ],
          listAlertsForOrg: ['GET /orgs/{org}/dependabot/alerts'],
          listAlertsForRepo: ['GET /repos/{owner}/{repo}/dependabot/alerts'],
          listOrgSecrets: ['GET /orgs/{org}/dependabot/secrets'],
          listRepoSecrets: ['GET /repos/{owner}/{repo}/dependabot/secrets'],
          listSelectedReposForOrgSecret: [
            'GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories'
          ],
          removeSelectedRepoFromOrgSecret: [
            'DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}'
          ],
          setSelectedReposForOrgSecret: [
            'PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories'
          ],
          updateAlert: [
            'PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}'
          ]
        },
        dependencyGraph: {
          createRepositorySnapshot: [
            'POST /repos/{owner}/{repo}/dependency-graph/snapshots'
          ],
          diffRange: [
            'GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}'
          ],
          exportSbom: ['GET /repos/{owner}/{repo}/dependency-graph/sbom']
        },
        emojis: { get: ['GET /emojis'] },
        gists: {
          checkIsStarred: ['GET /gists/{gist_id}/star'],
          create: ['POST /gists'],
          createComment: ['POST /gists/{gist_id}/comments'],
          delete: ['DELETE /gists/{gist_id}'],
          deleteComment: ['DELETE /gists/{gist_id}/comments/{comment_id}'],
          fork: ['POST /gists/{gist_id}/forks'],
          get: ['GET /gists/{gist_id}'],
          getComment: ['GET /gists/{gist_id}/comments/{comment_id}'],
          getRevision: ['GET /gists/{gist_id}/{sha}'],
          list: ['GET /gists'],
          listComments: ['GET /gists/{gist_id}/comments'],
          listCommits: ['GET /gists/{gist_id}/commits'],
          listForUser: ['GET /users/{username}/gists'],
          listForks: ['GET /gists/{gist_id}/forks'],
          listPublic: ['GET /gists/public'],
          listStarred: ['GET /gists/starred'],
          star: ['PUT /gists/{gist_id}/star'],
          unstar: ['DELETE /gists/{gist_id}/star'],
          update: ['PATCH /gists/{gist_id}'],
          updateComment: ['PATCH /gists/{gist_id}/comments/{comment_id}']
        },
        git: {
          createBlob: ['POST /repos/{owner}/{repo}/git/blobs'],
          createCommit: ['POST /repos/{owner}/{repo}/git/commits'],
          createRef: ['POST /repos/{owner}/{repo}/git/refs'],
          createTag: ['POST /repos/{owner}/{repo}/git/tags'],
          createTree: ['POST /repos/{owner}/{repo}/git/trees'],
          deleteRef: ['DELETE /repos/{owner}/{repo}/git/refs/{ref}'],
          getBlob: ['GET /repos/{owner}/{repo}/git/blobs/{file_sha}'],
          getCommit: ['GET /repos/{owner}/{repo}/git/commits/{commit_sha}'],
          getRef: ['GET /repos/{owner}/{repo}/git/ref/{ref}'],
          getTag: ['GET /repos/{owner}/{repo}/git/tags/{tag_sha}'],
          getTree: ['GET /repos/{owner}/{repo}/git/trees/{tree_sha}'],
          listMatchingRefs: [
            'GET /repos/{owner}/{repo}/git/matching-refs/{ref}'
          ],
          updateRef: ['PATCH /repos/{owner}/{repo}/git/refs/{ref}']
        },
        gitignore: {
          getAllTemplates: ['GET /gitignore/templates'],
          getTemplate: ['GET /gitignore/templates/{name}']
        },
        interactions: {
          getRestrictionsForAuthenticatedUser: ['GET /user/interaction-limits'],
          getRestrictionsForOrg: ['GET /orgs/{org}/interaction-limits'],
          getRestrictionsForRepo: [
            'GET /repos/{owner}/{repo}/interaction-limits'
          ],
          getRestrictionsForYourPublicRepos: [
            'GET /user/interaction-limits',
            {},
            { renamed: ['interactions', 'getRestrictionsForAuthenticatedUser'] }
          ],
          removeRestrictionsForAuthenticatedUser: [
            'DELETE /user/interaction-limits'
          ],
          removeRestrictionsForOrg: ['DELETE /orgs/{org}/interaction-limits'],
          removeRestrictionsForRepo: [
            'DELETE /repos/{owner}/{repo}/interaction-limits'
          ],
          removeRestrictionsForYourPublicRepos: [
            'DELETE /user/interaction-limits',
            {},
            {
              renamed: [
                'interactions',
                'removeRestrictionsForAuthenticatedUser'
              ]
            }
          ],
          setRestrictionsForAuthenticatedUser: ['PUT /user/interaction-limits'],
          setRestrictionsForOrg: ['PUT /orgs/{org}/interaction-limits'],
          setRestrictionsForRepo: [
            'PUT /repos/{owner}/{repo}/interaction-limits'
          ],
          setRestrictionsForYourPublicRepos: [
            'PUT /user/interaction-limits',
            {},
            { renamed: ['interactions', 'setRestrictionsForAuthenticatedUser'] }
          ]
        },
        issues: {
          addAssignees: [
            'POST /repos/{owner}/{repo}/issues/{issue_number}/assignees'
          ],
          addLabels: [
            'POST /repos/{owner}/{repo}/issues/{issue_number}/labels'
          ],
          checkUserCanBeAssigned: [
            'GET /repos/{owner}/{repo}/assignees/{assignee}'
          ],
          checkUserCanBeAssignedToIssue: [
            'GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}'
          ],
          create: ['POST /repos/{owner}/{repo}/issues'],
          createComment: [
            'POST /repos/{owner}/{repo}/issues/{issue_number}/comments'
          ],
          createLabel: ['POST /repos/{owner}/{repo}/labels'],
          createMilestone: ['POST /repos/{owner}/{repo}/milestones'],
          deleteComment: [
            'DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}'
          ],
          deleteLabel: ['DELETE /repos/{owner}/{repo}/labels/{name}'],
          deleteMilestone: [
            'DELETE /repos/{owner}/{repo}/milestones/{milestone_number}'
          ],
          get: ['GET /repos/{owner}/{repo}/issues/{issue_number}'],
          getComment: [
            'GET /repos/{owner}/{repo}/issues/comments/{comment_id}'
          ],
          getEvent: ['GET /repos/{owner}/{repo}/issues/events/{event_id}'],
          getLabel: ['GET /repos/{owner}/{repo}/labels/{name}'],
          getMilestone: [
            'GET /repos/{owner}/{repo}/milestones/{milestone_number}'
          ],
          list: ['GET /issues'],
          listAssignees: ['GET /repos/{owner}/{repo}/assignees'],
          listComments: [
            'GET /repos/{owner}/{repo}/issues/{issue_number}/comments'
          ],
          listCommentsForRepo: ['GET /repos/{owner}/{repo}/issues/comments'],
          listEvents: [
            'GET /repos/{owner}/{repo}/issues/{issue_number}/events'
          ],
          listEventsForRepo: ['GET /repos/{owner}/{repo}/issues/events'],
          listEventsForTimeline: [
            'GET /repos/{owner}/{repo}/issues/{issue_number}/timeline'
          ],
          listForAuthenticatedUser: ['GET /user/issues'],
          listForOrg: ['GET /orgs/{org}/issues'],
          listForRepo: ['GET /repos/{owner}/{repo}/issues'],
          listLabelsForMilestone: [
            'GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels'
          ],
          listLabelsForRepo: ['GET /repos/{owner}/{repo}/labels'],
          listLabelsOnIssue: [
            'GET /repos/{owner}/{repo}/issues/{issue_number}/labels'
          ],
          listMilestones: ['GET /repos/{owner}/{repo}/milestones'],
          lock: ['PUT /repos/{owner}/{repo}/issues/{issue_number}/lock'],
          removeAllLabels: [
            'DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels'
          ],
          removeAssignees: [
            'DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees'
          ],
          removeLabel: [
            'DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}'
          ],
          setLabels: ['PUT /repos/{owner}/{repo}/issues/{issue_number}/labels'],
          unlock: ['DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock'],
          update: ['PATCH /repos/{owner}/{repo}/issues/{issue_number}'],
          updateComment: [
            'PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}'
          ],
          updateLabel: ['PATCH /repos/{owner}/{repo}/labels/{name}'],
          updateMilestone: [
            'PATCH /repos/{owner}/{repo}/milestones/{milestone_number}'
          ]
        },
        licenses: {
          get: ['GET /licenses/{license}'],
          getAllCommonlyUsed: ['GET /licenses'],
          getForRepo: ['GET /repos/{owner}/{repo}/license']
        },
        markdown: {
          render: ['POST /markdown'],
          renderRaw: [
            'POST /markdown/raw',
            { headers: { 'content-type': 'text/plain; charset=utf-8' } }
          ]
        },
        meta: {
          get: ['GET /meta'],
          getAllVersions: ['GET /versions'],
          getOctocat: ['GET /octocat'],
          getZen: ['GET /zen'],
          root: ['GET /']
        },
        migrations: {
          cancelImport: [
            'DELETE /repos/{owner}/{repo}/import',
            {},
            {
              deprecated:
                'octokit.rest.migrations.cancelImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#cancel-an-import'
            }
          ],
          deleteArchiveForAuthenticatedUser: [
            'DELETE /user/migrations/{migration_id}/archive'
          ],
          deleteArchiveForOrg: [
            'DELETE /orgs/{org}/migrations/{migration_id}/archive'
          ],
          downloadArchiveForOrg: [
            'GET /orgs/{org}/migrations/{migration_id}/archive'
          ],
          getArchiveForAuthenticatedUser: [
            'GET /user/migrations/{migration_id}/archive'
          ],
          getCommitAuthors: [
            'GET /repos/{owner}/{repo}/import/authors',
            {},
            {
              deprecated:
                'octokit.rest.migrations.getCommitAuthors() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-commit-authors'
            }
          ],
          getImportStatus: [
            'GET /repos/{owner}/{repo}/import',
            {},
            {
              deprecated:
                'octokit.rest.migrations.getImportStatus() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-an-import-status'
            }
          ],
          getLargeFiles: [
            'GET /repos/{owner}/{repo}/import/large_files',
            {},
            {
              deprecated:
                'octokit.rest.migrations.getLargeFiles() is deprecated, see https://docs.github.com/rest/migrations/source-imports#get-large-files'
            }
          ],
          getStatusForAuthenticatedUser: [
            'GET /user/migrations/{migration_id}'
          ],
          getStatusForOrg: ['GET /orgs/{org}/migrations/{migration_id}'],
          listForAuthenticatedUser: ['GET /user/migrations'],
          listForOrg: ['GET /orgs/{org}/migrations'],
          listReposForAuthenticatedUser: [
            'GET /user/migrations/{migration_id}/repositories'
          ],
          listReposForOrg: [
            'GET /orgs/{org}/migrations/{migration_id}/repositories'
          ],
          listReposForUser: [
            'GET /user/migrations/{migration_id}/repositories',
            {},
            { renamed: ['migrations', 'listReposForAuthenticatedUser'] }
          ],
          mapCommitAuthor: [
            'PATCH /repos/{owner}/{repo}/import/authors/{author_id}',
            {},
            {
              deprecated:
                'octokit.rest.migrations.mapCommitAuthor() is deprecated, see https://docs.github.com/rest/migrations/source-imports#map-a-commit-author'
            }
          ],
          setLfsPreference: [
            'PATCH /repos/{owner}/{repo}/import/lfs',
            {},
            {
              deprecated:
                'octokit.rest.migrations.setLfsPreference() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference'
            }
          ],
          startForAuthenticatedUser: ['POST /user/migrations'],
          startForOrg: ['POST /orgs/{org}/migrations'],
          startImport: [
            'PUT /repos/{owner}/{repo}/import',
            {},
            {
              deprecated:
                'octokit.rest.migrations.startImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#start-an-import'
            }
          ],
          unlockRepoForAuthenticatedUser: [
            'DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock'
          ],
          unlockRepoForOrg: [
            'DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock'
          ],
          updateImport: [
            'PATCH /repos/{owner}/{repo}/import',
            {},
            {
              deprecated:
                'octokit.rest.migrations.updateImport() is deprecated, see https://docs.github.com/rest/migrations/source-imports#update-an-import'
            }
          ]
        },
        oidc: {
          getOidcCustomSubTemplateForOrg: [
            'GET /orgs/{org}/actions/oidc/customization/sub'
          ],
          updateOidcCustomSubTemplateForOrg: [
            'PUT /orgs/{org}/actions/oidc/customization/sub'
          ]
        },
        orgs: {
          addSecurityManagerTeam: [
            'PUT /orgs/{org}/security-managers/teams/{team_slug}'
          ],
          assignTeamToOrgRole: [
            'PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}'
          ],
          assignUserToOrgRole: [
            'PUT /orgs/{org}/organization-roles/users/{username}/{role_id}'
          ],
          blockUser: ['PUT /orgs/{org}/blocks/{username}'],
          cancelInvitation: ['DELETE /orgs/{org}/invitations/{invitation_id}'],
          checkBlockedUser: ['GET /orgs/{org}/blocks/{username}'],
          checkMembershipForUser: ['GET /orgs/{org}/members/{username}'],
          checkPublicMembershipForUser: [
            'GET /orgs/{org}/public_members/{username}'
          ],
          convertMemberToOutsideCollaborator: [
            'PUT /orgs/{org}/outside_collaborators/{username}'
          ],
          createCustomOrganizationRole: ['POST /orgs/{org}/organization-roles'],
          createInvitation: ['POST /orgs/{org}/invitations'],
          createOrUpdateCustomProperties: [
            'PATCH /orgs/{org}/properties/schema'
          ],
          createOrUpdateCustomPropertiesValuesForRepos: [
            'PATCH /orgs/{org}/properties/values'
          ],
          createOrUpdateCustomProperty: [
            'PUT /orgs/{org}/properties/schema/{custom_property_name}'
          ],
          createWebhook: ['POST /orgs/{org}/hooks'],
          delete: ['DELETE /orgs/{org}'],
          deleteCustomOrganizationRole: [
            'DELETE /orgs/{org}/organization-roles/{role_id}'
          ],
          deleteWebhook: ['DELETE /orgs/{org}/hooks/{hook_id}'],
          enableOrDisableSecurityProductOnAllOrgRepos: [
            'POST /orgs/{org}/{security_product}/{enablement}'
          ],
          get: ['GET /orgs/{org}'],
          getAllCustomProperties: ['GET /orgs/{org}/properties/schema'],
          getCustomProperty: [
            'GET /orgs/{org}/properties/schema/{custom_property_name}'
          ],
          getMembershipForAuthenticatedUser: [
            'GET /user/memberships/orgs/{org}'
          ],
          getMembershipForUser: ['GET /orgs/{org}/memberships/{username}'],
          getOrgRole: ['GET /orgs/{org}/organization-roles/{role_id}'],
          getWebhook: ['GET /orgs/{org}/hooks/{hook_id}'],
          getWebhookConfigForOrg: ['GET /orgs/{org}/hooks/{hook_id}/config'],
          getWebhookDelivery: [
            'GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}'
          ],
          list: ['GET /organizations'],
          listAppInstallations: ['GET /orgs/{org}/installations'],
          listBlockedUsers: ['GET /orgs/{org}/blocks'],
          listCustomPropertiesValuesForRepos: [
            'GET /orgs/{org}/properties/values'
          ],
          listFailedInvitations: ['GET /orgs/{org}/failed_invitations'],
          listForAuthenticatedUser: ['GET /user/orgs'],
          listForUser: ['GET /users/{username}/orgs'],
          listInvitationTeams: [
            'GET /orgs/{org}/invitations/{invitation_id}/teams'
          ],
          listMembers: ['GET /orgs/{org}/members'],
          listMembershipsForAuthenticatedUser: ['GET /user/memberships/orgs'],
          listOrgRoleTeams: [
            'GET /orgs/{org}/organization-roles/{role_id}/teams'
          ],
          listOrgRoleUsers: [
            'GET /orgs/{org}/organization-roles/{role_id}/users'
          ],
          listOrgRoles: ['GET /orgs/{org}/organization-roles'],
          listOrganizationFineGrainedPermissions: [
            'GET /orgs/{org}/organization-fine-grained-permissions'
          ],
          listOutsideCollaborators: ['GET /orgs/{org}/outside_collaborators'],
          listPatGrantRepositories: [
            'GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories'
          ],
          listPatGrantRequestRepositories: [
            'GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories'
          ],
          listPatGrantRequests: [
            'GET /orgs/{org}/personal-access-token-requests'
          ],
          listPatGrants: ['GET /orgs/{org}/personal-access-tokens'],
          listPendingInvitations: ['GET /orgs/{org}/invitations'],
          listPublicMembers: ['GET /orgs/{org}/public_members'],
          listSecurityManagerTeams: ['GET /orgs/{org}/security-managers'],
          listWebhookDeliveries: ['GET /orgs/{org}/hooks/{hook_id}/deliveries'],
          listWebhooks: ['GET /orgs/{org}/hooks'],
          patchCustomOrganizationRole: [
            'PATCH /orgs/{org}/organization-roles/{role_id}'
          ],
          pingWebhook: ['POST /orgs/{org}/hooks/{hook_id}/pings'],
          redeliverWebhookDelivery: [
            'POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts'
          ],
          removeCustomProperty: [
            'DELETE /orgs/{org}/properties/schema/{custom_property_name}'
          ],
          removeMember: ['DELETE /orgs/{org}/members/{username}'],
          removeMembershipForUser: [
            'DELETE /orgs/{org}/memberships/{username}'
          ],
          removeOutsideCollaborator: [
            'DELETE /orgs/{org}/outside_collaborators/{username}'
          ],
          removePublicMembershipForAuthenticatedUser: [
            'DELETE /orgs/{org}/public_members/{username}'
          ],
          removeSecurityManagerTeam: [
            'DELETE /orgs/{org}/security-managers/teams/{team_slug}'
          ],
          reviewPatGrantRequest: [
            'POST /orgs/{org}/personal-access-token-requests/{pat_request_id}'
          ],
          reviewPatGrantRequestsInBulk: [
            'POST /orgs/{org}/personal-access-token-requests'
          ],
          revokeAllOrgRolesTeam: [
            'DELETE /orgs/{org}/organization-roles/teams/{team_slug}'
          ],
          revokeAllOrgRolesUser: [
            'DELETE /orgs/{org}/organization-roles/users/{username}'
          ],
          revokeOrgRoleTeam: [
            'DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}'
          ],
          revokeOrgRoleUser: [
            'DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}'
          ],
          setMembershipForUser: ['PUT /orgs/{org}/memberships/{username}'],
          setPublicMembershipForAuthenticatedUser: [
            'PUT /orgs/{org}/public_members/{username}'
          ],
          unblockUser: ['DELETE /orgs/{org}/blocks/{username}'],
          update: ['PATCH /orgs/{org}'],
          updateMembershipForAuthenticatedUser: [
            'PATCH /user/memberships/orgs/{org}'
          ],
          updatePatAccess: ['POST /orgs/{org}/personal-access-tokens/{pat_id}'],
          updatePatAccesses: ['POST /orgs/{org}/personal-access-tokens'],
          updateWebhook: ['PATCH /orgs/{org}/hooks/{hook_id}'],
          updateWebhookConfigForOrg: [
            'PATCH /orgs/{org}/hooks/{hook_id}/config'
          ]
        },
        packages: {
          deletePackageForAuthenticatedUser: [
            'DELETE /user/packages/{package_type}/{package_name}'
          ],
          deletePackageForOrg: [
            'DELETE /orgs/{org}/packages/{package_type}/{package_name}'
          ],
          deletePackageForUser: [
            'DELETE /users/{username}/packages/{package_type}/{package_name}'
          ],
          deletePackageVersionForAuthenticatedUser: [
            'DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}'
          ],
          deletePackageVersionForOrg: [
            'DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}'
          ],
          deletePackageVersionForUser: [
            'DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}'
          ],
          getAllPackageVersionsForAPackageOwnedByAnOrg: [
            'GET /orgs/{org}/packages/{package_type}/{package_name}/versions',
            {},
            {
              renamed: ['packages', 'getAllPackageVersionsForPackageOwnedByOrg']
            }
          ],
          getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
            'GET /user/packages/{package_type}/{package_name}/versions',
            {},
            {
              renamed: [
                'packages',
                'getAllPackageVersionsForPackageOwnedByAuthenticatedUser'
              ]
            }
          ],
          getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
            'GET /user/packages/{package_type}/{package_name}/versions'
          ],
          getAllPackageVersionsForPackageOwnedByOrg: [
            'GET /orgs/{org}/packages/{package_type}/{package_name}/versions'
          ],
          getAllPackageVersionsForPackageOwnedByUser: [
            'GET /users/{username}/packages/{package_type}/{package_name}/versions'
          ],
          getPackageForAuthenticatedUser: [
            'GET /user/packages/{package_type}/{package_name}'
          ],
          getPackageForOrganization: [
            'GET /orgs/{org}/packages/{package_type}/{package_name}'
          ],
          getPackageForUser: [
            'GET /users/{username}/packages/{package_type}/{package_name}'
          ],
          getPackageVersionForAuthenticatedUser: [
            'GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}'
          ],
          getPackageVersionForOrganization: [
            'GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}'
          ],
          getPackageVersionForUser: [
            'GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}'
          ],
          listDockerMigrationConflictingPackagesForAuthenticatedUser: [
            'GET /user/docker/conflicts'
          ],
          listDockerMigrationConflictingPackagesForOrganization: [
            'GET /orgs/{org}/docker/conflicts'
          ],
          listDockerMigrationConflictingPackagesForUser: [
            'GET /users/{username}/docker/conflicts'
          ],
          listPackagesForAuthenticatedUser: ['GET /user/packages'],
          listPackagesForOrganization: ['GET /orgs/{org}/packages'],
          listPackagesForUser: ['GET /users/{username}/packages'],
          restorePackageForAuthenticatedUser: [
            'POST /user/packages/{package_type}/{package_name}/restore{?token}'
          ],
          restorePackageForOrg: [
            'POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}'
          ],
          restorePackageForUser: [
            'POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}'
          ],
          restorePackageVersionForAuthenticatedUser: [
            'POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'
          ],
          restorePackageVersionForOrg: [
            'POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'
          ],
          restorePackageVersionForUser: [
            'POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'
          ]
        },
        projects: {
          addCollaborator: [
            'PUT /projects/{project_id}/collaborators/{username}'
          ],
          createCard: ['POST /projects/columns/{column_id}/cards'],
          createColumn: ['POST /projects/{project_id}/columns'],
          createForAuthenticatedUser: ['POST /user/projects'],
          createForOrg: ['POST /orgs/{org}/projects'],
          createForRepo: ['POST /repos/{owner}/{repo}/projects'],
          delete: ['DELETE /projects/{project_id}'],
          deleteCard: ['DELETE /projects/columns/cards/{card_id}'],
          deleteColumn: ['DELETE /projects/columns/{column_id}'],
          get: ['GET /projects/{project_id}'],
          getCard: ['GET /projects/columns/cards/{card_id}'],
          getColumn: ['GET /projects/columns/{column_id}'],
          getPermissionForUser: [
            'GET /projects/{project_id}/collaborators/{username}/permission'
          ],
          listCards: ['GET /projects/columns/{column_id}/cards'],
          listCollaborators: ['GET /projects/{project_id}/collaborators'],
          listColumns: ['GET /projects/{project_id}/columns'],
          listForOrg: ['GET /orgs/{org}/projects'],
          listForRepo: ['GET /repos/{owner}/{repo}/projects'],
          listForUser: ['GET /users/{username}/projects'],
          moveCard: ['POST /projects/columns/cards/{card_id}/moves'],
          moveColumn: ['POST /projects/columns/{column_id}/moves'],
          removeCollaborator: [
            'DELETE /projects/{project_id}/collaborators/{username}'
          ],
          update: ['PATCH /projects/{project_id}'],
          updateCard: ['PATCH /projects/columns/cards/{card_id}'],
          updateColumn: ['PATCH /projects/columns/{column_id}']
        },
        pulls: {
          checkIfMerged: [
            'GET /repos/{owner}/{repo}/pulls/{pull_number}/merge'
          ],
          create: ['POST /repos/{owner}/{repo}/pulls'],
          createReplyForReviewComment: [
            'POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies'
          ],
          createReview: [
            'POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews'
          ],
          createReviewComment: [
            'POST /repos/{owner}/{repo}/pulls/{pull_number}/comments'
          ],
          deletePendingReview: [
            'DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'
          ],
          deleteReviewComment: [
            'DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}'
          ],
          dismissReview: [
            'PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals'
          ],
          get: ['GET /repos/{owner}/{repo}/pulls/{pull_number}'],
          getReview: [
            'GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'
          ],
          getReviewComment: [
            'GET /repos/{owner}/{repo}/pulls/comments/{comment_id}'
          ],
          list: ['GET /repos/{owner}/{repo}/pulls'],
          listCommentsForReview: [
            'GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments'
          ],
          listCommits: [
            'GET /repos/{owner}/{repo}/pulls/{pull_number}/commits'
          ],
          listFiles: ['GET /repos/{owner}/{repo}/pulls/{pull_number}/files'],
          listRequestedReviewers: [
            'GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'
          ],
          listReviewComments: [
            'GET /repos/{owner}/{repo}/pulls/{pull_number}/comments'
          ],
          listReviewCommentsForRepo: [
            'GET /repos/{owner}/{repo}/pulls/comments'
          ],
          listReviews: [
            'GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews'
          ],
          merge: ['PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge'],
          removeRequestedReviewers: [
            'DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'
          ],
          requestReviewers: [
            'POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'
          ],
          submitReview: [
            'POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events'
          ],
          update: ['PATCH /repos/{owner}/{repo}/pulls/{pull_number}'],
          updateBranch: [
            'PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch'
          ],
          updateReview: [
            'PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'
          ],
          updateReviewComment: [
            'PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}'
          ]
        },
        rateLimit: { get: ['GET /rate_limit'] },
        reactions: {
          createForCommitComment: [
            'POST /repos/{owner}/{repo}/comments/{comment_id}/reactions'
          ],
          createForIssue: [
            'POST /repos/{owner}/{repo}/issues/{issue_number}/reactions'
          ],
          createForIssueComment: [
            'POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'
          ],
          createForPullRequestReviewComment: [
            'POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'
          ],
          createForRelease: [
            'POST /repos/{owner}/{repo}/releases/{release_id}/reactions'
          ],
          createForTeamDiscussionCommentInOrg: [
            'POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'
          ],
          createForTeamDiscussionInOrg: [
            'POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'
          ],
          deleteForCommitComment: [
            'DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}'
          ],
          deleteForIssue: [
            'DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}'
          ],
          deleteForIssueComment: [
            'DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}'
          ],
          deleteForPullRequestComment: [
            'DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}'
          ],
          deleteForRelease: [
            'DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}'
          ],
          deleteForTeamDiscussion: [
            'DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}'
          ],
          deleteForTeamDiscussionComment: [
            'DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}'
          ],
          listForCommitComment: [
            'GET /repos/{owner}/{repo}/comments/{comment_id}/reactions'
          ],
          listForIssue: [
            'GET /repos/{owner}/{repo}/issues/{issue_number}/reactions'
          ],
          listForIssueComment: [
            'GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'
          ],
          listForPullRequestReviewComment: [
            'GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'
          ],
          listForRelease: [
            'GET /repos/{owner}/{repo}/releases/{release_id}/reactions'
          ],
          listForTeamDiscussionCommentInOrg: [
            'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'
          ],
          listForTeamDiscussionInOrg: [
            'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'
          ]
        },
        repos: {
          acceptInvitation: [
            'PATCH /user/repository_invitations/{invitation_id}',
            {},
            { renamed: ['repos', 'acceptInvitationForAuthenticatedUser'] }
          ],
          acceptInvitationForAuthenticatedUser: [
            'PATCH /user/repository_invitations/{invitation_id}'
          ],
          addAppAccessRestrictions: [
            'POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
            {},
            { mapToData: 'apps' }
          ],
          addCollaborator: [
            'PUT /repos/{owner}/{repo}/collaborators/{username}'
          ],
          addStatusCheckContexts: [
            'POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
            {},
            { mapToData: 'contexts' }
          ],
          addTeamAccessRestrictions: [
            'POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
            {},
            { mapToData: 'teams' }
          ],
          addUserAccessRestrictions: [
            'POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
            {},
            { mapToData: 'users' }
          ],
          cancelPagesDeployment: [
            'POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel'
          ],
          checkAutomatedSecurityFixes: [
            'GET /repos/{owner}/{repo}/automated-security-fixes'
          ],
          checkCollaborator: [
            'GET /repos/{owner}/{repo}/collaborators/{username}'
          ],
          checkVulnerabilityAlerts: [
            'GET /repos/{owner}/{repo}/vulnerability-alerts'
          ],
          codeownersErrors: ['GET /repos/{owner}/{repo}/codeowners/errors'],
          compareCommits: ['GET /repos/{owner}/{repo}/compare/{base}...{head}'],
          compareCommitsWithBasehead: [
            'GET /repos/{owner}/{repo}/compare/{basehead}'
          ],
          createAutolink: ['POST /repos/{owner}/{repo}/autolinks'],
          createCommitComment: [
            'POST /repos/{owner}/{repo}/commits/{commit_sha}/comments'
          ],
          createCommitSignatureProtection: [
            'POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'
          ],
          createCommitStatus: ['POST /repos/{owner}/{repo}/statuses/{sha}'],
          createDeployKey: ['POST /repos/{owner}/{repo}/keys'],
          createDeployment: ['POST /repos/{owner}/{repo}/deployments'],
          createDeploymentBranchPolicy: [
            'POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies'
          ],
          createDeploymentProtectionRule: [
            'POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules'
          ],
          createDeploymentStatus: [
            'POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses'
          ],
          createDispatchEvent: ['POST /repos/{owner}/{repo}/dispatches'],
          createForAuthenticatedUser: ['POST /user/repos'],
          createFork: ['POST /repos/{owner}/{repo}/forks'],
          createInOrg: ['POST /orgs/{org}/repos'],
          createOrUpdateCustomPropertiesValues: [
            'PATCH /repos/{owner}/{repo}/properties/values'
          ],
          createOrUpdateEnvironment: [
            'PUT /repos/{owner}/{repo}/environments/{environment_name}'
          ],
          createOrUpdateFileContents: [
            'PUT /repos/{owner}/{repo}/contents/{path}'
          ],
          createOrgRuleset: ['POST /orgs/{org}/rulesets'],
          createPagesDeployment: [
            'POST /repos/{owner}/{repo}/pages/deployments'
          ],
          createPagesSite: ['POST /repos/{owner}/{repo}/pages'],
          createRelease: ['POST /repos/{owner}/{repo}/releases'],
          createRepoRuleset: ['POST /repos/{owner}/{repo}/rulesets'],
          createTagProtection: ['POST /repos/{owner}/{repo}/tags/protection'],
          createUsingTemplate: [
            'POST /repos/{template_owner}/{template_repo}/generate'
          ],
          createWebhook: ['POST /repos/{owner}/{repo}/hooks'],
          declineInvitation: [
            'DELETE /user/repository_invitations/{invitation_id}',
            {},
            { renamed: ['repos', 'declineInvitationForAuthenticatedUser'] }
          ],
          declineInvitationForAuthenticatedUser: [
            'DELETE /user/repository_invitations/{invitation_id}'
          ],
          delete: ['DELETE /repos/{owner}/{repo}'],
          deleteAccessRestrictions: [
            'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions'
          ],
          deleteAdminBranchProtection: [
            'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'
          ],
          deleteAnEnvironment: [
            'DELETE /repos/{owner}/{repo}/environments/{environment_name}'
          ],
          deleteAutolink: [
            'DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}'
          ],
          deleteBranchProtection: [
            'DELETE /repos/{owner}/{repo}/branches/{branch}/protection'
          ],
          deleteCommitComment: [
            'DELETE /repos/{owner}/{repo}/comments/{comment_id}'
          ],
          deleteCommitSignatureProtection: [
            'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'
          ],
          deleteDeployKey: ['DELETE /repos/{owner}/{repo}/keys/{key_id}'],
          deleteDeployment: [
            'DELETE /repos/{owner}/{repo}/deployments/{deployment_id}'
          ],
          deleteDeploymentBranchPolicy: [
            'DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}'
          ],
          deleteFile: ['DELETE /repos/{owner}/{repo}/contents/{path}'],
          deleteInvitation: [
            'DELETE /repos/{owner}/{repo}/invitations/{invitation_id}'
          ],
          deleteOrgRuleset: ['DELETE /orgs/{org}/rulesets/{ruleset_id}'],
          deletePagesSite: ['DELETE /repos/{owner}/{repo}/pages'],
          deletePullRequestReviewProtection: [
            'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'
          ],
          deleteRelease: ['DELETE /repos/{owner}/{repo}/releases/{release_id}'],
          deleteReleaseAsset: [
            'DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}'
          ],
          deleteRepoRuleset: [
            'DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}'
          ],
          deleteTagProtection: [
            'DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}'
          ],
          deleteWebhook: ['DELETE /repos/{owner}/{repo}/hooks/{hook_id}'],
          disableAutomatedSecurityFixes: [
            'DELETE /repos/{owner}/{repo}/automated-security-fixes'
          ],
          disableDeploymentProtectionRule: [
            'DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}'
          ],
          disablePrivateVulnerabilityReporting: [
            'DELETE /repos/{owner}/{repo}/private-vulnerability-reporting'
          ],
          disableVulnerabilityAlerts: [
            'DELETE /repos/{owner}/{repo}/vulnerability-alerts'
          ],
          downloadArchive: [
            'GET /repos/{owner}/{repo}/zipball/{ref}',
            {},
            { renamed: ['repos', 'downloadZipballArchive'] }
          ],
          downloadTarballArchive: ['GET /repos/{owner}/{repo}/tarball/{ref}'],
          downloadZipballArchive: ['GET /repos/{owner}/{repo}/zipball/{ref}'],
          enableAutomatedSecurityFixes: [
            'PUT /repos/{owner}/{repo}/automated-security-fixes'
          ],
          enablePrivateVulnerabilityReporting: [
            'PUT /repos/{owner}/{repo}/private-vulnerability-reporting'
          ],
          enableVulnerabilityAlerts: [
            'PUT /repos/{owner}/{repo}/vulnerability-alerts'
          ],
          generateReleaseNotes: [
            'POST /repos/{owner}/{repo}/releases/generate-notes'
          ],
          get: ['GET /repos/{owner}/{repo}'],
          getAccessRestrictions: [
            'GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions'
          ],
          getAdminBranchProtection: [
            'GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'
          ],
          getAllDeploymentProtectionRules: [
            'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules'
          ],
          getAllEnvironments: ['GET /repos/{owner}/{repo}/environments'],
          getAllStatusCheckContexts: [
            'GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'
          ],
          getAllTopics: ['GET /repos/{owner}/{repo}/topics'],
          getAppsWithAccessToProtectedBranch: [
            'GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'
          ],
          getAutolink: ['GET /repos/{owner}/{repo}/autolinks/{autolink_id}'],
          getBranch: ['GET /repos/{owner}/{repo}/branches/{branch}'],
          getBranchProtection: [
            'GET /repos/{owner}/{repo}/branches/{branch}/protection'
          ],
          getBranchRules: ['GET /repos/{owner}/{repo}/rules/branches/{branch}'],
          getClones: ['GET /repos/{owner}/{repo}/traffic/clones'],
          getCodeFrequencyStats: [
            'GET /repos/{owner}/{repo}/stats/code_frequency'
          ],
          getCollaboratorPermissionLevel: [
            'GET /repos/{owner}/{repo}/collaborators/{username}/permission'
          ],
          getCombinedStatusForRef: [
            'GET /repos/{owner}/{repo}/commits/{ref}/status'
          ],
          getCommit: ['GET /repos/{owner}/{repo}/commits/{ref}'],
          getCommitActivityStats: [
            'GET /repos/{owner}/{repo}/stats/commit_activity'
          ],
          getCommitComment: ['GET /repos/{owner}/{repo}/comments/{comment_id}'],
          getCommitSignatureProtection: [
            'GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'
          ],
          getCommunityProfileMetrics: [
            'GET /repos/{owner}/{repo}/community/profile'
          ],
          getContent: ['GET /repos/{owner}/{repo}/contents/{path}'],
          getContributorsStats: [
            'GET /repos/{owner}/{repo}/stats/contributors'
          ],
          getCustomDeploymentProtectionRule: [
            'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}'
          ],
          getCustomPropertiesValues: [
            'GET /repos/{owner}/{repo}/properties/values'
          ],
          getDeployKey: ['GET /repos/{owner}/{repo}/keys/{key_id}'],
          getDeployment: [
            'GET /repos/{owner}/{repo}/deployments/{deployment_id}'
          ],
          getDeploymentBranchPolicy: [
            'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}'
          ],
          getDeploymentStatus: [
            'GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}'
          ],
          getEnvironment: [
            'GET /repos/{owner}/{repo}/environments/{environment_name}'
          ],
          getLatestPagesBuild: [
            'GET /repos/{owner}/{repo}/pages/builds/latest'
          ],
          getLatestRelease: ['GET /repos/{owner}/{repo}/releases/latest'],
          getOrgRuleSuite: [
            'GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}'
          ],
          getOrgRuleSuites: ['GET /orgs/{org}/rulesets/rule-suites'],
          getOrgRuleset: ['GET /orgs/{org}/rulesets/{ruleset_id}'],
          getOrgRulesets: ['GET /orgs/{org}/rulesets'],
          getPages: ['GET /repos/{owner}/{repo}/pages'],
          getPagesBuild: ['GET /repos/{owner}/{repo}/pages/builds/{build_id}'],
          getPagesDeployment: [
            'GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}'
          ],
          getPagesHealthCheck: ['GET /repos/{owner}/{repo}/pages/health'],
          getParticipationStats: [
            'GET /repos/{owner}/{repo}/stats/participation'
          ],
          getPullRequestReviewProtection: [
            'GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'
          ],
          getPunchCardStats: ['GET /repos/{owner}/{repo}/stats/punch_card'],
          getReadme: ['GET /repos/{owner}/{repo}/readme'],
          getReadmeInDirectory: ['GET /repos/{owner}/{repo}/readme/{dir}'],
          getRelease: ['GET /repos/{owner}/{repo}/releases/{release_id}'],
          getReleaseAsset: [
            'GET /repos/{owner}/{repo}/releases/assets/{asset_id}'
          ],
          getReleaseByTag: ['GET /repos/{owner}/{repo}/releases/tags/{tag}'],
          getRepoRuleSuite: [
            'GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}'
          ],
          getRepoRuleSuites: ['GET /repos/{owner}/{repo}/rulesets/rule-suites'],
          getRepoRuleset: ['GET /repos/{owner}/{repo}/rulesets/{ruleset_id}'],
          getRepoRulesets: ['GET /repos/{owner}/{repo}/rulesets'],
          getStatusChecksProtection: [
            'GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'
          ],
          getTeamsWithAccessToProtectedBranch: [
            'GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'
          ],
          getTopPaths: ['GET /repos/{owner}/{repo}/traffic/popular/paths'],
          getTopReferrers: [
            'GET /repos/{owner}/{repo}/traffic/popular/referrers'
          ],
          getUsersWithAccessToProtectedBranch: [
            'GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'
          ],
          getViews: ['GET /repos/{owner}/{repo}/traffic/views'],
          getWebhook: ['GET /repos/{owner}/{repo}/hooks/{hook_id}'],
          getWebhookConfigForRepo: [
            'GET /repos/{owner}/{repo}/hooks/{hook_id}/config'
          ],
          getWebhookDelivery: [
            'GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}'
          ],
          listActivities: ['GET /repos/{owner}/{repo}/activity'],
          listAutolinks: ['GET /repos/{owner}/{repo}/autolinks'],
          listBranches: ['GET /repos/{owner}/{repo}/branches'],
          listBranchesForHeadCommit: [
            'GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head'
          ],
          listCollaborators: ['GET /repos/{owner}/{repo}/collaborators'],
          listCommentsForCommit: [
            'GET /repos/{owner}/{repo}/commits/{commit_sha}/comments'
          ],
          listCommitCommentsForRepo: ['GET /repos/{owner}/{repo}/comments'],
          listCommitStatusesForRef: [
            'GET /repos/{owner}/{repo}/commits/{ref}/statuses'
          ],
          listCommits: ['GET /repos/{owner}/{repo}/commits'],
          listContributors: ['GET /repos/{owner}/{repo}/contributors'],
          listCustomDeploymentRuleIntegrations: [
            'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps'
          ],
          listDeployKeys: ['GET /repos/{owner}/{repo}/keys'],
          listDeploymentBranchPolicies: [
            'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies'
          ],
          listDeploymentStatuses: [
            'GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses'
          ],
          listDeployments: ['GET /repos/{owner}/{repo}/deployments'],
          listForAuthenticatedUser: ['GET /user/repos'],
          listForOrg: ['GET /orgs/{org}/repos'],
          listForUser: ['GET /users/{username}/repos'],
          listForks: ['GET /repos/{owner}/{repo}/forks'],
          listInvitations: ['GET /repos/{owner}/{repo}/invitations'],
          listInvitationsForAuthenticatedUser: [
            'GET /user/repository_invitations'
          ],
          listLanguages: ['GET /repos/{owner}/{repo}/languages'],
          listPagesBuilds: ['GET /repos/{owner}/{repo}/pages/builds'],
          listPublic: ['GET /repositories'],
          listPullRequestsAssociatedWithCommit: [
            'GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls'
          ],
          listReleaseAssets: [
            'GET /repos/{owner}/{repo}/releases/{release_id}/assets'
          ],
          listReleases: ['GET /repos/{owner}/{repo}/releases'],
          listTagProtection: ['GET /repos/{owner}/{repo}/tags/protection'],
          listTags: ['GET /repos/{owner}/{repo}/tags'],
          listTeams: ['GET /repos/{owner}/{repo}/teams'],
          listWebhookDeliveries: [
            'GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries'
          ],
          listWebhooks: ['GET /repos/{owner}/{repo}/hooks'],
          merge: ['POST /repos/{owner}/{repo}/merges'],
          mergeUpstream: ['POST /repos/{owner}/{repo}/merge-upstream'],
          pingWebhook: ['POST /repos/{owner}/{repo}/hooks/{hook_id}/pings'],
          redeliverWebhookDelivery: [
            'POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts'
          ],
          removeAppAccessRestrictions: [
            'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
            {},
            { mapToData: 'apps' }
          ],
          removeCollaborator: [
            'DELETE /repos/{owner}/{repo}/collaborators/{username}'
          ],
          removeStatusCheckContexts: [
            'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
            {},
            { mapToData: 'contexts' }
          ],
          removeStatusCheckProtection: [
            'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'
          ],
          removeTeamAccessRestrictions: [
            'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
            {},
            { mapToData: 'teams' }
          ],
          removeUserAccessRestrictions: [
            'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
            {},
            { mapToData: 'users' }
          ],
          renameBranch: ['POST /repos/{owner}/{repo}/branches/{branch}/rename'],
          replaceAllTopics: ['PUT /repos/{owner}/{repo}/topics'],
          requestPagesBuild: ['POST /repos/{owner}/{repo}/pages/builds'],
          setAdminBranchProtection: [
            'POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'
          ],
          setAppAccessRestrictions: [
            'PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
            {},
            { mapToData: 'apps' }
          ],
          setStatusCheckContexts: [
            'PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
            {},
            { mapToData: 'contexts' }
          ],
          setTeamAccessRestrictions: [
            'PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
            {},
            { mapToData: 'teams' }
          ],
          setUserAccessRestrictions: [
            'PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
            {},
            { mapToData: 'users' }
          ],
          testPushWebhook: ['POST /repos/{owner}/{repo}/hooks/{hook_id}/tests'],
          transfer: ['POST /repos/{owner}/{repo}/transfer'],
          update: ['PATCH /repos/{owner}/{repo}'],
          updateBranchProtection: [
            'PUT /repos/{owner}/{repo}/branches/{branch}/protection'
          ],
          updateCommitComment: [
            'PATCH /repos/{owner}/{repo}/comments/{comment_id}'
          ],
          updateDeploymentBranchPolicy: [
            'PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}'
          ],
          updateInformationAboutPagesSite: ['PUT /repos/{owner}/{repo}/pages'],
          updateInvitation: [
            'PATCH /repos/{owner}/{repo}/invitations/{invitation_id}'
          ],
          updateOrgRuleset: ['PUT /orgs/{org}/rulesets/{ruleset_id}'],
          updatePullRequestReviewProtection: [
            'PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'
          ],
          updateRelease: ['PATCH /repos/{owner}/{repo}/releases/{release_id}'],
          updateReleaseAsset: [
            'PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}'
          ],
          updateRepoRuleset: [
            'PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}'
          ],
          updateStatusCheckPotection: [
            'PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks',
            {},
            { renamed: ['repos', 'updateStatusCheckProtection'] }
          ],
          updateStatusCheckProtection: [
            'PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'
          ],
          updateWebhook: ['PATCH /repos/{owner}/{repo}/hooks/{hook_id}'],
          updateWebhookConfigForRepo: [
            'PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config'
          ],
          uploadReleaseAsset: [
            'POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}',
            { baseUrl: 'https://uploads.github.com' }
          ]
        },
        search: {
          code: ['GET /search/code'],
          commits: ['GET /search/commits'],
          issuesAndPullRequests: ['GET /search/issues'],
          labels: ['GET /search/labels'],
          repos: ['GET /search/repositories'],
          topics: ['GET /search/topics'],
          users: ['GET /search/users']
        },
        secretScanning: {
          getAlert: [
            'GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}'
          ],
          listAlertsForEnterprise: [
            'GET /enterprises/{enterprise}/secret-scanning/alerts'
          ],
          listAlertsForOrg: ['GET /orgs/{org}/secret-scanning/alerts'],
          listAlertsForRepo: [
            'GET /repos/{owner}/{repo}/secret-scanning/alerts'
          ],
          listLocationsForAlert: [
            'GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations'
          ],
          updateAlert: [
            'PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}'
          ]
        },
        securityAdvisories: {
          createFork: [
            'POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks'
          ],
          createPrivateVulnerabilityReport: [
            'POST /repos/{owner}/{repo}/security-advisories/reports'
          ],
          createRepositoryAdvisory: [
            'POST /repos/{owner}/{repo}/security-advisories'
          ],
          createRepositoryAdvisoryCveRequest: [
            'POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve'
          ],
          getGlobalAdvisory: ['GET /advisories/{ghsa_id}'],
          getRepositoryAdvisory: [
            'GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}'
          ],
          listGlobalAdvisories: ['GET /advisories'],
          listOrgRepositoryAdvisories: ['GET /orgs/{org}/security-advisories'],
          listRepositoryAdvisories: [
            'GET /repos/{owner}/{repo}/security-advisories'
          ],
          updateRepositoryAdvisory: [
            'PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}'
          ]
        },
        teams: {
          addOrUpdateMembershipForUserInOrg: [
            'PUT /orgs/{org}/teams/{team_slug}/memberships/{username}'
          ],
          addOrUpdateProjectPermissionsInOrg: [
            'PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}'
          ],
          addOrUpdateRepoPermissionsInOrg: [
            'PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'
          ],
          checkPermissionsForProjectInOrg: [
            'GET /orgs/{org}/teams/{team_slug}/projects/{project_id}'
          ],
          checkPermissionsForRepoInOrg: [
            'GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'
          ],
          create: ['POST /orgs/{org}/teams'],
          createDiscussionCommentInOrg: [
            'POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'
          ],
          createDiscussionInOrg: [
            'POST /orgs/{org}/teams/{team_slug}/discussions'
          ],
          deleteDiscussionCommentInOrg: [
            'DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'
          ],
          deleteDiscussionInOrg: [
            'DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'
          ],
          deleteInOrg: ['DELETE /orgs/{org}/teams/{team_slug}'],
          getByName: ['GET /orgs/{org}/teams/{team_slug}'],
          getDiscussionCommentInOrg: [
            'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'
          ],
          getDiscussionInOrg: [
            'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'
          ],
          getMembershipForUserInOrg: [
            'GET /orgs/{org}/teams/{team_slug}/memberships/{username}'
          ],
          list: ['GET /orgs/{org}/teams'],
          listChildInOrg: ['GET /orgs/{org}/teams/{team_slug}/teams'],
          listDiscussionCommentsInOrg: [
            'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'
          ],
          listDiscussionsInOrg: [
            'GET /orgs/{org}/teams/{team_slug}/discussions'
          ],
          listForAuthenticatedUser: ['GET /user/teams'],
          listMembersInOrg: ['GET /orgs/{org}/teams/{team_slug}/members'],
          listPendingInvitationsInOrg: [
            'GET /orgs/{org}/teams/{team_slug}/invitations'
          ],
          listProjectsInOrg: ['GET /orgs/{org}/teams/{team_slug}/projects'],
          listReposInOrg: ['GET /orgs/{org}/teams/{team_slug}/repos'],
          removeMembershipForUserInOrg: [
            'DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}'
          ],
          removeProjectInOrg: [
            'DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}'
          ],
          removeRepoInOrg: [
            'DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'
          ],
          updateDiscussionCommentInOrg: [
            'PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'
          ],
          updateDiscussionInOrg: [
            'PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'
          ],
          updateInOrg: ['PATCH /orgs/{org}/teams/{team_slug}']
        },
        users: {
          addEmailForAuthenticated: [
            'POST /user/emails',
            {},
            { renamed: ['users', 'addEmailForAuthenticatedUser'] }
          ],
          addEmailForAuthenticatedUser: ['POST /user/emails'],
          addSocialAccountForAuthenticatedUser: ['POST /user/social_accounts'],
          block: ['PUT /user/blocks/{username}'],
          checkBlocked: ['GET /user/blocks/{username}'],
          checkFollowingForUser: [
            'GET /users/{username}/following/{target_user}'
          ],
          checkPersonIsFollowedByAuthenticated: [
            'GET /user/following/{username}'
          ],
          createGpgKeyForAuthenticated: [
            'POST /user/gpg_keys',
            {},
            { renamed: ['users', 'createGpgKeyForAuthenticatedUser'] }
          ],
          createGpgKeyForAuthenticatedUser: ['POST /user/gpg_keys'],
          createPublicSshKeyForAuthenticated: [
            'POST /user/keys',
            {},
            { renamed: ['users', 'createPublicSshKeyForAuthenticatedUser'] }
          ],
          createPublicSshKeyForAuthenticatedUser: ['POST /user/keys'],
          createSshSigningKeyForAuthenticatedUser: [
            'POST /user/ssh_signing_keys'
          ],
          deleteEmailForAuthenticated: [
            'DELETE /user/emails',
            {},
            { renamed: ['users', 'deleteEmailForAuthenticatedUser'] }
          ],
          deleteEmailForAuthenticatedUser: ['DELETE /user/emails'],
          deleteGpgKeyForAuthenticated: [
            'DELETE /user/gpg_keys/{gpg_key_id}',
            {},
            { renamed: ['users', 'deleteGpgKeyForAuthenticatedUser'] }
          ],
          deleteGpgKeyForAuthenticatedUser: [
            'DELETE /user/gpg_keys/{gpg_key_id}'
          ],
          deletePublicSshKeyForAuthenticated: [
            'DELETE /user/keys/{key_id}',
            {},
            { renamed: ['users', 'deletePublicSshKeyForAuthenticatedUser'] }
          ],
          deletePublicSshKeyForAuthenticatedUser: [
            'DELETE /user/keys/{key_id}'
          ],
          deleteSocialAccountForAuthenticatedUser: [
            'DELETE /user/social_accounts'
          ],
          deleteSshSigningKeyForAuthenticatedUser: [
            'DELETE /user/ssh_signing_keys/{ssh_signing_key_id}'
          ],
          follow: ['PUT /user/following/{username}'],
          getAuthenticated: ['GET /user'],
          getByUsername: ['GET /users/{username}'],
          getContextForUser: ['GET /users/{username}/hovercard'],
          getGpgKeyForAuthenticated: [
            'GET /user/gpg_keys/{gpg_key_id}',
            {},
            { renamed: ['users', 'getGpgKeyForAuthenticatedUser'] }
          ],
          getGpgKeyForAuthenticatedUser: ['GET /user/gpg_keys/{gpg_key_id}'],
          getPublicSshKeyForAuthenticated: [
            'GET /user/keys/{key_id}',
            {},
            { renamed: ['users', 'getPublicSshKeyForAuthenticatedUser'] }
          ],
          getPublicSshKeyForAuthenticatedUser: ['GET /user/keys/{key_id}'],
          getSshSigningKeyForAuthenticatedUser: [
            'GET /user/ssh_signing_keys/{ssh_signing_key_id}'
          ],
          list: ['GET /users'],
          listBlockedByAuthenticated: [
            'GET /user/blocks',
            {},
            { renamed: ['users', 'listBlockedByAuthenticatedUser'] }
          ],
          listBlockedByAuthenticatedUser: ['GET /user/blocks'],
          listEmailsForAuthenticated: [
            'GET /user/emails',
            {},
            { renamed: ['users', 'listEmailsForAuthenticatedUser'] }
          ],
          listEmailsForAuthenticatedUser: ['GET /user/emails'],
          listFollowedByAuthenticated: [
            'GET /user/following',
            {},
            { renamed: ['users', 'listFollowedByAuthenticatedUser'] }
          ],
          listFollowedByAuthenticatedUser: ['GET /user/following'],
          listFollowersForAuthenticatedUser: ['GET /user/followers'],
          listFollowersForUser: ['GET /users/{username}/followers'],
          listFollowingForUser: ['GET /users/{username}/following'],
          listGpgKeysForAuthenticated: [
            'GET /user/gpg_keys',
            {},
            { renamed: ['users', 'listGpgKeysForAuthenticatedUser'] }
          ],
          listGpgKeysForAuthenticatedUser: ['GET /user/gpg_keys'],
          listGpgKeysForUser: ['GET /users/{username}/gpg_keys'],
          listPublicEmailsForAuthenticated: [
            'GET /user/public_emails',
            {},
            { renamed: ['users', 'listPublicEmailsForAuthenticatedUser'] }
          ],
          listPublicEmailsForAuthenticatedUser: ['GET /user/public_emails'],
          listPublicKeysForUser: ['GET /users/{username}/keys'],
          listPublicSshKeysForAuthenticated: [
            'GET /user/keys',
            {},
            { renamed: ['users', 'listPublicSshKeysForAuthenticatedUser'] }
          ],
          listPublicSshKeysForAuthenticatedUser: ['GET /user/keys'],
          listSocialAccountsForAuthenticatedUser: ['GET /user/social_accounts'],
          listSocialAccountsForUser: ['GET /users/{username}/social_accounts'],
          listSshSigningKeysForAuthenticatedUser: [
            'GET /user/ssh_signing_keys'
          ],
          listSshSigningKeysForUser: ['GET /users/{username}/ssh_signing_keys'],
          setPrimaryEmailVisibilityForAuthenticated: [
            'PATCH /user/email/visibility',
            {},
            {
              renamed: [
                'users',
                'setPrimaryEmailVisibilityForAuthenticatedUser'
              ]
            }
          ],
          setPrimaryEmailVisibilityForAuthenticatedUser: [
            'PATCH /user/email/visibility'
          ],
          unblock: ['DELETE /user/blocks/{username}'],
          unfollow: ['DELETE /user/following/{username}'],
          updateAuthenticated: ['PATCH /user']
        }
      };
      var Wt = Pt;
      var Ar = new Map();
      for (const [a, C] of Object.entries(Wt)) {
        for (const [q, re] of Object.entries(C)) {
          const [C, ae, Ue] = re;
          const [lt, Pt] = C.split(/ /);
          const Wt = Object.assign({ method: lt, url: Pt }, ae);
          if (!Ar.has(a)) {
            Ar.set(a, new Map());
          }
          Ar.get(a).set(q, {
            scope: a,
            methodName: q,
            endpointDefaults: Wt,
            decorations: Ue
          });
        }
      }
      var Er = {
        has({ scope: a }, C) {
          return Ar.get(a).has(C);
        },
        getOwnPropertyDescriptor(a, C) {
          return {
            value: this.get(a, C),
            configurable: true,
            writable: true,
            enumerable: true
          };
        },
        defineProperty(a, C, q) {
          Object.defineProperty(a.cache, C, q);
          return true;
        },
        deleteProperty(a, C) {
          delete a.cache[C];
          return true;
        },
        ownKeys({ scope: a }) {
          return [...Ar.get(a).keys()];
        },
        set(a, C, q) {
          return (a.cache[C] = q);
        },
        get({ octokit: a, scope: C, cache: q }, re) {
          if (q[re]) {
            return q[re];
          }
          const ae = Ar.get(C).get(re);
          if (!ae) {
            return void 0;
          }
          const { endpointDefaults: Ue, decorations: lt } = ae;
          if (lt) {
            q[re] = decorate(a, C, re, Ue, lt);
          } else {
            q[re] = a.request.defaults(Ue);
          }
          return q[re];
        }
      };
      function endpointsToMethods(a) {
        const C = {};
        for (const q of Ar.keys()) {
          C[q] = new Proxy({ octokit: a, scope: q, cache: {} }, Er);
        }
        return C;
      }
      function decorate(a, C, q, re, ae) {
        const Ue = a.request.defaults(re);
        function withDecorations(...re) {
          let lt = Ue.endpoint.merge(...re);
          if (ae.mapToData) {
            lt = Object.assign({}, lt, {
              data: lt[ae.mapToData],
              [ae.mapToData]: void 0
            });
            return Ue(lt);
          }
          if (ae.renamed) {
            const [re, Ue] = ae.renamed;
            a.log.warn(
              `octokit.${C}.${q}() has been renamed to octokit.${re}.${Ue}()`
            );
          }
          if (ae.deprecated) {
            a.log.warn(ae.deprecated);
          }
          if (ae.renamedParameters) {
            const lt = Ue.endpoint.merge(...re);
            for (const [re, Ue] of Object.entries(ae.renamedParameters)) {
              if (re in lt) {
                a.log.warn(
                  `"${re}" parameter is deprecated for "octokit.${C}.${q}()". Use "${Ue}" instead`
                );
                if (!(Ue in lt)) {
                  lt[Ue] = lt[re];
                }
                delete lt[re];
              }
            }
            return Ue(lt);
          }
          return Ue(...re);
        }
        return Object.assign(withDecorations, Ue);
      }
      function restEndpointMethods(a) {
        const C = endpointsToMethods(a);
        return { rest: C };
      }
      restEndpointMethods.VERSION = lt;
      function legacyRestEndpointMethods(a) {
        const C = endpointsToMethods(a);
        return { ...C, rest: C };
      }
      legacyRestEndpointMethods.VERSION = lt;
      0 && 0;
    },
    1023: (a, C, q) => {
      'use strict';
      var re = Object.create;
      var ae = Object.defineProperty;
      var Ue = Object.getOwnPropertyDescriptor;
      var lt = Object.getOwnPropertyNames;
      var Pt = Object.getPrototypeOf;
      var Wt = Object.prototype.hasOwnProperty;
      var __export = (a, C) => {
        for (var q in C) ae(a, q, { get: C[q], enumerable: true });
      };
      var __copyProps = (a, C, q, re) => {
        if ((C && typeof C === 'object') || typeof C === 'function') {
          for (let Pt of lt(C))
            if (!Wt.call(a, Pt) && Pt !== q)
              ae(a, Pt, {
                get: () => C[Pt],
                enumerable: !(re = Ue(C, Pt)) || re.enumerable
              });
        }
        return a;
      };
      var __toESM = (a, C, q) => (
        (q = a != null ? re(Pt(a)) : {}),
        __copyProps(
          C || !a || !a.__esModule
            ? ae(q, 'default', { value: a, enumerable: true })
            : q,
          a
        )
      );
      var __toCommonJS = (a) =>
        __copyProps(ae({}, '__esModule', { value: true }), a);
      var Ar = {};
      __export(Ar, { RequestError: () => kr });
      a.exports = __toCommonJS(Ar);
      var Er = q(64);
      var Ir = __toESM(q(9472));
      var Br = (0, Ir.default)((a) => console.warn(a));
      var Qr = (0, Ir.default)((a) => console.warn(a));
      var kr = class extends Error {
        constructor(a, C, q) {
          super(a);
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          }
          this.name = 'HttpError';
          this.status = C;
          let re;
          if ('headers' in q && typeof q.headers !== 'undefined') {
            re = q.headers;
          }
          if ('response' in q) {
            this.response = q.response;
            re = q.response.headers;
          }
          const ae = Object.assign({}, q.request);
          if (q.request.headers.authorization) {
            ae.headers = Object.assign({}, q.request.headers, {
              authorization: q.request.headers.authorization.replace(
                / .*$/,
                ' [REDACTED]'
              )
            });
          }
          ae.url = ae.url
            .replace(/\bclient_secret=\w+/g, 'client_secret=[REDACTED]')
            .replace(/\baccess_token=\w+/g, 'access_token=[REDACTED]');
          this.request = ae;
          Object.defineProperty(this, 'code', {
            get() {
              Br(
                new Er.Deprecation(
                  '[@octokit/request-error] `error.code` is deprecated, use `error.status`.'
                )
              );
              return C;
            }
          });
          Object.defineProperty(this, 'headers', {
            get() {
              Qr(
                new Er.Deprecation(
                  '[@octokit/request-error] `error.headers` is deprecated, use `error.response.headers`.'
                )
              );
              return re || {};
            }
          });
        }
      };
      0 && 0;
    },
    4970: (a, C, q) => {
      'use strict';
      var re = Object.defineProperty;
      var ae = Object.getOwnPropertyDescriptor;
      var Ue = Object.getOwnPropertyNames;
      var lt = Object.prototype.hasOwnProperty;
      var __export = (a, C) => {
        for (var q in C) re(a, q, { get: C[q], enumerable: true });
      };
      var __copyProps = (a, C, q, Pt) => {
        if ((C && typeof C === 'object') || typeof C === 'function') {
          for (let Wt of Ue(C))
            if (!lt.call(a, Wt) && Wt !== q)
              re(a, Wt, {
                get: () => C[Wt],
                enumerable: !(Pt = ae(C, Wt)) || Pt.enumerable
              });
        }
        return a;
      };
      var __toCommonJS = (a) =>
        __copyProps(re({}, '__esModule', { value: true }), a);
      var Pt = {};
      __export(Pt, { request: () => Br });
      a.exports = __toCommonJS(Pt);
      var Wt = q(794);
      var Ar = q(5592);
      var Er = '8.4.0';
      function isPlainObject(a) {
        if (typeof a !== 'object' || a === null) return false;
        if (Object.prototype.toString.call(a) !== '[object Object]')
          return false;
        const C = Object.getPrototypeOf(a);
        if (C === null) return true;
        const q =
          Object.prototype.hasOwnProperty.call(C, 'constructor') &&
          C.constructor;
        return (
          typeof q === 'function' &&
          q instanceof q &&
          Function.prototype.call(q) === Function.prototype.call(a)
        );
      }
      var Ir = q(1023);
      function getBufferResponse(a) {
        return a.arrayBuffer();
      }
      function fetchWrapper(a) {
        var C, q, re, ae;
        const Ue = a.request && a.request.log ? a.request.log : console;
        const lt =
          ((C = a.request) == null ? void 0 : C.parseSuccessResponseBody) !==
          false;
        if (isPlainObject(a.body) || Array.isArray(a.body)) {
          a.body = JSON.stringify(a.body);
        }
        let Pt = {};
        let Wt;
        let Ar;
        let { fetch: Er } = globalThis;
        if ((q = a.request) == null ? void 0 : q.fetch) {
          Er = a.request.fetch;
        }
        if (!Er) {
          throw new Error(
            'fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing'
          );
        }
        return Er(a.url, {
          method: a.method,
          body: a.body,
          redirect: (re = a.request) == null ? void 0 : re.redirect,
          headers: a.headers,
          signal: (ae = a.request) == null ? void 0 : ae.signal,
          ...(a.body && { duplex: 'half' })
        })
          .then(async (C) => {
            Ar = C.url;
            Wt = C.status;
            for (const a of C.headers) {
              Pt[a[0]] = a[1];
            }
            if ('deprecation' in Pt) {
              const C =
                Pt.link && Pt.link.match(/<([^>]+)>; rel="deprecation"/);
              const q = C && C.pop();
              Ue.warn(
                `[@octokit/request] "${a.method} ${a.url}" is deprecated. It is scheduled to be removed on ${Pt.sunset}${q ? `. See ${q}` : ''}`
              );
            }
            if (Wt === 204 || Wt === 205) {
              return;
            }
            if (a.method === 'HEAD') {
              if (Wt < 400) {
                return;
              }
              throw new Ir.RequestError(C.statusText, Wt, {
                response: { url: Ar, status: Wt, headers: Pt, data: void 0 },
                request: a
              });
            }
            if (Wt === 304) {
              throw new Ir.RequestError('Not modified', Wt, {
                response: {
                  url: Ar,
                  status: Wt,
                  headers: Pt,
                  data: await getResponseData(C)
                },
                request: a
              });
            }
            if (Wt >= 400) {
              const q = await getResponseData(C);
              const re = new Ir.RequestError(toErrorMessage(q), Wt, {
                response: { url: Ar, status: Wt, headers: Pt, data: q },
                request: a
              });
              throw re;
            }
            return lt ? await getResponseData(C) : C.body;
          })
          .then((a) => ({ status: Wt, url: Ar, headers: Pt, data: a }))
          .catch((C) => {
            if (C instanceof Ir.RequestError) throw C;
            else if (C.name === 'AbortError') throw C;
            let q = C.message;
            if (C.name === 'TypeError' && 'cause' in C) {
              if (C.cause instanceof Error) {
                q = C.cause.message;
              } else if (typeof C.cause === 'string') {
                q = C.cause;
              }
            }
            throw new Ir.RequestError(q, 500, { request: a });
          });
      }
      async function getResponseData(a) {
        const C = a.headers.get('content-type');
        if (/application\/json/.test(C)) {
          return a
            .json()
            .catch(() => a.text())
            .catch(() => '');
        }
        if (!C || /^text\/|charset=utf-8$/.test(C)) {
          return a.text();
        }
        return getBufferResponse(a);
      }
      function toErrorMessage(a) {
        if (typeof a === 'string') return a;
        let C;
        if ('documentation_url' in a) {
          C = ` - ${a.documentation_url}`;
        } else {
          C = '';
        }
        if ('message' in a) {
          if (Array.isArray(a.errors)) {
            return `${a.message}: ${a.errors.map(JSON.stringify).join(', ')}${C}`;
          }
          return `${a.message}${C}`;
        }
        return `Unknown error: ${JSON.stringify(a)}`;
      }
      function withDefaults(a, C) {
        const q = a.defaults(C);
        const newApi = function (a, C) {
          const re = q.merge(a, C);
          if (!re.request || !re.request.hook) {
            return fetchWrapper(q.parse(re));
          }
          const request2 = (a, C) => fetchWrapper(q.parse(q.merge(a, C)));
          Object.assign(request2, {
            endpoint: q,
            defaults: withDefaults.bind(null, q)
          });
          return re.request.hook(request2, re);
        };
        return Object.assign(newApi, {
          endpoint: q,
          defaults: withDefaults.bind(null, q)
        });
      }
      var Br = withDefaults(Wt.endpoint, {
        headers: {
          'user-agent': `octokit-request.js/${Er} ${(0, Ar.getUserAgent)()}`
        }
      });
      0 && 0;
    },
    7428: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      var re = q(9129);
      class AbortSignal extends re.EventTarget {
        constructor() {
          super();
          throw new TypeError('AbortSignal cannot be constructed directly');
        }
        get aborted() {
          const a = ae.get(this);
          if (typeof a !== 'boolean') {
            throw new TypeError(
              `Expected 'this' to be an 'AbortSignal' object, but got ${this === null ? 'null' : typeof this}`
            );
          }
          return a;
        }
      }
      re.defineEventAttribute(AbortSignal.prototype, 'abort');
      function createAbortSignal() {
        const a = Object.create(AbortSignal.prototype);
        re.EventTarget.call(a);
        ae.set(a, false);
        return a;
      }
      function abortSignal(a) {
        if (ae.get(a) !== false) {
          return;
        }
        ae.set(a, true);
        a.dispatchEvent({ type: 'abort' });
      }
      const ae = new WeakMap();
      Object.defineProperties(AbortSignal.prototype, {
        aborted: { enumerable: true }
      });
      if (
        typeof Symbol === 'function' &&
        typeof Symbol.toStringTag === 'symbol'
      ) {
        Object.defineProperty(AbortSignal.prototype, Symbol.toStringTag, {
          configurable: true,
          value: 'AbortSignal'
        });
      }
      class AbortController {
        constructor() {
          Ue.set(this, createAbortSignal());
        }
        get signal() {
          return getSignal(this);
        }
        abort() {
          abortSignal(getSignal(this));
        }
      }
      const Ue = new WeakMap();
      function getSignal(a) {
        const C = Ue.get(a);
        if (C == null) {
          throw new TypeError(
            `Expected 'this' to be an 'AbortController' object, but got ${a === null ? 'null' : typeof a}`
          );
        }
        return C;
      }
      Object.defineProperties(AbortController.prototype, {
        signal: { enumerable: true },
        abort: { enumerable: true }
      });
      if (
        typeof Symbol === 'function' &&
        typeof Symbol.toStringTag === 'symbol'
      ) {
        Object.defineProperty(AbortController.prototype, Symbol.toStringTag, {
          configurable: true,
          value: 'AbortController'
        });
      }
      C.AbortController = AbortController;
      C.AbortSignal = AbortSignal;
      C['default'] = AbortController;
      a.exports = AbortController;
      a.exports.AbortController = a.exports['default'] = AbortController;
      a.exports.AbortSignal = AbortSignal;
    },
    9469: (a, C, q) => {
      'use strict';
      a.exports = q(8840);
      a.exports.HttpsAgent = q(4331);
      a.exports.constants = q(6260);
    },
    8840: (a, C, q) => {
      'use strict';
      const re = q(3685).Agent;
      const ae = q(1388);
      const Ue = q(3837).debuglog('agentkeepalive');
      const {
        INIT_SOCKET: lt,
        CURRENT_ID: Pt,
        CREATE_ID: Wt,
        SOCKET_CREATED_TIME: Ar,
        SOCKET_NAME: Er,
        SOCKET_REQUEST_COUNT: Ir,
        SOCKET_REQUEST_FINISHED_COUNT: Br
      } = q(6260);
      let Qr = 1;
      const kr = parseInt(process.version.split('.', 1)[0].substring(1));
      if (kr >= 11 && kr <= 12) {
        Qr = 2;
      } else if (kr >= 13) {
        Qr = 3;
      }
      function deprecate(a) {
        console.log('[agentkeepalive:deprecated] %s', a);
      }
      class Agent extends re {
        constructor(a) {
          a = a || {};
          a.keepAlive = a.keepAlive !== false;
          if (a.freeSocketTimeout === undefined) {
            a.freeSocketTimeout = 4e3;
          }
          if (a.keepAliveTimeout) {
            deprecate(
              'options.keepAliveTimeout is deprecated, please use options.freeSocketTimeout instead'
            );
            a.freeSocketTimeout = a.keepAliveTimeout;
            delete a.keepAliveTimeout;
          }
          if (a.freeSocketKeepAliveTimeout) {
            deprecate(
              'options.freeSocketKeepAliveTimeout is deprecated, please use options.freeSocketTimeout instead'
            );
            a.freeSocketTimeout = a.freeSocketKeepAliveTimeout;
            delete a.freeSocketKeepAliveTimeout;
          }
          if (a.timeout === undefined) {
            a.timeout = Math.max(a.freeSocketTimeout * 2, 8e3);
          }
          a.timeout = ae(a.timeout);
          a.freeSocketTimeout = ae(a.freeSocketTimeout);
          a.socketActiveTTL = a.socketActiveTTL ? ae(a.socketActiveTTL) : 0;
          super(a);
          this[Pt] = 0;
          this.createSocketCount = 0;
          this.createSocketCountLastCheck = 0;
          this.createSocketErrorCount = 0;
          this.createSocketErrorCountLastCheck = 0;
          this.closeSocketCount = 0;
          this.closeSocketCountLastCheck = 0;
          this.errorSocketCount = 0;
          this.errorSocketCountLastCheck = 0;
          this.requestCount = 0;
          this.requestCountLastCheck = 0;
          this.timeoutSocketCount = 0;
          this.timeoutSocketCountLastCheck = 0;
          this.on('free', (a) => {
            const C = this.calcSocketTimeout(a);
            if (C > 0 && a.timeout !== C) {
              a.setTimeout(C);
            }
          });
        }
        get freeSocketKeepAliveTimeout() {
          deprecate(
            'agent.freeSocketKeepAliveTimeout is deprecated, please use agent.options.freeSocketTimeout instead'
          );
          return this.options.freeSocketTimeout;
        }
        get timeout() {
          deprecate(
            'agent.timeout is deprecated, please use agent.options.timeout instead'
          );
          return this.options.timeout;
        }
        get socketActiveTTL() {
          deprecate(
            'agent.socketActiveTTL is deprecated, please use agent.options.socketActiveTTL instead'
          );
          return this.options.socketActiveTTL;
        }
        calcSocketTimeout(a) {
          let C = this.options.freeSocketTimeout;
          const q = this.options.socketActiveTTL;
          if (q) {
            const re = Date.now() - a[Ar];
            const ae = q - re;
            if (ae <= 0) {
              return ae;
            }
            if (C && ae < C) {
              C = ae;
            }
          }
          if (C) {
            const q = a.freeSocketTimeout || a.freeSocketKeepAliveTimeout;
            return q || C;
          }
        }
        keepSocketAlive(a) {
          const C = super.keepSocketAlive(a);
          if (!C) return C;
          const q = this.calcSocketTimeout(a);
          if (typeof q === 'undefined') {
            return true;
          }
          if (q <= 0) {
            Ue(
              '%s(requests: %s, finished: %s) free but need to destroy by TTL, request count %s, diff is %s',
              a[Er],
              a[Ir],
              a[Br],
              q
            );
            return false;
          }
          if (a.timeout !== q) {
            a.setTimeout(q);
          }
          return true;
        }
        reuseSocket(...a) {
          super.reuseSocket(...a);
          const C = a[0];
          const q = a[1];
          q.reusedSocket = true;
          const re = this.options.timeout;
          if (getSocketTimeout(C) !== re) {
            C.setTimeout(re);
            Ue('%s reset timeout to %sms', C[Er], re);
          }
          C[Ir]++;
          Ue(
            '%s(requests: %s, finished: %s) reuse on addRequest, timeout %sms',
            C[Er],
            C[Ir],
            C[Br],
            getSocketTimeout(C)
          );
        }
        [Wt]() {
          const a = this[Pt]++;
          if (this[Pt] === Number.MAX_SAFE_INTEGER) this[Pt] = 0;
          return a;
        }
        [lt](a, C) {
          if (C.timeout) {
            const q = getSocketTimeout(a);
            if (!q) {
              a.setTimeout(C.timeout);
            }
          }
          if (this.options.keepAlive) {
            a.setNoDelay(true);
          }
          this.createSocketCount++;
          if (this.options.socketActiveTTL) {
            a[Ar] = Date.now();
          }
          a[Er] = `sock[${this[Wt]()}#${C._agentKey}]`.split(
            '-----BEGIN',
            1
          )[0];
          a[Ir] = 1;
          a[Br] = 0;
          installListeners(this, a, C);
        }
        createConnection(a, C) {
          let q = false;
          const onNewCreate = (re, ae) => {
            if (q) return;
            q = true;
            if (re) {
              this.createSocketErrorCount++;
              return C(re);
            }
            this[lt](ae, a);
            C(re, ae);
          };
          const re = super.createConnection(a, onNewCreate);
          if (re) onNewCreate(null, re);
          return re;
        }
        get statusChanged() {
          const a =
            this.createSocketCount !== this.createSocketCountLastCheck ||
            this.createSocketErrorCount !==
              this.createSocketErrorCountLastCheck ||
            this.closeSocketCount !== this.closeSocketCountLastCheck ||
            this.errorSocketCount !== this.errorSocketCountLastCheck ||
            this.timeoutSocketCount !== this.timeoutSocketCountLastCheck ||
            this.requestCount !== this.requestCountLastCheck;
          if (a) {
            this.createSocketCountLastCheck = this.createSocketCount;
            this.createSocketErrorCountLastCheck = this.createSocketErrorCount;
            this.closeSocketCountLastCheck = this.closeSocketCount;
            this.errorSocketCountLastCheck = this.errorSocketCount;
            this.timeoutSocketCountLastCheck = this.timeoutSocketCount;
            this.requestCountLastCheck = this.requestCount;
          }
          return a;
        }
        getCurrentStatus() {
          return {
            createSocketCount: this.createSocketCount,
            createSocketErrorCount: this.createSocketErrorCount,
            closeSocketCount: this.closeSocketCount,
            errorSocketCount: this.errorSocketCount,
            timeoutSocketCount: this.timeoutSocketCount,
            requestCount: this.requestCount,
            freeSockets: inspect(this.freeSockets),
            sockets: inspect(this.sockets),
            requests: inspect(this.requests)
          };
        }
      }
      function getSocketTimeout(a) {
        return a.timeout || a._idleTimeout;
      }
      function installListeners(a, C, q) {
        Ue('%s create, timeout %sms', C[Er], getSocketTimeout(C));
        function onFree() {
          if (!C._httpMessage && C[Ir] === 1) return;
          C[Br]++;
          a.requestCount++;
          Ue('%s(requests: %s, finished: %s) free', C[Er], C[Ir], C[Br]);
          const re = a.getName(q);
          if (C.writable && a.requests[re] && a.requests[re].length) {
            C[Ir]++;
            Ue(
              '%s(requests: %s, finished: %s) will be reuse on agent free event',
              C[Er],
              C[Ir],
              C[Br]
            );
          }
        }
        C.on('free', onFree);
        function onClose(q) {
          Ue(
            '%s(requests: %s, finished: %s) close, isError: %s',
            C[Er],
            C[Ir],
            C[Br],
            q
          );
          a.closeSocketCount++;
        }
        C.on('close', onClose);
        function onTimeout() {
          const re = C.listeners('timeout').length;
          const ae = getSocketTimeout(C);
          const lt = C._httpMessage;
          const Pt = (lt && lt.listeners('timeout').length) || 0;
          Ue(
            '%s(requests: %s, finished: %s) timeout after %sms, listeners %s, defaultTimeoutListenerCount %s, hasHttpRequest %s, HttpRequest timeoutListenerCount %s',
            C[Er],
            C[Ir],
            C[Br],
            ae,
            re,
            Qr,
            !!lt,
            Pt
          );
          if (Ue.enabled) {
            Ue(
              'timeout listeners: %s',
              C.listeners('timeout')
                .map((a) => a.name)
                .join(', ')
            );
          }
          a.timeoutSocketCount++;
          const Wt = a.getName(q);
          if (a.freeSockets[Wt] && a.freeSockets[Wt].indexOf(C) !== -1) {
            C.destroy();
            a.removeSocket(C, q);
            Ue('%s is free, destroy quietly', C[Er]);
          } else {
            if (Pt === 0) {
              const re = new Error('Socket timeout');
              re.code = 'ERR_SOCKET_TIMEOUT';
              re.timeout = ae;
              C.destroy(re);
              a.removeSocket(C, q);
              Ue('%s destroy with timeout error', C[Er]);
            }
          }
        }
        C.on('timeout', onTimeout);
        function onError(q) {
          const re = C.listeners('error').length;
          Ue(
            '%s(requests: %s, finished: %s) error: %s, listenerCount: %s',
            C[Er],
            C[Ir],
            C[Br],
            q,
            re
          );
          a.errorSocketCount++;
          if (re === 1) {
            Ue('%s emit uncaught error event', C[Er]);
            C.removeListener('error', onError);
            C.emit('error', q);
          }
        }
        C.on('error', onError);
        function onRemove() {
          Ue('%s(requests: %s, finished: %s) agentRemove', C[Er], C[Ir], C[Br]);
          C.removeListener('close', onClose);
          C.removeListener('error', onError);
          C.removeListener('free', onFree);
          C.removeListener('timeout', onTimeout);
          C.removeListener('agentRemove', onRemove);
        }
        C.on('agentRemove', onRemove);
      }
      a.exports = Agent;
      function inspect(a) {
        const C = {};
        for (const q in a) {
          C[q] = a[q].length;
        }
        return C;
      }
    },
    6260: (a) => {
      'use strict';
      a.exports = {
        CURRENT_ID: Symbol('agentkeepalive#currentId'),
        CREATE_ID: Symbol('agentkeepalive#createId'),
        INIT_SOCKET: Symbol('agentkeepalive#initSocket'),
        CREATE_HTTPS_CONNECTION: Symbol('agentkeepalive#createHttpsConnection'),
        SOCKET_CREATED_TIME: Symbol('agentkeepalive#socketCreatedTime'),
        SOCKET_NAME: Symbol('agentkeepalive#socketName'),
        SOCKET_REQUEST_COUNT: Symbol('agentkeepalive#socketRequestCount'),
        SOCKET_REQUEST_FINISHED_COUNT: Symbol(
          'agentkeepalive#socketRequestFinishedCount'
        )
      };
    },
    4331: (a, C, q) => {
      'use strict';
      const re = q(5687).Agent;
      const ae = q(8840);
      const { INIT_SOCKET: Ue, CREATE_HTTPS_CONNECTION: lt } = q(6260);
      class HttpsAgent extends ae {
        constructor(a) {
          super(a);
          this.defaultPort = 443;
          this.protocol = 'https:';
          this.maxCachedSessions = this.options.maxCachedSessions;
          if (this.maxCachedSessions === undefined) {
            this.maxCachedSessions = 100;
          }
          this._sessionCache = { map: {}, list: [] };
        }
        createConnection(a, C) {
          const q = this[lt](a, C);
          this[Ue](q, a);
          return q;
        }
      }
      HttpsAgent.prototype[lt] = re.prototype.createConnection;
      ['getName', '_getSession', '_cacheSession', '_evictSession'].forEach(
        function (a) {
          if (typeof re.prototype[a] === 'function') {
            HttpsAgent.prototype[a] = re.prototype[a];
          }
        }
      );
      a.exports = HttpsAgent;
    },
    3990: (a, C, q) => {
      var re = q(3512);
      var ae = q(80);
      var Ue = q(5976);
      var lt = Function.bind;
      var Pt = lt.bind(lt);
      function bindApi(a, C, q) {
        var re = Pt(Ue, null).apply(null, q ? [C, q] : [C]);
        a.api = { remove: re };
        a.remove = re;
        ['before', 'error', 'after', 'wrap'].forEach(function (re) {
          var Ue = q ? [C, re, q] : [C, re];
          a[re] = a.api[re] = Pt(ae, null).apply(null, Ue);
        });
      }
      function HookSingular() {
        var a = 'h';
        var C = { registry: {} };
        var q = re.bind(null, C, a);
        bindApi(q, C, a);
        return q;
      }
      function HookCollection() {
        var a = { registry: {} };
        var C = re.bind(null, a);
        bindApi(C, a);
        return C;
      }
      var Wt = false;
      function Hook() {
        if (!Wt) {
          console.warn(
            '[before-after-hook]: "Hook()" repurposing warning, use "Hook.Collection()". Read more: https://git.io/upgrade-before-after-hook-to-1.4'
          );
          Wt = true;
        }
        return HookCollection();
      }
      Hook.Singular = HookSingular.bind();
      Hook.Collection = HookCollection.bind();
      a.exports = Hook;
      a.exports.Hook = Hook;
      a.exports.Singular = Hook.Singular;
      a.exports.Collection = Hook.Collection;
    },
    80: (a) => {
      a.exports = addHook;
      function addHook(a, C, q, re) {
        var ae = re;
        if (!a.registry[q]) {
          a.registry[q] = [];
        }
        if (C === 'before') {
          re = function (a, C) {
            return Promise.resolve()
              .then(ae.bind(null, C))
              .then(a.bind(null, C));
          };
        }
        if (C === 'after') {
          re = function (a, C) {
            var q;
            return Promise.resolve()
              .then(a.bind(null, C))
              .then(function (a) {
                q = a;
                return ae(q, C);
              })
              .then(function () {
                return q;
              });
          };
        }
        if (C === 'error') {
          re = function (a, C) {
            return Promise.resolve()
              .then(a.bind(null, C))
              .catch(function (a) {
                return ae(a, C);
              });
          };
        }
        a.registry[q].push({ hook: re, orig: ae });
      }
    },
    3512: (a) => {
      a.exports = register;
      function register(a, C, q, re) {
        if (typeof q !== 'function') {
          throw new Error('method for before hook must be a function');
        }
        if (!re) {
          re = {};
        }
        if (Array.isArray(C)) {
          return C.reverse().reduce(function (C, q) {
            return register.bind(null, a, q, C, re);
          }, q)();
        }
        return Promise.resolve().then(function () {
          if (!a.registry[C]) {
            return q(re);
          }
          return a.registry[C].reduce(function (a, C) {
            return C.hook.bind(null, a, re);
          }, q)();
        });
      }
    },
    5976: (a) => {
      a.exports = removeHook;
      function removeHook(a, C, q) {
        if (!a.registry[C]) {
          return;
        }
        var re = a.registry[C].map(function (a) {
          return a.orig;
        }).indexOf(q);
        if (re === -1) {
          return;
        }
        a.registry[C].splice(re, 1);
      }
    },
    2974: (a) => {
      a.exports = {
        trueFunc: function trueFunc() {
          return true;
        },
        falseFunc: function falseFunc() {
          return false;
        }
      };
    },
    4210: function (a, C, q) {
      'use strict';
      var re =
        (this && this.__createBinding) ||
        (Object.create
          ? function (a, C, q, re) {
              if (re === undefined) re = q;
              var ae = Object.getOwnPropertyDescriptor(C, q);
              if (
                !ae ||
                ('get' in ae ? !C.__esModule : ae.writable || ae.configurable)
              ) {
                ae = {
                  enumerable: true,
                  get: function () {
                    return C[q];
                  }
                };
              }
              Object.defineProperty(a, re, ae);
            }
          : function (a, C, q, re) {
              if (re === undefined) re = q;
              a[re] = C[q];
            });
      var ae =
        (this && this.__exportStar) ||
        function (a, C) {
          for (var q in a)
            if (q !== 'default' && !Object.prototype.hasOwnProperty.call(C, q))
              re(C, a, q);
        };
      Object.defineProperty(C, '__esModule', { value: true });
      C.stringify = C.parse = C.isTraversal = void 0;
      ae(q(4480), C);
      var Ue = q(9396);
      Object.defineProperty(C, 'isTraversal', {
        enumerable: true,
        get: function () {
          return Ue.isTraversal;
        }
      });
      Object.defineProperty(C, 'parse', {
        enumerable: true,
        get: function () {
          return Ue.parse;
        }
      });
      var lt = q(3058);
      Object.defineProperty(C, 'stringify', {
        enumerable: true,
        get: function () {
          return lt.stringify;
        }
      });
    },
    9396: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C.parse = C.isTraversal = void 0;
      var re = q(4480);
      var ae = /^[^\\#]?(?:\\(?:[\da-f]{1,6}\s?|.)|[\w\-\u00b0-\uFFFF])+/;
      var Ue = /\\([\da-f]{1,6}\s?|(\s)|.)/gi;
      var lt = new Map([
        [126, re.AttributeAction.Element],
        [94, re.AttributeAction.Start],
        [36, re.AttributeAction.End],
        [42, re.AttributeAction.Any],
        [33, re.AttributeAction.Not],
        [124, re.AttributeAction.Hyphen]
      ]);
      var Pt = new Set([
        'has',
        'not',
        'matches',
        'is',
        'where',
        'host',
        'host-context'
      ]);
      function isTraversal(a) {
        switch (a.type) {
          case re.SelectorType.Adjacent:
          case re.SelectorType.Child:
          case re.SelectorType.Descendant:
          case re.SelectorType.Parent:
          case re.SelectorType.Sibling:
          case re.SelectorType.ColumnCombinator:
            return true;
          default:
            return false;
        }
      }
      C.isTraversal = isTraversal;
      var Wt = new Set(['contains', 'icontains']);
      function funescape(a, C, q) {
        var re = parseInt(C, 16) - 65536;
        return re !== re || q
          ? C
          : re < 0
            ? String.fromCharCode(re + 65536)
            : String.fromCharCode((re >> 10) | 55296, (re & 1023) | 56320);
      }
      function unescapeCSS(a) {
        return a.replace(Ue, funescape);
      }
      function isQuote(a) {
        return a === 39 || a === 34;
      }
      function isWhitespace(a) {
        return a === 32 || a === 9 || a === 10 || a === 12 || a === 13;
      }
      function parse(a) {
        var C = [];
        var q = parseSelector(C, ''.concat(a), 0);
        if (q < a.length) {
          throw new Error('Unmatched selector: '.concat(a.slice(q)));
        }
        return C;
      }
      C.parse = parse;
      function parseSelector(a, C, q) {
        var Ue = [];
        function getName(a) {
          var re = C.slice(q + a).match(ae);
          if (!re) {
            throw new Error('Expected name, found '.concat(C.slice(q)));
          }
          var Ue = re[0];
          q += a + Ue.length;
          return unescapeCSS(Ue);
        }
        function stripWhitespace(a) {
          q += a;
          while (q < C.length && isWhitespace(C.charCodeAt(q))) {
            q++;
          }
        }
        function readValueWithParenthesis() {
          q += 1;
          var a = q;
          var re = 1;
          for (; re > 0 && q < C.length; q++) {
            if (C.charCodeAt(q) === 40 && !isEscaped(q)) {
              re++;
            } else if (C.charCodeAt(q) === 41 && !isEscaped(q)) {
              re--;
            }
          }
          if (re) {
            throw new Error('Parenthesis not matched');
          }
          return unescapeCSS(C.slice(a, q - 1));
        }
        function isEscaped(a) {
          var q = 0;
          while (C.charCodeAt(--a) === 92) q++;
          return (q & 1) === 1;
        }
        function ensureNotTraversal() {
          if (Ue.length > 0 && isTraversal(Ue[Ue.length - 1])) {
            throw new Error('Did not expect successive traversals.');
          }
        }
        function addTraversal(a) {
          if (
            Ue.length > 0 &&
            Ue[Ue.length - 1].type === re.SelectorType.Descendant
          ) {
            Ue[Ue.length - 1].type = a;
            return;
          }
          ensureNotTraversal();
          Ue.push({ type: a });
        }
        function addSpecialAttribute(a, C) {
          Ue.push({
            type: re.SelectorType.Attribute,
            name: a,
            action: C,
            value: getName(1),
            namespace: null,
            ignoreCase: 'quirks'
          });
        }
        function finalizeSubselector() {
          if (
            Ue.length &&
            Ue[Ue.length - 1].type === re.SelectorType.Descendant
          ) {
            Ue.pop();
          }
          if (Ue.length === 0) {
            throw new Error('Empty sub-selector');
          }
          a.push(Ue);
        }
        stripWhitespace(0);
        if (C.length === q) {
          return q;
        }
        e: while (q < C.length) {
          var Ar = C.charCodeAt(q);
          switch (Ar) {
            case 32:
            case 9:
            case 10:
            case 12:
            case 13: {
              if (
                Ue.length === 0 ||
                Ue[0].type !== re.SelectorType.Descendant
              ) {
                ensureNotTraversal();
                Ue.push({ type: re.SelectorType.Descendant });
              }
              stripWhitespace(1);
              break;
            }
            case 62: {
              addTraversal(re.SelectorType.Child);
              stripWhitespace(1);
              break;
            }
            case 60: {
              addTraversal(re.SelectorType.Parent);
              stripWhitespace(1);
              break;
            }
            case 126: {
              addTraversal(re.SelectorType.Sibling);
              stripWhitespace(1);
              break;
            }
            case 43: {
              addTraversal(re.SelectorType.Adjacent);
              stripWhitespace(1);
              break;
            }
            case 46: {
              addSpecialAttribute('class', re.AttributeAction.Element);
              break;
            }
            case 35: {
              addSpecialAttribute('id', re.AttributeAction.Equals);
              break;
            }
            case 91: {
              stripWhitespace(1);
              var Er = void 0;
              var Ir = null;
              if (C.charCodeAt(q) === 124) {
                Er = getName(1);
              } else if (C.startsWith('*|', q)) {
                Ir = '*';
                Er = getName(2);
              } else {
                Er = getName(0);
                if (C.charCodeAt(q) === 124 && C.charCodeAt(q + 1) !== 61) {
                  Ir = Er;
                  Er = getName(1);
                }
              }
              stripWhitespace(0);
              var Br = re.AttributeAction.Exists;
              var Qr = lt.get(C.charCodeAt(q));
              if (Qr) {
                Br = Qr;
                if (C.charCodeAt(q + 1) !== 61) {
                  throw new Error('Expected `=`');
                }
                stripWhitespace(2);
              } else if (C.charCodeAt(q) === 61) {
                Br = re.AttributeAction.Equals;
                stripWhitespace(1);
              }
              var kr = '';
              var Dr = null;
              if (Br !== 'exists') {
                if (isQuote(C.charCodeAt(q))) {
                  var Nr = C.charCodeAt(q);
                  var Lr = q + 1;
                  while (
                    Lr < C.length &&
                    (C.charCodeAt(Lr) !== Nr || isEscaped(Lr))
                  ) {
                    Lr += 1;
                  }
                  if (C.charCodeAt(Lr) !== Nr) {
                    throw new Error("Attribute value didn't end");
                  }
                  kr = unescapeCSS(C.slice(q + 1, Lr));
                  q = Lr + 1;
                } else {
                  var Fr = q;
                  while (
                    q < C.length &&
                    ((!isWhitespace(C.charCodeAt(q)) &&
                      C.charCodeAt(q) !== 93) ||
                      isEscaped(q))
                  ) {
                    q += 1;
                  }
                  kr = unescapeCSS(C.slice(Fr, q));
                }
                stripWhitespace(0);
                var Mr = C.charCodeAt(q) | 32;
                if (Mr === 115) {
                  Dr = false;
                  stripWhitespace(1);
                } else if (Mr === 105) {
                  Dr = true;
                  stripWhitespace(1);
                }
              }
              if (C.charCodeAt(q) !== 93) {
                throw new Error("Attribute selector didn't terminate");
              }
              q += 1;
              var Pr = {
                type: re.SelectorType.Attribute,
                name: Er,
                action: Br,
                value: kr,
                namespace: Ir,
                ignoreCase: Dr
              };
              Ue.push(Pr);
              break;
            }
            case 58: {
              if (C.charCodeAt(q + 1) === 58) {
                Ue.push({
                  type: re.SelectorType.PseudoElement,
                  name: getName(2).toLowerCase(),
                  data:
                    C.charCodeAt(q) === 40 ? readValueWithParenthesis() : null
                });
                continue;
              }
              var Or = getName(1).toLowerCase();
              var xr = null;
              if (C.charCodeAt(q) === 40) {
                if (Pt.has(Or)) {
                  if (isQuote(C.charCodeAt(q + 1))) {
                    throw new Error(
                      'Pseudo-selector '.concat(Or, ' cannot be quoted')
                    );
                  }
                  xr = [];
                  q = parseSelector(xr, C, q + 1);
                  if (C.charCodeAt(q) !== 41) {
                    throw new Error(
                      'Missing closing parenthesis in :'
                        .concat(Or, ' (')
                        .concat(C, ')')
                    );
                  }
                  q += 1;
                } else {
                  xr = readValueWithParenthesis();
                  if (Wt.has(Or)) {
                    var Ur = xr.charCodeAt(0);
                    if (Ur === xr.charCodeAt(xr.length - 1) && isQuote(Ur)) {
                      xr = xr.slice(1, -1);
                    }
                  }
                  xr = unescapeCSS(xr);
                }
              }
              Ue.push({ type: re.SelectorType.Pseudo, name: Or, data: xr });
              break;
            }
            case 44: {
              finalizeSubselector();
              Ue = [];
              stripWhitespace(1);
              break;
            }
            default: {
              if (C.startsWith('/*', q)) {
                var Gr = C.indexOf('*/', q + 2);
                if (Gr < 0) {
                  throw new Error('Comment was not terminated');
                }
                q = Gr + 2;
                if (Ue.length === 0) {
                  stripWhitespace(0);
                }
                break;
              }
              var Ir = null;
              var Hr = void 0;
              if (Ar === 42) {
                q += 1;
                Hr = '*';
              } else if (Ar === 124) {
                Hr = '';
                if (C.charCodeAt(q + 1) === 124) {
                  addTraversal(re.SelectorType.ColumnCombinator);
                  stripWhitespace(2);
                  break;
                }
              } else if (ae.test(C.slice(q))) {
                Hr = getName(0);
              } else {
                break e;
              }
              if (C.charCodeAt(q) === 124 && C.charCodeAt(q + 1) !== 124) {
                Ir = Hr;
                if (C.charCodeAt(q + 1) === 42) {
                  Hr = '*';
                  q += 2;
                } else {
                  Hr = getName(1);
                }
              }
              Ue.push(
                Hr === '*'
                  ? { type: re.SelectorType.Universal, namespace: Ir }
                  : { type: re.SelectorType.Tag, name: Hr, namespace: Ir }
              );
            }
          }
        }
        finalizeSubselector();
        return q;
      }
    },
    3058: function (a, C, q) {
      'use strict';
      var re =
        (this && this.__spreadArray) ||
        function (a, C, q) {
          if (q || arguments.length === 2)
            for (var re = 0, ae = C.length, Ue; re < ae; re++) {
              if (Ue || !(re in C)) {
                if (!Ue) Ue = Array.prototype.slice.call(C, 0, re);
                Ue[re] = C[re];
              }
            }
          return a.concat(Ue || Array.prototype.slice.call(C));
        };
      Object.defineProperty(C, '__esModule', { value: true });
      C.stringify = void 0;
      var ae = q(4480);
      var Ue = ['\\', '"'];
      var lt = re(re([], Ue, true), ['(', ')'], false);
      var Pt = new Set(
        Ue.map(function (a) {
          return a.charCodeAt(0);
        })
      );
      var Wt = new Set(
        lt.map(function (a) {
          return a.charCodeAt(0);
        })
      );
      var Ar = new Set(
        re(
          re([], lt, true),
          ['~', '^', '$', '*', '+', '!', '|', ':', '[', ']', ' ', '.'],
          false
        ).map(function (a) {
          return a.charCodeAt(0);
        })
      );
      function stringify(a) {
        return a
          .map(function (a) {
            return a.map(stringifyToken).join('');
          })
          .join(', ');
      }
      C.stringify = stringify;
      function stringifyToken(a, C, q) {
        switch (a.type) {
          case ae.SelectorType.Child:
            return C === 0 ? '> ' : ' > ';
          case ae.SelectorType.Parent:
            return C === 0 ? '< ' : ' < ';
          case ae.SelectorType.Sibling:
            return C === 0 ? '~ ' : ' ~ ';
          case ae.SelectorType.Adjacent:
            return C === 0 ? '+ ' : ' + ';
          case ae.SelectorType.Descendant:
            return ' ';
          case ae.SelectorType.ColumnCombinator:
            return C === 0 ? '|| ' : ' || ';
          case ae.SelectorType.Universal:
            return a.namespace === '*' && C + 1 < q.length && 'name' in q[C + 1]
              ? ''
              : ''.concat(getNamespace(a.namespace), '*');
          case ae.SelectorType.Tag:
            return getNamespacedName(a);
          case ae.SelectorType.PseudoElement:
            return '::'
              .concat(escapeName(a.name, Ar))
              .concat(
                a.data === null ? '' : '('.concat(escapeName(a.data, Wt), ')')
              );
          case ae.SelectorType.Pseudo:
            return ':'
              .concat(escapeName(a.name, Ar))
              .concat(
                a.data === null
                  ? ''
                  : '('.concat(
                      typeof a.data === 'string'
                        ? escapeName(a.data, Wt)
                        : stringify(a.data),
                      ')'
                    )
              );
          case ae.SelectorType.Attribute: {
            if (
              a.name === 'id' &&
              a.action === ae.AttributeAction.Equals &&
              a.ignoreCase === 'quirks' &&
              !a.namespace
            ) {
              return '#'.concat(escapeName(a.value, Ar));
            }
            if (
              a.name === 'class' &&
              a.action === ae.AttributeAction.Element &&
              a.ignoreCase === 'quirks' &&
              !a.namespace
            ) {
              return '.'.concat(escapeName(a.value, Ar));
            }
            var re = getNamespacedName(a);
            if (a.action === ae.AttributeAction.Exists) {
              return '['.concat(re, ']');
            }
            return '['
              .concat(re)
              .concat(getActionValue(a.action), '="')
              .concat(escapeName(a.value, Pt), '"')
              .concat(
                a.ignoreCase === null ? '' : a.ignoreCase ? ' i' : ' s',
                ']'
              );
          }
        }
      }
      function getActionValue(a) {
        switch (a) {
          case ae.AttributeAction.Equals:
            return '';
          case ae.AttributeAction.Element:
            return '~';
          case ae.AttributeAction.Start:
            return '^';
          case ae.AttributeAction.End:
            return '$';
          case ae.AttributeAction.Any:
            return '*';
          case ae.AttributeAction.Not:
            return '!';
          case ae.AttributeAction.Hyphen:
            return '|';
          case ae.AttributeAction.Exists:
            throw new Error("Shouldn't be here");
        }
      }
      function getNamespacedName(a) {
        return ''
          .concat(getNamespace(a.namespace))
          .concat(escapeName(a.name, Ar));
      }
      function getNamespace(a) {
        return a !== null
          ? ''.concat(a === '*' ? '*' : escapeName(a, Ar), '|')
          : '';
      }
      function escapeName(a, C) {
        var q = 0;
        var re = '';
        for (var ae = 0; ae < a.length; ae++) {
          if (C.has(a.charCodeAt(ae))) {
            re += ''.concat(a.slice(q, ae), '\\').concat(a.charAt(ae));
            q = ae + 1;
          }
        }
        return re.length > 0 ? re + a.slice(q) : a;
      }
    },
    4480: (a, C) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C.AttributeAction = C.IgnoreCaseMode = C.SelectorType = void 0;
      var q;
      (function (a) {
        a['Attribute'] = 'attribute';
        a['Pseudo'] = 'pseudo';
        a['PseudoElement'] = 'pseudo-element';
        a['Tag'] = 'tag';
        a['Universal'] = 'universal';
        a['Adjacent'] = 'adjacent';
        a['Child'] = 'child';
        a['Descendant'] = 'descendant';
        a['Parent'] = 'parent';
        a['Sibling'] = 'sibling';
        a['ColumnCombinator'] = 'column-combinator';
      })((q = C.SelectorType || (C.SelectorType = {})));
      C.IgnoreCaseMode = {
        Unknown: null,
        QuirksMode: 'quirks',
        IgnoreCase: true,
        CaseSensitive: false
      };
      var re;
      (function (a) {
        a['Any'] = 'any';
        a['Element'] = 'element';
        a['End'] = 'end';
        a['Equals'] = 'equals';
        a['Exists'] = 'exists';
        a['Hyphen'] = 'hyphen';
        a['Not'] = 'not';
        a['Start'] = 'start';
      })((re = C.AttributeAction || (C.AttributeAction = {})));
    },
    44: (a, C, q) => {
      var re = { CSSRule: q(6189).K, CSSGroupingRule: q(9325).M };
      re.CSSConditionRule = function CSSConditionRule() {
        re.CSSGroupingRule.call(this);
        this.cssRules = [];
      };
      re.CSSConditionRule.prototype = new re.CSSGroupingRule();
      re.CSSConditionRule.prototype.constructor = re.CSSConditionRule;
      re.CSSConditionRule.prototype.conditionText = '';
      re.CSSConditionRule.prototype.cssText = '';
      C.i = re.CSSConditionRule;
    },
    5316: (a, C, q) => {
      var re = { CSSRule: q(6189).K, MatcherList: q(3354).a };
      re.CSSDocumentRule = function CSSDocumentRule() {
        re.CSSRule.call(this);
        this.matcher = new re.MatcherList();
        this.cssRules = [];
      };
      re.CSSDocumentRule.prototype = new re.CSSRule();
      re.CSSDocumentRule.prototype.constructor = re.CSSDocumentRule;
      re.CSSDocumentRule.prototype.type = 10;
      Object.defineProperty(re.CSSDocumentRule.prototype, 'cssText', {
        get: function () {
          var a = [];
          for (var C = 0, q = this.cssRules.length; C < q; C++) {
            a.push(this.cssRules[C].cssText);
          }
          return (
            '@-moz-document ' +
            this.matcher.matcherText +
            ' {' +
            a.join('') +
            '}'
          );
        }
      });
      C.D = re.CSSDocumentRule;
    },
    6398: (a, C, q) => {
      var re = { CSSStyleDeclaration: q(8824).s, CSSRule: q(6189).K };
      re.CSSFontFaceRule = function CSSFontFaceRule() {
        re.CSSRule.call(this);
        this.style = new re.CSSStyleDeclaration();
        this.style.parentRule = this;
      };
      re.CSSFontFaceRule.prototype = new re.CSSRule();
      re.CSSFontFaceRule.prototype.constructor = re.CSSFontFaceRule;
      re.CSSFontFaceRule.prototype.type = 5;
      Object.defineProperty(re.CSSFontFaceRule.prototype, 'cssText', {
        get: function () {
          return '@font-face {' + this.style.cssText + '}';
        }
      });
      C.E = re.CSSFontFaceRule;
    },
    9325: (a, C, q) => {
      var re = { CSSRule: q(6189).K };
      re.CSSGroupingRule = function CSSGroupingRule() {
        re.CSSRule.call(this);
        this.cssRules = [];
      };
      re.CSSGroupingRule.prototype = new re.CSSRule();
      re.CSSGroupingRule.prototype.constructor = re.CSSGroupingRule;
      re.CSSGroupingRule.prototype.insertRule = function insertRule(a, C) {
        if (C < 0 || C > this.cssRules.length) {
          throw new RangeError('INDEX_SIZE_ERR');
        }
        var q = re.parse(a).cssRules[0];
        q.parentRule = this;
        this.cssRules.splice(C, 0, q);
        return C;
      };
      re.CSSGroupingRule.prototype.deleteRule = function deleteRule(a) {
        if (a < 0 || a >= this.cssRules.length) {
          throw new RangeError('INDEX_SIZE_ERR');
        }
        this.cssRules.splice(a, 1)[0].parentRule = null;
      };
      C.M = re.CSSGroupingRule;
    },
    6572: (a, C, q) => {
      var re = { CSSRule: q(6189).K };
      re.CSSHostRule = function CSSHostRule() {
        re.CSSRule.call(this);
        this.cssRules = [];
      };
      re.CSSHostRule.prototype = new re.CSSRule();
      re.CSSHostRule.prototype.constructor = re.CSSHostRule;
      re.CSSHostRule.prototype.type = 1001;
      Object.defineProperty(re.CSSHostRule.prototype, 'cssText', {
        get: function () {
          var a = [];
          for (var C = 0, q = this.cssRules.length; C < q; C++) {
            a.push(this.cssRules[C].cssText);
          }
          return '@host {' + a.join('') + '}';
        }
      });
      C.F = re.CSSHostRule;
    },
    6637: (a, C, q) => {
      var re = {
        CSSRule: q(6189).K,
        CSSStyleSheet: q(9420).g,
        MediaList: q(9752).L
      };
      re.CSSImportRule = function CSSImportRule() {
        re.CSSRule.call(this);
        this.href = '';
        this.media = new re.MediaList();
        this.styleSheet = new re.CSSStyleSheet();
      };
      re.CSSImportRule.prototype = new re.CSSRule();
      re.CSSImportRule.prototype.constructor = re.CSSImportRule;
      re.CSSImportRule.prototype.type = 3;
      Object.defineProperty(re.CSSImportRule.prototype, 'cssText', {
        get: function () {
          var a = this.media.mediaText;
          return '@import url(' + this.href + ')' + (a ? ' ' + a : '') + ';';
        },
        set: function (a) {
          var C = 0;
          var q = '';
          var re = '';
          var ae;
          for (var Ue; (Ue = a.charAt(C)); C++) {
            switch (Ue) {
              case ' ':
              case '\t':
              case '\r':
              case '\n':
              case '\f':
                if (q === 'after-import') {
                  q = 'url';
                } else {
                  re += Ue;
                }
                break;
              case '@':
                if (!q && a.indexOf('@import', C) === C) {
                  q = 'after-import';
                  C += 'import'.length;
                  re = '';
                }
                break;
              case 'u':
                if (q === 'url' && a.indexOf('url(', C) === C) {
                  ae = a.indexOf(')', C + 1);
                  if (ae === -1) {
                    throw C + ': ")" not found';
                  }
                  C += 'url('.length;
                  var lt = a.slice(C, ae);
                  if (lt[0] === lt[lt.length - 1]) {
                    if (lt[0] === '"' || lt[0] === "'") {
                      lt = lt.slice(1, -1);
                    }
                  }
                  this.href = lt;
                  C = ae;
                  q = 'media';
                }
                break;
              case '"':
                if (q === 'url') {
                  ae = a.indexOf('"', C + 1);
                  if (!ae) {
                    throw C + ": '\"' not found";
                  }
                  this.href = a.slice(C + 1, ae);
                  C = ae;
                  q = 'media';
                }
                break;
              case "'":
                if (q === 'url') {
                  ae = a.indexOf("'", C + 1);
                  if (!ae) {
                    throw C + ': "\'" not found';
                  }
                  this.href = a.slice(C + 1, ae);
                  C = ae;
                  q = 'media';
                }
                break;
              case ';':
                if (q === 'media') {
                  if (re) {
                    this.media.mediaText = re.trim();
                  }
                }
                break;
              default:
                if (q === 'media') {
                  re += Ue;
                }
                break;
            }
          }
        }
      });
      C.P = re.CSSImportRule;
    },
    4356: (a, C, q) => {
      var re = { CSSRule: q(6189).K, CSSStyleDeclaration: q(8824).s };
      re.CSSKeyframeRule = function CSSKeyframeRule() {
        re.CSSRule.call(this);
        this.keyText = '';
        this.style = new re.CSSStyleDeclaration();
        this.style.parentRule = this;
      };
      re.CSSKeyframeRule.prototype = new re.CSSRule();
      re.CSSKeyframeRule.prototype.constructor = re.CSSKeyframeRule;
      re.CSSKeyframeRule.prototype.type = 8;
      Object.defineProperty(re.CSSKeyframeRule.prototype, 'cssText', {
        get: function () {
          return this.keyText + ' {' + this.style.cssText + '} ';
        }
      });
      C.B = re.CSSKeyframeRule;
    },
    2702: (a, C, q) => {
      var re = { CSSRule: q(6189).K };
      re.CSSKeyframesRule = function CSSKeyframesRule() {
        re.CSSRule.call(this);
        this.name = '';
        this.cssRules = [];
      };
      re.CSSKeyframesRule.prototype = new re.CSSRule();
      re.CSSKeyframesRule.prototype.constructor = re.CSSKeyframesRule;
      re.CSSKeyframesRule.prototype.type = 7;
      Object.defineProperty(re.CSSKeyframesRule.prototype, 'cssText', {
        get: function () {
          var a = [];
          for (var C = 0, q = this.cssRules.length; C < q; C++) {
            a.push('  ' + this.cssRules[C].cssText);
          }
          return (
            '@' +
            (this._vendorPrefix || '') +
            'keyframes ' +
            this.name +
            ' { \n' +
            a.join('\n') +
            '\n}'
          );
        }
      });
      C.R = re.CSSKeyframesRule;
    },
    9034: (a, C, q) => {
      var re = {
        CSSRule: q(6189).K,
        CSSGroupingRule: q(9325).M,
        CSSConditionRule: q(44).i,
        MediaList: q(9752).L
      };
      re.CSSMediaRule = function CSSMediaRule() {
        re.CSSConditionRule.call(this);
        this.media = new re.MediaList();
      };
      re.CSSMediaRule.prototype = new re.CSSConditionRule();
      re.CSSMediaRule.prototype.constructor = re.CSSMediaRule;
      re.CSSMediaRule.prototype.type = 4;
      Object.defineProperties(re.CSSMediaRule.prototype, {
        conditionText: {
          get: function () {
            return this.media.mediaText;
          },
          set: function (a) {
            this.media.mediaText = a;
          },
          configurable: true,
          enumerable: true
        },
        cssText: {
          get: function () {
            var a = [];
            for (var C = 0, q = this.cssRules.length; C < q; C++) {
              a.push(this.cssRules[C].cssText);
            }
            return '@media ' + this.media.mediaText + ' {' + a.join('') + '}';
          },
          configurable: true,
          enumerable: true
        }
      });
      C.T = re.CSSMediaRule;
    },
    6189: (a, C) => {
      var q = {};
      q.CSSRule = function CSSRule() {
        this.parentRule = null;
        this.parentStyleSheet = null;
      };
      q.CSSRule.UNKNOWN_RULE = 0;
      q.CSSRule.STYLE_RULE = 1;
      q.CSSRule.CHARSET_RULE = 2;
      q.CSSRule.IMPORT_RULE = 3;
      q.CSSRule.MEDIA_RULE = 4;
      q.CSSRule.FONT_FACE_RULE = 5;
      q.CSSRule.PAGE_RULE = 6;
      q.CSSRule.KEYFRAMES_RULE = 7;
      q.CSSRule.KEYFRAME_RULE = 8;
      q.CSSRule.MARGIN_RULE = 9;
      q.CSSRule.NAMESPACE_RULE = 10;
      q.CSSRule.COUNTER_STYLE_RULE = 11;
      q.CSSRule.SUPPORTS_RULE = 12;
      q.CSSRule.DOCUMENT_RULE = 13;
      q.CSSRule.FONT_FEATURE_VALUES_RULE = 14;
      q.CSSRule.VIEWPORT_RULE = 15;
      q.CSSRule.REGION_STYLE_RULE = 16;
      q.CSSRule.prototype = { constructor: q.CSSRule };
      C.K = q.CSSRule;
    },
    8824: (a, C, q) => {
      var re = {};
      re.CSSStyleDeclaration = function CSSStyleDeclaration() {
        this.length = 0;
        this.parentRule = null;
        this._importants = {};
      };
      re.CSSStyleDeclaration.prototype = {
        constructor: re.CSSStyleDeclaration,
        getPropertyValue: function (a) {
          return this[a] || '';
        },
        setProperty: function (a, C, q) {
          if (this[a]) {
            var re = Array.prototype.indexOf.call(this, a);
            if (re < 0) {
              this[this.length] = a;
              this.length++;
            }
          } else {
            this[this.length] = a;
            this.length++;
          }
          this[a] = C + '';
          this._importants[a] = q;
        },
        removeProperty: function (a) {
          if (!(a in this)) {
            return '';
          }
          var C = Array.prototype.indexOf.call(this, a);
          if (C < 0) {
            return '';
          }
          var q = this[a];
          this[a] = '';
          Array.prototype.splice.call(this, C, 1);
          return q;
        },
        getPropertyCSSValue: function () {},
        getPropertyPriority: function (a) {
          return this._importants[a] || '';
        },
        getPropertyShorthand: function () {},
        isPropertyImplicit: function () {},
        get cssText() {
          var a = [];
          for (var C = 0, q = this.length; C < q; ++C) {
            var re = this[C];
            var ae = this.getPropertyValue(re);
            var Ue = this.getPropertyPriority(re);
            if (Ue) {
              Ue = ' !' + Ue;
            }
            a[C] = re + ': ' + ae + Ue + ';';
          }
          return a.join(' ');
        },
        set cssText(a) {
          var C, q;
          for (C = this.length; C--; ) {
            q = this[C];
            this[q] = '';
          }
          Array.prototype.splice.call(this, 0, this.length);
          this._importants = {};
          var ae = re.parse('#bogus{' + a + '}').cssRules[0].style;
          var Ue = ae.length;
          for (C = 0; C < Ue; ++C) {
            q = ae[C];
            this.setProperty(
              ae[C],
              ae.getPropertyValue(q),
              ae.getPropertyPriority(q)
            );
          }
        }
      };
      C.s = re.CSSStyleDeclaration;
      re.parse = q(8594).parse;
    },
    7418: (a, C, q) => {
      var re = { CSSStyleDeclaration: q(8824).s, CSSRule: q(6189).K };
      re.CSSStyleRule = function CSSStyleRule() {
        re.CSSRule.call(this);
        this.selectorText = '';
        this.style = new re.CSSStyleDeclaration();
        this.style.parentRule = this;
      };
      re.CSSStyleRule.prototype = new re.CSSRule();
      re.CSSStyleRule.prototype.constructor = re.CSSStyleRule;
      re.CSSStyleRule.prototype.type = 1;
      Object.defineProperty(re.CSSStyleRule.prototype, 'cssText', {
        get: function () {
          var a;
          if (this.selectorText) {
            a = this.selectorText + ' {' + this.style.cssText + '}';
          } else {
            a = '';
          }
          return a;
        },
        set: function (a) {
          var C = re.CSSStyleRule.parse(a);
          this.style = C.style;
          this.selectorText = C.selectorText;
        }
      });
      re.CSSStyleRule.parse = function (a) {
        var C = 0;
        var q = 'selector';
        var ae;
        var Ue = C;
        var lt = '';
        var Pt = { selector: true, value: true };
        var Wt = new re.CSSStyleRule();
        var Ar,
          Er = '';
        for (var Ir; (Ir = a.charAt(C)); C++) {
          switch (Ir) {
            case ' ':
            case '\t':
            case '\r':
            case '\n':
            case '\f':
              if (Pt[q]) {
                switch (a.charAt(C - 1)) {
                  case ' ':
                  case '\t':
                  case '\r':
                  case '\n':
                  case '\f':
                    break;
                  default:
                    lt += ' ';
                    break;
                }
              }
              break;
            case '"':
              Ue = C + 1;
              ae = a.indexOf('"', Ue) + 1;
              if (!ae) {
                throw '" is missing';
              }
              lt += a.slice(C, ae);
              C = ae - 1;
              break;
            case "'":
              Ue = C + 1;
              ae = a.indexOf("'", Ue) + 1;
              if (!ae) {
                throw "' is missing";
              }
              lt += a.slice(C, ae);
              C = ae - 1;
              break;
            case '/':
              if (a.charAt(C + 1) === '*') {
                C += 2;
                ae = a.indexOf('*/', C);
                if (ae === -1) {
                  throw new SyntaxError('Missing */');
                } else {
                  C = ae + 1;
                }
              } else {
                lt += Ir;
              }
              break;
            case '{':
              if (q === 'selector') {
                Wt.selectorText = lt.trim();
                lt = '';
                q = 'name';
              }
              break;
            case ':':
              if (q === 'name') {
                Ar = lt.trim();
                lt = '';
                q = 'value';
              } else {
                lt += Ir;
              }
              break;
            case '!':
              if (q === 'value' && a.indexOf('!important', C) === C) {
                Er = 'important';
                C += 'important'.length;
              } else {
                lt += Ir;
              }
              break;
            case ';':
              if (q === 'value') {
                Wt.style.setProperty(Ar, lt.trim(), Er);
                Er = '';
                lt = '';
                q = 'name';
              } else {
                lt += Ir;
              }
              break;
            case '}':
              if (q === 'value') {
                Wt.style.setProperty(Ar, lt.trim(), Er);
                Er = '';
                lt = '';
              } else if (q === 'name') {
                break;
              } else {
                lt += Ir;
              }
              q = 'selector';
              break;
            default:
              lt += Ir;
              break;
          }
        }
        return Wt;
      };
      C.m = re.CSSStyleRule;
    },
    9420: (a, C, q) => {
      var re = { StyleSheet: q(2249).m, CSSStyleRule: q(7418).m };
      re.CSSStyleSheet = function CSSStyleSheet() {
        re.StyleSheet.call(this);
        this.cssRules = [];
      };
      re.CSSStyleSheet.prototype = new re.StyleSheet();
      re.CSSStyleSheet.prototype.constructor = re.CSSStyleSheet;
      re.CSSStyleSheet.prototype.insertRule = function (a, C) {
        if (C < 0 || C > this.cssRules.length) {
          throw new RangeError('INDEX_SIZE_ERR');
        }
        var q = re.parse(a).cssRules[0];
        q.parentStyleSheet = this;
        this.cssRules.splice(C, 0, q);
        return C;
      };
      re.CSSStyleSheet.prototype.deleteRule = function (a) {
        if (a < 0 || a >= this.cssRules.length) {
          throw new RangeError('INDEX_SIZE_ERR');
        }
        this.cssRules.splice(a, 1);
      };
      re.CSSStyleSheet.prototype.toString = function () {
        var a = '';
        var C = this.cssRules;
        for (var q = 0; q < C.length; q++) {
          a += C[q].cssText + '\n';
        }
        return a;
      };
      C.g = re.CSSStyleSheet;
      re.parse = q(8594).parse;
    },
    6145: (a, C, q) => {
      var re = {
        CSSRule: q(6189).K,
        CSSGroupingRule: q(9325).M,
        CSSConditionRule: q(44).i
      };
      re.CSSSupportsRule = function CSSSupportsRule() {
        re.CSSConditionRule.call(this);
      };
      re.CSSSupportsRule.prototype = new re.CSSConditionRule();
      re.CSSSupportsRule.prototype.constructor = re.CSSSupportsRule;
      re.CSSSupportsRule.prototype.type = 12;
      Object.defineProperty(re.CSSSupportsRule.prototype, 'cssText', {
        get: function () {
          var a = [];
          for (var C = 0, q = this.cssRules.length; C < q; C++) {
            a.push(this.cssRules[C].cssText);
          }
          return '@supports ' + this.conditionText + ' {' + a.join('') + '}';
        }
      });
      C.C = re.CSSSupportsRule;
    },
    517: (a, C) => {
      var q = {};
      q.CSSValue = function CSSValue() {};
      q.CSSValue.prototype = {
        constructor: q.CSSValue,
        set cssText(a) {
          var C = this._getConstructorName();
          throw new Error(
            'DOMException: property "cssText" of "' +
              C +
              '" is readonly and can not be replaced with "' +
              a +
              '"!'
          );
        },
        get cssText() {
          var a = this._getConstructorName();
          throw new Error(
            'getter "cssText" of "' + a + '" is not implemented!'
          );
        },
        _getConstructorName: function () {
          var a = this.constructor.toString(),
            C = a.match(/function\s([^\(]+)/),
            q = C[1];
          return q;
        }
      };
      C.y = q.CSSValue;
    },
    367: (a, C, q) => {
      var re = { CSSValue: q(517).y };
      re.CSSValueExpression = function CSSValueExpression(a, C) {
        this._token = a;
        this._idx = C;
      };
      re.CSSValueExpression.prototype = new re.CSSValue();
      re.CSSValueExpression.prototype.constructor = re.CSSValueExpression;
      re.CSSValueExpression.prototype.parse = function () {
        var a = this._token,
          C = this._idx;
        var q = '',
          re = '',
          ae = '',
          Ue,
          lt = [];
        for (; ; ++C) {
          q = a.charAt(C);
          if (q === '') {
            ae = 'css expression error: unfinished expression!';
            break;
          }
          switch (q) {
            case '(':
              lt.push(q);
              re += q;
              break;
            case ')':
              lt.pop(q);
              re += q;
              break;
            case '/':
              if ((Ue = this._parseJSComment(a, C))) {
                if (Ue.error) {
                  ae =
                    'css expression error: unfinished comment in expression!';
                } else {
                  C = Ue.idx;
                }
              } else if ((Ue = this._parseJSRexExp(a, C))) {
                C = Ue.idx;
                re += Ue.text;
              } else {
                re += q;
              }
              break;
            case "'":
            case '"':
              Ue = this._parseJSString(a, C, q);
              if (Ue) {
                C = Ue.idx;
                re += Ue.text;
              } else {
                re += q;
              }
              break;
            default:
              re += q;
              break;
          }
          if (ae) {
            break;
          }
          if (lt.length === 0) {
            break;
          }
        }
        var Pt;
        if (ae) {
          Pt = { error: ae };
        } else {
          Pt = { idx: C, expression: re };
        }
        return Pt;
      };
      re.CSSValueExpression.prototype._parseJSComment = function (a, C) {
        var q = a.charAt(C + 1),
          re;
        if (q === '/' || q === '*') {
          var ae = C,
            Ue,
            lt;
          if (q === '/') {
            lt = '\n';
          } else if (q === '*') {
            lt = '*/';
          }
          Ue = a.indexOf(lt, ae + 1 + 1);
          if (Ue !== -1) {
            Ue = Ue + lt.length - 1;
            re = a.substring(C, Ue + 1);
            return { idx: Ue, text: re };
          } else {
            var Pt = 'css expression error: unfinished comment in expression!';
            return { error: Pt };
          }
        } else {
          return false;
        }
      };
      re.CSSValueExpression.prototype._parseJSString = function (a, C, q) {
        var re = this._findMatchedIdx(a, C, q),
          ae;
        if (re === -1) {
          return false;
        } else {
          ae = a.substring(C, re + q.length);
          return { idx: re, text: ae };
        }
      };
      re.CSSValueExpression.prototype._parseJSRexExp = function (a, C) {
        var q = a.substring(0, C).replace(/\s+$/, ''),
          re = [
            /^$/,
            /\($/,
            /\[$/,
            /\!$/,
            /\+$/,
            /\-$/,
            /\*$/,
            /\/\s+/,
            /\%$/,
            /\=$/,
            /\>$/,
            /<$/,
            /\&$/,
            /\|$/,
            /\^$/,
            /\~$/,
            /\?$/,
            /\,$/,
            /delete$/,
            /in$/,
            /instanceof$/,
            /new$/,
            /typeof$/,
            /void$/
          ];
        var ae = re.some(function (a) {
          return a.test(q);
        });
        if (!ae) {
          return false;
        } else {
          var Ue = '/';
          return this._parseJSString(a, C, Ue);
        }
      };
      re.CSSValueExpression.prototype._findMatchedIdx = function (a, C, q) {
        var re = C,
          ae;
        var Ue = -1;
        while (true) {
          ae = a.indexOf(q, re + 1);
          if (ae === -1) {
            ae = Ue;
            break;
          } else {
            var lt = a.substring(C + 1, ae),
              Pt = lt.match(/\\+$/);
            if (!Pt || Pt[0] % 2 === 0) {
              break;
            } else {
              re = ae;
            }
          }
        }
        var Wt = a.indexOf('\n', C + 1);
        if (Wt < ae) {
          ae = Ue;
        }
        return ae;
      };
      C.r = re.CSSValueExpression;
    },
    3354: (a, C) => {
      var q = {};
      q.MatcherList = function MatcherList() {
        this.length = 0;
      };
      q.MatcherList.prototype = {
        constructor: q.MatcherList,
        get matcherText() {
          return Array.prototype.join.call(this, ', ');
        },
        set matcherText(a) {
          var C = a.split(',');
          var q = (this.length = C.length);
          for (var re = 0; re < q; re++) {
            this[re] = C[re].trim();
          }
        },
        appendMatcher: function (a) {
          if (Array.prototype.indexOf.call(this, a) === -1) {
            this[this.length] = a;
            this.length++;
          }
        },
        deleteMatcher: function (a) {
          var C = Array.prototype.indexOf.call(this, a);
          if (C !== -1) {
            Array.prototype.splice.call(this, C, 1);
          }
        }
      };
      C.a = q.MatcherList;
    },
    9752: (a, C) => {
      var q = {};
      q.MediaList = function MediaList() {
        this.length = 0;
      };
      q.MediaList.prototype = {
        constructor: q.MediaList,
        get mediaText() {
          return Array.prototype.join.call(this, ', ');
        },
        set mediaText(a) {
          var C = a.split(',');
          var q = (this.length = C.length);
          for (var re = 0; re < q; re++) {
            this[re] = C[re].trim();
          }
        },
        appendMedium: function (a) {
          if (Array.prototype.indexOf.call(this, a) === -1) {
            this[this.length] = a;
            this.length++;
          }
        },
        deleteMedium: function (a) {
          var C = Array.prototype.indexOf.call(this, a);
          if (C !== -1) {
            Array.prototype.splice.call(this, C, 1);
          }
        }
      };
      C.L = q.MediaList;
    },
    2249: (a, C) => {
      var q = {};
      q.StyleSheet = function StyleSheet() {
        this.parentStyleSheet = null;
      };
      C.m = q.StyleSheet;
    },
    6578: (a, C, q) => {
      var re;
      var ae = {
        CSSStyleSheet: q(9420).g,
        CSSRule: q(6189).K,
        CSSStyleRule: q(7418).m,
        CSSGroupingRule: q(9325).M,
        CSSConditionRule: q(44).i,
        CSSMediaRule: q(9034).T,
        CSSSupportsRule: q(6145).C,
        CSSStyleDeclaration: q(8824).s,
        CSSKeyframeRule: q(4356).B,
        CSSKeyframesRule: q(2702).R
      };
      ae.clone = function clone(a) {
        var C = new ae.CSSStyleSheet();
        var q = a.cssRules;
        if (!q) {
          return C;
        }
        for (var re = 0, Ue = q.length; re < Ue; re++) {
          var lt = q[re];
          var Pt = (C.cssRules[re] = new lt.constructor());
          var Wt = lt.style;
          if (Wt) {
            var Ar = (Pt.style = new ae.CSSStyleDeclaration());
            for (var Er = 0, Ir = Wt.length; Er < Ir; Er++) {
              var Br = (Ar[Er] = Wt[Er]);
              Ar[Br] = Wt[Br];
              Ar._importants[Br] = Wt.getPropertyPriority(Br);
            }
            Ar.length = Wt.length;
          }
          if (lt.hasOwnProperty('keyText')) {
            Pt.keyText = lt.keyText;
          }
          if (lt.hasOwnProperty('selectorText')) {
            Pt.selectorText = lt.selectorText;
          }
          if (lt.hasOwnProperty('mediaText')) {
            Pt.mediaText = lt.mediaText;
          }
          if (lt.hasOwnProperty('conditionText')) {
            Pt.conditionText = lt.conditionText;
          }
          if (lt.hasOwnProperty('cssRules')) {
            Pt.cssRules = clone(lt).cssRules;
          }
        }
        return C;
      };
      re = ae.clone;
    },
    7673: (a, C, q) => {
      'use strict';
      q(8824).s;
      q(6189).K;
      q(9325).M;
      q(44).i;
      q(7418).m;
      q(9752).L;
      q(9034).T;
      q(6145).C;
      q(6637).P;
      q(6398).E;
      q(6572).F;
      q(2249).m;
      q(9420).g;
      q(2702).R;
      q(4356).B;
      q(3354).a;
      q(5316).D;
      q(517).y;
      q(367).r;
      C.parse = q(8594).parse;
      q(6578);
    },
    8594: (a, C, q) => {
      var re = {};
      re.parse = function parse(a) {
        var C = 0;
        var q = 'before-selector';
        var ae;
        var Ue = '';
        var lt = 0;
        var Pt = {
          selector: true,
          value: true,
          'value-parenthesis': true,
          atRule: true,
          'importRule-begin': true,
          importRule: true,
          atBlock: true,
          conditionBlock: true,
          'documentRule-begin': true
        };
        var Wt = new re.CSSStyleSheet();
        var Ar = Wt;
        var Er;
        var Ir = [];
        var Br = false;
        var Qr;
        var kr,
          Dr = '',
          Nr,
          Lr,
          Fr,
          Mr,
          Pr,
          Or,
          xr,
          Ur;
        var Gr = /@(-(?:\w+-)+)?keyframes/g;
        var parseError = function (q) {
          var re = a.substring(0, C).split('\n');
          var ae = re.length;
          var Ue = re.pop().length + 1;
          var lt = new Error(q + ' (line ' + ae + ', char ' + Ue + ')');
          lt.line = ae;
          lt['char'] = Ue;
          lt.styleSheet = Wt;
          throw lt;
        };
        for (var Hr; (Hr = a.charAt(C)); C++) {
          switch (Hr) {
            case ' ':
            case '\t':
            case '\r':
            case '\n':
            case '\f':
              if (Pt[q]) {
                Ue += Hr;
              }
              break;
            case '"':
              ae = C + 1;
              do {
                ae = a.indexOf('"', ae) + 1;
                if (!ae) {
                  parseError('Unmatched "');
                }
              } while (a[ae - 2] === '\\');
              Ue += a.slice(C, ae);
              C = ae - 1;
              switch (q) {
                case 'before-value':
                  q = 'value';
                  break;
                case 'importRule-begin':
                  q = 'importRule';
                  break;
              }
              break;
            case "'":
              ae = C + 1;
              do {
                ae = a.indexOf("'", ae) + 1;
                if (!ae) {
                  parseError("Unmatched '");
                }
              } while (a[ae - 2] === '\\');
              Ue += a.slice(C, ae);
              C = ae - 1;
              switch (q) {
                case 'before-value':
                  q = 'value';
                  break;
                case 'importRule-begin':
                  q = 'importRule';
                  break;
              }
              break;
            case '/':
              if (a.charAt(C + 1) === '*') {
                C += 2;
                ae = a.indexOf('*/', C);
                if (ae === -1) {
                  parseError('Missing */');
                } else {
                  C = ae + 1;
                }
              } else {
                Ue += Hr;
              }
              if (q === 'importRule-begin') {
                Ue += ' ';
                q = 'importRule';
              }
              break;
            case '@':
              if (a.indexOf('@-moz-document', C) === C) {
                q = 'documentRule-begin';
                xr = new re.CSSDocumentRule();
                xr.__starts = C;
                C += '-moz-document'.length;
                Ue = '';
                break;
              } else if (a.indexOf('@media', C) === C) {
                q = 'atBlock';
                Lr = new re.CSSMediaRule();
                Lr.__starts = C;
                C += 'media'.length;
                Ue = '';
                break;
              } else if (a.indexOf('@supports', C) === C) {
                q = 'conditionBlock';
                Fr = new re.CSSSupportsRule();
                Fr.__starts = C;
                C += 'supports'.length;
                Ue = '';
                break;
              } else if (a.indexOf('@host', C) === C) {
                q = 'hostRule-begin';
                C += 'host'.length;
                Ur = new re.CSSHostRule();
                Ur.__starts = C;
                Ue = '';
                break;
              } else if (a.indexOf('@import', C) === C) {
                q = 'importRule-begin';
                C += 'import'.length;
                Ue += '@import';
                break;
              } else if (a.indexOf('@font-face', C) === C) {
                q = 'fontFaceRule-begin';
                C += 'font-face'.length;
                Pr = new re.CSSFontFaceRule();
                Pr.__starts = C;
                Ue = '';
                break;
              } else {
                Gr.lastIndex = C;
                var Vr = Gr.exec(a);
                if (Vr && Vr.index === C) {
                  q = 'keyframesRule-begin';
                  Or = new re.CSSKeyframesRule();
                  Or.__starts = C;
                  Or._vendorPrefix = Vr[1];
                  C += Vr[0].length - 1;
                  Ue = '';
                  break;
                } else if (q === 'selector') {
                  q = 'atRule';
                }
              }
              Ue += Hr;
              break;
            case '{':
              if (q === 'selector' || q === 'atRule') {
                Nr.selectorText = Ue.trim();
                Nr.style.__starts = C;
                Ue = '';
                q = 'before-name';
              } else if (q === 'atBlock') {
                Lr.media.mediaText = Ue.trim();
                if (Er) {
                  Ir.push(Er);
                }
                Ar = Er = Lr;
                Lr.parentStyleSheet = Wt;
                Ue = '';
                q = 'before-selector';
              } else if (q === 'conditionBlock') {
                Fr.conditionText = Ue.trim();
                if (Er) {
                  Ir.push(Er);
                }
                Ar = Er = Fr;
                Fr.parentStyleSheet = Wt;
                Ue = '';
                q = 'before-selector';
              } else if (q === 'hostRule-begin') {
                if (Er) {
                  Ir.push(Er);
                }
                Ar = Er = Ur;
                Ur.parentStyleSheet = Wt;
                Ue = '';
                q = 'before-selector';
              } else if (q === 'fontFaceRule-begin') {
                if (Er) {
                  Pr.parentRule = Er;
                }
                Pr.parentStyleSheet = Wt;
                Nr = Pr;
                Ue = '';
                q = 'before-name';
              } else if (q === 'keyframesRule-begin') {
                Or.name = Ue.trim();
                if (Er) {
                  Ir.push(Er);
                  Or.parentRule = Er;
                }
                Or.parentStyleSheet = Wt;
                Ar = Er = Or;
                Ue = '';
                q = 'keyframeRule-begin';
              } else if (q === 'keyframeRule-begin') {
                Nr = new re.CSSKeyframeRule();
                Nr.keyText = Ue.trim();
                Nr.__starts = C;
                Ue = '';
                q = 'before-name';
              } else if (q === 'documentRule-begin') {
                xr.matcher.matcherText = Ue.trim();
                if (Er) {
                  Ir.push(Er);
                  xr.parentRule = Er;
                }
                Ar = Er = xr;
                xr.parentStyleSheet = Wt;
                Ue = '';
                q = 'before-selector';
              }
              break;
            case ':':
              if (q === 'name') {
                kr = Ue.trim();
                Ue = '';
                q = 'before-value';
              } else {
                Ue += Hr;
              }
              break;
            case '(':
              if (q === 'value') {
                if (Ue.trim() === 'expression') {
                  var Wr = new re.CSSValueExpression(a, C).parse();
                  if (Wr.error) {
                    parseError(Wr.error);
                  } else {
                    Ue += Wr.expression;
                    C = Wr.idx;
                  }
                } else {
                  q = 'value-parenthesis';
                  lt = 1;
                  Ue += Hr;
                }
              } else if (q === 'value-parenthesis') {
                lt++;
                Ue += Hr;
              } else {
                Ue += Hr;
              }
              break;
            case ')':
              if (q === 'value-parenthesis') {
                lt--;
                if (lt === 0) q = 'value';
              }
              Ue += Hr;
              break;
            case '!':
              if (q === 'value' && a.indexOf('!important', C) === C) {
                Dr = 'important';
                C += 'important'.length;
              } else {
                Ue += Hr;
              }
              break;
            case ';':
              switch (q) {
                case 'value':
                  Nr.style.setProperty(kr, Ue.trim(), Dr);
                  Dr = '';
                  Ue = '';
                  q = 'before-name';
                  break;
                case 'atRule':
                  Ue = '';
                  q = 'before-selector';
                  break;
                case 'importRule':
                  Mr = new re.CSSImportRule();
                  Mr.parentStyleSheet = Mr.styleSheet.parentStyleSheet = Wt;
                  Mr.cssText = Ue + Hr;
                  Wt.cssRules.push(Mr);
                  Ue = '';
                  q = 'before-selector';
                  break;
                default:
                  Ue += Hr;
                  break;
              }
              break;
            case '}':
              switch (q) {
                case 'value':
                  Nr.style.setProperty(kr, Ue.trim(), Dr);
                  Dr = '';
                case 'before-name':
                case 'name':
                  Nr.__ends = C + 1;
                  if (Er) {
                    Nr.parentRule = Er;
                  }
                  Nr.parentStyleSheet = Wt;
                  Ar.cssRules.push(Nr);
                  Ue = '';
                  if (Ar.constructor === re.CSSKeyframesRule) {
                    q = 'keyframeRule-begin';
                  } else {
                    q = 'before-selector';
                  }
                  break;
                case 'keyframeRule-begin':
                case 'before-selector':
                case 'selector':
                  if (!Er) {
                    parseError('Unexpected }');
                  }
                  Br = Ir.length > 0;
                  while (Ir.length > 0) {
                    Er = Ir.pop();
                    if (
                      Er.constructor.name === 'CSSMediaRule' ||
                      Er.constructor.name === 'CSSSupportsRule'
                    ) {
                      Qr = Ar;
                      Ar = Er;
                      Ar.cssRules.push(Qr);
                      break;
                    }
                    if (Ir.length === 0) {
                      Br = false;
                    }
                  }
                  if (!Br) {
                    Ar.__ends = C + 1;
                    Wt.cssRules.push(Ar);
                    Ar = Wt;
                    Er = null;
                  }
                  Ue = '';
                  q = 'before-selector';
                  break;
              }
              break;
            default:
              switch (q) {
                case 'before-selector':
                  q = 'selector';
                  Nr = new re.CSSStyleRule();
                  Nr.__starts = C;
                  break;
                case 'before-name':
                  q = 'name';
                  break;
                case 'before-value':
                  q = 'value';
                  break;
                case 'importRule-begin':
                  q = 'importRule';
                  break;
              }
              Ue += Hr;
              break;
          }
        }
        return Wt;
      };
      C.parse = re.parse;
      re.CSSStyleSheet = q(9420).g;
      re.CSSStyleRule = q(7418).m;
      re.CSSImportRule = q(6637).P;
      re.CSSGroupingRule = q(9325).M;
      re.CSSMediaRule = q(9034).T;
      re.CSSConditionRule = q(44).i;
      re.CSSSupportsRule = q(6145).C;
      re.CSSFontFaceRule = q(6398).E;
      re.CSSHostRule = q(6572).F;
      re.CSSStyleDeclaration = q(8824).s;
      re.CSSKeyframeRule = q(4356).B;
      re.CSSKeyframesRule = q(2702).R;
      re.CSSValueExpression = q(367).r;
      re.CSSDocumentRule = q(5316).D;
    },
    64: (a, C) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      class Deprecation extends Error {
        constructor(a) {
          super(a);
          if (Error.captureStackTrace) {
            Error.captureStackTrace(this, this.constructor);
          }
          this.name = 'Deprecation';
        }
      }
      C.Deprecation = Deprecation;
    },
    9129: (a, C) => {
      'use strict';
      /**
       * @author Toru Nagashima <https://github.com/mysticatea>
       * @copyright 2015 Toru Nagashima. All rights reserved.
       * See LICENSE file in root directory for full license.
       */ Object.defineProperty(C, '__esModule', { value: true });
      const q = new WeakMap();
      const re = new WeakMap();
      function pd(a) {
        const C = q.get(a);
        console.assert(
          C != null,
          "'this' is expected an Event object, but got",
          a
        );
        return C;
      }
      function setCancelFlag(a) {
        if (a.passiveListener != null) {
          if (
            typeof console !== 'undefined' &&
            typeof console.error === 'function'
          ) {
            console.error(
              'Unable to preventDefault inside passive event listener invocation.',
              a.passiveListener
            );
          }
          return;
        }
        if (!a.event.cancelable) {
          return;
        }
        a.canceled = true;
        if (typeof a.event.preventDefault === 'function') {
          a.event.preventDefault();
        }
      }
      function Event(a, C) {
        q.set(this, {
          eventTarget: a,
          event: C,
          eventPhase: 2,
          currentTarget: a,
          canceled: false,
          stopped: false,
          immediateStopped: false,
          passiveListener: null,
          timeStamp: C.timeStamp || Date.now()
        });
        Object.defineProperty(this, 'isTrusted', {
          value: false,
          enumerable: true
        });
        const re = Object.keys(C);
        for (let a = 0; a < re.length; ++a) {
          const C = re[a];
          if (!(C in this)) {
            Object.defineProperty(this, C, defineRedirectDescriptor(C));
          }
        }
      }
      Event.prototype = {
        get type() {
          return pd(this).event.type;
        },
        get target() {
          return pd(this).eventTarget;
        },
        get currentTarget() {
          return pd(this).currentTarget;
        },
        composedPath() {
          const a = pd(this).currentTarget;
          if (a == null) {
            return [];
          }
          return [a];
        },
        get NONE() {
          return 0;
        },
        get CAPTURING_PHASE() {
          return 1;
        },
        get AT_TARGET() {
          return 2;
        },
        get BUBBLING_PHASE() {
          return 3;
        },
        get eventPhase() {
          return pd(this).eventPhase;
        },
        stopPropagation() {
          const a = pd(this);
          a.stopped = true;
          if (typeof a.event.stopPropagation === 'function') {
            a.event.stopPropagation();
          }
        },
        stopImmediatePropagation() {
          const a = pd(this);
          a.stopped = true;
          a.immediateStopped = true;
          if (typeof a.event.stopImmediatePropagation === 'function') {
            a.event.stopImmediatePropagation();
          }
        },
        get bubbles() {
          return Boolean(pd(this).event.bubbles);
        },
        get cancelable() {
          return Boolean(pd(this).event.cancelable);
        },
        preventDefault() {
          setCancelFlag(pd(this));
        },
        get defaultPrevented() {
          return pd(this).canceled;
        },
        get composed() {
          return Boolean(pd(this).event.composed);
        },
        get timeStamp() {
          return pd(this).timeStamp;
        },
        get srcElement() {
          return pd(this).eventTarget;
        },
        get cancelBubble() {
          return pd(this).stopped;
        },
        set cancelBubble(a) {
          if (!a) {
            return;
          }
          const C = pd(this);
          C.stopped = true;
          if (typeof C.event.cancelBubble === 'boolean') {
            C.event.cancelBubble = true;
          }
        },
        get returnValue() {
          return !pd(this).canceled;
        },
        set returnValue(a) {
          if (!a) {
            setCancelFlag(pd(this));
          }
        },
        initEvent() {}
      };
      Object.defineProperty(Event.prototype, 'constructor', {
        value: Event,
        configurable: true,
        writable: true
      });
      if (
        typeof window !== 'undefined' &&
        typeof window.Event !== 'undefined'
      ) {
        Object.setPrototypeOf(Event.prototype, window.Event.prototype);
        re.set(window.Event.prototype, Event);
      }
      function defineRedirectDescriptor(a) {
        return {
          get() {
            return pd(this).event[a];
          },
          set(C) {
            pd(this).event[a] = C;
          },
          configurable: true,
          enumerable: true
        };
      }
      function defineCallDescriptor(a) {
        return {
          value() {
            const C = pd(this).event;
            return C[a].apply(C, arguments);
          },
          configurable: true,
          enumerable: true
        };
      }
      function defineWrapper(a, C) {
        const q = Object.keys(C);
        if (q.length === 0) {
          return a;
        }
        function CustomEvent(C, q) {
          a.call(this, C, q);
        }
        CustomEvent.prototype = Object.create(a.prototype, {
          constructor: {
            value: CustomEvent,
            configurable: true,
            writable: true
          }
        });
        for (let re = 0; re < q.length; ++re) {
          const ae = q[re];
          if (!(ae in a.prototype)) {
            const a = Object.getOwnPropertyDescriptor(C, ae);
            const q = typeof a.value === 'function';
            Object.defineProperty(
              CustomEvent.prototype,
              ae,
              q ? defineCallDescriptor(ae) : defineRedirectDescriptor(ae)
            );
          }
        }
        return CustomEvent;
      }
      function getWrapper(a) {
        if (a == null || a === Object.prototype) {
          return Event;
        }
        let C = re.get(a);
        if (C == null) {
          C = defineWrapper(getWrapper(Object.getPrototypeOf(a)), a);
          re.set(a, C);
        }
        return C;
      }
      function wrapEvent(a, C) {
        const q = getWrapper(Object.getPrototypeOf(C));
        return new q(a, C);
      }
      function isStopped(a) {
        return pd(a).immediateStopped;
      }
      function setEventPhase(a, C) {
        pd(a).eventPhase = C;
      }
      function setCurrentTarget(a, C) {
        pd(a).currentTarget = C;
      }
      function setPassiveListener(a, C) {
        pd(a).passiveListener = C;
      }
      const ae = new WeakMap();
      const Ue = 1;
      const lt = 2;
      const Pt = 3;
      function isObject(a) {
        return a !== null && typeof a === 'object';
      }
      function getListeners(a) {
        const C = ae.get(a);
        if (C == null) {
          throw new TypeError(
            "'this' is expected an EventTarget object, but got another value."
          );
        }
        return C;
      }
      function defineEventAttributeDescriptor(a) {
        return {
          get() {
            const C = getListeners(this);
            let q = C.get(a);
            while (q != null) {
              if (q.listenerType === Pt) {
                return q.listener;
              }
              q = q.next;
            }
            return null;
          },
          set(C) {
            if (typeof C !== 'function' && !isObject(C)) {
              C = null;
            }
            const q = getListeners(this);
            let re = null;
            let ae = q.get(a);
            while (ae != null) {
              if (ae.listenerType === Pt) {
                if (re !== null) {
                  re.next = ae.next;
                } else if (ae.next !== null) {
                  q.set(a, ae.next);
                } else {
                  q.delete(a);
                }
              } else {
                re = ae;
              }
              ae = ae.next;
            }
            if (C !== null) {
              const ae = {
                listener: C,
                listenerType: Pt,
                passive: false,
                once: false,
                next: null
              };
              if (re === null) {
                q.set(a, ae);
              } else {
                re.next = ae;
              }
            }
          },
          configurable: true,
          enumerable: true
        };
      }
      function defineEventAttribute(a, C) {
        Object.defineProperty(a, `on${C}`, defineEventAttributeDescriptor(C));
      }
      function defineCustomEventTarget(a) {
        function CustomEventTarget() {
          EventTarget.call(this);
        }
        CustomEventTarget.prototype = Object.create(EventTarget.prototype, {
          constructor: {
            value: CustomEventTarget,
            configurable: true,
            writable: true
          }
        });
        for (let C = 0; C < a.length; ++C) {
          defineEventAttribute(CustomEventTarget.prototype, a[C]);
        }
        return CustomEventTarget;
      }
      function EventTarget() {
        if (this instanceof EventTarget) {
          ae.set(this, new Map());
          return;
        }
        if (arguments.length === 1 && Array.isArray(arguments[0])) {
          return defineCustomEventTarget(arguments[0]);
        }
        if (arguments.length > 0) {
          const a = new Array(arguments.length);
          for (let C = 0; C < arguments.length; ++C) {
            a[C] = arguments[C];
          }
          return defineCustomEventTarget(a);
        }
        throw new TypeError('Cannot call a class as a function');
      }
      EventTarget.prototype = {
        addEventListener(a, C, q) {
          if (C == null) {
            return;
          }
          if (typeof C !== 'function' && !isObject(C)) {
            throw new TypeError(
              "'listener' should be a function or an object."
            );
          }
          const re = getListeners(this);
          const ae = isObject(q);
          const Pt = ae ? Boolean(q.capture) : Boolean(q);
          const Wt = Pt ? Ue : lt;
          const Ar = {
            listener: C,
            listenerType: Wt,
            passive: ae && Boolean(q.passive),
            once: ae && Boolean(q.once),
            next: null
          };
          let Er = re.get(a);
          if (Er === undefined) {
            re.set(a, Ar);
            return;
          }
          let Ir = null;
          while (Er != null) {
            if (Er.listener === C && Er.listenerType === Wt) {
              return;
            }
            Ir = Er;
            Er = Er.next;
          }
          Ir.next = Ar;
        },
        removeEventListener(a, C, q) {
          if (C == null) {
            return;
          }
          const re = getListeners(this);
          const ae = isObject(q) ? Boolean(q.capture) : Boolean(q);
          const Pt = ae ? Ue : lt;
          let Wt = null;
          let Ar = re.get(a);
          while (Ar != null) {
            if (Ar.listener === C && Ar.listenerType === Pt) {
              if (Wt !== null) {
                Wt.next = Ar.next;
              } else if (Ar.next !== null) {
                re.set(a, Ar.next);
              } else {
                re.delete(a);
              }
              return;
            }
            Wt = Ar;
            Ar = Ar.next;
          }
        },
        dispatchEvent(a) {
          if (a == null || typeof a.type !== 'string') {
            throw new TypeError('"event.type" should be a string.');
          }
          const C = getListeners(this);
          const q = a.type;
          let re = C.get(q);
          if (re == null) {
            return true;
          }
          const ae = wrapEvent(this, a);
          let Ue = null;
          while (re != null) {
            if (re.once) {
              if (Ue !== null) {
                Ue.next = re.next;
              } else if (re.next !== null) {
                C.set(q, re.next);
              } else {
                C.delete(q);
              }
            } else {
              Ue = re;
            }
            setPassiveListener(ae, re.passive ? re.listener : null);
            if (typeof re.listener === 'function') {
              try {
                re.listener.call(this, ae);
              } catch (a) {
                if (
                  typeof console !== 'undefined' &&
                  typeof console.error === 'function'
                ) {
                  console.error(a);
                }
              }
            } else if (
              re.listenerType !== Pt &&
              typeof re.listener.handleEvent === 'function'
            ) {
              re.listener.handleEvent(ae);
            }
            if (isStopped(ae)) {
              break;
            }
            re = re.next;
          }
          setPassiveListener(ae, null);
          setEventPhase(ae, 0);
          setCurrentTarget(ae, null);
          return !ae.defaultPrevented;
        }
      };
      Object.defineProperty(EventTarget.prototype, 'constructor', {
        value: EventTarget,
        configurable: true,
        writable: true
      });
      if (
        typeof window !== 'undefined' &&
        typeof window.EventTarget !== 'undefined'
      ) {
        Object.setPrototypeOf(
          EventTarget.prototype,
          window.EventTarget.prototype
        );
      }
      C.defineEventAttribute = defineEventAttribute;
      C.EventTarget = EventTarget;
      C['default'] = EventTarget;
      a.exports = EventTarget;
      a.exports.EventTarget = a.exports['default'] = EventTarget;
      a.exports.defineEventAttribute = defineEventAttribute;
    },
    1388: (a, C, q) => {
      'use strict';
      /*!
       * humanize-ms - index.js
       * Copyright(c) 2014 dead_horse <dead_horse@qq.com>
       * MIT Licensed
       */ var re = q(3837);
      var ae = q(158);
      a.exports = function (a) {
        if (typeof a === 'number') return a;
        var C = ae(a);
        if (C === undefined) {
          var q = new Error(re.format('humanize-ms(%j) result undefined', a));
          console.warn(q.stack);
        }
        return C;
      };
    },
    158: (a) => {
      var C = 1e3;
      var q = C * 60;
      var re = q * 60;
      var ae = re * 24;
      var Ue = ae * 7;
      var lt = ae * 365.25;
      a.exports = function (a, C) {
        C = C || {};
        var q = typeof a;
        if (q === 'string' && a.length > 0) {
          return parse(a);
        } else if (q === 'number' && isFinite(a)) {
          return C.long ? fmtLong(a) : fmtShort(a);
        }
        throw new Error(
          'val is not a non-empty string or a valid number. val=' +
            JSON.stringify(a)
        );
      };
      function parse(a) {
        a = String(a);
        if (a.length > 100) {
          return;
        }
        var Pt =
          /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
            a
          );
        if (!Pt) {
          return;
        }
        var Wt = parseFloat(Pt[1]);
        var Ar = (Pt[2] || 'ms').toLowerCase();
        switch (Ar) {
          case 'years':
          case 'year':
          case 'yrs':
          case 'yr':
          case 'y':
            return Wt * lt;
          case 'weeks':
          case 'week':
          case 'w':
            return Wt * Ue;
          case 'days':
          case 'day':
          case 'd':
            return Wt * ae;
          case 'hours':
          case 'hour':
          case 'hrs':
          case 'hr':
          case 'h':
            return Wt * re;
          case 'minutes':
          case 'minute':
          case 'mins':
          case 'min':
          case 'm':
            return Wt * q;
          case 'seconds':
          case 'second':
          case 'secs':
          case 'sec':
          case 's':
            return Wt * C;
          case 'milliseconds':
          case 'millisecond':
          case 'msecs':
          case 'msec':
          case 'ms':
            return Wt;
          default:
            return undefined;
        }
      }
      function fmtShort(a) {
        var Ue = Math.abs(a);
        if (Ue >= ae) {
          return Math.round(a / ae) + 'd';
        }
        if (Ue >= re) {
          return Math.round(a / re) + 'h';
        }
        if (Ue >= q) {
          return Math.round(a / q) + 'm';
        }
        if (Ue >= C) {
          return Math.round(a / C) + 's';
        }
        return a + 'ms';
      }
      function fmtLong(a) {
        var Ue = Math.abs(a);
        if (Ue >= ae) {
          return plural(a, Ue, ae, 'day');
        }
        if (Ue >= re) {
          return plural(a, Ue, re, 'hour');
        }
        if (Ue >= q) {
          return plural(a, Ue, q, 'minute');
        }
        if (Ue >= C) {
          return plural(a, Ue, C, 'second');
        }
        return a + ' ms';
      }
      function plural(a, C, q, re) {
        var ae = C >= q * 1.5;
        return Math.round(a / q) + ' ' + re + (ae ? 's' : '');
      }
    },
    8761: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      function _interopDefault(a) {
        return a && typeof a === 'object' && 'default' in a ? a['default'] : a;
      }
      var re = _interopDefault(q(2781));
      var ae = _interopDefault(q(3685));
      var Ue = _interopDefault(q(7310));
      var lt = _interopDefault(q(872));
      var Pt = _interopDefault(q(5687));
      var Wt = _interopDefault(q(9796));
      const Ar = re.Readable;
      const Er = Symbol('buffer');
      const Ir = Symbol('type');
      class Blob {
        constructor() {
          this[Ir] = '';
          const a = arguments[0];
          const C = arguments[1];
          const q = [];
          let re = 0;
          if (a) {
            const C = a;
            const ae = Number(C.length);
            for (let a = 0; a < ae; a++) {
              const ae = C[a];
              let Ue;
              if (ae instanceof Buffer) {
                Ue = ae;
              } else if (ArrayBuffer.isView(ae)) {
                Ue = Buffer.from(ae.buffer, ae.byteOffset, ae.byteLength);
              } else if (ae instanceof ArrayBuffer) {
                Ue = Buffer.from(ae);
              } else if (ae instanceof Blob) {
                Ue = ae[Er];
              } else {
                Ue = Buffer.from(typeof ae === 'string' ? ae : String(ae));
              }
              re += Ue.length;
              q.push(Ue);
            }
          }
          this[Er] = Buffer.concat(q);
          let ae = C && C.type !== undefined && String(C.type).toLowerCase();
          if (ae && !/[^\u0020-\u007E]/.test(ae)) {
            this[Ir] = ae;
          }
        }
        get size() {
          return this[Er].length;
        }
        get type() {
          return this[Ir];
        }
        text() {
          return Promise.resolve(this[Er].toString());
        }
        arrayBuffer() {
          const a = this[Er];
          const C = a.buffer.slice(a.byteOffset, a.byteOffset + a.byteLength);
          return Promise.resolve(C);
        }
        stream() {
          const a = new Ar();
          a._read = function () {};
          a.push(this[Er]);
          a.push(null);
          return a;
        }
        toString() {
          return '[object Blob]';
        }
        slice() {
          const a = this.size;
          const C = arguments[0];
          const q = arguments[1];
          let re, ae;
          if (C === undefined) {
            re = 0;
          } else if (C < 0) {
            re = Math.max(a + C, 0);
          } else {
            re = Math.min(C, a);
          }
          if (q === undefined) {
            ae = a;
          } else if (q < 0) {
            ae = Math.max(a + q, 0);
          } else {
            ae = Math.min(q, a);
          }
          const Ue = Math.max(ae - re, 0);
          const lt = this[Er];
          const Pt = lt.slice(re, re + Ue);
          const Wt = new Blob([], { type: arguments[2] });
          Wt[Er] = Pt;
          return Wt;
        }
      }
      Object.defineProperties(Blob.prototype, {
        size: { enumerable: true },
        type: { enumerable: true },
        slice: { enumerable: true }
      });
      Object.defineProperty(Blob.prototype, Symbol.toStringTag, {
        value: 'Blob',
        writable: false,
        enumerable: false,
        configurable: true
      });
      function FetchError(a, C, q) {
        Error.call(this, a);
        this.message = a;
        this.type = C;
        if (q) {
          this.code = this.errno = q.code;
        }
        Error.captureStackTrace(this, this.constructor);
      }
      FetchError.prototype = Object.create(Error.prototype);
      FetchError.prototype.constructor = FetchError;
      FetchError.prototype.name = 'FetchError';
      let Br;
      try {
        Br = q(2707).convert;
      } catch (a) {}
      const Qr = Symbol('Body internals');
      const kr = re.PassThrough;
      function Body(a) {
        var C = this;
        var q =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {},
          ae = q.size;
        let Ue = ae === undefined ? 0 : ae;
        var lt = q.timeout;
        let Pt = lt === undefined ? 0 : lt;
        if (a == null) {
          a = null;
        } else if (isURLSearchParams(a)) {
          a = Buffer.from(a.toString());
        } else if (isBlob(a));
        else if (Buffer.isBuffer(a));
        else if (Object.prototype.toString.call(a) === '[object ArrayBuffer]') {
          a = Buffer.from(a);
        } else if (ArrayBuffer.isView(a)) {
          a = Buffer.from(a.buffer, a.byteOffset, a.byteLength);
        } else if (a instanceof re);
        else {
          a = Buffer.from(String(a));
        }
        this[Qr] = { body: a, disturbed: false, error: null };
        this.size = Ue;
        this.timeout = Pt;
        if (a instanceof re) {
          a.on('error', function (a) {
            const q =
              a.name === 'AbortError'
                ? a
                : new FetchError(
                    `Invalid response body while trying to fetch ${C.url}: ${a.message}`,
                    'system',
                    a
                  );
            C[Qr].error = q;
          });
        }
      }
      Body.prototype = {
        get body() {
          return this[Qr].body;
        },
        get bodyUsed() {
          return this[Qr].disturbed;
        },
        arrayBuffer() {
          return consumeBody.call(this).then(function (a) {
            return a.buffer.slice(a.byteOffset, a.byteOffset + a.byteLength);
          });
        },
        blob() {
          let a = (this.headers && this.headers.get('content-type')) || '';
          return consumeBody.call(this).then(function (C) {
            return Object.assign(new Blob([], { type: a.toLowerCase() }), {
              [Er]: C
            });
          });
        },
        json() {
          var a = this;
          return consumeBody.call(this).then(function (C) {
            try {
              return JSON.parse(C.toString());
            } catch (C) {
              return Body.Promise.reject(
                new FetchError(
                  `invalid json response body at ${a.url} reason: ${C.message}`,
                  'invalid-json'
                )
              );
            }
          });
        },
        text() {
          return consumeBody.call(this).then(function (a) {
            return a.toString();
          });
        },
        buffer() {
          return consumeBody.call(this);
        },
        textConverted() {
          var a = this;
          return consumeBody.call(this).then(function (C) {
            return convertBody(C, a.headers);
          });
        }
      };
      Object.defineProperties(Body.prototype, {
        body: { enumerable: true },
        bodyUsed: { enumerable: true },
        arrayBuffer: { enumerable: true },
        blob: { enumerable: true },
        json: { enumerable: true },
        text: { enumerable: true }
      });
      Body.mixIn = function (a) {
        for (const C of Object.getOwnPropertyNames(Body.prototype)) {
          if (!(C in a)) {
            const q = Object.getOwnPropertyDescriptor(Body.prototype, C);
            Object.defineProperty(a, C, q);
          }
        }
      };
      function consumeBody() {
        var a = this;
        if (this[Qr].disturbed) {
          return Body.Promise.reject(
            new TypeError(`body used already for: ${this.url}`)
          );
        }
        this[Qr].disturbed = true;
        if (this[Qr].error) {
          return Body.Promise.reject(this[Qr].error);
        }
        let C = this.body;
        if (C === null) {
          return Body.Promise.resolve(Buffer.alloc(0));
        }
        if (isBlob(C)) {
          C = C.stream();
        }
        if (Buffer.isBuffer(C)) {
          return Body.Promise.resolve(C);
        }
        if (!(C instanceof re)) {
          return Body.Promise.resolve(Buffer.alloc(0));
        }
        let q = [];
        let ae = 0;
        let Ue = false;
        return new Body.Promise(function (re, lt) {
          let Pt;
          if (a.timeout) {
            Pt = setTimeout(function () {
              Ue = true;
              lt(
                new FetchError(
                  `Response timeout while trying to fetch ${a.url} (over ${a.timeout}ms)`,
                  'body-timeout'
                )
              );
            }, a.timeout);
          }
          C.on('error', function (C) {
            if (C.name === 'AbortError') {
              Ue = true;
              lt(C);
            } else {
              lt(
                new FetchError(
                  `Invalid response body while trying to fetch ${a.url}: ${C.message}`,
                  'system',
                  C
                )
              );
            }
          });
          C.on('data', function (C) {
            if (Ue || C === null) {
              return;
            }
            if (a.size && ae + C.length > a.size) {
              Ue = true;
              lt(
                new FetchError(
                  `content size at ${a.url} over limit: ${a.size}`,
                  'max-size'
                )
              );
              return;
            }
            ae += C.length;
            q.push(C);
          });
          C.on('end', function () {
            if (Ue) {
              return;
            }
            clearTimeout(Pt);
            try {
              re(Buffer.concat(q, ae));
            } catch (C) {
              lt(
                new FetchError(
                  `Could not create Buffer from response body for ${a.url}: ${C.message}`,
                  'system',
                  C
                )
              );
            }
          });
        });
      }
      function convertBody(a, C) {
        if (typeof Br !== 'function') {
          throw new Error(
            'The package `encoding` must be installed to use the textConverted() function'
          );
        }
        const q = C.get('content-type');
        let re = 'utf-8';
        let ae, Ue;
        if (q) {
          ae = /charset=([^;]*)/i.exec(q);
        }
        Ue = a.slice(0, 1024).toString();
        if (!ae && Ue) {
          ae = /<meta.+?charset=(['"])(.+?)\1/i.exec(Ue);
        }
        if (!ae && Ue) {
          ae =
            /<meta[\s]+?http-equiv=(['"])content-type\1[\s]+?content=(['"])(.+?)\2/i.exec(
              Ue
            );
          if (!ae) {
            ae =
              /<meta[\s]+?content=(['"])(.+?)\1[\s]+?http-equiv=(['"])content-type\3/i.exec(
                Ue
              );
            if (ae) {
              ae.pop();
            }
          }
          if (ae) {
            ae = /charset=(.*)/i.exec(ae.pop());
          }
        }
        if (!ae && Ue) {
          ae = /<\?xml.+?encoding=(['"])(.+?)\1/i.exec(Ue);
        }
        if (ae) {
          re = ae.pop();
          if (re === 'gb2312' || re === 'gbk') {
            re = 'gb18030';
          }
        }
        return Br(a, 'UTF-8', re).toString();
      }
      function isURLSearchParams(a) {
        if (
          typeof a !== 'object' ||
          typeof a.append !== 'function' ||
          typeof a.delete !== 'function' ||
          typeof a.get !== 'function' ||
          typeof a.getAll !== 'function' ||
          typeof a.has !== 'function' ||
          typeof a.set !== 'function'
        ) {
          return false;
        }
        return (
          a.constructor.name === 'URLSearchParams' ||
          Object.prototype.toString.call(a) === '[object URLSearchParams]' ||
          typeof a.sort === 'function'
        );
      }
      function isBlob(a) {
        return (
          typeof a === 'object' &&
          typeof a.arrayBuffer === 'function' &&
          typeof a.type === 'string' &&
          typeof a.stream === 'function' &&
          typeof a.constructor === 'function' &&
          typeof a.constructor.name === 'string' &&
          /^(Blob|File)$/.test(a.constructor.name) &&
          /^(Blob|File)$/.test(a[Symbol.toStringTag])
        );
      }
      function clone(a) {
        let C, q;
        let ae = a.body;
        if (a.bodyUsed) {
          throw new Error('cannot clone body after it is used');
        }
        if (ae instanceof re && typeof ae.getBoundary !== 'function') {
          C = new kr();
          q = new kr();
          ae.pipe(C);
          ae.pipe(q);
          a[Qr].body = C;
          ae = q;
        }
        return ae;
      }
      function extractContentType(a) {
        if (a === null) {
          return null;
        } else if (typeof a === 'string') {
          return 'text/plain;charset=UTF-8';
        } else if (isURLSearchParams(a)) {
          return 'application/x-www-form-urlencoded;charset=UTF-8';
        } else if (isBlob(a)) {
          return a.type || null;
        } else if (Buffer.isBuffer(a)) {
          return null;
        } else if (
          Object.prototype.toString.call(a) === '[object ArrayBuffer]'
        ) {
          return null;
        } else if (ArrayBuffer.isView(a)) {
          return null;
        } else if (typeof a.getBoundary === 'function') {
          return `multipart/form-data;boundary=${a.getBoundary()}`;
        } else if (a instanceof re) {
          return null;
        } else {
          return 'text/plain;charset=UTF-8';
        }
      }
      function getTotalBytes(a) {
        const C = a.body;
        if (C === null) {
          return 0;
        } else if (isBlob(C)) {
          return C.size;
        } else if (Buffer.isBuffer(C)) {
          return C.length;
        } else if (C && typeof C.getLengthSync === 'function') {
          if (
            (C._lengthRetrievers && C._lengthRetrievers.length == 0) ||
            (C.hasKnownLength && C.hasKnownLength())
          ) {
            return C.getLengthSync();
          }
          return null;
        } else {
          return null;
        }
      }
      function writeToStream(a, C) {
        const q = C.body;
        if (q === null) {
          a.end();
        } else if (isBlob(q)) {
          q.stream().pipe(a);
        } else if (Buffer.isBuffer(q)) {
          a.write(q);
          a.end();
        } else {
          q.pipe(a);
        }
      }
      Body.Promise = global.Promise;
      const Dr = /[^\^_`a-zA-Z\-0-9!#$%&'*+.|~]/;
      const Nr = /[^\t\x20-\x7e\x80-\xff]/;
      function validateName(a) {
        a = `${a}`;
        if (Dr.test(a) || a === '') {
          throw new TypeError(`${a} is not a legal HTTP header name`);
        }
      }
      function validateValue(a) {
        a = `${a}`;
        if (Nr.test(a)) {
          throw new TypeError(`${a} is not a legal HTTP header value`);
        }
      }
      function find(a, C) {
        C = C.toLowerCase();
        for (const q in a) {
          if (q.toLowerCase() === C) {
            return q;
          }
        }
        return undefined;
      }
      const Lr = Symbol('map');
      class Headers {
        constructor() {
          let a =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : undefined;
          this[Lr] = Object.create(null);
          if (a instanceof Headers) {
            const C = a.raw();
            const q = Object.keys(C);
            for (const a of q) {
              for (const q of C[a]) {
                this.append(a, q);
              }
            }
            return;
          }
          if (a == null);
          else if (typeof a === 'object') {
            const C = a[Symbol.iterator];
            if (C != null) {
              if (typeof C !== 'function') {
                throw new TypeError('Header pairs must be iterable');
              }
              const q = [];
              for (const C of a) {
                if (
                  typeof C !== 'object' ||
                  typeof C[Symbol.iterator] !== 'function'
                ) {
                  throw new TypeError('Each header pair must be iterable');
                }
                q.push(Array.from(C));
              }
              for (const a of q) {
                if (a.length !== 2) {
                  throw new TypeError(
                    'Each header pair must be a name/value tuple'
                  );
                }
                this.append(a[0], a[1]);
              }
            } else {
              for (const C of Object.keys(a)) {
                const q = a[C];
                this.append(C, q);
              }
            }
          } else {
            throw new TypeError('Provided initializer must be an object');
          }
        }
        get(a) {
          a = `${a}`;
          validateName(a);
          const C = find(this[Lr], a);
          if (C === undefined) {
            return null;
          }
          return this[Lr][C].join(', ');
        }
        forEach(a) {
          let C =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : undefined;
          let q = getHeaders(this);
          let re = 0;
          while (re < q.length) {
            var ae = q[re];
            const Ue = ae[0],
              lt = ae[1];
            a.call(C, lt, Ue, this);
            q = getHeaders(this);
            re++;
          }
        }
        set(a, C) {
          a = `${a}`;
          C = `${C}`;
          validateName(a);
          validateValue(C);
          const q = find(this[Lr], a);
          this[Lr][q !== undefined ? q : a] = [C];
        }
        append(a, C) {
          a = `${a}`;
          C = `${C}`;
          validateName(a);
          validateValue(C);
          const q = find(this[Lr], a);
          if (q !== undefined) {
            this[Lr][q].push(C);
          } else {
            this[Lr][a] = [C];
          }
        }
        has(a) {
          a = `${a}`;
          validateName(a);
          return find(this[Lr], a) !== undefined;
        }
        delete(a) {
          a = `${a}`;
          validateName(a);
          const C = find(this[Lr], a);
          if (C !== undefined) {
            delete this[Lr][C];
          }
        }
        raw() {
          return this[Lr];
        }
        keys() {
          return createHeadersIterator(this, 'key');
        }
        values() {
          return createHeadersIterator(this, 'value');
        }
        [Symbol.iterator]() {
          return createHeadersIterator(this, 'key+value');
        }
      }
      Headers.prototype.entries = Headers.prototype[Symbol.iterator];
      Object.defineProperty(Headers.prototype, Symbol.toStringTag, {
        value: 'Headers',
        writable: false,
        enumerable: false,
        configurable: true
      });
      Object.defineProperties(Headers.prototype, {
        get: { enumerable: true },
        forEach: { enumerable: true },
        set: { enumerable: true },
        append: { enumerable: true },
        has: { enumerable: true },
        delete: { enumerable: true },
        keys: { enumerable: true },
        values: { enumerable: true },
        entries: { enumerable: true }
      });
      function getHeaders(a) {
        let C =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : 'key+value';
        const q = Object.keys(a[Lr]).sort();
        return q.map(
          C === 'key'
            ? function (a) {
                return a.toLowerCase();
              }
            : C === 'value'
              ? function (C) {
                  return a[Lr][C].join(', ');
                }
              : function (C) {
                  return [C.toLowerCase(), a[Lr][C].join(', ')];
                }
        );
      }
      const Fr = Symbol('internal');
      function createHeadersIterator(a, C) {
        const q = Object.create(Mr);
        q[Fr] = { target: a, kind: C, index: 0 };
        return q;
      }
      const Mr = Object.setPrototypeOf(
        {
          next() {
            if (!this || Object.getPrototypeOf(this) !== Mr) {
              throw new TypeError('Value of `this` is not a HeadersIterator');
            }
            var a = this[Fr];
            const C = a.target,
              q = a.kind,
              re = a.index;
            const ae = getHeaders(C, q);
            const Ue = ae.length;
            if (re >= Ue) {
              return { value: undefined, done: true };
            }
            this[Fr].index = re + 1;
            return { value: ae[re], done: false };
          }
        },
        Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))
      );
      Object.defineProperty(Mr, Symbol.toStringTag, {
        value: 'HeadersIterator',
        writable: false,
        enumerable: false,
        configurable: true
      });
      function exportNodeCompatibleHeaders(a) {
        const C = Object.assign({ __proto__: null }, a[Lr]);
        const q = find(a[Lr], 'Host');
        if (q !== undefined) {
          C[q] = C[q][0];
        }
        return C;
      }
      function createHeadersLenient(a) {
        const C = new Headers();
        for (const q of Object.keys(a)) {
          if (Dr.test(q)) {
            continue;
          }
          if (Array.isArray(a[q])) {
            for (const re of a[q]) {
              if (Nr.test(re)) {
                continue;
              }
              if (C[Lr][q] === undefined) {
                C[Lr][q] = [re];
              } else {
                C[Lr][q].push(re);
              }
            }
          } else if (!Nr.test(a[q])) {
            C[Lr][q] = [a[q]];
          }
        }
        return C;
      }
      const Pr = Symbol('Response internals');
      const Or = ae.STATUS_CODES;
      class Response {
        constructor() {
          let a =
            arguments.length > 0 && arguments[0] !== undefined
              ? arguments[0]
              : null;
          let C =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {};
          Body.call(this, a, C);
          const q = C.status || 200;
          const re = new Headers(C.headers);
          if (a != null && !re.has('Content-Type')) {
            const C = extractContentType(a);
            if (C) {
              re.append('Content-Type', C);
            }
          }
          this[Pr] = {
            url: C.url,
            status: q,
            statusText: C.statusText || Or[q],
            headers: re,
            counter: C.counter
          };
        }
        get url() {
          return this[Pr].url || '';
        }
        get status() {
          return this[Pr].status;
        }
        get ok() {
          return this[Pr].status >= 200 && this[Pr].status < 300;
        }
        get redirected() {
          return this[Pr].counter > 0;
        }
        get statusText() {
          return this[Pr].statusText;
        }
        get headers() {
          return this[Pr].headers;
        }
        clone() {
          return new Response(clone(this), {
            url: this.url,
            status: this.status,
            statusText: this.statusText,
            headers: this.headers,
            ok: this.ok,
            redirected: this.redirected
          });
        }
      }
      Body.mixIn(Response.prototype);
      Object.defineProperties(Response.prototype, {
        url: { enumerable: true },
        status: { enumerable: true },
        ok: { enumerable: true },
        redirected: { enumerable: true },
        statusText: { enumerable: true },
        headers: { enumerable: true },
        clone: { enumerable: true }
      });
      Object.defineProperty(Response.prototype, Symbol.toStringTag, {
        value: 'Response',
        writable: false,
        enumerable: false,
        configurable: true
      });
      const xr = Symbol('Request internals');
      const Ur = Ue.URL || lt.URL;
      const Gr = Ue.parse;
      const Hr = Ue.format;
      function parseURL(a) {
        if (/^[a-zA-Z][a-zA-Z\d+\-.]*:/.exec(a)) {
          a = new Ur(a).toString();
        }
        return Gr(a);
      }
      const Vr = 'destroy' in re.Readable.prototype;
      function isRequest(a) {
        return typeof a === 'object' && typeof a[xr] === 'object';
      }
      function isAbortSignal(a) {
        const C = a && typeof a === 'object' && Object.getPrototypeOf(a);
        return !!(C && C.constructor.name === 'AbortSignal');
      }
      class Request {
        constructor(a) {
          let C =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {};
          let q;
          if (!isRequest(a)) {
            if (a && a.href) {
              q = parseURL(a.href);
            } else {
              q = parseURL(`${a}`);
            }
            a = {};
          } else {
            q = parseURL(a.url);
          }
          let re = C.method || a.method || 'GET';
          re = re.toUpperCase();
          if (
            (C.body != null || (isRequest(a) && a.body !== null)) &&
            (re === 'GET' || re === 'HEAD')
          ) {
            throw new TypeError(
              'Request with GET/HEAD method cannot have body'
            );
          }
          let ae =
            C.body != null
              ? C.body
              : isRequest(a) && a.body !== null
                ? clone(a)
                : null;
          Body.call(this, ae, {
            timeout: C.timeout || a.timeout || 0,
            size: C.size || a.size || 0
          });
          const Ue = new Headers(C.headers || a.headers || {});
          if (ae != null && !Ue.has('Content-Type')) {
            const a = extractContentType(ae);
            if (a) {
              Ue.append('Content-Type', a);
            }
          }
          let lt = isRequest(a) ? a.signal : null;
          if ('signal' in C) lt = C.signal;
          if (lt != null && !isAbortSignal(lt)) {
            throw new TypeError(
              'Expected signal to be an instanceof AbortSignal'
            );
          }
          this[xr] = {
            method: re,
            redirect: C.redirect || a.redirect || 'follow',
            headers: Ue,
            parsedURL: q,
            signal: lt
          };
          this.follow =
            C.follow !== undefined
              ? C.follow
              : a.follow !== undefined
                ? a.follow
                : 20;
          this.compress =
            C.compress !== undefined
              ? C.compress
              : a.compress !== undefined
                ? a.compress
                : true;
          this.counter = C.counter || a.counter || 0;
          this.agent = C.agent || a.agent;
        }
        get method() {
          return this[xr].method;
        }
        get url() {
          return Hr(this[xr].parsedURL);
        }
        get headers() {
          return this[xr].headers;
        }
        get redirect() {
          return this[xr].redirect;
        }
        get signal() {
          return this[xr].signal;
        }
        clone() {
          return new Request(this);
        }
      }
      Body.mixIn(Request.prototype);
      Object.defineProperty(Request.prototype, Symbol.toStringTag, {
        value: 'Request',
        writable: false,
        enumerable: false,
        configurable: true
      });
      Object.defineProperties(Request.prototype, {
        method: { enumerable: true },
        url: { enumerable: true },
        headers: { enumerable: true },
        redirect: { enumerable: true },
        clone: { enumerable: true },
        signal: { enumerable: true }
      });
      function getNodeRequestOptions(a) {
        const C = a[xr].parsedURL;
        const q = new Headers(a[xr].headers);
        if (!q.has('Accept')) {
          q.set('Accept', '*/*');
        }
        if (!C.protocol || !C.hostname) {
          throw new TypeError('Only absolute URLs are supported');
        }
        if (!/^https?:$/.test(C.protocol)) {
          throw new TypeError('Only HTTP(S) protocols are supported');
        }
        if (a.signal && a.body instanceof re.Readable && !Vr) {
          throw new Error(
            'Cancellation of streamed requests with AbortSignal is not supported in node < 8'
          );
        }
        let ae = null;
        if (a.body == null && /^(POST|PUT)$/i.test(a.method)) {
          ae = '0';
        }
        if (a.body != null) {
          const C = getTotalBytes(a);
          if (typeof C === 'number') {
            ae = String(C);
          }
        }
        if (ae) {
          q.set('Content-Length', ae);
        }
        if (!q.has('User-Agent')) {
          q.set(
            'User-Agent',
            'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)'
          );
        }
        if (a.compress && !q.has('Accept-Encoding')) {
          q.set('Accept-Encoding', 'gzip,deflate');
        }
        let Ue = a.agent;
        if (typeof Ue === 'function') {
          Ue = Ue(C);
        }
        return Object.assign({}, C, {
          method: a.method,
          headers: exportNodeCompatibleHeaders(q),
          agent: Ue
        });
      }
      function AbortError(a) {
        Error.call(this, a);
        this.type = 'aborted';
        this.message = a;
        Error.captureStackTrace(this, this.constructor);
      }
      AbortError.prototype = Object.create(Error.prototype);
      AbortError.prototype.constructor = AbortError;
      AbortError.prototype.name = 'AbortError';
      const Wr = Ue.URL || lt.URL;
      const Yr = re.PassThrough;
      const jr = function isDomainOrSubdomain(a, C) {
        const q = new Wr(C).hostname;
        const re = new Wr(a).hostname;
        return (
          q === re || (q[q.length - re.length - 1] === '.' && q.endsWith(re))
        );
      };
      const Jr = function isSameProtocol(a, C) {
        const q = new Wr(C).protocol;
        const re = new Wr(a).protocol;
        return q === re;
      };
      function fetch(a, C) {
        if (!fetch.Promise) {
          throw new Error(
            'native promise missing, set fetch.Promise to your favorite alternative'
          );
        }
        Body.Promise = fetch.Promise;
        return new fetch.Promise(function (q, Ue) {
          const lt = new Request(a, C);
          const Ar = getNodeRequestOptions(lt);
          const Er = (Ar.protocol === 'https:' ? Pt : ae).request;
          const Ir = lt.signal;
          let Br = null;
          const Qr = function abort() {
            let a = new AbortError('The user aborted a request.');
            Ue(a);
            if (lt.body && lt.body instanceof re.Readable) {
              destroyStream(lt.body, a);
            }
            if (!Br || !Br.body) return;
            Br.body.emit('error', a);
          };
          if (Ir && Ir.aborted) {
            Qr();
            return;
          }
          const kr = function abortAndFinalize() {
            Qr();
            finalize();
          };
          const Dr = Er(Ar);
          let Nr;
          if (Ir) {
            Ir.addEventListener('abort', kr);
          }
          function finalize() {
            Dr.abort();
            if (Ir) Ir.removeEventListener('abort', kr);
            clearTimeout(Nr);
          }
          if (lt.timeout) {
            Dr.once('socket', function (a) {
              Nr = setTimeout(function () {
                Ue(
                  new FetchError(
                    `network timeout at: ${lt.url}`,
                    'request-timeout'
                  )
                );
                finalize();
              }, lt.timeout);
            });
          }
          Dr.on('error', function (a) {
            Ue(
              new FetchError(
                `request to ${lt.url} failed, reason: ${a.message}`,
                'system',
                a
              )
            );
            if (Br && Br.body) {
              destroyStream(Br.body, a);
            }
            finalize();
          });
          fixResponseChunkedTransferBadEnding(Dr, function (a) {
            if (Ir && Ir.aborted) {
              return;
            }
            if (Br && Br.body) {
              destroyStream(Br.body, a);
            }
          });
          if (parseInt(process.version.substring(1)) < 14) {
            Dr.on('socket', function (a) {
              a.addListener('close', function (C) {
                const q = a.listenerCount('data') > 0;
                if (Br && q && !C && !(Ir && Ir.aborted)) {
                  const a = new Error('Premature close');
                  a.code = 'ERR_STREAM_PREMATURE_CLOSE';
                  Br.body.emit('error', a);
                }
              });
            });
          }
          Dr.on('response', function (a) {
            clearTimeout(Nr);
            const C = createHeadersLenient(a.headers);
            if (fetch.isRedirect(a.statusCode)) {
              const re = C.get('Location');
              let ae = null;
              try {
                ae = re === null ? null : new Wr(re, lt.url).toString();
              } catch (a) {
                if (lt.redirect !== 'manual') {
                  Ue(
                    new FetchError(
                      `uri requested responds with an invalid redirect URL: ${re}`,
                      'invalid-redirect'
                    )
                  );
                  finalize();
                  return;
                }
              }
              switch (lt.redirect) {
                case 'error':
                  Ue(
                    new FetchError(
                      `uri requested responds with a redirect, redirect mode is set to error: ${lt.url}`,
                      'no-redirect'
                    )
                  );
                  finalize();
                  return;
                case 'manual':
                  if (ae !== null) {
                    try {
                      C.set('Location', ae);
                    } catch (a) {
                      Ue(a);
                    }
                  }
                  break;
                case 'follow':
                  if (ae === null) {
                    break;
                  }
                  if (lt.counter >= lt.follow) {
                    Ue(
                      new FetchError(
                        `maximum redirect reached at: ${lt.url}`,
                        'max-redirect'
                      )
                    );
                    finalize();
                    return;
                  }
                  const re = {
                    headers: new Headers(lt.headers),
                    follow: lt.follow,
                    counter: lt.counter + 1,
                    agent: lt.agent,
                    compress: lt.compress,
                    method: lt.method,
                    body: lt.body,
                    signal: lt.signal,
                    timeout: lt.timeout,
                    size: lt.size
                  };
                  if (!jr(lt.url, ae) || !Jr(lt.url, ae)) {
                    for (const a of [
                      'authorization',
                      'www-authenticate',
                      'cookie',
                      'cookie2'
                    ]) {
                      re.headers.delete(a);
                    }
                  }
                  if (
                    a.statusCode !== 303 &&
                    lt.body &&
                    getTotalBytes(lt) === null
                  ) {
                    Ue(
                      new FetchError(
                        'Cannot follow redirect with body being a readable stream',
                        'unsupported-redirect'
                      )
                    );
                    finalize();
                    return;
                  }
                  if (
                    a.statusCode === 303 ||
                    ((a.statusCode === 301 || a.statusCode === 302) &&
                      lt.method === 'POST')
                  ) {
                    re.method = 'GET';
                    re.body = undefined;
                    re.headers.delete('content-length');
                  }
                  q(fetch(new Request(ae, re)));
                  finalize();
                  return;
              }
            }
            a.once('end', function () {
              if (Ir) Ir.removeEventListener('abort', kr);
            });
            let re = a.pipe(new Yr());
            const ae = {
              url: lt.url,
              status: a.statusCode,
              statusText: a.statusMessage,
              headers: C,
              size: lt.size,
              timeout: lt.timeout,
              counter: lt.counter
            };
            const Pt = C.get('Content-Encoding');
            if (
              !lt.compress ||
              lt.method === 'HEAD' ||
              Pt === null ||
              a.statusCode === 204 ||
              a.statusCode === 304
            ) {
              Br = new Response(re, ae);
              q(Br);
              return;
            }
            const Ar = { flush: Wt.Z_SYNC_FLUSH, finishFlush: Wt.Z_SYNC_FLUSH };
            if (Pt == 'gzip' || Pt == 'x-gzip') {
              re = re.pipe(Wt.createGunzip(Ar));
              Br = new Response(re, ae);
              q(Br);
              return;
            }
            if (Pt == 'deflate' || Pt == 'x-deflate') {
              const C = a.pipe(new Yr());
              C.once('data', function (a) {
                if ((a[0] & 15) === 8) {
                  re = re.pipe(Wt.createInflate());
                } else {
                  re = re.pipe(Wt.createInflateRaw());
                }
                Br = new Response(re, ae);
                q(Br);
              });
              C.on('end', function () {
                if (!Br) {
                  Br = new Response(re, ae);
                  q(Br);
                }
              });
              return;
            }
            if (Pt == 'br' && typeof Wt.createBrotliDecompress === 'function') {
              re = re.pipe(Wt.createBrotliDecompress());
              Br = new Response(re, ae);
              q(Br);
              return;
            }
            Br = new Response(re, ae);
            q(Br);
          });
          writeToStream(Dr, lt);
        });
      }
      function fixResponseChunkedTransferBadEnding(a, C) {
        let q;
        a.on('socket', function (a) {
          q = a;
        });
        a.on('response', function (a) {
          const re = a.headers;
          if (re['transfer-encoding'] === 'chunked' && !re['content-length']) {
            a.once('close', function (a) {
              const re = q && q.listenerCount('data') > 0;
              if (re && !a) {
                const a = new Error('Premature close');
                a.code = 'ERR_STREAM_PREMATURE_CLOSE';
                C(a);
              }
            });
          }
        });
      }
      function destroyStream(a, C) {
        if (a.destroy) {
          a.destroy(C);
        } else {
          a.emit('error', C);
          a.end();
        }
      }
      fetch.isRedirect = function (a) {
        return a === 301 || a === 302 || a === 303 || a === 307 || a === 308;
      };
      fetch.Promise = global.Promise;
      a.exports = C = fetch;
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = C;
      C.Headers = Headers;
      C.Request = Request;
      C.Response = Response;
      C.FetchError = FetchError;
      C.AbortError = AbortError;
    },
    9472: (a, C, q) => {
      var re = q(666);
      a.exports = re(once);
      a.exports.strict = re(onceStrict);
      once.proto = once(function () {
        Object.defineProperty(Function.prototype, 'once', {
          value: function () {
            return once(this);
          },
          configurable: true
        });
        Object.defineProperty(Function.prototype, 'onceStrict', {
          value: function () {
            return onceStrict(this);
          },
          configurable: true
        });
      });
      function once(a) {
        var f = function () {
          if (f.called) return f.value;
          f.called = true;
          return (f.value = a.apply(this, arguments));
        };
        f.called = false;
        return f;
      }
      function onceStrict(a) {
        var f = function () {
          if (f.called) throw new Error(f.onceError);
          f.called = true;
          return (f.value = a.apply(this, arguments));
        };
        var C = a.name || 'Function wrapped with `once`';
        f.onceError = C + " shouldn't be called more than once";
        f.called = false;
        return f;
      }
    },
    7256: (a, C, q) => {
      'use strict';
      var re = q(5477);
      var ae = q(1229);
      var Ue = { TRANSITIONAL: 0, NONTRANSITIONAL: 1 };
      function normalize(a) {
        return a
          .split('\0')
          .map(function (a) {
            return a.normalize('NFC');
          })
          .join('\0');
      }
      function findStatus(a) {
        var C = 0;
        var q = ae.length - 1;
        while (C <= q) {
          var re = Math.floor((C + q) / 2);
          var Ue = ae[re];
          if (Ue[0][0] <= a && Ue[0][1] >= a) {
            return Ue;
          } else if (Ue[0][0] > a) {
            q = re - 1;
          } else {
            C = re + 1;
          }
        }
        return null;
      }
      var lt = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
      function countSymbols(a) {
        return a.replace(lt, '_').length;
      }
      function mapChars(a, C, q) {
        var re = false;
        var ae = '';
        var lt = countSymbols(a);
        for (var Pt = 0; Pt < lt; ++Pt) {
          var Wt = a.codePointAt(Pt);
          var Ar = findStatus(Wt);
          switch (Ar[1]) {
            case 'disallowed':
              re = true;
              ae += String.fromCodePoint(Wt);
              break;
            case 'ignored':
              break;
            case 'mapped':
              ae += String.fromCodePoint.apply(String, Ar[2]);
              break;
            case 'deviation':
              if (q === Ue.TRANSITIONAL) {
                ae += String.fromCodePoint.apply(String, Ar[2]);
              } else {
                ae += String.fromCodePoint(Wt);
              }
              break;
            case 'valid':
              ae += String.fromCodePoint(Wt);
              break;
            case 'disallowed_STD3_mapped':
              if (C) {
                re = true;
                ae += String.fromCodePoint(Wt);
              } else {
                ae += String.fromCodePoint.apply(String, Ar[2]);
              }
              break;
            case 'disallowed_STD3_valid':
              if (C) {
                re = true;
              }
              ae += String.fromCodePoint(Wt);
              break;
          }
        }
        return { string: ae, error: re };
      }
      var Pt =
        /[\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D01-\u0D03\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u192B\u1930-\u193B\u19B0-\u19C0\u19C8\u19C9\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2D]|\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDE2C-\uDE37\uDEDF-\uDEEA\uDF01-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDE30-\uDE40\uDEAB-\uDEB7]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD83A[\uDCD0-\uDCD6]|\uDB40[\uDD00-\uDDEF]/;
      function validateLabel(a, C) {
        if (a.substr(0, 4) === 'xn--') {
          a = re.toUnicode(a);
          C = Ue.NONTRANSITIONAL;
        }
        var q = false;
        if (
          normalize(a) !== a ||
          (a[3] === '-' && a[4] === '-') ||
          a[0] === '-' ||
          a[a.length - 1] === '-' ||
          a.indexOf('.') !== -1 ||
          a.search(Pt) === 0
        ) {
          q = true;
        }
        var ae = countSymbols(a);
        for (var lt = 0; lt < ae; ++lt) {
          var Wt = findStatus(a.codePointAt(lt));
          if (
            (processing === Ue.TRANSITIONAL && Wt[1] !== 'valid') ||
            (processing === Ue.NONTRANSITIONAL &&
              Wt[1] !== 'valid' &&
              Wt[1] !== 'deviation')
          ) {
            q = true;
            break;
          }
        }
        return { label: a, error: q };
      }
      function processing(a, C, q) {
        var re = mapChars(a, C, q);
        re.string = normalize(re.string);
        var ae = re.string.split('.');
        for (var Ue = 0; Ue < ae.length; ++Ue) {
          try {
            var lt = validateLabel(ae[Ue]);
            ae[Ue] = lt.label;
            re.error = re.error || lt.error;
          } catch (a) {
            re.error = true;
          }
        }
        return { string: ae.join('.'), error: re.error };
      }
      a.exports.toASCII = function (a, C, q, ae) {
        var Ue = processing(a, C, q);
        var lt = Ue.string.split('.');
        lt = lt.map(function (a) {
          try {
            return re.toASCII(a);
          } catch (C) {
            Ue.error = true;
            return a;
          }
        });
        if (ae) {
          var Pt = lt.slice(0, lt.length - 1).join('.').length;
          if (Pt.length > 253 || Pt.length === 0) {
            Ue.error = true;
          }
          for (var Wt = 0; Wt < lt.length; ++Wt) {
            if (lt.length > 63 || lt.length === 0) {
              Ue.error = true;
              break;
            }
          }
        }
        if (Ue.error) return null;
        return lt.join('.');
      };
      a.exports.toUnicode = function (a, C) {
        var q = processing(a, C, Ue.NONTRANSITIONAL);
        return { domain: q.string, error: q.error };
      };
      a.exports.PROCESSING_OPTIONS = Ue;
    },
    4225: (a, C, q) => {
      a.exports = q(4030);
    },
    4030: (a, C, q) => {
      'use strict';
      var re = q(1808);
      var ae = q(4404);
      var Ue = q(3685);
      var lt = q(5687);
      var Pt = q(2361);
      var Wt = q(9491);
      var Ar = q(3837);
      C.httpOverHttp = httpOverHttp;
      C.httpsOverHttp = httpsOverHttp;
      C.httpOverHttps = httpOverHttps;
      C.httpsOverHttps = httpsOverHttps;
      function httpOverHttp(a) {
        var C = new TunnelingAgent(a);
        C.request = Ue.request;
        return C;
      }
      function httpsOverHttp(a) {
        var C = new TunnelingAgent(a);
        C.request = Ue.request;
        C.createSocket = createSecureSocket;
        C.defaultPort = 443;
        return C;
      }
      function httpOverHttps(a) {
        var C = new TunnelingAgent(a);
        C.request = lt.request;
        return C;
      }
      function httpsOverHttps(a) {
        var C = new TunnelingAgent(a);
        C.request = lt.request;
        C.createSocket = createSecureSocket;
        C.defaultPort = 443;
        return C;
      }
      function TunnelingAgent(a) {
        var C = this;
        C.options = a || {};
        C.proxyOptions = C.options.proxy || {};
        C.maxSockets = C.options.maxSockets || Ue.Agent.defaultMaxSockets;
        C.requests = [];
        C.sockets = [];
        C.on('free', function onFree(a, q, re, ae) {
          var Ue = toOptions(q, re, ae);
          for (var lt = 0, Pt = C.requests.length; lt < Pt; ++lt) {
            var Wt = C.requests[lt];
            if (Wt.host === Ue.host && Wt.port === Ue.port) {
              C.requests.splice(lt, 1);
              Wt.request.onSocket(a);
              return;
            }
          }
          a.destroy();
          C.removeSocket(a);
        });
      }
      Ar.inherits(TunnelingAgent, Pt.EventEmitter);
      TunnelingAgent.prototype.addRequest = function addRequest(a, C, q, re) {
        var ae = this;
        var Ue = mergeOptions({ request: a }, ae.options, toOptions(C, q, re));
        if (ae.sockets.length >= this.maxSockets) {
          ae.requests.push(Ue);
          return;
        }
        ae.createSocket(Ue, function (C) {
          C.on('free', onFree);
          C.on('close', onCloseOrRemove);
          C.on('agentRemove', onCloseOrRemove);
          a.onSocket(C);
          function onFree() {
            ae.emit('free', C, Ue);
          }
          function onCloseOrRemove(a) {
            ae.removeSocket(C);
            C.removeListener('free', onFree);
            C.removeListener('close', onCloseOrRemove);
            C.removeListener('agentRemove', onCloseOrRemove);
          }
        });
      };
      TunnelingAgent.prototype.createSocket = function createSocket(a, C) {
        var q = this;
        var re = {};
        q.sockets.push(re);
        var ae = mergeOptions({}, q.proxyOptions, {
          method: 'CONNECT',
          path: a.host + ':' + a.port,
          agent: false,
          headers: { host: a.host + ':' + a.port }
        });
        if (a.localAddress) {
          ae.localAddress = a.localAddress;
        }
        if (ae.proxyAuth) {
          ae.headers = ae.headers || {};
          ae.headers['Proxy-Authorization'] =
            'Basic ' + new Buffer(ae.proxyAuth).toString('base64');
        }
        Er('making CONNECT request');
        var Ue = q.request(ae);
        Ue.useChunkedEncodingByDefault = false;
        Ue.once('response', onResponse);
        Ue.once('upgrade', onUpgrade);
        Ue.once('connect', onConnect);
        Ue.once('error', onError);
        Ue.end();
        function onResponse(a) {
          a.upgrade = true;
        }
        function onUpgrade(a, C, q) {
          process.nextTick(function () {
            onConnect(a, C, q);
          });
        }
        function onConnect(ae, lt, Pt) {
          Ue.removeAllListeners();
          lt.removeAllListeners();
          if (ae.statusCode !== 200) {
            Er(
              'tunneling socket could not be established, statusCode=%d',
              ae.statusCode
            );
            lt.destroy();
            var Wt = new Error(
              'tunneling socket could not be established, ' +
                'statusCode=' +
                ae.statusCode
            );
            Wt.code = 'ECONNRESET';
            a.request.emit('error', Wt);
            q.removeSocket(re);
            return;
          }
          if (Pt.length > 0) {
            Er('got illegal response body from proxy');
            lt.destroy();
            var Wt = new Error('got illegal response body from proxy');
            Wt.code = 'ECONNRESET';
            a.request.emit('error', Wt);
            q.removeSocket(re);
            return;
          }
          Er('tunneling connection has established');
          q.sockets[q.sockets.indexOf(re)] = lt;
          return C(lt);
        }
        function onError(C) {
          Ue.removeAllListeners();
          Er(
            'tunneling socket could not be established, cause=%s\n',
            C.message,
            C.stack
          );
          var ae = new Error(
            'tunneling socket could not be established, ' + 'cause=' + C.message
          );
          ae.code = 'ECONNRESET';
          a.request.emit('error', ae);
          q.removeSocket(re);
        }
      };
      TunnelingAgent.prototype.removeSocket = function removeSocket(a) {
        var C = this.sockets.indexOf(a);
        if (C === -1) {
          return;
        }
        this.sockets.splice(C, 1);
        var q = this.requests.shift();
        if (q) {
          this.createSocket(q, function (a) {
            q.request.onSocket(a);
          });
        }
      };
      function createSecureSocket(a, C) {
        var q = this;
        TunnelingAgent.prototype.createSocket.call(q, a, function (re) {
          var Ue = a.request.getHeader('host');
          var lt = mergeOptions({}, q.options, {
            socket: re,
            servername: Ue ? Ue.replace(/:.*$/, '') : a.host
          });
          var Pt = ae.connect(0, lt);
          q.sockets[q.sockets.indexOf(re)] = Pt;
          C(Pt);
        });
      }
      function toOptions(a, C, q) {
        if (typeof a === 'string') {
          return { host: a, port: C, localAddress: q };
        }
        return a;
      }
      function mergeOptions(a) {
        for (var C = 1, q = arguments.length; C < q; ++C) {
          var re = arguments[C];
          if (typeof re === 'object') {
            var ae = Object.keys(re);
            for (var Ue = 0, lt = ae.length; Ue < lt; ++Ue) {
              var Pt = ae[Ue];
              if (re[Pt] !== undefined) {
                a[Pt] = re[Pt];
              }
            }
          }
        }
        return a;
      }
      var Er;
      if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
        Er = function () {
          var a = Array.prototype.slice.call(arguments);
          if (typeof a[0] === 'string') {
            a[0] = 'TUNNEL: ' + a[0];
          } else {
            a.unshift('TUNNEL:');
          }
          console.error.apply(console, a);
        };
      } else {
        Er = function () {};
      }
      C.debug = Er;
    },
    8949: (a, C) => {
      'use strict';
      var q;
      q = { value: true };
      var re = /highlight-(?:text|source)-([a-z0-9]+)/;
      function highlightedCodeBlock(a) {
        a.addRule('highlightedCodeBlock', {
          filter: function (a) {
            var C = a.firstChild;
            return (
              a.nodeName === 'DIV' &&
              re.test(a.className) &&
              C &&
              C.nodeName === 'PRE'
            );
          },
          replacement: function (a, C, q) {
            var ae = C.className || '';
            var Ue = (ae.match(re) || [null, ''])[1];
            return (
              '\n\n' +
              q.fence +
              Ue +
              '\n' +
              C.firstChild.textContent +
              '\n' +
              q.fence +
              '\n\n'
            );
          }
        });
      }
      function strikethrough(a) {
        a.addRule('strikethrough', {
          filter: ['del', 's', 'strike'],
          replacement: function (a) {
            return '~' + a + '~';
          }
        });
      }
      var ae = Array.prototype.indexOf;
      var Ue = Array.prototype.every;
      var lt = {};
      lt.tableCell = {
        filter: ['th', 'td'],
        replacement: function (a, C) {
          return cell(a, C);
        }
      };
      lt.tableRow = {
        filter: 'tr',
        replacement: function (a, C) {
          var q = '';
          var re = { left: ':--', right: '--:', center: ':-:' };
          if (isHeadingRow(C)) {
            for (var ae = 0; ae < C.childNodes.length; ae++) {
              var Ue = '---';
              var lt = (
                C.childNodes[ae].getAttribute('align') || ''
              ).toLowerCase();
              if (lt) Ue = re[lt] || Ue;
              q += cell(Ue, C.childNodes[ae]);
            }
          }
          return '\n' + a + (q ? '\n' + q : '');
        }
      };
      lt.table = {
        filter: function (a) {
          return a.nodeName === 'TABLE' && isHeadingRow(a.rows[0]);
        },
        replacement: function (a) {
          a = a.replace('\n\n', '\n');
          return '\n\n' + a + '\n\n';
        }
      };
      lt.tableSection = {
        filter: ['thead', 'tbody', 'tfoot'],
        replacement: function (a) {
          return a;
        }
      };
      function isHeadingRow(a) {
        var C = a.parentNode;
        return (
          C.nodeName === 'THEAD' ||
          (C.firstChild === a &&
            (C.nodeName === 'TABLE' || isFirstTbody(C)) &&
            Ue.call(a.childNodes, function (a) {
              return a.nodeName === 'TH';
            }))
        );
      }
      function isFirstTbody(a) {
        var C = a.previousSibling;
        return (
          a.nodeName === 'TBODY' &&
          (!C || (C.nodeName === 'THEAD' && /^\s*$/i.test(C.textContent)))
        );
      }
      function cell(a, C) {
        var q = ae.call(C.parentNode.childNodes, C);
        var re = ' ';
        if (q === 0) re = '| ';
        return re + a + ' |';
      }
      function tables(a) {
        a.keep(function (a) {
          return a.nodeName === 'TABLE' && !isHeadingRow(a.rows[0]);
        });
        for (var C in lt) a.addRule(C, lt[C]);
      }
      function taskListItems(a) {
        a.addRule('taskListItems', {
          filter: function (a) {
            return a.type === 'checkbox' && a.parentNode.nodeName === 'LI';
          },
          replacement: function (a, C) {
            return (C.checked ? '[x]' : '[ ]') + ' ';
          }
        });
      }
      function gfm(a) {
        a.use([highlightedCodeBlock, strikethrough, tables, taskListItems]);
      }
      C.r0 = gfm;
      q = highlightedCodeBlock;
      C.Jq = strikethrough;
      C.EY = tables;
      C.BX = taskListItems;
    },
    1955: (a, C, q) => {
      'use strict';
      function extend(a) {
        for (var C = 1; C < arguments.length; C++) {
          var q = arguments[C];
          for (var re in q) {
            if (q.hasOwnProperty(re)) a[re] = q[re];
          }
        }
        return a;
      }
      function repeat(a, C) {
        return Array(C + 1).join(a);
      }
      function trimLeadingNewlines(a) {
        return a.replace(/^\n*/, '');
      }
      function trimTrailingNewlines(a) {
        var C = a.length;
        while (C > 0 && a[C - 1] === '\n') C--;
        return a.substring(0, C);
      }
      var re = [
        'ADDRESS',
        'ARTICLE',
        'ASIDE',
        'AUDIO',
        'BLOCKQUOTE',
        'BODY',
        'CANVAS',
        'CENTER',
        'DD',
        'DIR',
        'DIV',
        'DL',
        'DT',
        'FIELDSET',
        'FIGCAPTION',
        'FIGURE',
        'FOOTER',
        'FORM',
        'FRAMESET',
        'H1',
        'H2',
        'H3',
        'H4',
        'H5',
        'H6',
        'HEADER',
        'HGROUP',
        'HR',
        'HTML',
        'ISINDEX',
        'LI',
        'MAIN',
        'MENU',
        'NAV',
        'NOFRAMES',
        'NOSCRIPT',
        'OL',
        'OUTPUT',
        'P',
        'PRE',
        'SECTION',
        'TABLE',
        'TBODY',
        'TD',
        'TFOOT',
        'TH',
        'THEAD',
        'TR',
        'UL'
      ];
      function isBlock(a) {
        return is(a, re);
      }
      var ae = [
        'AREA',
        'BASE',
        'BR',
        'COL',
        'COMMAND',
        'EMBED',
        'HR',
        'IMG',
        'INPUT',
        'KEYGEN',
        'LINK',
        'META',
        'PARAM',
        'SOURCE',
        'TRACK',
        'WBR'
      ];
      function isVoid(a) {
        return is(a, ae);
      }
      function hasVoid(a) {
        return has(a, ae);
      }
      var Ue = [
        'A',
        'TABLE',
        'THEAD',
        'TBODY',
        'TFOOT',
        'TH',
        'TD',
        'IFRAME',
        'SCRIPT',
        'AUDIO',
        'VIDEO'
      ];
      function isMeaningfulWhenBlank(a) {
        return is(a, Ue);
      }
      function hasMeaningfulWhenBlank(a) {
        return has(a, Ue);
      }
      function is(a, C) {
        return C.indexOf(a.nodeName) >= 0;
      }
      function has(a, C) {
        return (
          a.getElementsByTagName &&
          C.some(function (C) {
            return a.getElementsByTagName(C).length;
          })
        );
      }
      var lt = {};
      lt.paragraph = {
        filter: 'p',
        replacement: function (a) {
          return '\n\n' + a + '\n\n';
        }
      };
      lt.lineBreak = {
        filter: 'br',
        replacement: function (a, C, q) {
          return q.br + '\n';
        }
      };
      lt.heading = {
        filter: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],
        replacement: function (a, C, q) {
          var re = Number(C.nodeName.charAt(1));
          if (q.headingStyle === 'setext' && re < 3) {
            var ae = repeat(re === 1 ? '=' : '-', a.length);
            return '\n\n' + a + '\n' + ae + '\n\n';
          } else {
            return '\n\n' + repeat('#', re) + ' ' + a + '\n\n';
          }
        }
      };
      lt.blockquote = {
        filter: 'blockquote',
        replacement: function (a) {
          a = a.replace(/^\n+|\n+$/g, '');
          a = a.replace(/^/gm, '> ');
          return '\n\n' + a + '\n\n';
        }
      };
      lt.list = {
        filter: ['ul', 'ol'],
        replacement: function (a, C) {
          var q = C.parentNode;
          if (q.nodeName === 'LI' && q.lastElementChild === C) {
            return '\n' + a;
          } else {
            return '\n\n' + a + '\n\n';
          }
        }
      };
      lt.listItem = {
        filter: 'li',
        replacement: function (a, C, q) {
          a = a
            .replace(/^\n+/, '')
            .replace(/\n+$/, '\n')
            .replace(/\n/gm, '\n    ');
          var re = q.bulletListMarker + '   ';
          var ae = C.parentNode;
          if (ae.nodeName === 'OL') {
            var Ue = ae.getAttribute('start');
            var lt = Array.prototype.indexOf.call(ae.children, C);
            re = (Ue ? Number(Ue) + lt : lt + 1) + '.  ';
          }
          return re + a + (C.nextSibling && !/\n$/.test(a) ? '\n' : '');
        }
      };
      lt.indentedCodeBlock = {
        filter: function (a, C) {
          return (
            C.codeBlockStyle === 'indented' &&
            a.nodeName === 'PRE' &&
            a.firstChild &&
            a.firstChild.nodeName === 'CODE'
          );
        },
        replacement: function (a, C, q) {
          return (
            '\n\n    ' +
            C.firstChild.textContent.replace(/\n/g, '\n    ') +
            '\n\n'
          );
        }
      };
      lt.fencedCodeBlock = {
        filter: function (a, C) {
          return (
            C.codeBlockStyle === 'fenced' &&
            a.nodeName === 'PRE' &&
            a.firstChild &&
            a.firstChild.nodeName === 'CODE'
          );
        },
        replacement: function (a, C, q) {
          var re = C.firstChild.getAttribute('class') || '';
          var ae = (re.match(/language-(\S+)/) || [null, ''])[1];
          var Ue = C.firstChild.textContent;
          var lt = q.fence.charAt(0);
          var Pt = 3;
          var Wt = new RegExp('^' + lt + '{3,}', 'gm');
          var Ar;
          while ((Ar = Wt.exec(Ue))) {
            if (Ar[0].length >= Pt) {
              Pt = Ar[0].length + 1;
            }
          }
          var Er = repeat(lt, Pt);
          return (
            '\n\n' + Er + ae + '\n' + Ue.replace(/\n$/, '') + '\n' + Er + '\n\n'
          );
        }
      };
      lt.horizontalRule = {
        filter: 'hr',
        replacement: function (a, C, q) {
          return '\n\n' + q.hr + '\n\n';
        }
      };
      lt.inlineLink = {
        filter: function (a, C) {
          return (
            C.linkStyle === 'inlined' &&
            a.nodeName === 'A' &&
            a.getAttribute('href')
          );
        },
        replacement: function (a, C) {
          var q = C.getAttribute('href');
          if (q) q = q.replace(/([()])/g, '\\$1');
          var re = cleanAttribute(C.getAttribute('title'));
          if (re) re = ' "' + re.replace(/"/g, '\\"') + '"';
          return '[' + a + '](' + q + re + ')';
        }
      };
      lt.referenceLink = {
        filter: function (a, C) {
          return (
            C.linkStyle === 'referenced' &&
            a.nodeName === 'A' &&
            a.getAttribute('href')
          );
        },
        replacement: function (a, C, q) {
          var re = C.getAttribute('href');
          var ae = cleanAttribute(C.getAttribute('title'));
          if (ae) ae = ' "' + ae + '"';
          var Ue;
          var lt;
          switch (q.linkReferenceStyle) {
            case 'collapsed':
              Ue = '[' + a + '][]';
              lt = '[' + a + ']: ' + re + ae;
              break;
            case 'shortcut':
              Ue = '[' + a + ']';
              lt = '[' + a + ']: ' + re + ae;
              break;
            default:
              var Pt = this.references.length + 1;
              Ue = '[' + a + '][' + Pt + ']';
              lt = '[' + Pt + ']: ' + re + ae;
          }
          this.references.push(lt);
          return Ue;
        },
        references: [],
        append: function (a) {
          var C = '';
          if (this.references.length) {
            C = '\n\n' + this.references.join('\n') + '\n\n';
            this.references = [];
          }
          return C;
        }
      };
      lt.emphasis = {
        filter: ['em', 'i'],
        replacement: function (a, C, q) {
          if (!a.trim()) return '';
          return q.emDelimiter + a + q.emDelimiter;
        }
      };
      lt.strong = {
        filter: ['strong', 'b'],
        replacement: function (a, C, q) {
          if (!a.trim()) return '';
          return q.strongDelimiter + a + q.strongDelimiter;
        }
      };
      lt.code = {
        filter: function (a) {
          var C = a.previousSibling || a.nextSibling;
          var q = a.parentNode.nodeName === 'PRE' && !C;
          return a.nodeName === 'CODE' && !q;
        },
        replacement: function (a) {
          if (!a) return '';
          a = a.replace(/\r?\n|\r/g, ' ');
          var C = /^`|^ .*?[^ ].* $|`$/.test(a) ? ' ' : '';
          var q = '`';
          var re = a.match(/`+/gm) || [];
          while (re.indexOf(q) !== -1) q = q + '`';
          return q + C + a + C + q;
        }
      };
      lt.image = {
        filter: 'img',
        replacement: function (a, C) {
          var q = cleanAttribute(C.getAttribute('alt'));
          var re = C.getAttribute('src') || '';
          var ae = cleanAttribute(C.getAttribute('title'));
          var Ue = ae ? ' "' + ae + '"' : '';
          return re ? '![' + q + ']' + '(' + re + Ue + ')' : '';
        }
      };
      function cleanAttribute(a) {
        return a ? a.replace(/(\n+\s*)+/g, '\n') : '';
      }
      function Rules(a) {
        this.options = a;
        this._keep = [];
        this._remove = [];
        this.blankRule = { replacement: a.blankReplacement };
        this.keepReplacement = a.keepReplacement;
        this.defaultRule = { replacement: a.defaultReplacement };
        this.array = [];
        for (var C in a.rules) this.array.push(a.rules[C]);
      }
      Rules.prototype = {
        add: function (a, C) {
          this.array.unshift(C);
        },
        keep: function (a) {
          this._keep.unshift({ filter: a, replacement: this.keepReplacement });
        },
        remove: function (a) {
          this._remove.unshift({
            filter: a,
            replacement: function () {
              return '';
            }
          });
        },
        forNode: function (a) {
          if (a.isBlank) return this.blankRule;
          var C;
          if ((C = findRule(this.array, a, this.options))) return C;
          if ((C = findRule(this._keep, a, this.options))) return C;
          if ((C = findRule(this._remove, a, this.options))) return C;
          return this.defaultRule;
        },
        forEach: function (a) {
          for (var C = 0; C < this.array.length; C++) a(this.array[C], C);
        }
      };
      function findRule(a, C, q) {
        for (var re = 0; re < a.length; re++) {
          var ae = a[re];
          if (filterValue(ae, C, q)) return ae;
        }
        return void 0;
      }
      function filterValue(a, C, q) {
        var re = a.filter;
        if (typeof re === 'string') {
          if (re === C.nodeName.toLowerCase()) return true;
        } else if (Array.isArray(re)) {
          if (re.indexOf(C.nodeName.toLowerCase()) > -1) return true;
        } else if (typeof re === 'function') {
          if (re.call(a, C, q)) return true;
        } else {
          throw new TypeError(
            '`filter` needs to be a string, array, or function'
          );
        }
      }
      function collapseWhitespace(a) {
        var C = a.element;
        var q = a.isBlock;
        var re = a.isVoid;
        var ae =
          a.isPre ||
          function (a) {
            return a.nodeName === 'PRE';
          };
        if (!C.firstChild || ae(C)) return;
        var Ue = null;
        var lt = false;
        var Pt = null;
        var Wt = next(Pt, C, ae);
        while (Wt !== C) {
          if (Wt.nodeType === 3 || Wt.nodeType === 4) {
            var Ar = Wt.data.replace(/[ \r\n\t]+/g, ' ');
            if ((!Ue || / $/.test(Ue.data)) && !lt && Ar[0] === ' ') {
              Ar = Ar.substr(1);
            }
            if (!Ar) {
              Wt = remove(Wt);
              continue;
            }
            Wt.data = Ar;
            Ue = Wt;
          } else if (Wt.nodeType === 1) {
            if (q(Wt) || Wt.nodeName === 'BR') {
              if (Ue) {
                Ue.data = Ue.data.replace(/ $/, '');
              }
              Ue = null;
              lt = false;
            } else if (re(Wt) || ae(Wt)) {
              Ue = null;
              lt = true;
            } else if (Ue) {
              lt = false;
            }
          } else {
            Wt = remove(Wt);
            continue;
          }
          var Er = next(Pt, Wt, ae);
          Pt = Wt;
          Wt = Er;
        }
        if (Ue) {
          Ue.data = Ue.data.replace(/ $/, '');
          if (!Ue.data) {
            remove(Ue);
          }
        }
      }
      function remove(a) {
        var C = a.nextSibling || a.parentNode;
        a.parentNode.removeChild(a);
        return C;
      }
      function next(a, C, q) {
        if ((a && a.parentNode === C) || q(C)) {
          return C.nextSibling || C.parentNode;
        }
        return C.firstChild || C.nextSibling || C.parentNode;
      }
      var Pt = typeof window !== 'undefined' ? window : {};
      function canParseHTMLNatively() {
        var a = Pt.DOMParser;
        var C = false;
        try {
          if (new a().parseFromString('', 'text/html')) {
            C = true;
          }
        } catch (a) {}
        return C;
      }
      function createHTMLParser() {
        var Parser = function () {};
        {
          var a = q(5050);
          Parser.prototype.parseFromString = function (C) {
            return a.createDocument(C);
          };
        }
        return Parser;
      }
      var Wt = canParseHTMLNatively() ? Pt.DOMParser : createHTMLParser();
      function RootNode(a, C) {
        var q;
        if (typeof a === 'string') {
          var re = htmlParser().parseFromString(
            '<x-turndown id="turndown-root">' + a + '</x-turndown>',
            'text/html'
          );
          q = re.getElementById('turndown-root');
        } else {
          q = a.cloneNode(true);
        }
        collapseWhitespace({
          element: q,
          isBlock: isBlock,
          isVoid: isVoid,
          isPre: C.preformattedCode ? isPreOrCode : null
        });
        return q;
      }
      var Ar;
      function htmlParser() {
        Ar = Ar || new Wt();
        return Ar;
      }
      function isPreOrCode(a) {
        return a.nodeName === 'PRE' || a.nodeName === 'CODE';
      }
      function Node(a, C) {
        a.isBlock = isBlock(a);
        a.isCode = a.nodeName === 'CODE' || a.parentNode.isCode;
        a.isBlank = isBlank(a);
        a.flankingWhitespace = flankingWhitespace(a, C);
        return a;
      }
      function isBlank(a) {
        return (
          !isVoid(a) &&
          !isMeaningfulWhenBlank(a) &&
          /^\s*$/i.test(a.textContent) &&
          !hasVoid(a) &&
          !hasMeaningfulWhenBlank(a)
        );
      }
      function flankingWhitespace(a, C) {
        if (a.isBlock || (C.preformattedCode && a.isCode)) {
          return { leading: '', trailing: '' };
        }
        var q = edgeWhitespace(a.textContent);
        if (q.leadingAscii && isFlankedByWhitespace('left', a, C)) {
          q.leading = q.leadingNonAscii;
        }
        if (q.trailingAscii && isFlankedByWhitespace('right', a, C)) {
          q.trailing = q.trailingNonAscii;
        }
        return { leading: q.leading, trailing: q.trailing };
      }
      function edgeWhitespace(a) {
        var C = a.match(
          /^(([ \t\r\n]*)(\s*))(?:(?=\S)[\s\S]*\S)?((\s*?)([ \t\r\n]*))$/
        );
        return {
          leading: C[1],
          leadingAscii: C[2],
          leadingNonAscii: C[3],
          trailing: C[4],
          trailingNonAscii: C[5],
          trailingAscii: C[6]
        };
      }
      function isFlankedByWhitespace(a, C, q) {
        var re;
        var ae;
        var Ue;
        if (a === 'left') {
          re = C.previousSibling;
          ae = / $/;
        } else {
          re = C.nextSibling;
          ae = /^ /;
        }
        if (re) {
          if (re.nodeType === 3) {
            Ue = ae.test(re.nodeValue);
          } else if (q.preformattedCode && re.nodeName === 'CODE') {
            Ue = false;
          } else if (re.nodeType === 1 && !isBlock(re)) {
            Ue = ae.test(re.textContent);
          }
        }
        return Ue;
      }
      var Er = Array.prototype.reduce;
      var Ir = [
        [/\\/g, '\\\\'],
        [/\*/g, '\\*'],
        [/^-/g, '\\-'],
        [/^\+ /g, '\\+ '],
        [/^(=+)/g, '\\$1'],
        [/^(#{1,6}) /g, '\\$1 '],
        [/`/g, '\\`'],
        [/^~~~/g, '\\~~~'],
        [/\[/g, '\\['],
        [/\]/g, '\\]'],
        [/^>/g, '\\>'],
        [/_/g, '\\_'],
        [/^(\d+)\. /g, '$1\\. ']
      ];
      function TurndownService(a) {
        if (!(this instanceof TurndownService)) return new TurndownService(a);
        var C = {
          rules: lt,
          headingStyle: 'setext',
          hr: '* * *',
          bulletListMarker: '*',
          codeBlockStyle: 'indented',
          fence: '```',
          emDelimiter: '_',
          strongDelimiter: '**',
          linkStyle: 'inlined',
          linkReferenceStyle: 'full',
          br: '  ',
          preformattedCode: false,
          blankReplacement: function (a, C) {
            return C.isBlock ? '\n\n' : '';
          },
          keepReplacement: function (a, C) {
            return C.isBlock ? '\n\n' + C.outerHTML + '\n\n' : C.outerHTML;
          },
          defaultReplacement: function (a, C) {
            return C.isBlock ? '\n\n' + a + '\n\n' : a;
          }
        };
        this.options = extend({}, C, a);
        this.rules = new Rules(this.options);
      }
      TurndownService.prototype = {
        turndown: function (a) {
          if (!canConvert(a)) {
            throw new TypeError(
              a + ' is not a string, or an element/document/fragment node.'
            );
          }
          if (a === '') return '';
          var C = process.call(this, new RootNode(a, this.options));
          return postProcess.call(this, C);
        },
        use: function (a) {
          if (Array.isArray(a)) {
            for (var C = 0; C < a.length; C++) this.use(a[C]);
          } else if (typeof a === 'function') {
            a(this);
          } else {
            throw new TypeError(
              'plugin must be a Function or an Array of Functions'
            );
          }
          return this;
        },
        addRule: function (a, C) {
          this.rules.add(a, C);
          return this;
        },
        keep: function (a) {
          this.rules.keep(a);
          return this;
        },
        remove: function (a) {
          this.rules.remove(a);
          return this;
        },
        escape: function (a) {
          return Ir.reduce(function (a, C) {
            return a.replace(C[0], C[1]);
          }, a);
        }
      };
      function process(a) {
        var C = this;
        return Er.call(
          a.childNodes,
          function (a, q) {
            q = new Node(q, C.options);
            var re = '';
            if (q.nodeType === 3) {
              re = q.isCode ? q.nodeValue : C.escape(q.nodeValue);
            } else if (q.nodeType === 1) {
              re = replacementForNode.call(C, q);
            }
            return join(a, re);
          },
          ''
        );
      }
      function postProcess(a) {
        var C = this;
        this.rules.forEach(function (q) {
          if (typeof q.append === 'function') {
            a = join(a, q.append(C.options));
          }
        });
        return a.replace(/^[\t\r\n]+/, '').replace(/[\t\r\n\s]+$/, '');
      }
      function replacementForNode(a) {
        var C = this.rules.forNode(a);
        var q = process.call(this, a);
        var re = a.flankingWhitespace;
        if (re.leading || re.trailing) q = q.trim();
        return re.leading + C.replacement(q, a, this.options) + re.trailing;
      }
      function join(a, C) {
        var q = trimTrailingNewlines(a);
        var re = trimLeadingNewlines(C);
        var ae = Math.max(a.length - q.length, C.length - re.length);
        var Ue = '\n\n'.substring(0, ae);
        return q + Ue + re;
      }
      function canConvert(a) {
        return (
          a != null &&
          (typeof a === 'string' ||
            (a.nodeType &&
              (a.nodeType === 1 || a.nodeType === 9 || a.nodeType === 11)))
        );
      }
      a.exports = TurndownService;
    },
    7181: (a, C, q) => {
      'use strict';
      const re = q(8352);
      const ae = q(3954);
      const Ue = q(3501);
      const lt = q(9859);
      const Pt = q(1579);
      const Wt = q(8551);
      const Ar = q(9647);
      const { InvalidArgumentError: Er } = Ue;
      const Ir = q(7750);
      const Br = q(6840);
      const Qr = q(9103);
      const kr = q(1045);
      const Dr = q(1153);
      const Nr = q(5458);
      const Lr = q(7929);
      const Fr = q(6734);
      const { getGlobalDispatcher: Mr, setGlobalDispatcher: Pr } = q(5683);
      const Or = q(3563);
      const xr = q(6086);
      const Ur = q(3163);
      let Gr;
      try {
        q(6113);
        Gr = true;
      } catch {
        Gr = false;
      }
      Object.assign(ae.prototype, Ir);
      a.exports.Dispatcher = ae;
      a.exports.Client = re;
      a.exports.Pool = lt;
      a.exports.BalancedPool = Pt;
      a.exports.Agent = Wt;
      a.exports.ProxyAgent = Lr;
      a.exports.RetryHandler = Fr;
      a.exports.DecoratorHandler = Or;
      a.exports.RedirectHandler = xr;
      a.exports.createRedirectInterceptor = Ur;
      a.exports.buildConnector = Br;
      a.exports.errors = Ue;
      function makeDispatcher(a) {
        return (C, q, re) => {
          if (typeof q === 'function') {
            re = q;
            q = null;
          }
          if (
            !C ||
            (typeof C !== 'string' &&
              typeof C !== 'object' &&
              !(C instanceof URL))
          ) {
            throw new Er('invalid url');
          }
          if (q != null && typeof q !== 'object') {
            throw new Er('invalid opts');
          }
          if (q && q.path != null) {
            if (typeof q.path !== 'string') {
              throw new Er('invalid opts.path');
            }
            let a = q.path;
            if (!q.path.startsWith('/')) {
              a = `/${a}`;
            }
            C = new URL(Ar.parseOrigin(C).origin + a);
          } else {
            if (!q) {
              q = typeof C === 'object' ? C : {};
            }
            C = Ar.parseURL(C);
          }
          const { agent: ae, dispatcher: Ue = Mr() } = q;
          if (ae) {
            throw new Er('unsupported opts.agent. Did you mean opts.client?');
          }
          return a.call(
            Ue,
            {
              ...q,
              origin: C.origin,
              path: C.search ? `${C.pathname}${C.search}` : C.pathname,
              method: q.method || (q.body ? 'PUT' : 'GET')
            },
            re
          );
        };
      }
      a.exports.setGlobalDispatcher = Pr;
      a.exports.getGlobalDispatcher = Mr;
      if (Ar.nodeMajor > 16 || (Ar.nodeMajor === 16 && Ar.nodeMinor >= 8)) {
        let C = null;
        a.exports.fetch = async function fetch(a) {
          if (!C) {
            C = q(3254).fetch;
          }
          try {
            return await C(...arguments);
          } catch (a) {
            if (typeof a === 'object') {
              Error.captureStackTrace(a, this);
            }
            throw a;
          }
        };
        a.exports.Headers = q(6909).Headers;
        a.exports.Response = q(6913).Response;
        a.exports.Request = q(9787).Request;
        a.exports.FormData = q(8076).FormData;
        a.exports.File = q(1575).File;
        a.exports.FileReader = q(6528).FileReader;
        const { setGlobalOrigin: re, getGlobalOrigin: ae } = q(128);
        a.exports.setGlobalOrigin = re;
        a.exports.getGlobalOrigin = ae;
        const { CacheStorage: Ue } = q(3187);
        const { kConstruct: lt } = q(2994);
        a.exports.caches = new Ue(lt);
      }
      if (Ar.nodeMajor >= 16) {
        const {
          deleteCookie: C,
          getCookies: re,
          getSetCookies: ae,
          setCookie: Ue
        } = q(9351);
        a.exports.deleteCookie = C;
        a.exports.getCookies = re;
        a.exports.getSetCookies = ae;
        a.exports.setCookie = Ue;
        const { parseMIMEType: lt, serializeAMimeType: Pt } = q(6932);
        a.exports.parseMIMEType = lt;
        a.exports.serializeAMimeType = Pt;
      }
      if (Ar.nodeMajor >= 18 && Gr) {
        const { WebSocket: C } = q(553);
        a.exports.WebSocket = C;
      }
      a.exports.request = makeDispatcher(Ir.request);
      a.exports.stream = makeDispatcher(Ir.stream);
      a.exports.pipeline = makeDispatcher(Ir.pipeline);
      a.exports.connect = makeDispatcher(Ir.connect);
      a.exports.upgrade = makeDispatcher(Ir.upgrade);
      a.exports.MockClient = Qr;
      a.exports.MockPool = Dr;
      a.exports.MockAgent = kr;
      a.exports.mockErrors = Nr;
    },
    8551: (a, C, q) => {
      'use strict';
      const { InvalidArgumentError: re } = q(3501);
      const {
        kClients: ae,
        kRunning: Ue,
        kClose: lt,
        kDestroy: Pt,
        kDispatch: Wt,
        kInterceptors: Ar
      } = q(7621);
      const Er = q(6775);
      const Ir = q(9859);
      const Br = q(8352);
      const Qr = q(9647);
      const kr = q(3163);
      const { WeakRef: Dr, FinalizationRegistry: Nr } = q(9374)();
      const Lr = Symbol('onConnect');
      const Fr = Symbol('onDisconnect');
      const Mr = Symbol('onConnectionError');
      const Pr = Symbol('maxRedirections');
      const Or = Symbol('onDrain');
      const xr = Symbol('factory');
      const Ur = Symbol('finalizer');
      const Gr = Symbol('options');
      function defaultFactory(a, C) {
        return C && C.connections === 1 ? new Br(a, C) : new Ir(a, C);
      }
      class Agent extends Er {
        constructor({
          factory: a = defaultFactory,
          maxRedirections: C = 0,
          connect: q,
          ...Ue
        } = {}) {
          super();
          if (typeof a !== 'function') {
            throw new re('factory must be a function.');
          }
          if (q != null && typeof q !== 'function' && typeof q !== 'object') {
            throw new re('connect must be a function or an object');
          }
          if (!Number.isInteger(C) || C < 0) {
            throw new re('maxRedirections must be a positive number');
          }
          if (q && typeof q !== 'function') {
            q = { ...q };
          }
          this[Ar] =
            Ue.interceptors &&
            Ue.interceptors.Agent &&
            Array.isArray(Ue.interceptors.Agent)
              ? Ue.interceptors.Agent
              : [kr({ maxRedirections: C })];
          this[Gr] = { ...Qr.deepClone(Ue), connect: q };
          this[Gr].interceptors = Ue.interceptors
            ? { ...Ue.interceptors }
            : undefined;
          this[Pr] = C;
          this[xr] = a;
          this[ae] = new Map();
          this[Ur] = new Nr((a) => {
            const C = this[ae].get(a);
            if (C !== undefined && C.deref() === undefined) {
              this[ae].delete(a);
            }
          });
          const lt = this;
          this[Or] = (a, C) => {
            lt.emit('drain', a, [lt, ...C]);
          };
          this[Lr] = (a, C) => {
            lt.emit('connect', a, [lt, ...C]);
          };
          this[Fr] = (a, C, q) => {
            lt.emit('disconnect', a, [lt, ...C], q);
          };
          this[Mr] = (a, C, q) => {
            lt.emit('connectionError', a, [lt, ...C], q);
          };
        }
        get [Ue]() {
          let a = 0;
          for (const C of this[ae].values()) {
            const q = C.deref();
            if (q) {
              a += q[Ue];
            }
          }
          return a;
        }
        [Wt](a, C) {
          let q;
          if (
            a.origin &&
            (typeof a.origin === 'string' || a.origin instanceof URL)
          ) {
            q = String(a.origin);
          } else {
            throw new re('opts.origin must be a non-empty string or URL.');
          }
          const Ue = this[ae].get(q);
          let lt = Ue ? Ue.deref() : null;
          if (!lt) {
            lt = this[xr](a.origin, this[Gr])
              .on('drain', this[Or])
              .on('connect', this[Lr])
              .on('disconnect', this[Fr])
              .on('connectionError', this[Mr]);
            this[ae].set(q, new Dr(lt));
            this[Ur].register(lt, q);
          }
          return lt.dispatch(a, C);
        }
        async [lt]() {
          const a = [];
          for (const C of this[ae].values()) {
            const q = C.deref();
            if (q) {
              a.push(q.close());
            }
          }
          await Promise.all(a);
        }
        async [Pt](a) {
          const C = [];
          for (const q of this[ae].values()) {
            const re = q.deref();
            if (re) {
              C.push(re.destroy(a));
            }
          }
          await Promise.all(C);
        }
      }
      a.exports = Agent;
    },
    4125: (a, C, q) => {
      const { addAbortListener: re } = q(9647);
      const { RequestAbortedError: ae } = q(3501);
      const Ue = Symbol('kListener');
      const lt = Symbol('kSignal');
      function abort(a) {
        if (a.abort) {
          a.abort();
        } else {
          a.onError(new ae());
        }
      }
      function addSignal(a, C) {
        a[lt] = null;
        a[Ue] = null;
        if (!C) {
          return;
        }
        if (C.aborted) {
          abort(a);
          return;
        }
        a[lt] = C;
        a[Ue] = () => {
          abort(a);
        };
        re(a[lt], a[Ue]);
      }
      function removeSignal(a) {
        if (!a[lt]) {
          return;
        }
        if ('removeEventListener' in a[lt]) {
          a[lt].removeEventListener('abort', a[Ue]);
        } else {
          a[lt].removeListener('abort', a[Ue]);
        }
        a[lt] = null;
        a[Ue] = null;
      }
      a.exports = { addSignal: addSignal, removeSignal: removeSignal };
    },
    2745: (a, C, q) => {
      'use strict';
      const { AsyncResource: re } = q(852);
      const {
        InvalidArgumentError: ae,
        RequestAbortedError: Ue,
        SocketError: lt
      } = q(3501);
      const Pt = q(9647);
      const { addSignal: Wt, removeSignal: Ar } = q(4125);
      class ConnectHandler extends re {
        constructor(a, C) {
          if (!a || typeof a !== 'object') {
            throw new ae('invalid opts');
          }
          if (typeof C !== 'function') {
            throw new ae('invalid callback');
          }
          const { signal: q, opaque: re, responseHeaders: Ue } = a;
          if (
            q &&
            typeof q.on !== 'function' &&
            typeof q.addEventListener !== 'function'
          ) {
            throw new ae('signal must be an EventEmitter or EventTarget');
          }
          super('UNDICI_CONNECT');
          this.opaque = re || null;
          this.responseHeaders = Ue || null;
          this.callback = C;
          this.abort = null;
          Wt(this, q);
        }
        onConnect(a, C) {
          if (!this.callback) {
            throw new Ue();
          }
          this.abort = a;
          this.context = C;
        }
        onHeaders() {
          throw new lt('bad connect', null);
        }
        onUpgrade(a, C, q) {
          const { callback: re, opaque: ae, context: Ue } = this;
          Ar(this);
          this.callback = null;
          let lt = C;
          if (lt != null) {
            lt =
              this.responseHeaders === 'raw'
                ? Pt.parseRawHeaders(C)
                : Pt.parseHeaders(C);
          }
          this.runInAsyncScope(re, null, null, {
            statusCode: a,
            headers: lt,
            socket: q,
            opaque: ae,
            context: Ue
          });
        }
        onError(a) {
          const { callback: C, opaque: q } = this;
          Ar(this);
          if (C) {
            this.callback = null;
            queueMicrotask(() => {
              this.runInAsyncScope(C, null, a, { opaque: q });
            });
          }
        }
      }
      function connect(a, C) {
        if (C === undefined) {
          return new Promise((C, q) => {
            connect.call(this, a, (a, re) => (a ? q(a) : C(re)));
          });
        }
        try {
          const q = new ConnectHandler(a, C);
          this.dispatch({ ...a, method: 'CONNECT' }, q);
        } catch (q) {
          if (typeof C !== 'function') {
            throw q;
          }
          const re = a && a.opaque;
          queueMicrotask(() => C(q, { opaque: re }));
        }
      }
      a.exports = connect;
    },
    1747: (a, C, q) => {
      'use strict';
      const { Readable: re, Duplex: ae, PassThrough: Ue } = q(2781);
      const {
        InvalidArgumentError: lt,
        InvalidReturnValueError: Pt,
        RequestAbortedError: Wt
      } = q(3501);
      const Ar = q(9647);
      const { AsyncResource: Er } = q(852);
      const { addSignal: Ir, removeSignal: Br } = q(4125);
      const Qr = q(9491);
      const kr = Symbol('resume');
      class PipelineRequest extends re {
        constructor() {
          super({ autoDestroy: true });
          this[kr] = null;
        }
        _read() {
          const { [kr]: a } = this;
          if (a) {
            this[kr] = null;
            a();
          }
        }
        _destroy(a, C) {
          this._read();
          C(a);
        }
      }
      class PipelineResponse extends re {
        constructor(a) {
          super({ autoDestroy: true });
          this[kr] = a;
        }
        _read() {
          this[kr]();
        }
        _destroy(a, C) {
          if (!a && !this._readableState.endEmitted) {
            a = new Wt();
          }
          C(a);
        }
      }
      class PipelineHandler extends Er {
        constructor(a, C) {
          if (!a || typeof a !== 'object') {
            throw new lt('invalid opts');
          }
          if (typeof C !== 'function') {
            throw new lt('invalid handler');
          }
          const {
            signal: q,
            method: re,
            opaque: Ue,
            onInfo: Pt,
            responseHeaders: Er
          } = a;
          if (
            q &&
            typeof q.on !== 'function' &&
            typeof q.addEventListener !== 'function'
          ) {
            throw new lt('signal must be an EventEmitter or EventTarget');
          }
          if (re === 'CONNECT') {
            throw new lt('invalid method');
          }
          if (Pt && typeof Pt !== 'function') {
            throw new lt('invalid onInfo callback');
          }
          super('UNDICI_PIPELINE');
          this.opaque = Ue || null;
          this.responseHeaders = Er || null;
          this.handler = C;
          this.abort = null;
          this.context = null;
          this.onInfo = Pt || null;
          this.req = new PipelineRequest().on('error', Ar.nop);
          this.ret = new ae({
            readableObjectMode: a.objectMode,
            autoDestroy: true,
            read: () => {
              const { body: a } = this;
              if (a && a.resume) {
                a.resume();
              }
            },
            write: (a, C, q) => {
              const { req: re } = this;
              if (re.push(a, C) || re._readableState.destroyed) {
                q();
              } else {
                re[kr] = q;
              }
            },
            destroy: (a, C) => {
              const { body: q, req: re, res: ae, ret: Ue, abort: lt } = this;
              if (!a && !Ue._readableState.endEmitted) {
                a = new Wt();
              }
              if (lt && a) {
                lt();
              }
              Ar.destroy(q, a);
              Ar.destroy(re, a);
              Ar.destroy(ae, a);
              Br(this);
              C(a);
            }
          }).on('prefinish', () => {
            const { req: a } = this;
            a.push(null);
          });
          this.res = null;
          Ir(this, q);
        }
        onConnect(a, C) {
          const { ret: q, res: re } = this;
          Qr(!re, 'pipeline cannot be retried');
          if (q.destroyed) {
            throw new Wt();
          }
          this.abort = a;
          this.context = C;
        }
        onHeaders(a, C, q) {
          const { opaque: re, handler: ae, context: Ue } = this;
          if (a < 200) {
            if (this.onInfo) {
              const q =
                this.responseHeaders === 'raw'
                  ? Ar.parseRawHeaders(C)
                  : Ar.parseHeaders(C);
              this.onInfo({ statusCode: a, headers: q });
            }
            return;
          }
          this.res = new PipelineResponse(q);
          let lt;
          try {
            this.handler = null;
            const q =
              this.responseHeaders === 'raw'
                ? Ar.parseRawHeaders(C)
                : Ar.parseHeaders(C);
            lt = this.runInAsyncScope(ae, null, {
              statusCode: a,
              headers: q,
              opaque: re,
              body: this.res,
              context: Ue
            });
          } catch (a) {
            this.res.on('error', Ar.nop);
            throw a;
          }
          if (!lt || typeof lt.on !== 'function') {
            throw new Pt('expected Readable');
          }
          lt.on('data', (a) => {
            const { ret: C, body: q } = this;
            if (!C.push(a) && q.pause) {
              q.pause();
            }
          })
            .on('error', (a) => {
              const { ret: C } = this;
              Ar.destroy(C, a);
            })
            .on('end', () => {
              const { ret: a } = this;
              a.push(null);
            })
            .on('close', () => {
              const { ret: a } = this;
              if (!a._readableState.ended) {
                Ar.destroy(a, new Wt());
              }
            });
          this.body = lt;
        }
        onData(a) {
          const { res: C } = this;
          return C.push(a);
        }
        onComplete(a) {
          const { res: C } = this;
          C.push(null);
        }
        onError(a) {
          const { ret: C } = this;
          this.handler = null;
          Ar.destroy(C, a);
        }
      }
      function pipeline(a, C) {
        try {
          const q = new PipelineHandler(a, C);
          this.dispatch({ ...a, body: q.req }, q);
          return q.ret;
        } catch (a) {
          return new Ue().destroy(a);
        }
      }
      a.exports = pipeline;
    },
    414: (a, C, q) => {
      'use strict';
      const re = q(7040);
      const { InvalidArgumentError: ae, RequestAbortedError: Ue } = q(3501);
      const lt = q(9647);
      const { getResolveErrorBodyCallback: Pt } = q(7323);
      const { AsyncResource: Wt } = q(852);
      const { addSignal: Ar, removeSignal: Er } = q(4125);
      class RequestHandler extends Wt {
        constructor(a, C) {
          if (!a || typeof a !== 'object') {
            throw new ae('invalid opts');
          }
          const {
            signal: q,
            method: re,
            opaque: Ue,
            body: Pt,
            onInfo: Wt,
            responseHeaders: Er,
            throwOnError: Ir,
            highWaterMark: Br
          } = a;
          try {
            if (typeof C !== 'function') {
              throw new ae('invalid callback');
            }
            if (Br && (typeof Br !== 'number' || Br < 0)) {
              throw new ae('invalid highWaterMark');
            }
            if (
              q &&
              typeof q.on !== 'function' &&
              typeof q.addEventListener !== 'function'
            ) {
              throw new ae('signal must be an EventEmitter or EventTarget');
            }
            if (re === 'CONNECT') {
              throw new ae('invalid method');
            }
            if (Wt && typeof Wt !== 'function') {
              throw new ae('invalid onInfo callback');
            }
            super('UNDICI_REQUEST');
          } catch (a) {
            if (lt.isStream(Pt)) {
              lt.destroy(Pt.on('error', lt.nop), a);
            }
            throw a;
          }
          this.responseHeaders = Er || null;
          this.opaque = Ue || null;
          this.callback = C;
          this.res = null;
          this.abort = null;
          this.body = Pt;
          this.trailers = {};
          this.context = null;
          this.onInfo = Wt || null;
          this.throwOnError = Ir;
          this.highWaterMark = Br;
          if (lt.isStream(Pt)) {
            Pt.on('error', (a) => {
              this.onError(a);
            });
          }
          Ar(this, q);
        }
        onConnect(a, C) {
          if (!this.callback) {
            throw new Ue();
          }
          this.abort = a;
          this.context = C;
        }
        onHeaders(a, C, q, ae) {
          const {
            callback: Ue,
            opaque: Wt,
            abort: Ar,
            context: Er,
            responseHeaders: Ir,
            highWaterMark: Br
          } = this;
          const Qr = Ir === 'raw' ? lt.parseRawHeaders(C) : lt.parseHeaders(C);
          if (a < 200) {
            if (this.onInfo) {
              this.onInfo({ statusCode: a, headers: Qr });
            }
            return;
          }
          const kr = Ir === 'raw' ? lt.parseHeaders(C) : Qr;
          const Dr = kr['content-type'];
          const Nr = new re({
            resume: q,
            abort: Ar,
            contentType: Dr,
            highWaterMark: Br
          });
          this.callback = null;
          this.res = Nr;
          if (Ue !== null) {
            if (this.throwOnError && a >= 400) {
              this.runInAsyncScope(Pt, null, {
                callback: Ue,
                body: Nr,
                contentType: Dr,
                statusCode: a,
                statusMessage: ae,
                headers: Qr
              });
            } else {
              this.runInAsyncScope(Ue, null, null, {
                statusCode: a,
                headers: Qr,
                trailers: this.trailers,
                opaque: Wt,
                body: Nr,
                context: Er
              });
            }
          }
        }
        onData(a) {
          const { res: C } = this;
          return C.push(a);
        }
        onComplete(a) {
          const { res: C } = this;
          Er(this);
          lt.parseHeaders(a, this.trailers);
          C.push(null);
        }
        onError(a) {
          const { res: C, callback: q, body: re, opaque: ae } = this;
          Er(this);
          if (q) {
            this.callback = null;
            queueMicrotask(() => {
              this.runInAsyncScope(q, null, a, { opaque: ae });
            });
          }
          if (C) {
            this.res = null;
            queueMicrotask(() => {
              lt.destroy(C, a);
            });
          }
          if (re) {
            this.body = null;
            lt.destroy(re, a);
          }
        }
      }
      function request(a, C) {
        if (C === undefined) {
          return new Promise((C, q) => {
            request.call(this, a, (a, re) => (a ? q(a) : C(re)));
          });
        }
        try {
          this.dispatch(a, new RequestHandler(a, C));
        } catch (q) {
          if (typeof C !== 'function') {
            throw q;
          }
          const re = a && a.opaque;
          queueMicrotask(() => C(q, { opaque: re }));
        }
      }
      a.exports = request;
      a.exports.RequestHandler = RequestHandler;
    },
    7835: (a, C, q) => {
      'use strict';
      const { finished: re, PassThrough: ae } = q(2781);
      const {
        InvalidArgumentError: Ue,
        InvalidReturnValueError: lt,
        RequestAbortedError: Pt
      } = q(3501);
      const Wt = q(9647);
      const { getResolveErrorBodyCallback: Ar } = q(7323);
      const { AsyncResource: Er } = q(852);
      const { addSignal: Ir, removeSignal: Br } = q(4125);
      class StreamHandler extends Er {
        constructor(a, C, q) {
          if (!a || typeof a !== 'object') {
            throw new Ue('invalid opts');
          }
          const {
            signal: re,
            method: ae,
            opaque: lt,
            body: Pt,
            onInfo: Ar,
            responseHeaders: Er,
            throwOnError: Br
          } = a;
          try {
            if (typeof q !== 'function') {
              throw new Ue('invalid callback');
            }
            if (typeof C !== 'function') {
              throw new Ue('invalid factory');
            }
            if (
              re &&
              typeof re.on !== 'function' &&
              typeof re.addEventListener !== 'function'
            ) {
              throw new Ue('signal must be an EventEmitter or EventTarget');
            }
            if (ae === 'CONNECT') {
              throw new Ue('invalid method');
            }
            if (Ar && typeof Ar !== 'function') {
              throw new Ue('invalid onInfo callback');
            }
            super('UNDICI_STREAM');
          } catch (a) {
            if (Wt.isStream(Pt)) {
              Wt.destroy(Pt.on('error', Wt.nop), a);
            }
            throw a;
          }
          this.responseHeaders = Er || null;
          this.opaque = lt || null;
          this.factory = C;
          this.callback = q;
          this.res = null;
          this.abort = null;
          this.context = null;
          this.trailers = null;
          this.body = Pt;
          this.onInfo = Ar || null;
          this.throwOnError = Br || false;
          if (Wt.isStream(Pt)) {
            Pt.on('error', (a) => {
              this.onError(a);
            });
          }
          Ir(this, re);
        }
        onConnect(a, C) {
          if (!this.callback) {
            throw new Pt();
          }
          this.abort = a;
          this.context = C;
        }
        onHeaders(a, C, q, Ue) {
          const {
            factory: Pt,
            opaque: Er,
            context: Ir,
            callback: Br,
            responseHeaders: Qr
          } = this;
          const kr = Qr === 'raw' ? Wt.parseRawHeaders(C) : Wt.parseHeaders(C);
          if (a < 200) {
            if (this.onInfo) {
              this.onInfo({ statusCode: a, headers: kr });
            }
            return;
          }
          this.factory = null;
          let Dr;
          if (this.throwOnError && a >= 400) {
            const q = Qr === 'raw' ? Wt.parseHeaders(C) : kr;
            const re = q['content-type'];
            Dr = new ae();
            this.callback = null;
            this.runInAsyncScope(Ar, null, {
              callback: Br,
              body: Dr,
              contentType: re,
              statusCode: a,
              statusMessage: Ue,
              headers: kr
            });
          } else {
            if (Pt === null) {
              return;
            }
            Dr = this.runInAsyncScope(Pt, null, {
              statusCode: a,
              headers: kr,
              opaque: Er,
              context: Ir
            });
            if (
              !Dr ||
              typeof Dr.write !== 'function' ||
              typeof Dr.end !== 'function' ||
              typeof Dr.on !== 'function'
            ) {
              throw new lt('expected Writable');
            }
            re(Dr, { readable: false }, (a) => {
              const {
                callback: C,
                res: q,
                opaque: re,
                trailers: ae,
                abort: Ue
              } = this;
              this.res = null;
              if (a || !q.readable) {
                Wt.destroy(q, a);
              }
              this.callback = null;
              this.runInAsyncScope(C, null, a || null, {
                opaque: re,
                trailers: ae
              });
              if (a) {
                Ue();
              }
            });
          }
          Dr.on('drain', q);
          this.res = Dr;
          const Nr =
            Dr.writableNeedDrain !== undefined
              ? Dr.writableNeedDrain
              : Dr._writableState && Dr._writableState.needDrain;
          return Nr !== true;
        }
        onData(a) {
          const { res: C } = this;
          return C ? C.write(a) : true;
        }
        onComplete(a) {
          const { res: C } = this;
          Br(this);
          if (!C) {
            return;
          }
          this.trailers = Wt.parseHeaders(a);
          C.end();
        }
        onError(a) {
          const { res: C, callback: q, opaque: re, body: ae } = this;
          Br(this);
          this.factory = null;
          if (C) {
            this.res = null;
            Wt.destroy(C, a);
          } else if (q) {
            this.callback = null;
            queueMicrotask(() => {
              this.runInAsyncScope(q, null, a, { opaque: re });
            });
          }
          if (ae) {
            this.body = null;
            Wt.destroy(ae, a);
          }
        }
      }
      function stream(a, C, q) {
        if (q === undefined) {
          return new Promise((q, re) => {
            stream.call(this, a, C, (a, C) => (a ? re(a) : q(C)));
          });
        }
        try {
          this.dispatch(a, new StreamHandler(a, C, q));
        } catch (C) {
          if (typeof q !== 'function') {
            throw C;
          }
          const re = a && a.opaque;
          queueMicrotask(() => q(C, { opaque: re }));
        }
      }
      a.exports = stream;
    },
    9706: (a, C, q) => {
      'use strict';
      const {
        InvalidArgumentError: re,
        RequestAbortedError: ae,
        SocketError: Ue
      } = q(3501);
      const { AsyncResource: lt } = q(852);
      const Pt = q(9647);
      const { addSignal: Wt, removeSignal: Ar } = q(4125);
      const Er = q(9491);
      class UpgradeHandler extends lt {
        constructor(a, C) {
          if (!a || typeof a !== 'object') {
            throw new re('invalid opts');
          }
          if (typeof C !== 'function') {
            throw new re('invalid callback');
          }
          const { signal: q, opaque: ae, responseHeaders: Ue } = a;
          if (
            q &&
            typeof q.on !== 'function' &&
            typeof q.addEventListener !== 'function'
          ) {
            throw new re('signal must be an EventEmitter or EventTarget');
          }
          super('UNDICI_UPGRADE');
          this.responseHeaders = Ue || null;
          this.opaque = ae || null;
          this.callback = C;
          this.abort = null;
          this.context = null;
          Wt(this, q);
        }
        onConnect(a, C) {
          if (!this.callback) {
            throw new ae();
          }
          this.abort = a;
          this.context = null;
        }
        onHeaders() {
          throw new Ue('bad upgrade', null);
        }
        onUpgrade(a, C, q) {
          const { callback: re, opaque: ae, context: Ue } = this;
          Er.strictEqual(a, 101);
          Ar(this);
          this.callback = null;
          const lt =
            this.responseHeaders === 'raw'
              ? Pt.parseRawHeaders(C)
              : Pt.parseHeaders(C);
          this.runInAsyncScope(re, null, null, {
            headers: lt,
            socket: q,
            opaque: ae,
            context: Ue
          });
        }
        onError(a) {
          const { callback: C, opaque: q } = this;
          Ar(this);
          if (C) {
            this.callback = null;
            queueMicrotask(() => {
              this.runInAsyncScope(C, null, a, { opaque: q });
            });
          }
        }
      }
      function upgrade(a, C) {
        if (C === undefined) {
          return new Promise((C, q) => {
            upgrade.call(this, a, (a, re) => (a ? q(a) : C(re)));
          });
        }
        try {
          const q = new UpgradeHandler(a, C);
          this.dispatch(
            {
              ...a,
              method: a.method || 'GET',
              upgrade: a.protocol || 'Websocket'
            },
            q
          );
        } catch (q) {
          if (typeof C !== 'function') {
            throw q;
          }
          const re = a && a.opaque;
          queueMicrotask(() => C(q, { opaque: re }));
        }
      }
      a.exports = upgrade;
    },
    7750: (a, C, q) => {
      'use strict';
      a.exports.request = q(414);
      a.exports.stream = q(7835);
      a.exports.pipeline = q(1747);
      a.exports.upgrade = q(9706);
      a.exports.connect = q(2745);
    },
    7040: (a, C, q) => {
      'use strict';
      const re = q(9491);
      const { Readable: ae } = q(2781);
      const {
        RequestAbortedError: Ue,
        NotSupportedError: lt,
        InvalidArgumentError: Pt
      } = q(3501);
      const Wt = q(9647);
      const { ReadableStreamFrom: Ar, toUSVString: Er } = q(9647);
      let Ir;
      const Br = Symbol('kConsume');
      const Qr = Symbol('kReading');
      const kr = Symbol('kBody');
      const Dr = Symbol('abort');
      const Nr = Symbol('kContentType');
      const noop = () => {};
      a.exports = class BodyReadable extends ae {
        constructor({
          resume: a,
          abort: C,
          contentType: q = '',
          highWaterMark: re = 64 * 1024
        }) {
          super({ autoDestroy: true, read: a, highWaterMark: re });
          this._readableState.dataEmitted = false;
          this[Dr] = C;
          this[Br] = null;
          this[kr] = null;
          this[Nr] = q;
          this[Qr] = false;
        }
        destroy(a) {
          if (this.destroyed) {
            return this;
          }
          if (!a && !this._readableState.endEmitted) {
            a = new Ue();
          }
          if (a) {
            this[Dr]();
          }
          return super.destroy(a);
        }
        emit(a, ...C) {
          if (a === 'data') {
            this._readableState.dataEmitted = true;
          } else if (a === 'error') {
            this._readableState.errorEmitted = true;
          }
          return super.emit(a, ...C);
        }
        on(a, ...C) {
          if (a === 'data' || a === 'readable') {
            this[Qr] = true;
          }
          return super.on(a, ...C);
        }
        addListener(a, ...C) {
          return this.on(a, ...C);
        }
        off(a, ...C) {
          const q = super.off(a, ...C);
          if (a === 'data' || a === 'readable') {
            this[Qr] =
              this.listenerCount('data') > 0 ||
              this.listenerCount('readable') > 0;
          }
          return q;
        }
        removeListener(a, ...C) {
          return this.off(a, ...C);
        }
        push(a) {
          if (this[Br] && a !== null && this.readableLength === 0) {
            consumePush(this[Br], a);
            return this[Qr] ? super.push(a) : true;
          }
          return super.push(a);
        }
        async text() {
          return consume(this, 'text');
        }
        async json() {
          return consume(this, 'json');
        }
        async blob() {
          return consume(this, 'blob');
        }
        async arrayBuffer() {
          return consume(this, 'arrayBuffer');
        }
        async formData() {
          throw new lt();
        }
        get bodyUsed() {
          return Wt.isDisturbed(this);
        }
        get body() {
          if (!this[kr]) {
            this[kr] = Ar(this);
            if (this[Br]) {
              this[kr].getReader();
              re(this[kr].locked);
            }
          }
          return this[kr];
        }
        dump(a) {
          let C = a && Number.isFinite(a.limit) ? a.limit : 262144;
          const q = a && a.signal;
          if (q) {
            try {
              if (typeof q !== 'object' || !('aborted' in q)) {
                throw new Pt('signal must be an AbortSignal');
              }
              Wt.throwIfAborted(q);
            } catch (a) {
              return Promise.reject(a);
            }
          }
          if (this.closed) {
            return Promise.resolve(null);
          }
          return new Promise((a, re) => {
            const ae = q
              ? Wt.addAbortListener(q, () => {
                  this.destroy();
                })
              : noop;
            this.on('close', function () {
              ae();
              if (q && q.aborted) {
                re(
                  q.reason ||
                    Object.assign(new Error('The operation was aborted'), {
                      name: 'AbortError'
                    })
                );
              } else {
                a(null);
              }
            })
              .on('error', noop)
              .on('data', function (a) {
                C -= a.length;
                if (C <= 0) {
                  this.destroy();
                }
              })
              .resume();
          });
        }
      };
      function isLocked(a) {
        return (a[kr] && a[kr].locked === true) || a[Br];
      }
      function isUnusable(a) {
        return Wt.isDisturbed(a) || isLocked(a);
      }
      async function consume(a, C) {
        if (isUnusable(a)) {
          throw new TypeError('unusable');
        }
        re(!a[Br]);
        return new Promise((q, re) => {
          a[Br] = {
            type: C,
            stream: a,
            resolve: q,
            reject: re,
            length: 0,
            body: []
          };
          a.on('error', function (a) {
            consumeFinish(this[Br], a);
          }).on('close', function () {
            if (this[Br].body !== null) {
              consumeFinish(this[Br], new Ue());
            }
          });
          process.nextTick(consumeStart, a[Br]);
        });
      }
      function consumeStart(a) {
        if (a.body === null) {
          return;
        }
        const { _readableState: C } = a.stream;
        for (const q of C.buffer) {
          consumePush(a, q);
        }
        if (C.endEmitted) {
          consumeEnd(this[Br]);
        } else {
          a.stream.on('end', function () {
            consumeEnd(this[Br]);
          });
        }
        a.stream.resume();
        while (a.stream.read() != null) {}
      }
      function consumeEnd(a) {
        const { type: C, body: re, resolve: ae, stream: Ue, length: lt } = a;
        try {
          if (C === 'text') {
            ae(Er(Buffer.concat(re)));
          } else if (C === 'json') {
            ae(JSON.parse(Buffer.concat(re)));
          } else if (C === 'arrayBuffer') {
            const a = new Uint8Array(lt);
            let C = 0;
            for (const q of re) {
              a.set(q, C);
              C += q.byteLength;
            }
            ae(a.buffer);
          } else if (C === 'blob') {
            if (!Ir) {
              Ir = q(4300).Blob;
            }
            ae(new Ir(re, { type: Ue[Nr] }));
          }
          consumeFinish(a);
        } catch (a) {
          Ue.destroy(a);
        }
      }
      function consumePush(a, C) {
        a.length += C.length;
        a.body.push(C);
      }
      function consumeFinish(a, C) {
        if (a.body === null) {
          return;
        }
        if (C) {
          a.reject(C);
        } else {
          a.resolve();
        }
        a.type = null;
        a.stream = null;
        a.resolve = null;
        a.reject = null;
        a.length = 0;
        a.body = null;
      }
    },
    7323: (a, C, q) => {
      const re = q(9491);
      const { ResponseStatusCodeError: ae } = q(3501);
      const { toUSVString: Ue } = q(9647);
      async function getResolveErrorBodyCallback({
        callback: a,
        body: C,
        contentType: q,
        statusCode: lt,
        statusMessage: Pt,
        headers: Wt
      }) {
        re(C);
        let Ar = [];
        let Er = 0;
        for await (const a of C) {
          Ar.push(a);
          Er += a.length;
          if (Er > 128 * 1024) {
            Ar = null;
            break;
          }
        }
        if (lt === 204 || !q || !Ar) {
          process.nextTick(
            a,
            new ae(`Response status code ${lt}${Pt ? `: ${Pt}` : ''}`, lt, Wt)
          );
          return;
        }
        try {
          if (q.startsWith('application/json')) {
            const C = JSON.parse(Ue(Buffer.concat(Ar)));
            process.nextTick(
              a,
              new ae(
                `Response status code ${lt}${Pt ? `: ${Pt}` : ''}`,
                lt,
                Wt,
                C
              )
            );
            return;
          }
          if (q.startsWith('text/')) {
            const C = Ue(Buffer.concat(Ar));
            process.nextTick(
              a,
              new ae(
                `Response status code ${lt}${Pt ? `: ${Pt}` : ''}`,
                lt,
                Wt,
                C
              )
            );
            return;
          }
        } catch (a) {}
        process.nextTick(
          a,
          new ae(`Response status code ${lt}${Pt ? `: ${Pt}` : ''}`, lt, Wt)
        );
      }
      a.exports = { getResolveErrorBodyCallback: getResolveErrorBodyCallback };
    },
    1579: (a, C, q) => {
      'use strict';
      const { BalancedPoolMissingUpstreamError: re, InvalidArgumentError: ae } =
        q(3501);
      const {
        PoolBase: Ue,
        kClients: lt,
        kNeedDrain: Pt,
        kAddClient: Wt,
        kRemoveClient: Ar,
        kGetDispatcher: Er
      } = q(5411);
      const Ir = q(9859);
      const { kUrl: Br, kInterceptors: Qr } = q(7621);
      const { parseOrigin: kr } = q(9647);
      const Dr = Symbol('factory');
      const Nr = Symbol('options');
      const Lr = Symbol('kGreatestCommonDivisor');
      const Fr = Symbol('kCurrentWeight');
      const Mr = Symbol('kIndex');
      const Pr = Symbol('kWeight');
      const Or = Symbol('kMaxWeightPerServer');
      const xr = Symbol('kErrorPenalty');
      function getGreatestCommonDivisor(a, C) {
        if (C === 0) return a;
        return getGreatestCommonDivisor(C, a % C);
      }
      function defaultFactory(a, C) {
        return new Ir(a, C);
      }
      class BalancedPool extends Ue {
        constructor(a = [], { factory: C = defaultFactory, ...q } = {}) {
          super();
          this[Nr] = q;
          this[Mr] = -1;
          this[Fr] = 0;
          this[Or] = this[Nr].maxWeightPerServer || 100;
          this[xr] = this[Nr].errorPenalty || 15;
          if (!Array.isArray(a)) {
            a = [a];
          }
          if (typeof C !== 'function') {
            throw new ae('factory must be a function.');
          }
          this[Qr] =
            q.interceptors &&
            q.interceptors.BalancedPool &&
            Array.isArray(q.interceptors.BalancedPool)
              ? q.interceptors.BalancedPool
              : [];
          this[Dr] = C;
          for (const C of a) {
            this.addUpstream(C);
          }
          this._updateBalancedPoolStats();
        }
        addUpstream(a) {
          const C = kr(a).origin;
          if (
            this[lt].find(
              (a) =>
                a[Br].origin === C && a.closed !== true && a.destroyed !== true
            )
          ) {
            return this;
          }
          const q = this[Dr](C, Object.assign({}, this[Nr]));
          this[Wt](q);
          q.on('connect', () => {
            q[Pr] = Math.min(this[Or], q[Pr] + this[xr]);
          });
          q.on('connectionError', () => {
            q[Pr] = Math.max(1, q[Pr] - this[xr]);
            this._updateBalancedPoolStats();
          });
          q.on('disconnect', (...a) => {
            const C = a[2];
            if (C && C.code === 'UND_ERR_SOCKET') {
              q[Pr] = Math.max(1, q[Pr] - this[xr]);
              this._updateBalancedPoolStats();
            }
          });
          for (const a of this[lt]) {
            a[Pr] = this[Or];
          }
          this._updateBalancedPoolStats();
          return this;
        }
        _updateBalancedPoolStats() {
          this[Lr] = this[lt]
            .map((a) => a[Pr])
            .reduce(getGreatestCommonDivisor, 0);
        }
        removeUpstream(a) {
          const C = kr(a).origin;
          const q = this[lt].find(
            (a) =>
              a[Br].origin === C && a.closed !== true && a.destroyed !== true
          );
          if (q) {
            this[Ar](q);
          }
          return this;
        }
        get upstreams() {
          return this[lt]
            .filter((a) => a.closed !== true && a.destroyed !== true)
            .map((a) => a[Br].origin);
        }
        [Er]() {
          if (this[lt].length === 0) {
            throw new re();
          }
          const a = this[lt].find(
            (a) => !a[Pt] && a.closed !== true && a.destroyed !== true
          );
          if (!a) {
            return;
          }
          const C = this[lt].map((a) => a[Pt]).reduce((a, C) => a && C, true);
          if (C) {
            return;
          }
          let q = 0;
          let ae = this[lt].findIndex((a) => !a[Pt]);
          while (q++ < this[lt].length) {
            this[Mr] = (this[Mr] + 1) % this[lt].length;
            const a = this[lt][this[Mr]];
            if (a[Pr] > this[lt][ae][Pr] && !a[Pt]) {
              ae = this[Mr];
            }
            if (this[Mr] === 0) {
              this[Fr] = this[Fr] - this[Lr];
              if (this[Fr] <= 0) {
                this[Fr] = this[Or];
              }
            }
            if (a[Pr] >= this[Fr] && !a[Pt]) {
              return a;
            }
          }
          this[Fr] = this[lt][ae][Pr];
          this[Mr] = ae;
          return this[lt][ae];
        }
      }
      a.exports = BalancedPool;
    },
    5075: (a, C, q) => {
      'use strict';
      const { kConstruct: re } = q(2994);
      const { urlEquals: ae, fieldValues: Ue } = q(8826);
      const { kEnumerableProperty: lt, isDisturbed: Pt } = q(9647);
      const { kHeadersList: Wt } = q(7621);
      const { webidl: Ar } = q(3721);
      const { Response: Er, cloneResponse: Ir } = q(6913);
      const { Request: Br } = q(9787);
      const { kState: Qr, kHeaders: kr, kGuard: Dr, kRealm: Nr } = q(3386);
      const { fetching: Lr } = q(3254);
      const {
        urlIsHttpHttpsScheme: Fr,
        createDeferredPromise: Mr,
        readAllBytes: Pr
      } = q(6860);
      const Or = q(9491);
      const { getGlobalDispatcher: xr } = q(5683);
      class Cache {
        #e;
        constructor() {
          if (arguments[0] !== re) {
            Ar.illegalConstructor();
          }
          this.#e = arguments[1];
        }
        async match(a, C = {}) {
          Ar.brandCheck(this, Cache);
          Ar.argumentLengthCheck(arguments, 1, { header: 'Cache.match' });
          a = Ar.converters.RequestInfo(a);
          C = Ar.converters.CacheQueryOptions(C);
          const q = await this.matchAll(a, C);
          if (q.length === 0) {
            return;
          }
          return q[0];
        }
        async matchAll(a = undefined, C = {}) {
          Ar.brandCheck(this, Cache);
          if (a !== undefined) a = Ar.converters.RequestInfo(a);
          C = Ar.converters.CacheQueryOptions(C);
          let q = null;
          if (a !== undefined) {
            if (a instanceof Br) {
              q = a[Qr];
              if (q.method !== 'GET' && !C.ignoreMethod) {
                return [];
              }
            } else if (typeof a === 'string') {
              q = new Br(a)[Qr];
            }
          }
          const re = [];
          if (a === undefined) {
            for (const a of this.#e) {
              re.push(a[1]);
            }
          } else {
            const a = this.#t(q, C);
            for (const C of a) {
              re.push(C[1]);
            }
          }
          const ae = [];
          for (const a of re) {
            const C = new Er(a.body?.source ?? null);
            const q = C[Qr].body;
            C[Qr] = a;
            C[Qr].body = q;
            C[kr][Wt] = a.headersList;
            C[kr][Dr] = 'immutable';
            ae.push(C);
          }
          return Object.freeze(ae);
        }
        async add(a) {
          Ar.brandCheck(this, Cache);
          Ar.argumentLengthCheck(arguments, 1, { header: 'Cache.add' });
          a = Ar.converters.RequestInfo(a);
          const C = [a];
          const q = this.addAll(C);
          return await q;
        }
        async addAll(a) {
          Ar.brandCheck(this, Cache);
          Ar.argumentLengthCheck(arguments, 1, { header: 'Cache.addAll' });
          a = Ar.converters['sequence<RequestInfo>'](a);
          const C = [];
          const q = [];
          for (const C of a) {
            if (typeof C === 'string') {
              continue;
            }
            const a = C[Qr];
            if (!Fr(a.url) || a.method !== 'GET') {
              throw Ar.errors.exception({
                header: 'Cache.addAll',
                message: 'Expected http/s scheme when method is not GET.'
              });
            }
          }
          const re = [];
          for (const ae of a) {
            const a = new Br(ae)[Qr];
            if (!Fr(a.url)) {
              throw Ar.errors.exception({
                header: 'Cache.addAll',
                message: 'Expected http/s scheme.'
              });
            }
            a.initiator = 'fetch';
            a.destination = 'subresource';
            q.push(a);
            const lt = Mr();
            re.push(
              Lr({
                request: a,
                dispatcher: xr(),
                processResponse(a) {
                  if (
                    a.type === 'error' ||
                    a.status === 206 ||
                    a.status < 200 ||
                    a.status > 299
                  ) {
                    lt.reject(
                      Ar.errors.exception({
                        header: 'Cache.addAll',
                        message:
                          'Received an invalid status code or the request failed.'
                      })
                    );
                  } else if (a.headersList.contains('vary')) {
                    const C = Ue(a.headersList.get('vary'));
                    for (const a of C) {
                      if (a === '*') {
                        lt.reject(
                          Ar.errors.exception({
                            header: 'Cache.addAll',
                            message: 'invalid vary field value'
                          })
                        );
                        for (const a of re) {
                          a.abort();
                        }
                        return;
                      }
                    }
                  }
                },
                processResponseEndOfBody(a) {
                  if (a.aborted) {
                    lt.reject(new DOMException('aborted', 'AbortError'));
                    return;
                  }
                  lt.resolve(a);
                }
              })
            );
            C.push(lt.promise);
          }
          const ae = Promise.all(C);
          const lt = await ae;
          const Pt = [];
          let Wt = 0;
          for (const a of lt) {
            const C = { type: 'put', request: q[Wt], response: a };
            Pt.push(C);
            Wt++;
          }
          const Er = Mr();
          let Ir = null;
          try {
            this.#r(Pt);
          } catch (a) {
            Ir = a;
          }
          queueMicrotask(() => {
            if (Ir === null) {
              Er.resolve(undefined);
            } else {
              Er.reject(Ir);
            }
          });
          return Er.promise;
        }
        async put(a, C) {
          Ar.brandCheck(this, Cache);
          Ar.argumentLengthCheck(arguments, 2, { header: 'Cache.put' });
          a = Ar.converters.RequestInfo(a);
          C = Ar.converters.Response(C);
          let q = null;
          if (a instanceof Br) {
            q = a[Qr];
          } else {
            q = new Br(a)[Qr];
          }
          if (!Fr(q.url) || q.method !== 'GET') {
            throw Ar.errors.exception({
              header: 'Cache.put',
              message: 'Expected an http/s scheme when method is not GET'
            });
          }
          const re = C[Qr];
          if (re.status === 206) {
            throw Ar.errors.exception({
              header: 'Cache.put',
              message: 'Got 206 status'
            });
          }
          if (re.headersList.contains('vary')) {
            const a = Ue(re.headersList.get('vary'));
            for (const C of a) {
              if (C === '*') {
                throw Ar.errors.exception({
                  header: 'Cache.put',
                  message: 'Got * vary field value'
                });
              }
            }
          }
          if (re.body && (Pt(re.body.stream) || re.body.stream.locked)) {
            throw Ar.errors.exception({
              header: 'Cache.put',
              message: 'Response body is locked or disturbed'
            });
          }
          const ae = Ir(re);
          const lt = Mr();
          if (re.body != null) {
            const a = re.body.stream;
            const C = a.getReader();
            Pr(C).then(lt.resolve, lt.reject);
          } else {
            lt.resolve(undefined);
          }
          const Wt = [];
          const Er = { type: 'put', request: q, response: ae };
          Wt.push(Er);
          const kr = await lt.promise;
          if (ae.body != null) {
            ae.body.source = kr;
          }
          const Dr = Mr();
          let Nr = null;
          try {
            this.#r(Wt);
          } catch (a) {
            Nr = a;
          }
          queueMicrotask(() => {
            if (Nr === null) {
              Dr.resolve();
            } else {
              Dr.reject(Nr);
            }
          });
          return Dr.promise;
        }
        async delete(a, C = {}) {
          Ar.brandCheck(this, Cache);
          Ar.argumentLengthCheck(arguments, 1, { header: 'Cache.delete' });
          a = Ar.converters.RequestInfo(a);
          C = Ar.converters.CacheQueryOptions(C);
          let q = null;
          if (a instanceof Br) {
            q = a[Qr];
            if (q.method !== 'GET' && !C.ignoreMethod) {
              return false;
            }
          } else {
            Or(typeof a === 'string');
            q = new Br(a)[Qr];
          }
          const re = [];
          const ae = { type: 'delete', request: q, options: C };
          re.push(ae);
          const Ue = Mr();
          let lt = null;
          let Pt;
          try {
            Pt = this.#r(re);
          } catch (a) {
            lt = a;
          }
          queueMicrotask(() => {
            if (lt === null) {
              Ue.resolve(!!Pt?.length);
            } else {
              Ue.reject(lt);
            }
          });
          return Ue.promise;
        }
        async keys(a = undefined, C = {}) {
          Ar.brandCheck(this, Cache);
          if (a !== undefined) a = Ar.converters.RequestInfo(a);
          C = Ar.converters.CacheQueryOptions(C);
          let q = null;
          if (a !== undefined) {
            if (a instanceof Br) {
              q = a[Qr];
              if (q.method !== 'GET' && !C.ignoreMethod) {
                return [];
              }
            } else if (typeof a === 'string') {
              q = new Br(a)[Qr];
            }
          }
          const re = Mr();
          const ae = [];
          if (a === undefined) {
            for (const a of this.#e) {
              ae.push(a[0]);
            }
          } else {
            const a = this.#t(q, C);
            for (const C of a) {
              ae.push(C[0]);
            }
          }
          queueMicrotask(() => {
            const a = [];
            for (const C of ae) {
              const q = new Br('https://a');
              q[Qr] = C;
              q[kr][Wt] = C.headersList;
              q[kr][Dr] = 'immutable';
              q[Nr] = C.client;
              a.push(q);
            }
            re.resolve(Object.freeze(a));
          });
          return re.promise;
        }
        #r(a) {
          const C = this.#e;
          const q = [...C];
          const re = [];
          const ae = [];
          try {
            for (const q of a) {
              if (q.type !== 'delete' && q.type !== 'put') {
                throw Ar.errors.exception({
                  header: 'Cache.#batchCacheOperations',
                  message: 'operation type does not match "delete" or "put"'
                });
              }
              if (q.type === 'delete' && q.response != null) {
                throw Ar.errors.exception({
                  header: 'Cache.#batchCacheOperations',
                  message:
                    'delete operation should not have an associated response'
                });
              }
              if (this.#t(q.request, q.options, re).length) {
                throw new DOMException('???', 'InvalidStateError');
              }
              let a;
              if (q.type === 'delete') {
                a = this.#t(q.request, q.options);
                if (a.length === 0) {
                  return [];
                }
                for (const q of a) {
                  const a = C.indexOf(q);
                  Or(a !== -1);
                  C.splice(a, 1);
                }
              } else if (q.type === 'put') {
                if (q.response == null) {
                  throw Ar.errors.exception({
                    header: 'Cache.#batchCacheOperations',
                    message: 'put operation should have an associated response'
                  });
                }
                const ae = q.request;
                if (!Fr(ae.url)) {
                  throw Ar.errors.exception({
                    header: 'Cache.#batchCacheOperations',
                    message: 'expected http or https scheme'
                  });
                }
                if (ae.method !== 'GET') {
                  throw Ar.errors.exception({
                    header: 'Cache.#batchCacheOperations',
                    message: 'not get method'
                  });
                }
                if (q.options != null) {
                  throw Ar.errors.exception({
                    header: 'Cache.#batchCacheOperations',
                    message: 'options must not be defined'
                  });
                }
                a = this.#t(q.request);
                for (const q of a) {
                  const a = C.indexOf(q);
                  Or(a !== -1);
                  C.splice(a, 1);
                }
                C.push([q.request, q.response]);
                re.push([q.request, q.response]);
              }
              ae.push([q.request, q.response]);
            }
            return ae;
          } catch (a) {
            this.#e.length = 0;
            this.#e = q;
            throw a;
          }
        }
        #t(a, C, q) {
          const re = [];
          const ae = q ?? this.#e;
          for (const q of ae) {
            const [ae, Ue] = q;
            if (this.#s(a, ae, Ue, C)) {
              re.push(q);
            }
          }
          return re;
        }
        #s(a, C, q = null, re) {
          const lt = new URL(a.url);
          const Pt = new URL(C.url);
          if (re?.ignoreSearch) {
            Pt.search = '';
            lt.search = '';
          }
          if (!ae(lt, Pt, true)) {
            return false;
          }
          if (q == null || re?.ignoreVary || !q.headersList.contains('vary')) {
            return true;
          }
          const Wt = Ue(q.headersList.get('vary'));
          for (const q of Wt) {
            if (q === '*') {
              return false;
            }
            const re = C.headersList.get(q);
            const ae = a.headersList.get(q);
            if (re !== ae) {
              return false;
            }
          }
          return true;
        }
      }
      Object.defineProperties(Cache.prototype, {
        [Symbol.toStringTag]: { value: 'Cache', configurable: true },
        match: lt,
        matchAll: lt,
        add: lt,
        addAll: lt,
        put: lt,
        delete: lt,
        keys: lt
      });
      const Ur = [
        {
          key: 'ignoreSearch',
          converter: Ar.converters.boolean,
          defaultValue: false
        },
        {
          key: 'ignoreMethod',
          converter: Ar.converters.boolean,
          defaultValue: false
        },
        {
          key: 'ignoreVary',
          converter: Ar.converters.boolean,
          defaultValue: false
        }
      ];
      Ar.converters.CacheQueryOptions = Ar.dictionaryConverter(Ur);
      Ar.converters.MultiCacheQueryOptions = Ar.dictionaryConverter([
        ...Ur,
        { key: 'cacheName', converter: Ar.converters.DOMString }
      ]);
      Ar.converters.Response = Ar.interfaceConverter(Er);
      Ar.converters['sequence<RequestInfo>'] = Ar.sequenceConverter(
        Ar.converters.RequestInfo
      );
      a.exports = { Cache: Cache };
    },
    3187: (a, C, q) => {
      'use strict';
      const { kConstruct: re } = q(2994);
      const { Cache: ae } = q(5075);
      const { webidl: Ue } = q(3721);
      const { kEnumerableProperty: lt } = q(9647);
      class CacheStorage {
        #n = new Map();
        constructor() {
          if (arguments[0] !== re) {
            Ue.illegalConstructor();
          }
        }
        async match(a, C = {}) {
          Ue.brandCheck(this, CacheStorage);
          Ue.argumentLengthCheck(arguments, 1, {
            header: 'CacheStorage.match'
          });
          a = Ue.converters.RequestInfo(a);
          C = Ue.converters.MultiCacheQueryOptions(C);
          if (C.cacheName != null) {
            if (this.#n.has(C.cacheName)) {
              const q = this.#n.get(C.cacheName);
              const Ue = new ae(re, q);
              return await Ue.match(a, C);
            }
          } else {
            for (const q of this.#n.values()) {
              const Ue = new ae(re, q);
              const lt = await Ue.match(a, C);
              if (lt !== undefined) {
                return lt;
              }
            }
          }
        }
        async has(a) {
          Ue.brandCheck(this, CacheStorage);
          Ue.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.has' });
          a = Ue.converters.DOMString(a);
          return this.#n.has(a);
        }
        async open(a) {
          Ue.brandCheck(this, CacheStorage);
          Ue.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.open' });
          a = Ue.converters.DOMString(a);
          if (this.#n.has(a)) {
            const C = this.#n.get(a);
            return new ae(re, C);
          }
          const C = [];
          this.#n.set(a, C);
          return new ae(re, C);
        }
        async delete(a) {
          Ue.brandCheck(this, CacheStorage);
          Ue.argumentLengthCheck(arguments, 1, {
            header: 'CacheStorage.delete'
          });
          a = Ue.converters.DOMString(a);
          return this.#n.delete(a);
        }
        async keys() {
          Ue.brandCheck(this, CacheStorage);
          const a = this.#n.keys();
          return [...a];
        }
      }
      Object.defineProperties(CacheStorage.prototype, {
        [Symbol.toStringTag]: { value: 'CacheStorage', configurable: true },
        match: lt,
        has: lt,
        open: lt,
        delete: lt,
        keys: lt
      });
      a.exports = { CacheStorage: CacheStorage };
    },
    2994: (a, C, q) => {
      'use strict';
      a.exports = { kConstruct: q(7621).kConstruct };
    },
    8826: (a, C, q) => {
      'use strict';
      const re = q(9491);
      const { URLSerializer: ae } = q(6932);
      const { isValidHeaderName: Ue } = q(6860);
      function urlEquals(a, C, q = false) {
        const re = ae(a, q);
        const Ue = ae(C, q);
        return re === Ue;
      }
      function fieldValues(a) {
        re(a !== null);
        const C = [];
        for (let q of a.split(',')) {
          q = q.trim();
          if (!q.length) {
            continue;
          } else if (!Ue(q)) {
            continue;
          }
          C.push(q);
        }
        return C;
      }
      a.exports = { urlEquals: urlEquals, fieldValues: fieldValues };
    },
    8352: (a, C, q) => {
      'use strict';
      const re = q(9491);
      const ae = q(1808);
      const Ue = q(3685);
      const { pipeline: lt } = q(2781);
      const Pt = q(9647);
      const Wt = q(8748);
      const Ar = q(2619);
      const Er = q(6775);
      const {
        RequestContentLengthMismatchError: Ir,
        ResponseContentLengthMismatchError: Br,
        InvalidArgumentError: Qr,
        RequestAbortedError: kr,
        HeadersTimeoutError: Dr,
        HeadersOverflowError: Nr,
        SocketError: Lr,
        InformationalError: Fr,
        BodyTimeoutError: Mr,
        HTTPParserError: Pr,
        ResponseExceededMaxSizeError: Or,
        ClientDestroyedError: xr
      } = q(3501);
      const Ur = q(6840);
      const {
        kUrl: Gr,
        kReset: Hr,
        kServerName: Vr,
        kClient: Wr,
        kBusy: Yr,
        kParser: jr,
        kConnect: Jr,
        kBlocking: zr,
        kResuming: $r,
        kRunning: Kr,
        kPending: Xr,
        kSize: Zr,
        kWriting: es,
        kQueue: ts,
        kConnected: rs,
        kConnecting: ss,
        kNeedDrain: ns,
        kNoRef: os,
        kKeepAliveDefaultTimeout: as,
        kHostHeader: ls,
        kPendingIdx: cs,
        kRunningIdx: As,
        kError: ds,
        kPipelining: us,
        kSocket: ps,
        kKeepAliveTimeoutValue: hs,
        kMaxHeadersSize: ms,
        kKeepAliveMaxTimeout: fs,
        kKeepAliveTimeoutThreshold: gs,
        kHeadersTimeout: Es,
        kBodyTimeout: Cs,
        kStrictContentLength: bs,
        kConnector: ys,
        kMaxRedirections: Is,
        kMaxRequests: ws,
        kCounter: Bs,
        kClose: Qs,
        kDestroy: vs,
        kDispatch: Ss,
        kInterceptors: _s,
        kLocalAddress: Ts,
        kMaxResponseSize: ks,
        kHTTPConnVersion: Rs,
        kHost: Ds,
        kHTTP2Session: Ns,
        kHTTP2SessionState: Ls,
        kHTTP2BuildRequest: Fs,
        kHTTP2CopyHeaders: Ms,
        kHTTP1BuildRequest: Ps
      } = q(7621);
      let Os;
      try {
        Os = q(5158);
      } catch {
        Os = { constants: {} };
      }
      const {
        constants: {
          HTTP2_HEADER_AUTHORITY: xs,
          HTTP2_HEADER_METHOD: Us,
          HTTP2_HEADER_PATH: Gs,
          HTTP2_HEADER_SCHEME: Hs,
          HTTP2_HEADER_CONTENT_LENGTH: qs,
          HTTP2_HEADER_EXPECT: Vs,
          HTTP2_HEADER_STATUS: Ws
        }
      } = Os;
      let Ys = false;
      const js = Buffer[Symbol.species];
      const Js = Symbol('kClosedResolve');
      const zs = {};
      try {
        const a = q(7643);
        zs.sendHeaders = a.channel('undici:client:sendHeaders');
        zs.beforeConnect = a.channel('undici:client:beforeConnect');
        zs.connectError = a.channel('undici:client:connectError');
        zs.connected = a.channel('undici:client:connected');
      } catch {
        zs.sendHeaders = { hasSubscribers: false };
        zs.beforeConnect = { hasSubscribers: false };
        zs.connectError = { hasSubscribers: false };
        zs.connected = { hasSubscribers: false };
      }
      class Client extends Er {
        constructor(
          a,
          {
            interceptors: C,
            maxHeaderSize: q,
            headersTimeout: re,
            socketTimeout: lt,
            requestTimeout: Wt,
            connectTimeout: Ar,
            bodyTimeout: Er,
            idleTimeout: Ir,
            keepAlive: Br,
            keepAliveTimeout: kr,
            maxKeepAliveTimeout: Dr,
            keepAliveMaxTimeout: Nr,
            keepAliveTimeoutThreshold: Lr,
            socketPath: Fr,
            pipelining: Mr,
            tls: Pr,
            strictContentLength: Or,
            maxCachedSessions: xr,
            maxRedirections: Hr,
            connect: Wr,
            maxRequestsPerClient: Yr,
            localAddress: jr,
            maxResponseSize: Jr,
            autoSelectFamily: zr,
            autoSelectFamilyAttemptTimeout: Kr,
            allowH2: Xr,
            maxConcurrentStreams: Zr
          } = {}
        ) {
          super();
          if (Br !== undefined) {
            throw new Qr('unsupported keepAlive, use pipelining=0 instead');
          }
          if (lt !== undefined) {
            throw new Qr(
              'unsupported socketTimeout, use headersTimeout & bodyTimeout instead'
            );
          }
          if (Wt !== undefined) {
            throw new Qr(
              'unsupported requestTimeout, use headersTimeout & bodyTimeout instead'
            );
          }
          if (Ir !== undefined) {
            throw new Qr(
              'unsupported idleTimeout, use keepAliveTimeout instead'
            );
          }
          if (Dr !== undefined) {
            throw new Qr(
              'unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead'
            );
          }
          if (q != null && !Number.isFinite(q)) {
            throw new Qr('invalid maxHeaderSize');
          }
          if (Fr != null && typeof Fr !== 'string') {
            throw new Qr('invalid socketPath');
          }
          if (Ar != null && (!Number.isFinite(Ar) || Ar < 0)) {
            throw new Qr('invalid connectTimeout');
          }
          if (kr != null && (!Number.isFinite(kr) || kr <= 0)) {
            throw new Qr('invalid keepAliveTimeout');
          }
          if (Nr != null && (!Number.isFinite(Nr) || Nr <= 0)) {
            throw new Qr('invalid keepAliveMaxTimeout');
          }
          if (Lr != null && !Number.isFinite(Lr)) {
            throw new Qr('invalid keepAliveTimeoutThreshold');
          }
          if (re != null && (!Number.isInteger(re) || re < 0)) {
            throw new Qr('headersTimeout must be a positive integer or zero');
          }
          if (Er != null && (!Number.isInteger(Er) || Er < 0)) {
            throw new Qr('bodyTimeout must be a positive integer or zero');
          }
          if (
            Wr != null &&
            typeof Wr !== 'function' &&
            typeof Wr !== 'object'
          ) {
            throw new Qr('connect must be a function or an object');
          }
          if (Hr != null && (!Number.isInteger(Hr) || Hr < 0)) {
            throw new Qr('maxRedirections must be a positive number');
          }
          if (Yr != null && (!Number.isInteger(Yr) || Yr < 0)) {
            throw new Qr('maxRequestsPerClient must be a positive number');
          }
          if (jr != null && (typeof jr !== 'string' || ae.isIP(jr) === 0)) {
            throw new Qr('localAddress must be valid string IP address');
          }
          if (Jr != null && (!Number.isInteger(Jr) || Jr < -1)) {
            throw new Qr('maxResponseSize must be a positive number');
          }
          if (Kr != null && (!Number.isInteger(Kr) || Kr < -1)) {
            throw new Qr(
              'autoSelectFamilyAttemptTimeout must be a positive number'
            );
          }
          if (Xr != null && typeof Xr !== 'boolean') {
            throw new Qr('allowH2 must be a valid boolean value');
          }
          if (Zr != null && (typeof Zr !== 'number' || Zr < 1)) {
            throw new Qr(
              'maxConcurrentStreams must be a possitive integer, greater than 0'
            );
          }
          if (typeof Wr !== 'function') {
            Wr = Ur({
              ...Pr,
              maxCachedSessions: xr,
              allowH2: Xr,
              socketPath: Fr,
              timeout: Ar,
              ...(Pt.nodeHasAutoSelectFamily && zr
                ? { autoSelectFamily: zr, autoSelectFamilyAttemptTimeout: Kr }
                : undefined),
              ...Wr
            });
          }
          this[_s] =
            C && C.Client && Array.isArray(C.Client)
              ? C.Client
              : [Ks({ maxRedirections: Hr })];
          this[Gr] = Pt.parseOrigin(a);
          this[ys] = Wr;
          this[ps] = null;
          this[us] = Mr != null ? Mr : 1;
          this[ms] = q || Ue.maxHeaderSize;
          this[as] = kr == null ? 4e3 : kr;
          this[fs] = Nr == null ? 6e5 : Nr;
          this[gs] = Lr == null ? 1e3 : Lr;
          this[hs] = this[as];
          this[Vr] = null;
          this[Ts] = jr != null ? jr : null;
          this[$r] = 0;
          this[ns] = 0;
          this[ls] =
            `host: ${this[Gr].hostname}${this[Gr].port ? `:${this[Gr].port}` : ''}\r\n`;
          this[Cs] = Er != null ? Er : 3e5;
          this[Es] = re != null ? re : 3e5;
          this[bs] = Or == null ? true : Or;
          this[Is] = Hr;
          this[ws] = Yr;
          this[Js] = null;
          this[ks] = Jr > -1 ? Jr : -1;
          this[Rs] = 'h1';
          this[Ns] = null;
          this[Ls] = !Xr
            ? null
            : { openStreams: 0, maxConcurrentStreams: Zr != null ? Zr : 100 };
          this[Ds] =
            `${this[Gr].hostname}${this[Gr].port ? `:${this[Gr].port}` : ''}`;
          this[ts] = [];
          this[As] = 0;
          this[cs] = 0;
        }
        get pipelining() {
          return this[us];
        }
        set pipelining(a) {
          this[us] = a;
          resume(this, true);
        }
        get [Xr]() {
          return this[ts].length - this[cs];
        }
        get [Kr]() {
          return this[cs] - this[As];
        }
        get [Zr]() {
          return this[ts].length - this[As];
        }
        get [rs]() {
          return !!this[ps] && !this[ss] && !this[ps].destroyed;
        }
        get [Yr]() {
          const a = this[ps];
          return (
            (a && (a[Hr] || a[es] || a[zr])) ||
            this[Zr] >= (this[us] || 1) ||
            this[Xr] > 0
          );
        }
        [Jr](a) {
          connect(this);
          this.once('connect', a);
        }
        [Ss](a, C) {
          const q = a.origin || this[Gr].origin;
          const re = this[Rs] === 'h2' ? Ar[Fs](q, a, C) : Ar[Ps](q, a, C);
          this[ts].push(re);
          if (this[$r]) {
          } else if (Pt.bodyLength(re.body) == null && Pt.isIterable(re.body)) {
            this[$r] = 1;
            process.nextTick(resume, this);
          } else {
            resume(this, true);
          }
          if (this[$r] && this[ns] !== 2 && this[Yr]) {
            this[ns] = 2;
          }
          return this[ns] < 2;
        }
        async [Qs]() {
          return new Promise((a) => {
            if (!this[Zr]) {
              a(null);
            } else {
              this[Js] = a;
            }
          });
        }
        async [vs](a) {
          return new Promise((C) => {
            const q = this[ts].splice(this[cs]);
            for (let C = 0; C < q.length; C++) {
              const re = q[C];
              errorRequest(this, re, a);
            }
            const callback = () => {
              if (this[Js]) {
                this[Js]();
                this[Js] = null;
              }
              C();
            };
            if (this[Ns] != null) {
              Pt.destroy(this[Ns], a);
              this[Ns] = null;
              this[Ls] = null;
            }
            if (!this[ps]) {
              queueMicrotask(callback);
            } else {
              Pt.destroy(this[ps].on('close', callback), a);
            }
            resume(this);
          });
        }
      }
      function onHttp2SessionError(a) {
        re(a.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');
        this[ps][ds] = a;
        onError(this[Wr], a);
      }
      function onHttp2FrameError(a, C, q) {
        const re = new Fr(
          `HTTP/2: "frameError" received - type ${a}, code ${C}`
        );
        if (q === 0) {
          this[ps][ds] = re;
          onError(this[Wr], re);
        }
      }
      function onHttp2SessionEnd() {
        Pt.destroy(this, new Lr('other side closed'));
        Pt.destroy(this[ps], new Lr('other side closed'));
      }
      function onHTTP2GoAway(a) {
        const C = this[Wr];
        const q = new Fr(`HTTP/2: "GOAWAY" frame received with code ${a}`);
        C[ps] = null;
        C[Ns] = null;
        if (C.destroyed) {
          re(this[Xr] === 0);
          const a = C[ts].splice(C[As]);
          for (let C = 0; C < a.length; C++) {
            const re = a[C];
            errorRequest(this, re, q);
          }
        } else if (C[Kr] > 0) {
          const a = C[ts][C[As]];
          C[ts][C[As]++] = null;
          errorRequest(C, a, q);
        }
        C[cs] = C[As];
        re(C[Kr] === 0);
        C.emit('disconnect', C[Gr], [C], q);
        resume(C);
      }
      const $s = q(446);
      const Ks = q(3163);
      const Xs = Buffer.alloc(0);
      async function lazyllhttp() {
        const a = process.env.JEST_WORKER_ID ? q(2959) : undefined;
        let C;
        try {
          C = await WebAssembly.compile(Buffer.from(q(5674), 'base64'));
        } catch (re) {
          C = await WebAssembly.compile(Buffer.from(a || q(2959), 'base64'));
        }
        return await WebAssembly.instantiate(C, {
          env: {
            wasm_on_url: (a, C, q) => 0,
            wasm_on_status: (a, C, q) => {
              re.strictEqual(tn.ptr, a);
              const ae = C - nn + rn.byteOffset;
              return tn.onStatus(new js(rn.buffer, ae, q)) || 0;
            },
            wasm_on_message_begin: (a) => {
              re.strictEqual(tn.ptr, a);
              return tn.onMessageBegin() || 0;
            },
            wasm_on_header_field: (a, C, q) => {
              re.strictEqual(tn.ptr, a);
              const ae = C - nn + rn.byteOffset;
              return tn.onHeaderField(new js(rn.buffer, ae, q)) || 0;
            },
            wasm_on_header_value: (a, C, q) => {
              re.strictEqual(tn.ptr, a);
              const ae = C - nn + rn.byteOffset;
              return tn.onHeaderValue(new js(rn.buffer, ae, q)) || 0;
            },
            wasm_on_headers_complete: (a, C, q, ae) => {
              re.strictEqual(tn.ptr, a);
              return tn.onHeadersComplete(C, Boolean(q), Boolean(ae)) || 0;
            },
            wasm_on_body: (a, C, q) => {
              re.strictEqual(tn.ptr, a);
              const ae = C - nn + rn.byteOffset;
              return tn.onBody(new js(rn.buffer, ae, q)) || 0;
            },
            wasm_on_message_complete: (a) => {
              re.strictEqual(tn.ptr, a);
              return tn.onMessageComplete() || 0;
            }
          }
        });
      }
      let Zs = null;
      let en = lazyllhttp();
      en.catch();
      let tn = null;
      let rn = null;
      let sn = 0;
      let nn = null;
      const on = 1;
      const an = 2;
      const ln = 3;
      class Parser {
        constructor(a, C, { exports: q }) {
          re(Number.isFinite(a[ms]) && a[ms] > 0);
          this.llhttp = q;
          this.ptr = this.llhttp.llhttp_alloc($s.TYPE.RESPONSE);
          this.client = a;
          this.socket = C;
          this.timeout = null;
          this.timeoutValue = null;
          this.timeoutType = null;
          this.statusCode = null;
          this.statusText = '';
          this.upgrade = false;
          this.headers = [];
          this.headersSize = 0;
          this.headersMaxSize = a[ms];
          this.shouldKeepAlive = false;
          this.paused = false;
          this.resume = this.resume.bind(this);
          this.bytesRead = 0;
          this.keepAlive = '';
          this.contentLength = '';
          this.connection = '';
          this.maxResponseSize = a[ks];
        }
        setTimeout(a, C) {
          this.timeoutType = C;
          if (a !== this.timeoutValue) {
            Wt.clearTimeout(this.timeout);
            if (a) {
              this.timeout = Wt.setTimeout(onParserTimeout, a, this);
              if (this.timeout.unref) {
                this.timeout.unref();
              }
            } else {
              this.timeout = null;
            }
            this.timeoutValue = a;
          } else if (this.timeout) {
            if (this.timeout.refresh) {
              this.timeout.refresh();
            }
          }
        }
        resume() {
          if (this.socket.destroyed || !this.paused) {
            return;
          }
          re(this.ptr != null);
          re(tn == null);
          this.llhttp.llhttp_resume(this.ptr);
          re(this.timeoutType === an);
          if (this.timeout) {
            if (this.timeout.refresh) {
              this.timeout.refresh();
            }
          }
          this.paused = false;
          this.execute(this.socket.read() || Xs);
          this.readMore();
        }
        readMore() {
          while (!this.paused && this.ptr) {
            const a = this.socket.read();
            if (a === null) {
              break;
            }
            this.execute(a);
          }
        }
        execute(a) {
          re(this.ptr != null);
          re(tn == null);
          re(!this.paused);
          const { socket: C, llhttp: q } = this;
          if (a.length > sn) {
            if (nn) {
              q.free(nn);
            }
            sn = Math.ceil(a.length / 4096) * 4096;
            nn = q.malloc(sn);
          }
          new Uint8Array(q.memory.buffer, nn, sn).set(a);
          try {
            let re;
            try {
              rn = a;
              tn = this;
              re = q.llhttp_execute(this.ptr, nn, a.length);
            } catch (a) {
              throw a;
            } finally {
              tn = null;
              rn = null;
            }
            const ae = q.llhttp_get_error_pos(this.ptr) - nn;
            if (re === $s.ERROR.PAUSED_UPGRADE) {
              this.onUpgrade(a.slice(ae));
            } else if (re === $s.ERROR.PAUSED) {
              this.paused = true;
              C.unshift(a.slice(ae));
            } else if (re !== $s.ERROR.OK) {
              const C = q.llhttp_get_error_reason(this.ptr);
              let Ue = '';
              if (C) {
                const a = new Uint8Array(q.memory.buffer, C).indexOf(0);
                Ue =
                  'Response does not match the HTTP/1.1 protocol (' +
                  Buffer.from(q.memory.buffer, C, a).toString() +
                  ')';
              }
              throw new Pr(Ue, $s.ERROR[re], a.slice(ae));
            }
          } catch (a) {
            Pt.destroy(C, a);
          }
        }
        destroy() {
          re(this.ptr != null);
          re(tn == null);
          this.llhttp.llhttp_free(this.ptr);
          this.ptr = null;
          Wt.clearTimeout(this.timeout);
          this.timeout = null;
          this.timeoutValue = null;
          this.timeoutType = null;
          this.paused = false;
        }
        onStatus(a) {
          this.statusText = a.toString();
        }
        onMessageBegin() {
          const { socket: a, client: C } = this;
          if (a.destroyed) {
            return -1;
          }
          const q = C[ts][C[As]];
          if (!q) {
            return -1;
          }
        }
        onHeaderField(a) {
          const C = this.headers.length;
          if ((C & 1) === 0) {
            this.headers.push(a);
          } else {
            this.headers[C - 1] = Buffer.concat([this.headers[C - 1], a]);
          }
          this.trackHeader(a.length);
        }
        onHeaderValue(a) {
          let C = this.headers.length;
          if ((C & 1) === 1) {
            this.headers.push(a);
            C += 1;
          } else {
            this.headers[C - 1] = Buffer.concat([this.headers[C - 1], a]);
          }
          const q = this.headers[C - 2];
          if (q.length === 10 && q.toString().toLowerCase() === 'keep-alive') {
            this.keepAlive += a.toString();
          } else if (
            q.length === 10 &&
            q.toString().toLowerCase() === 'connection'
          ) {
            this.connection += a.toString();
          } else if (
            q.length === 14 &&
            q.toString().toLowerCase() === 'content-length'
          ) {
            this.contentLength += a.toString();
          }
          this.trackHeader(a.length);
        }
        trackHeader(a) {
          this.headersSize += a;
          if (this.headersSize >= this.headersMaxSize) {
            Pt.destroy(this.socket, new Nr());
          }
        }
        onUpgrade(a) {
          const {
            upgrade: C,
            client: q,
            socket: ae,
            headers: Ue,
            statusCode: lt
          } = this;
          re(C);
          const Wt = q[ts][q[As]];
          re(Wt);
          re(!ae.destroyed);
          re(ae === q[ps]);
          re(!this.paused);
          re(Wt.upgrade || Wt.method === 'CONNECT');
          this.statusCode = null;
          this.statusText = '';
          this.shouldKeepAlive = null;
          re(this.headers.length % 2 === 0);
          this.headers = [];
          this.headersSize = 0;
          ae.unshift(a);
          ae[jr].destroy();
          ae[jr] = null;
          ae[Wr] = null;
          ae[ds] = null;
          ae.removeListener('error', onSocketError)
            .removeListener('readable', onSocketReadable)
            .removeListener('end', onSocketEnd)
            .removeListener('close', onSocketClose);
          q[ps] = null;
          q[ts][q[As]++] = null;
          q.emit('disconnect', q[Gr], [q], new Fr('upgrade'));
          try {
            Wt.onUpgrade(lt, Ue, ae);
          } catch (a) {
            Pt.destroy(ae, a);
          }
          resume(q);
        }
        onHeadersComplete(a, C, q) {
          const { client: ae, socket: Ue, headers: lt, statusText: Wt } = this;
          if (Ue.destroyed) {
            return -1;
          }
          const Ar = ae[ts][ae[As]];
          if (!Ar) {
            return -1;
          }
          re(!this.upgrade);
          re(this.statusCode < 200);
          if (a === 100) {
            Pt.destroy(Ue, new Lr('bad response', Pt.getSocketInfo(Ue)));
            return -1;
          }
          if (C && !Ar.upgrade) {
            Pt.destroy(Ue, new Lr('bad upgrade', Pt.getSocketInfo(Ue)));
            return -1;
          }
          re.strictEqual(this.timeoutType, on);
          this.statusCode = a;
          this.shouldKeepAlive =
            q ||
            (Ar.method === 'HEAD' &&
              !Ue[Hr] &&
              this.connection.toLowerCase() === 'keep-alive');
          if (this.statusCode >= 200) {
            const a = Ar.bodyTimeout != null ? Ar.bodyTimeout : ae[Cs];
            this.setTimeout(a, an);
          } else if (this.timeout) {
            if (this.timeout.refresh) {
              this.timeout.refresh();
            }
          }
          if (Ar.method === 'CONNECT') {
            re(ae[Kr] === 1);
            this.upgrade = true;
            return 2;
          }
          if (C) {
            re(ae[Kr] === 1);
            this.upgrade = true;
            return 2;
          }
          re(this.headers.length % 2 === 0);
          this.headers = [];
          this.headersSize = 0;
          if (this.shouldKeepAlive && ae[us]) {
            const a = this.keepAlive
              ? Pt.parseKeepAliveTimeout(this.keepAlive)
              : null;
            if (a != null) {
              const C = Math.min(a - ae[gs], ae[fs]);
              if (C <= 0) {
                Ue[Hr] = true;
              } else {
                ae[hs] = C;
              }
            } else {
              ae[hs] = ae[as];
            }
          } else {
            Ue[Hr] = true;
          }
          const Er = Ar.onHeaders(a, lt, this.resume, Wt) === false;
          if (Ar.aborted) {
            return -1;
          }
          if (Ar.method === 'HEAD') {
            return 1;
          }
          if (a < 200) {
            return 1;
          }
          if (Ue[zr]) {
            Ue[zr] = false;
            resume(ae);
          }
          return Er ? $s.ERROR.PAUSED : 0;
        }
        onBody(a) {
          const {
            client: C,
            socket: q,
            statusCode: ae,
            maxResponseSize: Ue
          } = this;
          if (q.destroyed) {
            return -1;
          }
          const lt = C[ts][C[As]];
          re(lt);
          re.strictEqual(this.timeoutType, an);
          if (this.timeout) {
            if (this.timeout.refresh) {
              this.timeout.refresh();
            }
          }
          re(ae >= 200);
          if (Ue > -1 && this.bytesRead + a.length > Ue) {
            Pt.destroy(q, new Or());
            return -1;
          }
          this.bytesRead += a.length;
          if (lt.onData(a) === false) {
            return $s.ERROR.PAUSED;
          }
        }
        onMessageComplete() {
          const {
            client: a,
            socket: C,
            statusCode: q,
            upgrade: ae,
            headers: Ue,
            contentLength: lt,
            bytesRead: Wt,
            shouldKeepAlive: Ar
          } = this;
          if (C.destroyed && (!q || Ar)) {
            return -1;
          }
          if (ae) {
            return;
          }
          const Er = a[ts][a[As]];
          re(Er);
          re(q >= 100);
          this.statusCode = null;
          this.statusText = '';
          this.bytesRead = 0;
          this.contentLength = '';
          this.keepAlive = '';
          this.connection = '';
          re(this.headers.length % 2 === 0);
          this.headers = [];
          this.headersSize = 0;
          if (q < 200) {
            return;
          }
          if (Er.method !== 'HEAD' && lt && Wt !== parseInt(lt, 10)) {
            Pt.destroy(C, new Br());
            return -1;
          }
          Er.onComplete(Ue);
          a[ts][a[As]++] = null;
          if (C[es]) {
            re.strictEqual(a[Kr], 0);
            Pt.destroy(C, new Fr('reset'));
            return $s.ERROR.PAUSED;
          } else if (!Ar) {
            Pt.destroy(C, new Fr('reset'));
            return $s.ERROR.PAUSED;
          } else if (C[Hr] && a[Kr] === 0) {
            Pt.destroy(C, new Fr('reset'));
            return $s.ERROR.PAUSED;
          } else if (a[us] === 1) {
            setImmediate(resume, a);
          } else {
            resume(a);
          }
        }
      }
      function onParserTimeout(a) {
        const { socket: C, timeoutType: q, client: ae } = a;
        if (q === on) {
          if (!C[es] || C.writableNeedDrain || ae[Kr] > 1) {
            re(!a.paused, 'cannot be paused while waiting for headers');
            Pt.destroy(C, new Dr());
          }
        } else if (q === an) {
          if (!a.paused) {
            Pt.destroy(C, new Mr());
          }
        } else if (q === ln) {
          re(ae[Kr] === 0 && ae[hs]);
          Pt.destroy(C, new Fr('socket idle timeout'));
        }
      }
      function onSocketReadable() {
        const { [jr]: a } = this;
        if (a) {
          a.readMore();
        }
      }
      function onSocketError(a) {
        const { [Wr]: C, [jr]: q } = this;
        re(a.code !== 'ERR_TLS_CERT_ALTNAME_INVALID');
        if (C[Rs] !== 'h2') {
          if (a.code === 'ECONNRESET' && q.statusCode && !q.shouldKeepAlive) {
            q.onMessageComplete();
            return;
          }
        }
        this[ds] = a;
        onError(this[Wr], a);
      }
      function onError(a, C) {
        if (
          a[Kr] === 0 &&
          C.code !== 'UND_ERR_INFO' &&
          C.code !== 'UND_ERR_SOCKET'
        ) {
          re(a[cs] === a[As]);
          const q = a[ts].splice(a[As]);
          for (let re = 0; re < q.length; re++) {
            const ae = q[re];
            errorRequest(a, ae, C);
          }
          re(a[Zr] === 0);
        }
      }
      function onSocketEnd() {
        const { [jr]: a, [Wr]: C } = this;
        if (C[Rs] !== 'h2') {
          if (a.statusCode && !a.shouldKeepAlive) {
            a.onMessageComplete();
            return;
          }
        }
        Pt.destroy(this, new Lr('other side closed', Pt.getSocketInfo(this)));
      }
      function onSocketClose() {
        const { [Wr]: a, [jr]: C } = this;
        if (a[Rs] === 'h1' && C) {
          if (!this[ds] && C.statusCode && !C.shouldKeepAlive) {
            C.onMessageComplete();
          }
          this[jr].destroy();
          this[jr] = null;
        }
        const q = this[ds] || new Lr('closed', Pt.getSocketInfo(this));
        a[ps] = null;
        if (a.destroyed) {
          re(a[Xr] === 0);
          const C = a[ts].splice(a[As]);
          for (let re = 0; re < C.length; re++) {
            const ae = C[re];
            errorRequest(a, ae, q);
          }
        } else if (a[Kr] > 0 && q.code !== 'UND_ERR_INFO') {
          const C = a[ts][a[As]];
          a[ts][a[As]++] = null;
          errorRequest(a, C, q);
        }
        a[cs] = a[As];
        re(a[Kr] === 0);
        a.emit('disconnect', a[Gr], [a], q);
        resume(a);
      }
      async function connect(a) {
        re(!a[ss]);
        re(!a[ps]);
        let { host: C, hostname: q, protocol: Ue, port: lt } = a[Gr];
        if (q[0] === '[') {
          const a = q.indexOf(']');
          re(a !== -1);
          const C = q.substring(1, a);
          re(ae.isIP(C));
          q = C;
        }
        a[ss] = true;
        if (zs.beforeConnect.hasSubscribers) {
          zs.beforeConnect.publish({
            connectParams: {
              host: C,
              hostname: q,
              protocol: Ue,
              port: lt,
              servername: a[Vr],
              localAddress: a[Ts]
            },
            connector: a[ys]
          });
        }
        try {
          const ae = await new Promise((re, ae) => {
            a[ys](
              {
                host: C,
                hostname: q,
                protocol: Ue,
                port: lt,
                servername: a[Vr],
                localAddress: a[Ts]
              },
              (a, C) => {
                if (a) {
                  ae(a);
                } else {
                  re(C);
                }
              }
            );
          });
          if (a.destroyed) {
            Pt.destroy(
              ae.on('error', () => {}),
              new xr()
            );
            return;
          }
          a[ss] = false;
          re(ae);
          const Wt = ae.alpnProtocol === 'h2';
          if (Wt) {
            if (!Ys) {
              Ys = true;
              process.emitWarning(
                'H2 support is experimental, expect them to change at any time.',
                { code: 'UNDICI-H2' }
              );
            }
            const C = Os.connect(a[Gr], {
              createConnection: () => ae,
              peerMaxConcurrentStreams: a[Ls].maxConcurrentStreams
            });
            a[Rs] = 'h2';
            C[Wr] = a;
            C[ps] = ae;
            C.on('error', onHttp2SessionError);
            C.on('frameError', onHttp2FrameError);
            C.on('end', onHttp2SessionEnd);
            C.on('goaway', onHTTP2GoAway);
            C.on('close', onSocketClose);
            C.unref();
            a[Ns] = C;
            ae[Ns] = C;
          } else {
            if (!Zs) {
              Zs = await en;
              en = null;
            }
            ae[os] = false;
            ae[es] = false;
            ae[Hr] = false;
            ae[zr] = false;
            ae[jr] = new Parser(a, ae, Zs);
          }
          ae[Bs] = 0;
          ae[ws] = a[ws];
          ae[Wr] = a;
          ae[ds] = null;
          ae.on('error', onSocketError)
            .on('readable', onSocketReadable)
            .on('end', onSocketEnd)
            .on('close', onSocketClose);
          a[ps] = ae;
          if (zs.connected.hasSubscribers) {
            zs.connected.publish({
              connectParams: {
                host: C,
                hostname: q,
                protocol: Ue,
                port: lt,
                servername: a[Vr],
                localAddress: a[Ts]
              },
              connector: a[ys],
              socket: ae
            });
          }
          a.emit('connect', a[Gr], [a]);
        } catch (ae) {
          if (a.destroyed) {
            return;
          }
          a[ss] = false;
          if (zs.connectError.hasSubscribers) {
            zs.connectError.publish({
              connectParams: {
                host: C,
                hostname: q,
                protocol: Ue,
                port: lt,
                servername: a[Vr],
                localAddress: a[Ts]
              },
              connector: a[ys],
              error: ae
            });
          }
          if (ae.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {
            re(a[Kr] === 0);
            while (a[Xr] > 0 && a[ts][a[cs]].servername === a[Vr]) {
              const C = a[ts][a[cs]++];
              errorRequest(a, C, ae);
            }
          } else {
            onError(a, ae);
          }
          a.emit('connectionError', a[Gr], [a], ae);
        }
        resume(a);
      }
      function emitDrain(a) {
        a[ns] = 0;
        a.emit('drain', a[Gr], [a]);
      }
      function resume(a, C) {
        if (a[$r] === 2) {
          return;
        }
        a[$r] = 2;
        _resume(a, C);
        a[$r] = 0;
        if (a[As] > 256) {
          a[ts].splice(0, a[As]);
          a[cs] -= a[As];
          a[As] = 0;
        }
      }
      function _resume(a, C) {
        while (true) {
          if (a.destroyed) {
            re(a[Xr] === 0);
            return;
          }
          if (a[Js] && !a[Zr]) {
            a[Js]();
            a[Js] = null;
            return;
          }
          const q = a[ps];
          if (q && !q.destroyed && q.alpnProtocol !== 'h2') {
            if (a[Zr] === 0) {
              if (!q[os] && q.unref) {
                q.unref();
                q[os] = true;
              }
            } else if (q[os] && q.ref) {
              q.ref();
              q[os] = false;
            }
            if (a[Zr] === 0) {
              if (q[jr].timeoutType !== ln) {
                q[jr].setTimeout(a[hs], ln);
              }
            } else if (a[Kr] > 0 && q[jr].statusCode < 200) {
              if (q[jr].timeoutType !== on) {
                const C = a[ts][a[As]];
                const re = C.headersTimeout != null ? C.headersTimeout : a[Es];
                q[jr].setTimeout(re, on);
              }
            }
          }
          if (a[Yr]) {
            a[ns] = 2;
          } else if (a[ns] === 2) {
            if (C) {
              a[ns] = 1;
              process.nextTick(emitDrain, a);
            } else {
              emitDrain(a);
            }
            continue;
          }
          if (a[Xr] === 0) {
            return;
          }
          if (a[Kr] >= (a[us] || 1)) {
            return;
          }
          const ae = a[ts][a[cs]];
          if (a[Gr].protocol === 'https:' && a[Vr] !== ae.servername) {
            if (a[Kr] > 0) {
              return;
            }
            a[Vr] = ae.servername;
            if (q && q.servername !== ae.servername) {
              Pt.destroy(q, new Fr('servername changed'));
              return;
            }
          }
          if (a[ss]) {
            return;
          }
          if (!q && !a[Ns]) {
            connect(a);
            return;
          }
          if (q.destroyed || q[es] || q[Hr] || q[zr]) {
            return;
          }
          if (a[Kr] > 0 && !ae.idempotent) {
            return;
          }
          if (a[Kr] > 0 && (ae.upgrade || ae.method === 'CONNECT')) {
            return;
          }
          if (
            a[Kr] > 0 &&
            Pt.bodyLength(ae.body) !== 0 &&
            (Pt.isStream(ae.body) || Pt.isAsyncIterable(ae.body))
          ) {
            return;
          }
          if (!ae.aborted && write(a, ae)) {
            a[cs]++;
          } else {
            a[ts].splice(a[cs], 1);
          }
        }
      }
      function shouldSendContentLength(a) {
        return (
          a !== 'GET' &&
          a !== 'HEAD' &&
          a !== 'OPTIONS' &&
          a !== 'TRACE' &&
          a !== 'CONNECT'
        );
      }
      function write(a, C) {
        if (a[Rs] === 'h2') {
          writeH2(a, a[Ns], C);
          return;
        }
        const {
          body: q,
          method: ae,
          path: Ue,
          host: lt,
          upgrade: Wt,
          headers: Ar,
          blocking: Er,
          reset: Br
        } = C;
        const Qr = ae === 'PUT' || ae === 'POST' || ae === 'PATCH';
        if (q && typeof q.read === 'function') {
          q.read(0);
        }
        const Dr = Pt.bodyLength(q);
        let Nr = Dr;
        if (Nr === null) {
          Nr = C.contentLength;
        }
        if (Nr === 0 && !Qr) {
          Nr = null;
        }
        if (
          shouldSendContentLength(ae) &&
          Nr > 0 &&
          C.contentLength !== null &&
          C.contentLength !== Nr
        ) {
          if (a[bs]) {
            errorRequest(a, C, new Ir());
            return false;
          }
          process.emitWarning(new Ir());
        }
        const Lr = a[ps];
        try {
          C.onConnect((q) => {
            if (C.aborted || C.completed) {
              return;
            }
            errorRequest(a, C, q || new kr());
            Pt.destroy(Lr, new Fr('aborted'));
          });
        } catch (q) {
          errorRequest(a, C, q);
        }
        if (C.aborted) {
          return false;
        }
        if (ae === 'HEAD') {
          Lr[Hr] = true;
        }
        if (Wt || ae === 'CONNECT') {
          Lr[Hr] = true;
        }
        if (Br != null) {
          Lr[Hr] = Br;
        }
        if (a[ws] && Lr[Bs]++ >= a[ws]) {
          Lr[Hr] = true;
        }
        if (Er) {
          Lr[zr] = true;
        }
        let Mr = `${ae} ${Ue} HTTP/1.1\r\n`;
        if (typeof lt === 'string') {
          Mr += `host: ${lt}\r\n`;
        } else {
          Mr += a[ls];
        }
        if (Wt) {
          Mr += `connection: upgrade\r\nupgrade: ${Wt}\r\n`;
        } else if (a[us] && !Lr[Hr]) {
          Mr += 'connection: keep-alive\r\n';
        } else {
          Mr += 'connection: close\r\n';
        }
        if (Ar) {
          Mr += Ar;
        }
        if (zs.sendHeaders.hasSubscribers) {
          zs.sendHeaders.publish({ request: C, headers: Mr, socket: Lr });
        }
        if (!q || Dr === 0) {
          if (Nr === 0) {
            Lr.write(`${Mr}content-length: 0\r\n\r\n`, 'latin1');
          } else {
            re(Nr === null, 'no body must not have content length');
            Lr.write(`${Mr}\r\n`, 'latin1');
          }
          C.onRequestSent();
        } else if (Pt.isBuffer(q)) {
          re(Nr === q.byteLength, 'buffer body must have content length');
          Lr.cork();
          Lr.write(`${Mr}content-length: ${Nr}\r\n\r\n`, 'latin1');
          Lr.write(q);
          Lr.uncork();
          C.onBodySent(q);
          C.onRequestSent();
          if (!Qr) {
            Lr[Hr] = true;
          }
        } else if (Pt.isBlobLike(q)) {
          if (typeof q.stream === 'function') {
            writeIterable({
              body: q.stream(),
              client: a,
              request: C,
              socket: Lr,
              contentLength: Nr,
              header: Mr,
              expectsPayload: Qr
            });
          } else {
            writeBlob({
              body: q,
              client: a,
              request: C,
              socket: Lr,
              contentLength: Nr,
              header: Mr,
              expectsPayload: Qr
            });
          }
        } else if (Pt.isStream(q)) {
          writeStream({
            body: q,
            client: a,
            request: C,
            socket: Lr,
            contentLength: Nr,
            header: Mr,
            expectsPayload: Qr
          });
        } else if (Pt.isIterable(q)) {
          writeIterable({
            body: q,
            client: a,
            request: C,
            socket: Lr,
            contentLength: Nr,
            header: Mr,
            expectsPayload: Qr
          });
        } else {
          re(false);
        }
        return true;
      }
      function writeH2(a, C, q) {
        const {
          body: ae,
          method: Ue,
          path: lt,
          host: Wt,
          upgrade: Er,
          expectContinue: Br,
          signal: Qr,
          headers: Dr
        } = q;
        let Nr;
        if (typeof Dr === 'string') Nr = Ar[Ms](Dr.trim());
        else Nr = Dr;
        if (Er) {
          errorRequest(a, q, new Error('Upgrade not supported for H2'));
          return false;
        }
        try {
          q.onConnect((C) => {
            if (q.aborted || q.completed) {
              return;
            }
            errorRequest(a, q, C || new kr());
          });
        } catch (C) {
          errorRequest(a, q, C);
        }
        if (q.aborted) {
          return false;
        }
        let Lr;
        const Mr = a[Ls];
        Nr[xs] = Wt || a[Ds];
        Nr[Us] = Ue;
        if (Ue === 'CONNECT') {
          C.ref();
          Lr = C.request(Nr, { endStream: false, signal: Qr });
          if (Lr.id && !Lr.pending) {
            q.onUpgrade(null, null, Lr);
            ++Mr.openStreams;
          } else {
            Lr.once('ready', () => {
              q.onUpgrade(null, null, Lr);
              ++Mr.openStreams;
            });
          }
          Lr.once('close', () => {
            Mr.openStreams -= 1;
            if (Mr.openStreams === 0) C.unref();
          });
          return true;
        }
        Nr[Gs] = lt;
        Nr[Hs] = 'https';
        const Pr = Ue === 'PUT' || Ue === 'POST' || Ue === 'PATCH';
        if (ae && typeof ae.read === 'function') {
          ae.read(0);
        }
        let Or = Pt.bodyLength(ae);
        if (Or == null) {
          Or = q.contentLength;
        }
        if (Or === 0 || !Pr) {
          Or = null;
        }
        if (
          shouldSendContentLength(Ue) &&
          Or > 0 &&
          q.contentLength != null &&
          q.contentLength !== Or
        ) {
          if (a[bs]) {
            errorRequest(a, q, new Ir());
            return false;
          }
          process.emitWarning(new Ir());
        }
        if (Or != null) {
          re(ae, 'no body must not have content length');
          Nr[qs] = `${Or}`;
        }
        C.ref();
        const xr = Ue === 'GET' || Ue === 'HEAD';
        if (Br) {
          Nr[Vs] = '100-continue';
          Lr = C.request(Nr, { endStream: xr, signal: Qr });
          Lr.once('continue', writeBodyH2);
        } else {
          Lr = C.request(Nr, { endStream: xr, signal: Qr });
          writeBodyH2();
        }
        ++Mr.openStreams;
        Lr.once('response', (a) => {
          const { [Ws]: C, ...re } = a;
          if (q.onHeaders(Number(C), re, Lr.resume.bind(Lr), '') === false) {
            Lr.pause();
          }
        });
        Lr.once('end', () => {
          q.onComplete([]);
        });
        Lr.on('data', (a) => {
          if (q.onData(a) === false) {
            Lr.pause();
          }
        });
        Lr.once('close', () => {
          Mr.openStreams -= 1;
          if (Mr.openStreams === 0) {
            C.unref();
          }
        });
        Lr.once('error', function (C) {
          if (a[Ns] && !a[Ns].destroyed && !this.closed && !this.destroyed) {
            Mr.streams -= 1;
            Pt.destroy(Lr, C);
          }
        });
        Lr.once('frameError', (C, re) => {
          const ae = new Fr(
            `HTTP/2: "frameError" received - type ${C}, code ${re}`
          );
          errorRequest(a, q, ae);
          if (a[Ns] && !a[Ns].destroyed && !this.closed && !this.destroyed) {
            Mr.streams -= 1;
            Pt.destroy(Lr, ae);
          }
        });
        return true;
        function writeBodyH2() {
          if (!ae) {
            q.onRequestSent();
          } else if (Pt.isBuffer(ae)) {
            re(Or === ae.byteLength, 'buffer body must have content length');
            Lr.cork();
            Lr.write(ae);
            Lr.uncork();
            Lr.end();
            q.onBodySent(ae);
            q.onRequestSent();
          } else if (Pt.isBlobLike(ae)) {
            if (typeof ae.stream === 'function') {
              writeIterable({
                client: a,
                request: q,
                contentLength: Or,
                h2stream: Lr,
                expectsPayload: Pr,
                body: ae.stream(),
                socket: a[ps],
                header: ''
              });
            } else {
              writeBlob({
                body: ae,
                client: a,
                request: q,
                contentLength: Or,
                expectsPayload: Pr,
                h2stream: Lr,
                header: '',
                socket: a[ps]
              });
            }
          } else if (Pt.isStream(ae)) {
            writeStream({
              body: ae,
              client: a,
              request: q,
              contentLength: Or,
              expectsPayload: Pr,
              socket: a[ps],
              h2stream: Lr,
              header: ''
            });
          } else if (Pt.isIterable(ae)) {
            writeIterable({
              body: ae,
              client: a,
              request: q,
              contentLength: Or,
              expectsPayload: Pr,
              header: '',
              h2stream: Lr,
              socket: a[ps]
            });
          } else {
            re(false);
          }
        }
      }
      function writeStream({
        h2stream: a,
        body: C,
        client: q,
        request: ae,
        socket: Ue,
        contentLength: Wt,
        header: Ar,
        expectsPayload: Er
      }) {
        re(Wt !== 0 || q[Kr] === 0, 'stream body cannot be pipelined');
        if (q[Rs] === 'h2') {
          const Qr = lt(C, a, (q) => {
            if (q) {
              Pt.destroy(C, q);
              Pt.destroy(a, q);
            } else {
              ae.onRequestSent();
            }
          });
          Qr.on('data', onPipeData);
          Qr.once('end', () => {
            Qr.removeListener('data', onPipeData);
            Pt.destroy(Qr);
          });
          function onPipeData(a) {
            ae.onBodySent(a);
          }
          return;
        }
        let Ir = false;
        const Br = new AsyncWriter({
          socket: Ue,
          request: ae,
          contentLength: Wt,
          client: q,
          expectsPayload: Er,
          header: Ar
        });
        const onData = function (a) {
          if (Ir) {
            return;
          }
          try {
            if (!Br.write(a) && this.pause) {
              this.pause();
            }
          } catch (a) {
            Pt.destroy(this, a);
          }
        };
        const onDrain = function () {
          if (Ir) {
            return;
          }
          if (C.resume) {
            C.resume();
          }
        };
        const onAbort = function () {
          if (Ir) {
            return;
          }
          const a = new kr();
          queueMicrotask(() => onFinished(a));
        };
        const onFinished = function (a) {
          if (Ir) {
            return;
          }
          Ir = true;
          re(Ue.destroyed || (Ue[es] && q[Kr] <= 1));
          Ue.off('drain', onDrain).off('error', onFinished);
          C.removeListener('data', onData)
            .removeListener('end', onFinished)
            .removeListener('error', onFinished)
            .removeListener('close', onAbort);
          if (!a) {
            try {
              Br.end();
            } catch (C) {
              a = C;
            }
          }
          Br.destroy(a);
          if (a && (a.code !== 'UND_ERR_INFO' || a.message !== 'reset')) {
            Pt.destroy(C, a);
          } else {
            Pt.destroy(C);
          }
        };
        C.on('data', onData)
          .on('end', onFinished)
          .on('error', onFinished)
          .on('close', onAbort);
        if (C.resume) {
          C.resume();
        }
        Ue.on('drain', onDrain).on('error', onFinished);
      }
      async function writeBlob({
        h2stream: a,
        body: C,
        client: q,
        request: ae,
        socket: Ue,
        contentLength: lt,
        header: Wt,
        expectsPayload: Ar
      }) {
        re(lt === C.size, 'blob body must have content length');
        const Er = q[Rs] === 'h2';
        try {
          if (lt != null && lt !== C.size) {
            throw new Ir();
          }
          const re = Buffer.from(await C.arrayBuffer());
          if (Er) {
            a.cork();
            a.write(re);
            a.uncork();
          } else {
            Ue.cork();
            Ue.write(`${Wt}content-length: ${lt}\r\n\r\n`, 'latin1');
            Ue.write(re);
            Ue.uncork();
          }
          ae.onBodySent(re);
          ae.onRequestSent();
          if (!Ar) {
            Ue[Hr] = true;
          }
          resume(q);
        } catch (C) {
          Pt.destroy(Er ? a : Ue, C);
        }
      }
      async function writeIterable({
        h2stream: a,
        body: C,
        client: q,
        request: ae,
        socket: Ue,
        contentLength: lt,
        header: Pt,
        expectsPayload: Wt
      }) {
        re(lt !== 0 || q[Kr] === 0, 'iterator body cannot be pipelined');
        let Ar = null;
        function onDrain() {
          if (Ar) {
            const a = Ar;
            Ar = null;
            a();
          }
        }
        const waitForDrain = () =>
          new Promise((a, C) => {
            re(Ar === null);
            if (Ue[ds]) {
              C(Ue[ds]);
            } else {
              Ar = a;
            }
          });
        if (q[Rs] === 'h2') {
          a.on('close', onDrain).on('drain', onDrain);
          try {
            for await (const q of C) {
              if (Ue[ds]) {
                throw Ue[ds];
              }
              const C = a.write(q);
              ae.onBodySent(q);
              if (!C) {
                await waitForDrain();
              }
            }
          } catch (C) {
            a.destroy(C);
          } finally {
            ae.onRequestSent();
            a.end();
            a.off('close', onDrain).off('drain', onDrain);
          }
          return;
        }
        Ue.on('close', onDrain).on('drain', onDrain);
        const Er = new AsyncWriter({
          socket: Ue,
          request: ae,
          contentLength: lt,
          client: q,
          expectsPayload: Wt,
          header: Pt
        });
        try {
          for await (const a of C) {
            if (Ue[ds]) {
              throw Ue[ds];
            }
            if (!Er.write(a)) {
              await waitForDrain();
            }
          }
          Er.end();
        } catch (a) {
          Er.destroy(a);
        } finally {
          Ue.off('close', onDrain).off('drain', onDrain);
        }
      }
      class AsyncWriter {
        constructor({
          socket: a,
          request: C,
          contentLength: q,
          client: re,
          expectsPayload: ae,
          header: Ue
        }) {
          this.socket = a;
          this.request = C;
          this.contentLength = q;
          this.client = re;
          this.bytesWritten = 0;
          this.expectsPayload = ae;
          this.header = Ue;
          a[es] = true;
        }
        write(a) {
          const {
            socket: C,
            request: q,
            contentLength: re,
            client: ae,
            bytesWritten: Ue,
            expectsPayload: lt,
            header: Pt
          } = this;
          if (C[ds]) {
            throw C[ds];
          }
          if (C.destroyed) {
            return false;
          }
          const Wt = Buffer.byteLength(a);
          if (!Wt) {
            return true;
          }
          if (re !== null && Ue + Wt > re) {
            if (ae[bs]) {
              throw new Ir();
            }
            process.emitWarning(new Ir());
          }
          C.cork();
          if (Ue === 0) {
            if (!lt) {
              C[Hr] = true;
            }
            if (re === null) {
              C.write(`${Pt}transfer-encoding: chunked\r\n`, 'latin1');
            } else {
              C.write(`${Pt}content-length: ${re}\r\n\r\n`, 'latin1');
            }
          }
          if (re === null) {
            C.write(`\r\n${Wt.toString(16)}\r\n`, 'latin1');
          }
          this.bytesWritten += Wt;
          const Ar = C.write(a);
          C.uncork();
          q.onBodySent(a);
          if (!Ar) {
            if (C[jr].timeout && C[jr].timeoutType === on) {
              if (C[jr].timeout.refresh) {
                C[jr].timeout.refresh();
              }
            }
          }
          return Ar;
        }
        end() {
          const {
            socket: a,
            contentLength: C,
            client: q,
            bytesWritten: re,
            expectsPayload: ae,
            header: Ue,
            request: lt
          } = this;
          lt.onRequestSent();
          a[es] = false;
          if (a[ds]) {
            throw a[ds];
          }
          if (a.destroyed) {
            return;
          }
          if (re === 0) {
            if (ae) {
              a.write(`${Ue}content-length: 0\r\n\r\n`, 'latin1');
            } else {
              a.write(`${Ue}\r\n`, 'latin1');
            }
          } else if (C === null) {
            a.write('\r\n0\r\n\r\n', 'latin1');
          }
          if (C !== null && re !== C) {
            if (q[bs]) {
              throw new Ir();
            } else {
              process.emitWarning(new Ir());
            }
          }
          if (a[jr].timeout && a[jr].timeoutType === on) {
            if (a[jr].timeout.refresh) {
              a[jr].timeout.refresh();
            }
          }
          resume(q);
        }
        destroy(a) {
          const { socket: C, client: q } = this;
          C[es] = false;
          if (a) {
            re(q[Kr] <= 1, 'pipeline should only contain this request');
            Pt.destroy(C, a);
          }
        }
      }
      function errorRequest(a, C, q) {
        try {
          C.onError(q);
          re(C.aborted);
        } catch (q) {
          a.emit('error', q);
        }
      }
      a.exports = Client;
    },
    9374: (a, C, q) => {
      'use strict';
      const { kConnected: re, kSize: ae } = q(7621);
      class CompatWeakRef {
        constructor(a) {
          this.value = a;
        }
        deref() {
          return this.value[re] === 0 && this.value[ae] === 0
            ? undefined
            : this.value;
        }
      }
      class CompatFinalizer {
        constructor(a) {
          this.finalizer = a;
        }
        register(a, C) {
          if (a.on) {
            a.on('disconnect', () => {
              if (a[re] === 0 && a[ae] === 0) {
                this.finalizer(C);
              }
            });
          }
        }
      }
      a.exports = function () {
        if (process.env.NODE_V8_COVERAGE) {
          return {
            WeakRef: CompatWeakRef,
            FinalizationRegistry: CompatFinalizer
          };
        }
        return {
          WeakRef: global.WeakRef || CompatWeakRef,
          FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer
        };
      };
    },
    4791: (a) => {
      'use strict';
      const C = 1024;
      const q = 4096;
      a.exports = { maxAttributeValueSize: C, maxNameValuePairSize: q };
    },
    9351: (a, C, q) => {
      'use strict';
      const { parseSetCookie: re } = q(2805);
      const { stringify: ae, getHeadersList: Ue } = q(3319);
      const { webidl: lt } = q(3721);
      const { Headers: Pt } = q(6909);
      function getCookies(a) {
        lt.argumentLengthCheck(arguments, 1, { header: 'getCookies' });
        lt.brandCheck(a, Pt, { strict: false });
        const C = a.get('cookie');
        const q = {};
        if (!C) {
          return q;
        }
        for (const a of C.split(';')) {
          const [C, ...re] = a.split('=');
          q[C.trim()] = re.join('=');
        }
        return q;
      }
      function deleteCookie(a, C, q) {
        lt.argumentLengthCheck(arguments, 2, { header: 'deleteCookie' });
        lt.brandCheck(a, Pt, { strict: false });
        C = lt.converters.DOMString(C);
        q = lt.converters.DeleteCookieAttributes(q);
        setCookie(a, { name: C, value: '', expires: new Date(0), ...q });
      }
      function getSetCookies(a) {
        lt.argumentLengthCheck(arguments, 1, { header: 'getSetCookies' });
        lt.brandCheck(a, Pt, { strict: false });
        const C = Ue(a).cookies;
        if (!C) {
          return [];
        }
        return C.map((a) => re(Array.isArray(a) ? a[1] : a));
      }
      function setCookie(a, C) {
        lt.argumentLengthCheck(arguments, 2, { header: 'setCookie' });
        lt.brandCheck(a, Pt, { strict: false });
        C = lt.converters.Cookie(C);
        const q = ae(C);
        if (q) {
          a.append('Set-Cookie', ae(C));
        }
      }
      lt.converters.DeleteCookieAttributes = lt.dictionaryConverter([
        {
          converter: lt.nullableConverter(lt.converters.DOMString),
          key: 'path',
          defaultValue: null
        },
        {
          converter: lt.nullableConverter(lt.converters.DOMString),
          key: 'domain',
          defaultValue: null
        }
      ]);
      lt.converters.Cookie = lt.dictionaryConverter([
        { converter: lt.converters.DOMString, key: 'name' },
        { converter: lt.converters.DOMString, key: 'value' },
        {
          converter: lt.nullableConverter((a) => {
            if (typeof a === 'number') {
              return lt.converters['unsigned long long'](a);
            }
            return new Date(a);
          }),
          key: 'expires',
          defaultValue: null
        },
        {
          converter: lt.nullableConverter(lt.converters['long long']),
          key: 'maxAge',
          defaultValue: null
        },
        {
          converter: lt.nullableConverter(lt.converters.DOMString),
          key: 'domain',
          defaultValue: null
        },
        {
          converter: lt.nullableConverter(lt.converters.DOMString),
          key: 'path',
          defaultValue: null
        },
        {
          converter: lt.nullableConverter(lt.converters.boolean),
          key: 'secure',
          defaultValue: null
        },
        {
          converter: lt.nullableConverter(lt.converters.boolean),
          key: 'httpOnly',
          defaultValue: null
        },
        {
          converter: lt.converters.USVString,
          key: 'sameSite',
          allowedValues: ['Strict', 'Lax', 'None']
        },
        {
          converter: lt.sequenceConverter(lt.converters.DOMString),
          key: 'unparsed',
          defaultValue: []
        }
      ]);
      a.exports = {
        getCookies: getCookies,
        deleteCookie: deleteCookie,
        getSetCookies: getSetCookies,
        setCookie: setCookie
      };
    },
    2805: (a, C, q) => {
      'use strict';
      const { maxNameValuePairSize: re, maxAttributeValueSize: ae } = q(4791);
      const { isCTLExcludingHtab: Ue } = q(3319);
      const { collectASequenceOfCodePointsFast: lt } = q(6932);
      const Pt = q(9491);
      function parseSetCookie(a) {
        if (Ue(a)) {
          return null;
        }
        let C = '';
        let q = '';
        let ae = '';
        let Pt = '';
        if (a.includes(';')) {
          const re = { position: 0 };
          C = lt(';', a, re);
          q = a.slice(re.position);
        } else {
          C = a;
        }
        if (!C.includes('=')) {
          Pt = C;
        } else {
          const a = { position: 0 };
          ae = lt('=', C, a);
          Pt = C.slice(a.position + 1);
        }
        ae = ae.trim();
        Pt = Pt.trim();
        if (ae.length + Pt.length > re) {
          return null;
        }
        return { name: ae, value: Pt, ...parseUnparsedAttributes(q) };
      }
      function parseUnparsedAttributes(a, C = {}) {
        if (a.length === 0) {
          return C;
        }
        Pt(a[0] === ';');
        a = a.slice(1);
        let q = '';
        if (a.includes(';')) {
          q = lt(';', a, { position: 0 });
          a = a.slice(q.length);
        } else {
          q = a;
          a = '';
        }
        let re = '';
        let Ue = '';
        if (q.includes('=')) {
          const a = { position: 0 };
          re = lt('=', q, a);
          Ue = q.slice(a.position + 1);
        } else {
          re = q;
        }
        re = re.trim();
        Ue = Ue.trim();
        if (Ue.length > ae) {
          return parseUnparsedAttributes(a, C);
        }
        const Wt = re.toLowerCase();
        if (Wt === 'expires') {
          const a = new Date(Ue);
          C.expires = a;
        } else if (Wt === 'max-age') {
          const q = Ue.charCodeAt(0);
          if ((q < 48 || q > 57) && Ue[0] !== '-') {
            return parseUnparsedAttributes(a, C);
          }
          if (!/^\d+$/.test(Ue)) {
            return parseUnparsedAttributes(a, C);
          }
          const re = Number(Ue);
          C.maxAge = re;
        } else if (Wt === 'domain') {
          let a = Ue;
          if (a[0] === '.') {
            a = a.slice(1);
          }
          a = a.toLowerCase();
          C.domain = a;
        } else if (Wt === 'path') {
          let a = '';
          if (Ue.length === 0 || Ue[0] !== '/') {
            a = '/';
          } else {
            a = Ue;
          }
          C.path = a;
        } else if (Wt === 'secure') {
          C.secure = true;
        } else if (Wt === 'httponly') {
          C.httpOnly = true;
        } else if (Wt === 'samesite') {
          let a = 'Default';
          const q = Ue.toLowerCase();
          if (q.includes('none')) {
            a = 'None';
          }
          if (q.includes('strict')) {
            a = 'Strict';
          }
          if (q.includes('lax')) {
            a = 'Lax';
          }
          C.sameSite = a;
        } else {
          C.unparsed ??= [];
          C.unparsed.push(`${re}=${Ue}`);
        }
        return parseUnparsedAttributes(a, C);
      }
      a.exports = {
        parseSetCookie: parseSetCookie,
        parseUnparsedAttributes: parseUnparsedAttributes
      };
    },
    3319: (a, C, q) => {
      'use strict';
      const re = q(9491);
      const { kHeadersList: ae } = q(7621);
      function isCTLExcludingHtab(a) {
        if (a.length === 0) {
          return false;
        }
        for (const C of a) {
          const a = C.charCodeAt(0);
          if (a >= 0 || a <= 8 || a >= 10 || a <= 31 || a === 127) {
            return false;
          }
        }
      }
      function validateCookieName(a) {
        for (const C of a) {
          const a = C.charCodeAt(0);
          if (
            a <= 32 ||
            a > 127 ||
            C === '(' ||
            C === ')' ||
            C === '>' ||
            C === '<' ||
            C === '@' ||
            C === ',' ||
            C === ';' ||
            C === ':' ||
            C === '\\' ||
            C === '"' ||
            C === '/' ||
            C === '[' ||
            C === ']' ||
            C === '?' ||
            C === '=' ||
            C === '{' ||
            C === '}'
          ) {
            throw new Error('Invalid cookie name');
          }
        }
      }
      function validateCookieValue(a) {
        for (const C of a) {
          const a = C.charCodeAt(0);
          if (
            a < 33 ||
            a === 34 ||
            a === 44 ||
            a === 59 ||
            a === 92 ||
            a > 126
          ) {
            throw new Error('Invalid header value');
          }
        }
      }
      function validateCookiePath(a) {
        for (const C of a) {
          const a = C.charCodeAt(0);
          if (a < 33 || C === ';') {
            throw new Error('Invalid cookie path');
          }
        }
      }
      function validateCookieDomain(a) {
        if (a.startsWith('-') || a.endsWith('.') || a.endsWith('-')) {
          throw new Error('Invalid cookie domain');
        }
      }
      function toIMFDate(a) {
        if (typeof a === 'number') {
          a = new Date(a);
        }
        const C = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
        const q = [
          'Jan',
          'Feb',
          'Mar',
          'Apr',
          'May',
          'Jun',
          'Jul',
          'Aug',
          'Sep',
          'Oct',
          'Nov',
          'Dec'
        ];
        const re = C[a.getUTCDay()];
        const ae = a.getUTCDate().toString().padStart(2, '0');
        const Ue = q[a.getUTCMonth()];
        const lt = a.getUTCFullYear();
        const Pt = a.getUTCHours().toString().padStart(2, '0');
        const Wt = a.getUTCMinutes().toString().padStart(2, '0');
        const Ar = a.getUTCSeconds().toString().padStart(2, '0');
        return `${re}, ${ae} ${Ue} ${lt} ${Pt}:${Wt}:${Ar} GMT`;
      }
      function validateCookieMaxAge(a) {
        if (a < 0) {
          throw new Error('Invalid cookie max-age');
        }
      }
      function stringify(a) {
        if (a.name.length === 0) {
          return null;
        }
        validateCookieName(a.name);
        validateCookieValue(a.value);
        const C = [`${a.name}=${a.value}`];
        if (a.name.startsWith('__Secure-')) {
          a.secure = true;
        }
        if (a.name.startsWith('__Host-')) {
          a.secure = true;
          a.domain = null;
          a.path = '/';
        }
        if (a.secure) {
          C.push('Secure');
        }
        if (a.httpOnly) {
          C.push('HttpOnly');
        }
        if (typeof a.maxAge === 'number') {
          validateCookieMaxAge(a.maxAge);
          C.push(`Max-Age=${a.maxAge}`);
        }
        if (a.domain) {
          validateCookieDomain(a.domain);
          C.push(`Domain=${a.domain}`);
        }
        if (a.path) {
          validateCookiePath(a.path);
          C.push(`Path=${a.path}`);
        }
        if (a.expires && a.expires.toString() !== 'Invalid Date') {
          C.push(`Expires=${toIMFDate(a.expires)}`);
        }
        if (a.sameSite) {
          C.push(`SameSite=${a.sameSite}`);
        }
        for (const q of a.unparsed) {
          if (!q.includes('=')) {
            throw new Error('Invalid unparsed');
          }
          const [a, ...re] = q.split('=');
          C.push(`${a.trim()}=${re.join('=')}`);
        }
        return C.join('; ');
      }
      let Ue;
      function getHeadersList(a) {
        if (a[ae]) {
          return a[ae];
        }
        if (!Ue) {
          Ue = Object.getOwnPropertySymbols(a).find(
            (a) => a.description === 'headers list'
          );
          re(Ue, 'Headers cannot be parsed');
        }
        const C = a[Ue];
        re(C);
        return C;
      }
      a.exports = {
        isCTLExcludingHtab: isCTLExcludingHtab,
        stringify: stringify,
        getHeadersList: getHeadersList
      };
    },
    6840: (a, C, q) => {
      'use strict';
      const re = q(1808);
      const ae = q(9491);
      const Ue = q(9647);
      const { InvalidArgumentError: lt, ConnectTimeoutError: Pt } = q(3501);
      let Wt;
      let Ar;
      if (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {
        Ar = class WeakSessionCache {
          constructor(a) {
            this._maxCachedSessions = a;
            this._sessionCache = new Map();
            this._sessionRegistry = new global.FinalizationRegistry((a) => {
              if (this._sessionCache.size < this._maxCachedSessions) {
                return;
              }
              const C = this._sessionCache.get(a);
              if (C !== undefined && C.deref() === undefined) {
                this._sessionCache.delete(a);
              }
            });
          }
          get(a) {
            const C = this._sessionCache.get(a);
            return C ? C.deref() : null;
          }
          set(a, C) {
            if (this._maxCachedSessions === 0) {
              return;
            }
            this._sessionCache.set(a, new WeakRef(C));
            this._sessionRegistry.register(C, a);
          }
        };
      } else {
        Ar = class SimpleSessionCache {
          constructor(a) {
            this._maxCachedSessions = a;
            this._sessionCache = new Map();
          }
          get(a) {
            return this._sessionCache.get(a);
          }
          set(a, C) {
            if (this._maxCachedSessions === 0) {
              return;
            }
            if (this._sessionCache.size >= this._maxCachedSessions) {
              const { value: a } = this._sessionCache.keys().next();
              this._sessionCache.delete(a);
            }
            this._sessionCache.set(a, C);
          }
        };
      }
      function buildConnector({
        allowH2: a,
        maxCachedSessions: C,
        socketPath: Pt,
        timeout: Er,
        ...Ir
      }) {
        if (C != null && (!Number.isInteger(C) || C < 0)) {
          throw new lt('maxCachedSessions must be a positive integer or zero');
        }
        const Br = { path: Pt, ...Ir };
        const Qr = new Ar(C == null ? 100 : C);
        Er = Er == null ? 1e4 : Er;
        a = a != null ? a : false;
        return function connect(
          {
            hostname: C,
            host: lt,
            protocol: Pt,
            port: Ar,
            servername: Ir,
            localAddress: kr,
            httpSocket: Dr
          },
          Nr
        ) {
          let Lr;
          if (Pt === 'https:') {
            if (!Wt) {
              Wt = q(4404);
            }
            Ir = Ir || Br.servername || Ue.getServerName(lt) || null;
            const re = Ir || C;
            const Pt = Qr.get(re) || null;
            ae(re);
            Lr = Wt.connect({
              highWaterMark: 16384,
              ...Br,
              servername: Ir,
              session: Pt,
              localAddress: kr,
              ALPNProtocols: a ? ['http/1.1', 'h2'] : ['http/1.1'],
              socket: Dr,
              port: Ar || 443,
              host: C
            });
            Lr.on('session', function (a) {
              Qr.set(re, a);
            });
          } else {
            ae(!Dr, 'httpSocket can only be sent on TLS update');
            Lr = re.connect({
              highWaterMark: 64 * 1024,
              ...Br,
              localAddress: kr,
              port: Ar || 80,
              host: C
            });
          }
          if (Br.keepAlive == null || Br.keepAlive) {
            const a =
              Br.keepAliveInitialDelay === undefined
                ? 6e4
                : Br.keepAliveInitialDelay;
            Lr.setKeepAlive(true, a);
          }
          const Fr = setupTimeout(() => onConnectTimeout(Lr), Er);
          Lr.setNoDelay(true)
            .once(Pt === 'https:' ? 'secureConnect' : 'connect', function () {
              Fr();
              if (Nr) {
                const a = Nr;
                Nr = null;
                a(null, this);
              }
            })
            .on('error', function (a) {
              Fr();
              if (Nr) {
                const C = Nr;
                Nr = null;
                C(a);
              }
            });
          return Lr;
        };
      }
      function setupTimeout(a, C) {
        if (!C) {
          return () => {};
        }
        let q = null;
        let re = null;
        const ae = setTimeout(() => {
          q = setImmediate(() => {
            if (process.platform === 'win32') {
              re = setImmediate(() => a());
            } else {
              a();
            }
          });
        }, C);
        return () => {
          clearTimeout(ae);
          clearImmediate(q);
          clearImmediate(re);
        };
      }
      function onConnectTimeout(a) {
        Ue.destroy(a, new Pt());
      }
      a.exports = buildConnector;
    },
    2306: (a) => {
      'use strict';
      const C = {};
      const q = [
        'Accept',
        'Accept-Encoding',
        'Accept-Language',
        'Accept-Ranges',
        'Access-Control-Allow-Credentials',
        'Access-Control-Allow-Headers',
        'Access-Control-Allow-Methods',
        'Access-Control-Allow-Origin',
        'Access-Control-Expose-Headers',
        'Access-Control-Max-Age',
        'Access-Control-Request-Headers',
        'Access-Control-Request-Method',
        'Age',
        'Allow',
        'Alt-Svc',
        'Alt-Used',
        'Authorization',
        'Cache-Control',
        'Clear-Site-Data',
        'Connection',
        'Content-Disposition',
        'Content-Encoding',
        'Content-Language',
        'Content-Length',
        'Content-Location',
        'Content-Range',
        'Content-Security-Policy',
        'Content-Security-Policy-Report-Only',
        'Content-Type',
        'Cookie',
        'Cross-Origin-Embedder-Policy',
        'Cross-Origin-Opener-Policy',
        'Cross-Origin-Resource-Policy',
        'Date',
        'Device-Memory',
        'Downlink',
        'ECT',
        'ETag',
        'Expect',
        'Expect-CT',
        'Expires',
        'Forwarded',
        'From',
        'Host',
        'If-Match',
        'If-Modified-Since',
        'If-None-Match',
        'If-Range',
        'If-Unmodified-Since',
        'Keep-Alive',
        'Last-Modified',
        'Link',
        'Location',
        'Max-Forwards',
        'Origin',
        'Permissions-Policy',
        'Pragma',
        'Proxy-Authenticate',
        'Proxy-Authorization',
        'RTT',
        'Range',
        'Referer',
        'Referrer-Policy',
        'Refresh',
        'Retry-After',
        'Sec-WebSocket-Accept',
        'Sec-WebSocket-Extensions',
        'Sec-WebSocket-Key',
        'Sec-WebSocket-Protocol',
        'Sec-WebSocket-Version',
        'Server',
        'Server-Timing',
        'Service-Worker-Allowed',
        'Service-Worker-Navigation-Preload',
        'Set-Cookie',
        'SourceMap',
        'Strict-Transport-Security',
        'Supports-Loading-Mode',
        'TE',
        'Timing-Allow-Origin',
        'Trailer',
        'Transfer-Encoding',
        'Upgrade',
        'Upgrade-Insecure-Requests',
        'User-Agent',
        'Vary',
        'Via',
        'WWW-Authenticate',
        'X-Content-Type-Options',
        'X-DNS-Prefetch-Control',
        'X-Frame-Options',
        'X-Permitted-Cross-Domain-Policies',
        'X-Powered-By',
        'X-Requested-With',
        'X-XSS-Protection'
      ];
      for (let a = 0; a < q.length; ++a) {
        const re = q[a];
        const ae = re.toLowerCase();
        C[re] = C[ae] = ae;
      }
      Object.setPrototypeOf(C, null);
      a.exports = { wellknownHeaderNames: q, headerNameLowerCasedRecord: C };
    },
    3501: (a) => {
      'use strict';
      class UndiciError extends Error {
        constructor(a) {
          super(a);
          this.name = 'UndiciError';
          this.code = 'UND_ERR';
        }
      }
      class ConnectTimeoutError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, ConnectTimeoutError);
          this.name = 'ConnectTimeoutError';
          this.message = a || 'Connect Timeout Error';
          this.code = 'UND_ERR_CONNECT_TIMEOUT';
        }
      }
      class HeadersTimeoutError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, HeadersTimeoutError);
          this.name = 'HeadersTimeoutError';
          this.message = a || 'Headers Timeout Error';
          this.code = 'UND_ERR_HEADERS_TIMEOUT';
        }
      }
      class HeadersOverflowError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, HeadersOverflowError);
          this.name = 'HeadersOverflowError';
          this.message = a || 'Headers Overflow Error';
          this.code = 'UND_ERR_HEADERS_OVERFLOW';
        }
      }
      class BodyTimeoutError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, BodyTimeoutError);
          this.name = 'BodyTimeoutError';
          this.message = a || 'Body Timeout Error';
          this.code = 'UND_ERR_BODY_TIMEOUT';
        }
      }
      class ResponseStatusCodeError extends UndiciError {
        constructor(a, C, q, re) {
          super(a);
          Error.captureStackTrace(this, ResponseStatusCodeError);
          this.name = 'ResponseStatusCodeError';
          this.message = a || 'Response Status Code Error';
          this.code = 'UND_ERR_RESPONSE_STATUS_CODE';
          this.body = re;
          this.status = C;
          this.statusCode = C;
          this.headers = q;
        }
      }
      class InvalidArgumentError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, InvalidArgumentError);
          this.name = 'InvalidArgumentError';
          this.message = a || 'Invalid Argument Error';
          this.code = 'UND_ERR_INVALID_ARG';
        }
      }
      class InvalidReturnValueError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, InvalidReturnValueError);
          this.name = 'InvalidReturnValueError';
          this.message = a || 'Invalid Return Value Error';
          this.code = 'UND_ERR_INVALID_RETURN_VALUE';
        }
      }
      class RequestAbortedError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, RequestAbortedError);
          this.name = 'AbortError';
          this.message = a || 'Request aborted';
          this.code = 'UND_ERR_ABORTED';
        }
      }
      class InformationalError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, InformationalError);
          this.name = 'InformationalError';
          this.message = a || 'Request information';
          this.code = 'UND_ERR_INFO';
        }
      }
      class RequestContentLengthMismatchError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, RequestContentLengthMismatchError);
          this.name = 'RequestContentLengthMismatchError';
          this.message =
            a || 'Request body length does not match content-length header';
          this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH';
        }
      }
      class ResponseContentLengthMismatchError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, ResponseContentLengthMismatchError);
          this.name = 'ResponseContentLengthMismatchError';
          this.message =
            a || 'Response body length does not match content-length header';
          this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH';
        }
      }
      class ClientDestroyedError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, ClientDestroyedError);
          this.name = 'ClientDestroyedError';
          this.message = a || 'The client is destroyed';
          this.code = 'UND_ERR_DESTROYED';
        }
      }
      class ClientClosedError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, ClientClosedError);
          this.name = 'ClientClosedError';
          this.message = a || 'The client is closed';
          this.code = 'UND_ERR_CLOSED';
        }
      }
      class SocketError extends UndiciError {
        constructor(a, C) {
          super(a);
          Error.captureStackTrace(this, SocketError);
          this.name = 'SocketError';
          this.message = a || 'Socket error';
          this.code = 'UND_ERR_SOCKET';
          this.socket = C;
        }
      }
      class NotSupportedError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, NotSupportedError);
          this.name = 'NotSupportedError';
          this.message = a || 'Not supported error';
          this.code = 'UND_ERR_NOT_SUPPORTED';
        }
      }
      class BalancedPoolMissingUpstreamError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, NotSupportedError);
          this.name = 'MissingUpstreamError';
          this.message = a || 'No upstream has been added to the BalancedPool';
          this.code = 'UND_ERR_BPL_MISSING_UPSTREAM';
        }
      }
      class HTTPParserError extends Error {
        constructor(a, C, q) {
          super(a);
          Error.captureStackTrace(this, HTTPParserError);
          this.name = 'HTTPParserError';
          this.code = C ? `HPE_${C}` : undefined;
          this.data = q ? q.toString() : undefined;
        }
      }
      class ResponseExceededMaxSizeError extends UndiciError {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, ResponseExceededMaxSizeError);
          this.name = 'ResponseExceededMaxSizeError';
          this.message = a || 'Response content exceeded max size';
          this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE';
        }
      }
      class RequestRetryError extends UndiciError {
        constructor(a, C, { headers: q, data: re }) {
          super(a);
          Error.captureStackTrace(this, RequestRetryError);
          this.name = 'RequestRetryError';
          this.message = a || 'Request retry error';
          this.code = 'UND_ERR_REQ_RETRY';
          this.statusCode = C;
          this.data = re;
          this.headers = q;
        }
      }
      a.exports = {
        HTTPParserError: HTTPParserError,
        UndiciError: UndiciError,
        HeadersTimeoutError: HeadersTimeoutError,
        HeadersOverflowError: HeadersOverflowError,
        BodyTimeoutError: BodyTimeoutError,
        RequestContentLengthMismatchError: RequestContentLengthMismatchError,
        ConnectTimeoutError: ConnectTimeoutError,
        ResponseStatusCodeError: ResponseStatusCodeError,
        InvalidArgumentError: InvalidArgumentError,
        InvalidReturnValueError: InvalidReturnValueError,
        RequestAbortedError: RequestAbortedError,
        ClientDestroyedError: ClientDestroyedError,
        ClientClosedError: ClientClosedError,
        InformationalError: InformationalError,
        SocketError: SocketError,
        NotSupportedError: NotSupportedError,
        ResponseContentLengthMismatchError: ResponseContentLengthMismatchError,
        BalancedPoolMissingUpstreamError: BalancedPoolMissingUpstreamError,
        ResponseExceededMaxSizeError: ResponseExceededMaxSizeError,
        RequestRetryError: RequestRetryError
      };
    },
    2619: (a, C, q) => {
      'use strict';
      const { InvalidArgumentError: re, NotSupportedError: ae } = q(3501);
      const Ue = q(9491);
      const {
        kHTTP2BuildRequest: lt,
        kHTTP2CopyHeaders: Pt,
        kHTTP1BuildRequest: Wt
      } = q(7621);
      const Ar = q(9647);
      const Er = /^[\^_`a-zA-Z\-0-9!#$%&'*+.|~]+$/;
      const Ir = /[^\t\x20-\x7e\x80-\xff]/;
      const Br = /[^\u0021-\u00ff]/;
      const Qr = Symbol('handler');
      const kr = {};
      let Dr;
      try {
        const a = q(7643);
        kr.create = a.channel('undici:request:create');
        kr.bodySent = a.channel('undici:request:bodySent');
        kr.headers = a.channel('undici:request:headers');
        kr.trailers = a.channel('undici:request:trailers');
        kr.error = a.channel('undici:request:error');
      } catch {
        kr.create = { hasSubscribers: false };
        kr.bodySent = { hasSubscribers: false };
        kr.headers = { hasSubscribers: false };
        kr.trailers = { hasSubscribers: false };
        kr.error = { hasSubscribers: false };
      }
      class Request {
        constructor(
          a,
          {
            path: C,
            method: ae,
            body: Ue,
            headers: lt,
            query: Pt,
            idempotent: Wt,
            blocking: Ir,
            upgrade: Nr,
            headersTimeout: Lr,
            bodyTimeout: Fr,
            reset: Mr,
            throwOnError: Pr,
            expectContinue: Or
          },
          xr
        ) {
          if (typeof C !== 'string') {
            throw new re('path must be a string');
          } else if (
            C[0] !== '/' &&
            !(C.startsWith('http://') || C.startsWith('https://')) &&
            ae !== 'CONNECT'
          ) {
            throw new re('path must be an absolute URL or start with a slash');
          } else if (Br.exec(C) !== null) {
            throw new re('invalid request path');
          }
          if (typeof ae !== 'string') {
            throw new re('method must be a string');
          } else if (Er.exec(ae) === null) {
            throw new re('invalid request method');
          }
          if (Nr && typeof Nr !== 'string') {
            throw new re('upgrade must be a string');
          }
          if (Lr != null && (!Number.isFinite(Lr) || Lr < 0)) {
            throw new re('invalid headersTimeout');
          }
          if (Fr != null && (!Number.isFinite(Fr) || Fr < 0)) {
            throw new re('invalid bodyTimeout');
          }
          if (Mr != null && typeof Mr !== 'boolean') {
            throw new re('invalid reset');
          }
          if (Or != null && typeof Or !== 'boolean') {
            throw new re('invalid expectContinue');
          }
          this.headersTimeout = Lr;
          this.bodyTimeout = Fr;
          this.throwOnError = Pr === true;
          this.method = ae;
          this.abort = null;
          if (Ue == null) {
            this.body = null;
          } else if (Ar.isStream(Ue)) {
            this.body = Ue;
            const a = this.body._readableState;
            if (!a || !a.autoDestroy) {
              this.endHandler = function autoDestroy() {
                Ar.destroy(this);
              };
              this.body.on('end', this.endHandler);
            }
            this.errorHandler = (a) => {
              if (this.abort) {
                this.abort(a);
              } else {
                this.error = a;
              }
            };
            this.body.on('error', this.errorHandler);
          } else if (Ar.isBuffer(Ue)) {
            this.body = Ue.byteLength ? Ue : null;
          } else if (ArrayBuffer.isView(Ue)) {
            this.body = Ue.buffer.byteLength
              ? Buffer.from(Ue.buffer, Ue.byteOffset, Ue.byteLength)
              : null;
          } else if (Ue instanceof ArrayBuffer) {
            this.body = Ue.byteLength ? Buffer.from(Ue) : null;
          } else if (typeof Ue === 'string') {
            this.body = Ue.length ? Buffer.from(Ue) : null;
          } else if (
            Ar.isFormDataLike(Ue) ||
            Ar.isIterable(Ue) ||
            Ar.isBlobLike(Ue)
          ) {
            this.body = Ue;
          } else {
            throw new re(
              'body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable'
            );
          }
          this.completed = false;
          this.aborted = false;
          this.upgrade = Nr || null;
          this.path = Pt ? Ar.buildURL(C, Pt) : C;
          this.origin = a;
          this.idempotent = Wt == null ? ae === 'HEAD' || ae === 'GET' : Wt;
          this.blocking = Ir == null ? false : Ir;
          this.reset = Mr == null ? null : Mr;
          this.host = null;
          this.contentLength = null;
          this.contentType = null;
          this.headers = '';
          this.expectContinue = Or != null ? Or : false;
          if (Array.isArray(lt)) {
            if (lt.length % 2 !== 0) {
              throw new re('headers array must be even');
            }
            for (let a = 0; a < lt.length; a += 2) {
              processHeader(this, lt[a], lt[a + 1]);
            }
          } else if (lt && typeof lt === 'object') {
            const a = Object.keys(lt);
            for (let C = 0; C < a.length; C++) {
              const q = a[C];
              processHeader(this, q, lt[q]);
            }
          } else if (lt != null) {
            throw new re('headers must be an object or an array');
          }
          if (Ar.isFormDataLike(this.body)) {
            if (
              Ar.nodeMajor < 16 ||
              (Ar.nodeMajor === 16 && Ar.nodeMinor < 8)
            ) {
              throw new re(
                'Form-Data bodies are only supported in node v16.8 and newer.'
              );
            }
            if (!Dr) {
              Dr = q(6477).extractBody;
            }
            const [a, C] = Dr(Ue);
            if (this.contentType == null) {
              this.contentType = C;
              this.headers += `content-type: ${C}\r\n`;
            }
            this.body = a.stream;
            this.contentLength = a.length;
          } else if (Ar.isBlobLike(Ue) && this.contentType == null && Ue.type) {
            this.contentType = Ue.type;
            this.headers += `content-type: ${Ue.type}\r\n`;
          }
          Ar.validateHandler(xr, ae, Nr);
          this.servername = Ar.getServerName(this.host);
          this[Qr] = xr;
          if (kr.create.hasSubscribers) {
            kr.create.publish({ request: this });
          }
        }
        onBodySent(a) {
          if (this[Qr].onBodySent) {
            try {
              return this[Qr].onBodySent(a);
            } catch (a) {
              this.abort(a);
            }
          }
        }
        onRequestSent() {
          if (kr.bodySent.hasSubscribers) {
            kr.bodySent.publish({ request: this });
          }
          if (this[Qr].onRequestSent) {
            try {
              return this[Qr].onRequestSent();
            } catch (a) {
              this.abort(a);
            }
          }
        }
        onConnect(a) {
          Ue(!this.aborted);
          Ue(!this.completed);
          if (this.error) {
            a(this.error);
          } else {
            this.abort = a;
            return this[Qr].onConnect(a);
          }
        }
        onHeaders(a, C, q, re) {
          Ue(!this.aborted);
          Ue(!this.completed);
          if (kr.headers.hasSubscribers) {
            kr.headers.publish({
              request: this,
              response: { statusCode: a, headers: C, statusText: re }
            });
          }
          try {
            return this[Qr].onHeaders(a, C, q, re);
          } catch (a) {
            this.abort(a);
          }
        }
        onData(a) {
          Ue(!this.aborted);
          Ue(!this.completed);
          try {
            return this[Qr].onData(a);
          } catch (a) {
            this.abort(a);
            return false;
          }
        }
        onUpgrade(a, C, q) {
          Ue(!this.aborted);
          Ue(!this.completed);
          return this[Qr].onUpgrade(a, C, q);
        }
        onComplete(a) {
          this.onFinally();
          Ue(!this.aborted);
          this.completed = true;
          if (kr.trailers.hasSubscribers) {
            kr.trailers.publish({ request: this, trailers: a });
          }
          try {
            return this[Qr].onComplete(a);
          } catch (a) {
            this.onError(a);
          }
        }
        onError(a) {
          this.onFinally();
          if (kr.error.hasSubscribers) {
            kr.error.publish({ request: this, error: a });
          }
          if (this.aborted) {
            return;
          }
          this.aborted = true;
          return this[Qr].onError(a);
        }
        onFinally() {
          if (this.errorHandler) {
            this.body.off('error', this.errorHandler);
            this.errorHandler = null;
          }
          if (this.endHandler) {
            this.body.off('end', this.endHandler);
            this.endHandler = null;
          }
        }
        addHeader(a, C) {
          processHeader(this, a, C);
          return this;
        }
        static [Wt](a, C, q) {
          return new Request(a, C, q);
        }
        static [lt](a, C, q) {
          const ae = C.headers;
          C = { ...C, headers: null };
          const Ue = new Request(a, C, q);
          Ue.headers = {};
          if (Array.isArray(ae)) {
            if (ae.length % 2 !== 0) {
              throw new re('headers array must be even');
            }
            for (let a = 0; a < ae.length; a += 2) {
              processHeader(Ue, ae[a], ae[a + 1], true);
            }
          } else if (ae && typeof ae === 'object') {
            const a = Object.keys(ae);
            for (let C = 0; C < a.length; C++) {
              const q = a[C];
              processHeader(Ue, q, ae[q], true);
            }
          } else if (ae != null) {
            throw new re('headers must be an object or an array');
          }
          return Ue;
        }
        static [Pt](a) {
          const C = a.split('\r\n');
          const q = {};
          for (const a of C) {
            const [C, re] = a.split(': ');
            if (re == null || re.length === 0) continue;
            if (q[C]) q[C] += `,${re}`;
            else q[C] = re;
          }
          return q;
        }
      }
      function processHeaderValue(a, C, q) {
        if (C && typeof C === 'object') {
          throw new re(`invalid ${a} header`);
        }
        C = C != null ? `${C}` : '';
        if (Ir.exec(C) !== null) {
          throw new re(`invalid ${a} header`);
        }
        return q ? C : `${a}: ${C}\r\n`;
      }
      function processHeader(a, C, q, Ue = false) {
        if (q && typeof q === 'object' && !Array.isArray(q)) {
          throw new re(`invalid ${C} header`);
        } else if (q === undefined) {
          return;
        }
        if (a.host === null && C.length === 4 && C.toLowerCase() === 'host') {
          if (Ir.exec(q) !== null) {
            throw new re(`invalid ${C} header`);
          }
          a.host = q;
        } else if (
          a.contentLength === null &&
          C.length === 14 &&
          C.toLowerCase() === 'content-length'
        ) {
          a.contentLength = parseInt(q, 10);
          if (!Number.isFinite(a.contentLength)) {
            throw new re('invalid content-length header');
          }
        } else if (
          a.contentType === null &&
          C.length === 12 &&
          C.toLowerCase() === 'content-type'
        ) {
          a.contentType = q;
          if (Ue) a.headers[C] = processHeaderValue(C, q, Ue);
          else a.headers += processHeaderValue(C, q);
        } else if (C.length === 17 && C.toLowerCase() === 'transfer-encoding') {
          throw new re('invalid transfer-encoding header');
        } else if (C.length === 10 && C.toLowerCase() === 'connection') {
          const C = typeof q === 'string' ? q.toLowerCase() : null;
          if (C !== 'close' && C !== 'keep-alive') {
            throw new re('invalid connection header');
          } else if (C === 'close') {
            a.reset = true;
          }
        } else if (C.length === 10 && C.toLowerCase() === 'keep-alive') {
          throw new re('invalid keep-alive header');
        } else if (C.length === 7 && C.toLowerCase() === 'upgrade') {
          throw new re('invalid upgrade header');
        } else if (C.length === 6 && C.toLowerCase() === 'expect') {
          throw new ae('expect header not supported');
        } else if (Er.exec(C) === null) {
          throw new re('invalid header key');
        } else {
          if (Array.isArray(q)) {
            for (let re = 0; re < q.length; re++) {
              if (Ue) {
                if (a.headers[C])
                  a.headers[C] += `,${processHeaderValue(C, q[re], Ue)}`;
                else a.headers[C] = processHeaderValue(C, q[re], Ue);
              } else {
                a.headers += processHeaderValue(C, q[re]);
              }
            }
          } else {
            if (Ue) a.headers[C] = processHeaderValue(C, q, Ue);
            else a.headers += processHeaderValue(C, q);
          }
        }
      }
      a.exports = Request;
    },
    7621: (a) => {
      a.exports = {
        kClose: Symbol('close'),
        kDestroy: Symbol('destroy'),
        kDispatch: Symbol('dispatch'),
        kUrl: Symbol('url'),
        kWriting: Symbol('writing'),
        kResuming: Symbol('resuming'),
        kQueue: Symbol('queue'),
        kConnect: Symbol('connect'),
        kConnecting: Symbol('connecting'),
        kHeadersList: Symbol('headers list'),
        kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),
        kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),
        kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),
        kKeepAliveTimeoutValue: Symbol('keep alive timeout'),
        kKeepAlive: Symbol('keep alive'),
        kHeadersTimeout: Symbol('headers timeout'),
        kBodyTimeout: Symbol('body timeout'),
        kServerName: Symbol('server name'),
        kLocalAddress: Symbol('local address'),
        kHost: Symbol('host'),
        kNoRef: Symbol('no ref'),
        kBodyUsed: Symbol('used'),
        kRunning: Symbol('running'),
        kBlocking: Symbol('blocking'),
        kPending: Symbol('pending'),
        kSize: Symbol('size'),
        kBusy: Symbol('busy'),
        kQueued: Symbol('queued'),
        kFree: Symbol('free'),
        kConnected: Symbol('connected'),
        kClosed: Symbol('closed'),
        kNeedDrain: Symbol('need drain'),
        kReset: Symbol('reset'),
        kDestroyed: Symbol.for('nodejs.stream.destroyed'),
        kMaxHeadersSize: Symbol('max headers size'),
        kRunningIdx: Symbol('running index'),
        kPendingIdx: Symbol('pending index'),
        kError: Symbol('error'),
        kClients: Symbol('clients'),
        kClient: Symbol('client'),
        kParser: Symbol('parser'),
        kOnDestroyed: Symbol('destroy callbacks'),
        kPipelining: Symbol('pipelining'),
        kSocket: Symbol('socket'),
        kHostHeader: Symbol('host header'),
        kConnector: Symbol('connector'),
        kStrictContentLength: Symbol('strict content length'),
        kMaxRedirections: Symbol('maxRedirections'),
        kMaxRequests: Symbol('maxRequestsPerClient'),
        kProxy: Symbol('proxy agent options'),
        kCounter: Symbol('socket request counter'),
        kInterceptors: Symbol('dispatch interceptors'),
        kMaxResponseSize: Symbol('max response size'),
        kHTTP2Session: Symbol('http2Session'),
        kHTTP2SessionState: Symbol('http2Session state'),
        kHTTP2BuildRequest: Symbol('http2 build request'),
        kHTTP1BuildRequest: Symbol('http1 build request'),
        kHTTP2CopyHeaders: Symbol('http2 copy headers'),
        kHTTPConnVersion: Symbol('http connection version'),
        kRetryHandlerDefaultRetry: Symbol('retry agent default retry'),
        kConstruct: Symbol('constructable')
      };
    },
    9647: (a, C, q) => {
      'use strict';
      const re = q(9491);
      const { kDestroyed: ae, kBodyUsed: Ue } = q(7621);
      const { IncomingMessage: lt } = q(3685);
      const Pt = q(2781);
      const Wt = q(1808);
      const { InvalidArgumentError: Ar } = q(3501);
      const { Blob: Er } = q(4300);
      const Ir = q(3837);
      const { stringify: Br } = q(3477);
      const { headerNameLowerCasedRecord: Qr } = q(2306);
      const [kr, Dr] = process.versions.node.split('.').map((a) => Number(a));
      function nop() {}
      function isStream(a) {
        return (
          a &&
          typeof a === 'object' &&
          typeof a.pipe === 'function' &&
          typeof a.on === 'function'
        );
      }
      function isBlobLike(a) {
        return (
          (Er && a instanceof Er) ||
          (a &&
            typeof a === 'object' &&
            (typeof a.stream === 'function' ||
              typeof a.arrayBuffer === 'function') &&
            /^(Blob|File)$/.test(a[Symbol.toStringTag]))
        );
      }
      function buildURL(a, C) {
        if (a.includes('?') || a.includes('#')) {
          throw new Error(
            'Query params cannot be passed when url already contains "?" or "#".'
          );
        }
        const q = Br(C);
        if (q) {
          a += '?' + q;
        }
        return a;
      }
      function parseURL(a) {
        if (typeof a === 'string') {
          a = new URL(a);
          if (!/^https?:/.test(a.origin || a.protocol)) {
            throw new Ar(
              'Invalid URL protocol: the URL must start with `http:` or `https:`.'
            );
          }
          return a;
        }
        if (!a || typeof a !== 'object') {
          throw new Ar(
            'Invalid URL: The URL argument must be a non-null object.'
          );
        }
        if (!/^https?:/.test(a.origin || a.protocol)) {
          throw new Ar(
            'Invalid URL protocol: the URL must start with `http:` or `https:`.'
          );
        }
        if (!(a instanceof URL)) {
          if (
            a.port != null &&
            a.port !== '' &&
            !Number.isFinite(parseInt(a.port))
          ) {
            throw new Ar(
              'Invalid URL: port must be a valid integer or a string representation of an integer.'
            );
          }
          if (a.path != null && typeof a.path !== 'string') {
            throw new Ar(
              'Invalid URL path: the path must be a string or null/undefined.'
            );
          }
          if (a.pathname != null && typeof a.pathname !== 'string') {
            throw new Ar(
              'Invalid URL pathname: the pathname must be a string or null/undefined.'
            );
          }
          if (a.hostname != null && typeof a.hostname !== 'string') {
            throw new Ar(
              'Invalid URL hostname: the hostname must be a string or null/undefined.'
            );
          }
          if (a.origin != null && typeof a.origin !== 'string') {
            throw new Ar(
              'Invalid URL origin: the origin must be a string or null/undefined.'
            );
          }
          const C =
            a.port != null ? a.port : a.protocol === 'https:' ? 443 : 80;
          let q =
            a.origin != null ? a.origin : `${a.protocol}//${a.hostname}:${C}`;
          let re =
            a.path != null ? a.path : `${a.pathname || ''}${a.search || ''}`;
          if (q.endsWith('/')) {
            q = q.substring(0, q.length - 1);
          }
          if (re && !re.startsWith('/')) {
            re = `/${re}`;
          }
          a = new URL(q + re);
        }
        return a;
      }
      function parseOrigin(a) {
        a = parseURL(a);
        if (a.pathname !== '/' || a.search || a.hash) {
          throw new Ar('invalid url');
        }
        return a;
      }
      function getHostname(a) {
        if (a[0] === '[') {
          const C = a.indexOf(']');
          re(C !== -1);
          return a.substring(1, C);
        }
        const C = a.indexOf(':');
        if (C === -1) return a;
        return a.substring(0, C);
      }
      function getServerName(a) {
        if (!a) {
          return null;
        }
        re.strictEqual(typeof a, 'string');
        const C = getHostname(a);
        if (Wt.isIP(C)) {
          return '';
        }
        return C;
      }
      function deepClone(a) {
        return JSON.parse(JSON.stringify(a));
      }
      function isAsyncIterable(a) {
        return !!(a != null && typeof a[Symbol.asyncIterator] === 'function');
      }
      function isIterable(a) {
        return !!(
          a != null &&
          (typeof a[Symbol.iterator] === 'function' ||
            typeof a[Symbol.asyncIterator] === 'function')
        );
      }
      function bodyLength(a) {
        if (a == null) {
          return 0;
        } else if (isStream(a)) {
          const C = a._readableState;
          return C &&
            C.objectMode === false &&
            C.ended === true &&
            Number.isFinite(C.length)
            ? C.length
            : null;
        } else if (isBlobLike(a)) {
          return a.size != null ? a.size : null;
        } else if (isBuffer(a)) {
          return a.byteLength;
        }
        return null;
      }
      function isDestroyed(a) {
        return !a || !!(a.destroyed || a[ae]);
      }
      function isReadableAborted(a) {
        const C = a && a._readableState;
        return isDestroyed(a) && C && !C.endEmitted;
      }
      function destroy(a, C) {
        if (a == null || !isStream(a) || isDestroyed(a)) {
          return;
        }
        if (typeof a.destroy === 'function') {
          if (Object.getPrototypeOf(a).constructor === lt) {
            a.socket = null;
          }
          a.destroy(C);
        } else if (C) {
          process.nextTick(
            (a, C) => {
              a.emit('error', C);
            },
            a,
            C
          );
        }
        if (a.destroyed !== true) {
          a[ae] = true;
        }
      }
      const Nr = /timeout=(\d+)/;
      function parseKeepAliveTimeout(a) {
        const C = a.toString().match(Nr);
        return C ? parseInt(C[1], 10) * 1e3 : null;
      }
      function headerNameToString(a) {
        return Qr[a] || a.toLowerCase();
      }
      function parseHeaders(a, C = {}) {
        if (!Array.isArray(a)) return a;
        for (let q = 0; q < a.length; q += 2) {
          const re = a[q].toString().toLowerCase();
          let ae = C[re];
          if (!ae) {
            if (Array.isArray(a[q + 1])) {
              C[re] = a[q + 1].map((a) => a.toString('utf8'));
            } else {
              C[re] = a[q + 1].toString('utf8');
            }
          } else {
            if (!Array.isArray(ae)) {
              ae = [ae];
              C[re] = ae;
            }
            ae.push(a[q + 1].toString('utf8'));
          }
        }
        if ('content-length' in C && 'content-disposition' in C) {
          C['content-disposition'] = Buffer.from(
            C['content-disposition']
          ).toString('latin1');
        }
        return C;
      }
      function parseRawHeaders(a) {
        const C = [];
        let q = false;
        let re = -1;
        for (let ae = 0; ae < a.length; ae += 2) {
          const Ue = a[ae + 0].toString();
          const lt = a[ae + 1].toString('utf8');
          if (
            Ue.length === 14 &&
            (Ue === 'content-length' || Ue.toLowerCase() === 'content-length')
          ) {
            C.push(Ue, lt);
            q = true;
          } else if (
            Ue.length === 19 &&
            (Ue === 'content-disposition' ||
              Ue.toLowerCase() === 'content-disposition')
          ) {
            re = C.push(Ue, lt) - 1;
          } else {
            C.push(Ue, lt);
          }
        }
        if (q && re !== -1) {
          C[re] = Buffer.from(C[re]).toString('latin1');
        }
        return C;
      }
      function isBuffer(a) {
        return a instanceof Uint8Array || Buffer.isBuffer(a);
      }
      function validateHandler(a, C, q) {
        if (!a || typeof a !== 'object') {
          throw new Ar('handler must be an object');
        }
        if (typeof a.onConnect !== 'function') {
          throw new Ar('invalid onConnect method');
        }
        if (typeof a.onError !== 'function') {
          throw new Ar('invalid onError method');
        }
        if (typeof a.onBodySent !== 'function' && a.onBodySent !== undefined) {
          throw new Ar('invalid onBodySent method');
        }
        if (q || C === 'CONNECT') {
          if (typeof a.onUpgrade !== 'function') {
            throw new Ar('invalid onUpgrade method');
          }
        } else {
          if (typeof a.onHeaders !== 'function') {
            throw new Ar('invalid onHeaders method');
          }
          if (typeof a.onData !== 'function') {
            throw new Ar('invalid onData method');
          }
          if (typeof a.onComplete !== 'function') {
            throw new Ar('invalid onComplete method');
          }
        }
      }
      function isDisturbed(a) {
        return !!(
          a &&
          (Pt.isDisturbed
            ? Pt.isDisturbed(a) || a[Ue]
            : a[Ue] ||
              a.readableDidRead ||
              (a._readableState && a._readableState.dataEmitted) ||
              isReadableAborted(a))
        );
      }
      function isErrored(a) {
        return !!(
          a &&
          (Pt.isErrored
            ? Pt.isErrored(a)
            : /state: 'errored'/.test(Ir.inspect(a)))
        );
      }
      function isReadable(a) {
        return !!(
          a &&
          (Pt.isReadable
            ? Pt.isReadable(a)
            : /state: 'readable'/.test(Ir.inspect(a)))
        );
      }
      function getSocketInfo(a) {
        return {
          localAddress: a.localAddress,
          localPort: a.localPort,
          remoteAddress: a.remoteAddress,
          remotePort: a.remotePort,
          remoteFamily: a.remoteFamily,
          timeout: a.timeout,
          bytesWritten: a.bytesWritten,
          bytesRead: a.bytesRead
        };
      }
      async function* convertIterableToBuffer(a) {
        for await (const C of a) {
          yield Buffer.isBuffer(C) ? C : Buffer.from(C);
        }
      }
      let Lr;
      function ReadableStreamFrom(a) {
        if (!Lr) {
          Lr = q(5356).ReadableStream;
        }
        if (Lr.from) {
          return Lr.from(convertIterableToBuffer(a));
        }
        let C;
        return new Lr(
          {
            async start() {
              C = a[Symbol.asyncIterator]();
            },
            async pull(a) {
              const { done: q, value: re } = await C.next();
              if (q) {
                queueMicrotask(() => {
                  a.close();
                });
              } else {
                const C = Buffer.isBuffer(re) ? re : Buffer.from(re);
                a.enqueue(new Uint8Array(C));
              }
              return a.desiredSize > 0;
            },
            async cancel(a) {
              await C.return();
            }
          },
          0
        );
      }
      function isFormDataLike(a) {
        return (
          a &&
          typeof a === 'object' &&
          typeof a.append === 'function' &&
          typeof a.delete === 'function' &&
          typeof a.get === 'function' &&
          typeof a.getAll === 'function' &&
          typeof a.has === 'function' &&
          typeof a.set === 'function' &&
          a[Symbol.toStringTag] === 'FormData'
        );
      }
      function throwIfAborted(a) {
        if (!a) {
          return;
        }
        if (typeof a.throwIfAborted === 'function') {
          a.throwIfAborted();
        } else {
          if (a.aborted) {
            const a = new Error('The operation was aborted');
            a.name = 'AbortError';
            throw a;
          }
        }
      }
      function addAbortListener(a, C) {
        if ('addEventListener' in a) {
          a.addEventListener('abort', C, { once: true });
          return () => a.removeEventListener('abort', C);
        }
        a.addListener('abort', C);
        return () => a.removeListener('abort', C);
      }
      const Fr = !!String.prototype.toWellFormed;
      function toUSVString(a) {
        if (Fr) {
          return `${a}`.toWellFormed();
        } else if (Ir.toUSVString) {
          return Ir.toUSVString(a);
        }
        return `${a}`;
      }
      function parseRangeHeader(a) {
        if (a == null || a === '') return { start: 0, end: null, size: null };
        const C = a ? a.match(/^bytes (\d+)-(\d+)\/(\d+)?$/) : null;
        return C
          ? {
              start: parseInt(C[1]),
              end: C[2] ? parseInt(C[2]) : null,
              size: C[3] ? parseInt(C[3]) : null
            }
          : null;
      }
      const Mr = Object.create(null);
      Mr.enumerable = true;
      a.exports = {
        kEnumerableProperty: Mr,
        nop: nop,
        isDisturbed: isDisturbed,
        isErrored: isErrored,
        isReadable: isReadable,
        toUSVString: toUSVString,
        isReadableAborted: isReadableAborted,
        isBlobLike: isBlobLike,
        parseOrigin: parseOrigin,
        parseURL: parseURL,
        getServerName: getServerName,
        isStream: isStream,
        isIterable: isIterable,
        isAsyncIterable: isAsyncIterable,
        isDestroyed: isDestroyed,
        headerNameToString: headerNameToString,
        parseRawHeaders: parseRawHeaders,
        parseHeaders: parseHeaders,
        parseKeepAliveTimeout: parseKeepAliveTimeout,
        destroy: destroy,
        bodyLength: bodyLength,
        deepClone: deepClone,
        ReadableStreamFrom: ReadableStreamFrom,
        isBuffer: isBuffer,
        validateHandler: validateHandler,
        getSocketInfo: getSocketInfo,
        isFormDataLike: isFormDataLike,
        buildURL: buildURL,
        throwIfAborted: throwIfAborted,
        addAbortListener: addAbortListener,
        parseRangeHeader: parseRangeHeader,
        nodeMajor: kr,
        nodeMinor: Dr,
        nodeHasAutoSelectFamily: kr > 18 || (kr === 18 && Dr >= 13),
        safeHTTPMethods: ['GET', 'HEAD', 'OPTIONS', 'TRACE']
      };
    },
    6775: (a, C, q) => {
      'use strict';
      const re = q(3954);
      const {
        ClientDestroyedError: ae,
        ClientClosedError: Ue,
        InvalidArgumentError: lt
      } = q(3501);
      const {
        kDestroy: Pt,
        kClose: Wt,
        kDispatch: Ar,
        kInterceptors: Er
      } = q(7621);
      const Ir = Symbol('destroyed');
      const Br = Symbol('closed');
      const Qr = Symbol('onDestroyed');
      const kr = Symbol('onClosed');
      const Dr = Symbol('Intercepted Dispatch');
      class DispatcherBase extends re {
        constructor() {
          super();
          this[Ir] = false;
          this[Qr] = null;
          this[Br] = false;
          this[kr] = [];
        }
        get destroyed() {
          return this[Ir];
        }
        get closed() {
          return this[Br];
        }
        get interceptors() {
          return this[Er];
        }
        set interceptors(a) {
          if (a) {
            for (let C = a.length - 1; C >= 0; C--) {
              const a = this[Er][C];
              if (typeof a !== 'function') {
                throw new lt('interceptor must be an function');
              }
            }
          }
          this[Er] = a;
        }
        close(a) {
          if (a === undefined) {
            return new Promise((a, C) => {
              this.close((q, re) => (q ? C(q) : a(re)));
            });
          }
          if (typeof a !== 'function') {
            throw new lt('invalid callback');
          }
          if (this[Ir]) {
            queueMicrotask(() => a(new ae(), null));
            return;
          }
          if (this[Br]) {
            if (this[kr]) {
              this[kr].push(a);
            } else {
              queueMicrotask(() => a(null, null));
            }
            return;
          }
          this[Br] = true;
          this[kr].push(a);
          const onClosed = () => {
            const a = this[kr];
            this[kr] = null;
            for (let C = 0; C < a.length; C++) {
              a[C](null, null);
            }
          };
          this[Wt]()
            .then(() => this.destroy())
            .then(() => {
              queueMicrotask(onClosed);
            });
        }
        destroy(a, C) {
          if (typeof a === 'function') {
            C = a;
            a = null;
          }
          if (C === undefined) {
            return new Promise((C, q) => {
              this.destroy(a, (a, re) => (a ? q(a) : C(re)));
            });
          }
          if (typeof C !== 'function') {
            throw new lt('invalid callback');
          }
          if (this[Ir]) {
            if (this[Qr]) {
              this[Qr].push(C);
            } else {
              queueMicrotask(() => C(null, null));
            }
            return;
          }
          if (!a) {
            a = new ae();
          }
          this[Ir] = true;
          this[Qr] = this[Qr] || [];
          this[Qr].push(C);
          const onDestroyed = () => {
            const a = this[Qr];
            this[Qr] = null;
            for (let C = 0; C < a.length; C++) {
              a[C](null, null);
            }
          };
          this[Pt](a).then(() => {
            queueMicrotask(onDestroyed);
          });
        }
        [Dr](a, C) {
          if (!this[Er] || this[Er].length === 0) {
            this[Dr] = this[Ar];
            return this[Ar](a, C);
          }
          let q = this[Ar].bind(this);
          for (let a = this[Er].length - 1; a >= 0; a--) {
            q = this[Er][a](q);
          }
          this[Dr] = q;
          return q(a, C);
        }
        dispatch(a, C) {
          if (!C || typeof C !== 'object') {
            throw new lt('handler must be an object');
          }
          try {
            if (!a || typeof a !== 'object') {
              throw new lt('opts must be an object.');
            }
            if (this[Ir] || this[Qr]) {
              throw new ae();
            }
            if (this[Br]) {
              throw new Ue();
            }
            return this[Dr](a, C);
          } catch (a) {
            if (typeof C.onError !== 'function') {
              throw new lt('invalid onError method');
            }
            C.onError(a);
            return false;
          }
        }
      }
      a.exports = DispatcherBase;
    },
    3954: (a, C, q) => {
      'use strict';
      const re = q(2361);
      class Dispatcher extends re {
        dispatch() {
          throw new Error('not implemented');
        }
        close() {
          throw new Error('not implemented');
        }
        destroy() {
          throw new Error('not implemented');
        }
      }
      a.exports = Dispatcher;
    },
    6477: (a, C, q) => {
      'use strict';
      const re = q(6954);
      const ae = q(9647);
      const {
        ReadableStreamFrom: Ue,
        isBlobLike: lt,
        isReadableStreamLike: Pt,
        readableStreamClose: Wt,
        createDeferredPromise: Ar,
        fullyReadBody: Er
      } = q(6860);
      const { FormData: Ir } = q(8076);
      const { kState: Br } = q(3386);
      const { webidl: Qr } = q(3721);
      const { DOMException: kr, structuredClone: Dr } = q(756);
      const { Blob: Nr, File: Lr } = q(4300);
      const { kBodyUsed: Fr } = q(7621);
      const Mr = q(9491);
      const { isErrored: Pr } = q(9647);
      const { isUint8Array: Or, isArrayBuffer: xr } = q(9830);
      const { File: Ur } = q(1575);
      const { parseMIMEType: Gr, serializeAMimeType: Hr } = q(6932);
      let Vr = globalThis.ReadableStream;
      const Wr = Lr ?? Ur;
      const Yr = new TextEncoder();
      const jr = new TextDecoder();
      function extractBody(a, C = false) {
        if (!Vr) {
          Vr = q(5356).ReadableStream;
        }
        let re = null;
        if (a instanceof Vr) {
          re = a;
        } else if (lt(a)) {
          re = a.stream();
        } else {
          re = new Vr({
            async pull(a) {
              a.enqueue(typeof Er === 'string' ? Yr.encode(Er) : Er);
              queueMicrotask(() => Wt(a));
            },
            start() {},
            type: undefined
          });
        }
        Mr(Pt(re));
        let Ar = null;
        let Er = null;
        let Ir = null;
        let Br = null;
        if (typeof a === 'string') {
          Er = a;
          Br = 'text/plain;charset=UTF-8';
        } else if (a instanceof URLSearchParams) {
          Er = a.toString();
          Br = 'application/x-www-form-urlencoded;charset=UTF-8';
        } else if (xr(a)) {
          Er = new Uint8Array(a.slice());
        } else if (ArrayBuffer.isView(a)) {
          Er = new Uint8Array(
            a.buffer.slice(a.byteOffset, a.byteOffset + a.byteLength)
          );
        } else if (ae.isFormDataLike(a)) {
          const C = `----formdata-undici-0${`${Math.floor(Math.random() * 1e11)}`.padStart(11, '0')}`;
          const q = `--${C}\r\nContent-Disposition: form-data`;
          /*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */ const escape =
            (a) =>
              a
                .replace(/\n/g, '%0A')
                .replace(/\r/g, '%0D')
                .replace(/"/g, '%22');
          const normalizeLinefeeds = (a) => a.replace(/\r?\n|\r/g, '\r\n');
          const re = [];
          const ae = new Uint8Array([13, 10]);
          Ir = 0;
          let Ue = false;
          for (const [C, lt] of a) {
            if (typeof lt === 'string') {
              const a = Yr.encode(
                q +
                  `; name="${escape(normalizeLinefeeds(C))}"` +
                  `\r\n\r\n${normalizeLinefeeds(lt)}\r\n`
              );
              re.push(a);
              Ir += a.byteLength;
            } else {
              const a = Yr.encode(
                `${q}; name="${escape(normalizeLinefeeds(C))}"` +
                  (lt.name ? `; filename="${escape(lt.name)}"` : '') +
                  '\r\n' +
                  `Content-Type: ${lt.type || 'application/octet-stream'}\r\n\r\n`
              );
              re.push(a, lt, ae);
              if (typeof lt.size === 'number') {
                Ir += a.byteLength + lt.size + ae.byteLength;
              } else {
                Ue = true;
              }
            }
          }
          const lt = Yr.encode(`--${C}--`);
          re.push(lt);
          Ir += lt.byteLength;
          if (Ue) {
            Ir = null;
          }
          Er = a;
          Ar = async function* () {
            for (const a of re) {
              if (a.stream) {
                yield* a.stream();
              } else {
                yield a;
              }
            }
          };
          Br = 'multipart/form-data; boundary=' + C;
        } else if (lt(a)) {
          Er = a;
          Ir = a.size;
          if (a.type) {
            Br = a.type;
          }
        } else if (typeof a[Symbol.asyncIterator] === 'function') {
          if (C) {
            throw new TypeError('keepalive');
          }
          if (ae.isDisturbed(a) || a.locked) {
            throw new TypeError(
              'Response body object should not be disturbed or locked'
            );
          }
          re = a instanceof Vr ? a : Ue(a);
        }
        if (typeof Er === 'string' || ae.isBuffer(Er)) {
          Ir = Buffer.byteLength(Er);
        }
        if (Ar != null) {
          let C;
          re = new Vr({
            async start() {
              C = Ar(a)[Symbol.asyncIterator]();
            },
            async pull(a) {
              const { value: q, done: ae } = await C.next();
              if (ae) {
                queueMicrotask(() => {
                  a.close();
                });
              } else {
                if (!Pr(re)) {
                  a.enqueue(new Uint8Array(q));
                }
              }
              return a.desiredSize > 0;
            },
            async cancel(a) {
              await C.return();
            },
            type: undefined
          });
        }
        const Qr = { stream: re, source: Er, length: Ir };
        return [Qr, Br];
      }
      function safelyExtractBody(a, C = false) {
        if (!Vr) {
          Vr = q(5356).ReadableStream;
        }
        if (a instanceof Vr) {
          Mr(!ae.isDisturbed(a), 'The body has already been consumed.');
          Mr(!a.locked, 'The stream is locked.');
        }
        return extractBody(a, C);
      }
      function cloneBody(a) {
        const [C, q] = a.stream.tee();
        const re = Dr(q, { transfer: [q] });
        const [, ae] = re.tee();
        a.stream = C;
        return { stream: ae, length: a.length, source: a.source };
      }
      async function* consumeBody(a) {
        if (a) {
          if (Or(a)) {
            yield a;
          } else {
            const C = a.stream;
            if (ae.isDisturbed(C)) {
              throw new TypeError('The body has already been consumed.');
            }
            if (C.locked) {
              throw new TypeError('The stream is locked.');
            }
            C[Fr] = true;
            yield* C;
          }
        }
      }
      function throwIfAborted(a) {
        if (a.aborted) {
          throw new kr('The operation was aborted.', 'AbortError');
        }
      }
      function bodyMixinMethods(a) {
        const C = {
          blob() {
            return specConsumeBody(
              this,
              (a) => {
                let C = bodyMimeType(this);
                if (C === 'failure') {
                  C = '';
                } else if (C) {
                  C = Hr(C);
                }
                return new Nr([a], { type: C });
              },
              a
            );
          },
          arrayBuffer() {
            return specConsumeBody(this, (a) => new Uint8Array(a).buffer, a);
          },
          text() {
            return specConsumeBody(this, utf8DecodeBytes, a);
          },
          json() {
            return specConsumeBody(this, parseJSONFromBytes, a);
          },
          async formData() {
            Qr.brandCheck(this, a);
            throwIfAborted(this[Br]);
            const C = this.headers.get('Content-Type');
            if (/multipart\/form-data/.test(C)) {
              const a = {};
              for (const [C, q] of this.headers) a[C.toLowerCase()] = q;
              const C = new Ir();
              let q;
              try {
                q = new re({ headers: a, preservePath: true });
              } catch (a) {
                throw new kr(`${a}`, 'AbortError');
              }
              q.on('field', (a, q) => {
                C.append(a, q);
              });
              q.on('file', (a, q, re, ae, Ue) => {
                const lt = [];
                if (ae === 'base64' || ae.toLowerCase() === 'base64') {
                  let ae = '';
                  q.on('data', (a) => {
                    ae += a.toString().replace(/[\r\n]/gm, '');
                    const C = ae.length - (ae.length % 4);
                    lt.push(Buffer.from(ae.slice(0, C), 'base64'));
                    ae = ae.slice(C);
                  });
                  q.on('end', () => {
                    lt.push(Buffer.from(ae, 'base64'));
                    C.append(a, new Wr(lt, re, { type: Ue }));
                  });
                } else {
                  q.on('data', (a) => {
                    lt.push(a);
                  });
                  q.on('end', () => {
                    C.append(a, new Wr(lt, re, { type: Ue }));
                  });
                }
              });
              const ae = new Promise((a, C) => {
                q.on('finish', a);
                q.on('error', (a) => C(new TypeError(a)));
              });
              if (this.body !== null)
                for await (const a of consumeBody(this[Br].body)) q.write(a);
              q.end();
              await ae;
              return C;
            } else if (/application\/x-www-form-urlencoded/.test(C)) {
              let a;
              try {
                let C = '';
                const q = new TextDecoder('utf-8', { ignoreBOM: true });
                for await (const a of consumeBody(this[Br].body)) {
                  if (!Or(a)) {
                    throw new TypeError('Expected Uint8Array chunk');
                  }
                  C += q.decode(a, { stream: true });
                }
                C += q.decode();
                a = new URLSearchParams(C);
              } catch (a) {
                throw Object.assign(new TypeError(), { cause: a });
              }
              const C = new Ir();
              for (const [q, re] of a) {
                C.append(q, re);
              }
              return C;
            } else {
              await Promise.resolve();
              throwIfAborted(this[Br]);
              throw Qr.errors.exception({
                header: `${a.name}.formData`,
                message: 'Could not parse content as FormData.'
              });
            }
          }
        };
        return C;
      }
      function mixinBody(a) {
        Object.assign(a.prototype, bodyMixinMethods(a));
      }
      async function specConsumeBody(a, C, q) {
        Qr.brandCheck(a, q);
        throwIfAborted(a[Br]);
        if (bodyUnusable(a[Br].body)) {
          throw new TypeError('Body is unusable');
        }
        const re = Ar();
        const errorSteps = (a) => re.reject(a);
        const successSteps = (a) => {
          try {
            re.resolve(C(a));
          } catch (a) {
            errorSteps(a);
          }
        };
        if (a[Br].body == null) {
          successSteps(new Uint8Array());
          return re.promise;
        }
        await Er(a[Br].body, successSteps, errorSteps);
        return re.promise;
      }
      function bodyUnusable(a) {
        return a != null && (a.stream.locked || ae.isDisturbed(a.stream));
      }
      function utf8DecodeBytes(a) {
        if (a.length === 0) {
          return '';
        }
        if (a[0] === 239 && a[1] === 187 && a[2] === 191) {
          a = a.subarray(3);
        }
        const C = jr.decode(a);
        return C;
      }
      function parseJSONFromBytes(a) {
        return JSON.parse(utf8DecodeBytes(a));
      }
      function bodyMimeType(a) {
        const { headersList: C } = a[Br];
        const q = C.get('content-type');
        if (q === null) {
          return 'failure';
        }
        return Gr(q);
      }
      a.exports = {
        extractBody: extractBody,
        safelyExtractBody: safelyExtractBody,
        cloneBody: cloneBody,
        mixinBody: mixinBody
      };
    },
    756: (a, C, q) => {
      'use strict';
      const { MessageChannel: re, receiveMessageOnPort: ae } = q(1267);
      const Ue = ['GET', 'HEAD', 'POST'];
      const lt = new Set(Ue);
      const Pt = [101, 204, 205, 304];
      const Wt = [301, 302, 303, 307, 308];
      const Ar = new Set(Wt);
      const Er = [
        '1',
        '7',
        '9',
        '11',
        '13',
        '15',
        '17',
        '19',
        '20',
        '21',
        '22',
        '23',
        '25',
        '37',
        '42',
        '43',
        '53',
        '69',
        '77',
        '79',
        '87',
        '95',
        '101',
        '102',
        '103',
        '104',
        '109',
        '110',
        '111',
        '113',
        '115',
        '117',
        '119',
        '123',
        '135',
        '137',
        '139',
        '143',
        '161',
        '179',
        '389',
        '427',
        '465',
        '512',
        '513',
        '514',
        '515',
        '526',
        '530',
        '531',
        '532',
        '540',
        '548',
        '554',
        '556',
        '563',
        '587',
        '601',
        '636',
        '989',
        '990',
        '993',
        '995',
        '1719',
        '1720',
        '1723',
        '2049',
        '3659',
        '4045',
        '5060',
        '5061',
        '6000',
        '6566',
        '6665',
        '6666',
        '6667',
        '6668',
        '6669',
        '6697',
        '10080'
      ];
      const Ir = new Set(Er);
      const Br = [
        '',
        'no-referrer',
        'no-referrer-when-downgrade',
        'same-origin',
        'origin',
        'strict-origin',
        'origin-when-cross-origin',
        'strict-origin-when-cross-origin',
        'unsafe-url'
      ];
      const Qr = new Set(Br);
      const kr = ['follow', 'manual', 'error'];
      const Dr = ['GET', 'HEAD', 'OPTIONS', 'TRACE'];
      const Nr = new Set(Dr);
      const Lr = ['navigate', 'same-origin', 'no-cors', 'cors'];
      const Fr = ['omit', 'same-origin', 'include'];
      const Mr = [
        'default',
        'no-store',
        'reload',
        'no-cache',
        'force-cache',
        'only-if-cached'
      ];
      const Pr = [
        'content-encoding',
        'content-language',
        'content-location',
        'content-type',
        'content-length'
      ];
      const Or = ['half'];
      const xr = ['CONNECT', 'TRACE', 'TRACK'];
      const Ur = new Set(xr);
      const Gr = [
        'audio',
        'audioworklet',
        'font',
        'image',
        'manifest',
        'paintworklet',
        'script',
        'style',
        'track',
        'video',
        'xslt',
        ''
      ];
      const Hr = new Set(Gr);
      const Vr =
        globalThis.DOMException ??
        (() => {
          try {
            atob('~');
          } catch (a) {
            return Object.getPrototypeOf(a).constructor;
          }
        })();
      let Wr;
      const Yr =
        globalThis.structuredClone ??
        function structuredClone(a, C = undefined) {
          if (arguments.length === 0) {
            throw new TypeError('missing argument');
          }
          if (!Wr) {
            Wr = new re();
          }
          Wr.port1.unref();
          Wr.port2.unref();
          Wr.port1.postMessage(a, C?.transfer);
          return ae(Wr.port2).message;
        };
      a.exports = {
        DOMException: Vr,
        structuredClone: Yr,
        subresource: Gr,
        forbiddenMethods: xr,
        requestBodyHeader: Pr,
        referrerPolicy: Br,
        requestRedirect: kr,
        requestMode: Lr,
        requestCredentials: Fr,
        requestCache: Mr,
        redirectStatus: Wt,
        corsSafeListedMethods: Ue,
        nullBodyStatus: Pt,
        safeMethods: Dr,
        badPorts: Er,
        requestDuplex: Or,
        subresourceSet: Hr,
        badPortsSet: Ir,
        redirectStatusSet: Ar,
        corsSafeListedMethodsSet: lt,
        safeMethodsSet: Nr,
        forbiddenMethodsSet: Ur,
        referrerPolicySet: Qr
      };
    },
    6932: (a, C, q) => {
      const re = q(9491);
      const { atob: ae } = q(4300);
      const { isomorphicDecode: Ue } = q(6860);
      const lt = new TextEncoder();
      const Pt = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/;
      const Wt = /(\u000A|\u000D|\u0009|\u0020)/;
      const Ar = /[\u0009|\u0020-\u007E|\u0080-\u00FF]/;
      function dataURLProcessor(a) {
        re(a.protocol === 'data:');
        let C = URLSerializer(a, true);
        C = C.slice(5);
        const q = { position: 0 };
        let ae = collectASequenceOfCodePointsFast(',', C, q);
        const lt = ae.length;
        ae = removeASCIIWhitespace(ae, true, true);
        if (q.position >= C.length) {
          return 'failure';
        }
        q.position++;
        const Pt = C.slice(lt + 1);
        let Wt = stringPercentDecode(Pt);
        if (/;(\u0020){0,}base64$/i.test(ae)) {
          const a = Ue(Wt);
          Wt = forgivingBase64(a);
          if (Wt === 'failure') {
            return 'failure';
          }
          ae = ae.slice(0, -6);
          ae = ae.replace(/(\u0020)+$/, '');
          ae = ae.slice(0, -1);
        }
        if (ae.startsWith(';')) {
          ae = 'text/plain' + ae;
        }
        let Ar = parseMIMEType(ae);
        if (Ar === 'failure') {
          Ar = parseMIMEType('text/plain;charset=US-ASCII');
        }
        return { mimeType: Ar, body: Wt };
      }
      function URLSerializer(a, C = false) {
        if (!C) {
          return a.href;
        }
        const q = a.href;
        const re = a.hash.length;
        return re === 0 ? q : q.substring(0, q.length - re);
      }
      function collectASequenceOfCodePoints(a, C, q) {
        let re = '';
        while (q.position < C.length && a(C[q.position])) {
          re += C[q.position];
          q.position++;
        }
        return re;
      }
      function collectASequenceOfCodePointsFast(a, C, q) {
        const re = C.indexOf(a, q.position);
        const ae = q.position;
        if (re === -1) {
          q.position = C.length;
          return C.slice(ae);
        }
        q.position = re;
        return C.slice(ae, q.position);
      }
      function stringPercentDecode(a) {
        const C = lt.encode(a);
        return percentDecode(C);
      }
      function percentDecode(a) {
        const C = [];
        for (let q = 0; q < a.length; q++) {
          const re = a[q];
          if (re !== 37) {
            C.push(re);
          } else if (
            re === 37 &&
            !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(a[q + 1], a[q + 2]))
          ) {
            C.push(37);
          } else {
            const re = String.fromCharCode(a[q + 1], a[q + 2]);
            const ae = Number.parseInt(re, 16);
            C.push(ae);
            q += 2;
          }
        }
        return Uint8Array.from(C);
      }
      function parseMIMEType(a) {
        a = removeHTTPWhitespace(a, true, true);
        const C = { position: 0 };
        const q = collectASequenceOfCodePointsFast('/', a, C);
        if (q.length === 0 || !Pt.test(q)) {
          return 'failure';
        }
        if (C.position > a.length) {
          return 'failure';
        }
        C.position++;
        let re = collectASequenceOfCodePointsFast(';', a, C);
        re = removeHTTPWhitespace(re, false, true);
        if (re.length === 0 || !Pt.test(re)) {
          return 'failure';
        }
        const ae = q.toLowerCase();
        const Ue = re.toLowerCase();
        const lt = {
          type: ae,
          subtype: Ue,
          parameters: new Map(),
          essence: `${ae}/${Ue}`
        };
        while (C.position < a.length) {
          C.position++;
          collectASequenceOfCodePoints((a) => Wt.test(a), a, C);
          let q = collectASequenceOfCodePoints(
            (a) => a !== ';' && a !== '=',
            a,
            C
          );
          q = q.toLowerCase();
          if (C.position < a.length) {
            if (a[C.position] === ';') {
              continue;
            }
            C.position++;
          }
          if (C.position > a.length) {
            break;
          }
          let re = null;
          if (a[C.position] === '"') {
            re = collectAnHTTPQuotedString(a, C, true);
            collectASequenceOfCodePointsFast(';', a, C);
          } else {
            re = collectASequenceOfCodePointsFast(';', a, C);
            re = removeHTTPWhitespace(re, false, true);
            if (re.length === 0) {
              continue;
            }
          }
          if (
            q.length !== 0 &&
            Pt.test(q) &&
            (re.length === 0 || Ar.test(re)) &&
            !lt.parameters.has(q)
          ) {
            lt.parameters.set(q, re);
          }
        }
        return lt;
      }
      function forgivingBase64(a) {
        a = a.replace(/[\u0009\u000A\u000C\u000D\u0020]/g, '');
        if (a.length % 4 === 0) {
          a = a.replace(/=?=$/, '');
        }
        if (a.length % 4 === 1) {
          return 'failure';
        }
        if (/[^+/0-9A-Za-z]/.test(a)) {
          return 'failure';
        }
        const C = ae(a);
        const q = new Uint8Array(C.length);
        for (let a = 0; a < C.length; a++) {
          q[a] = C.charCodeAt(a);
        }
        return q;
      }
      function collectAnHTTPQuotedString(a, C, q) {
        const ae = C.position;
        let Ue = '';
        re(a[C.position] === '"');
        C.position++;
        while (true) {
          Ue += collectASequenceOfCodePoints(
            (a) => a !== '"' && a !== '\\',
            a,
            C
          );
          if (C.position >= a.length) {
            break;
          }
          const q = a[C.position];
          C.position++;
          if (q === '\\') {
            if (C.position >= a.length) {
              Ue += '\\';
              break;
            }
            Ue += a[C.position];
            C.position++;
          } else {
            re(q === '"');
            break;
          }
        }
        if (q) {
          return Ue;
        }
        return a.slice(ae, C.position);
      }
      function serializeAMimeType(a) {
        re(a !== 'failure');
        const { parameters: C, essence: q } = a;
        let ae = q;
        for (let [a, q] of C.entries()) {
          ae += ';';
          ae += a;
          ae += '=';
          if (!Pt.test(q)) {
            q = q.replace(/(\\|")/g, '\\$1');
            q = '"' + q;
            q += '"';
          }
          ae += q;
        }
        return ae;
      }
      function isHTTPWhiteSpace(a) {
        return a === '\r' || a === '\n' || a === '\t' || a === ' ';
      }
      function removeHTTPWhitespace(a, C = true, q = true) {
        let re = 0;
        let ae = a.length - 1;
        if (C) {
          for (; re < a.length && isHTTPWhiteSpace(a[re]); re++);
        }
        if (q) {
          for (; ae > 0 && isHTTPWhiteSpace(a[ae]); ae--);
        }
        return a.slice(re, ae + 1);
      }
      function isASCIIWhitespace(a) {
        return (
          a === '\r' || a === '\n' || a === '\t' || a === '\f' || a === ' '
        );
      }
      function removeASCIIWhitespace(a, C = true, q = true) {
        let re = 0;
        let ae = a.length - 1;
        if (C) {
          for (; re < a.length && isASCIIWhitespace(a[re]); re++);
        }
        if (q) {
          for (; ae > 0 && isASCIIWhitespace(a[ae]); ae--);
        }
        return a.slice(re, ae + 1);
      }
      a.exports = {
        dataURLProcessor: dataURLProcessor,
        URLSerializer: URLSerializer,
        collectASequenceOfCodePoints: collectASequenceOfCodePoints,
        collectASequenceOfCodePointsFast: collectASequenceOfCodePointsFast,
        stringPercentDecode: stringPercentDecode,
        parseMIMEType: parseMIMEType,
        collectAnHTTPQuotedString: collectAnHTTPQuotedString,
        serializeAMimeType: serializeAMimeType
      };
    },
    1575: (a, C, q) => {
      'use strict';
      const { Blob: re, File: ae } = q(4300);
      const { types: Ue } = q(3837);
      const { kState: lt } = q(3386);
      const { isBlobLike: Pt } = q(6860);
      const { webidl: Wt } = q(3721);
      const { parseMIMEType: Ar, serializeAMimeType: Er } = q(6932);
      const { kEnumerableProperty: Ir } = q(9647);
      const Br = new TextEncoder();
      class File extends re {
        constructor(a, C, q = {}) {
          Wt.argumentLengthCheck(arguments, 2, { header: 'File constructor' });
          a = Wt.converters['sequence<BlobPart>'](a);
          C = Wt.converters.USVString(C);
          q = Wt.converters.FilePropertyBag(q);
          const re = C;
          let ae = q.type;
          let Ue;
          e: {
            if (ae) {
              ae = Ar(ae);
              if (ae === 'failure') {
                ae = '';
                break e;
              }
              ae = Er(ae).toLowerCase();
            }
            Ue = q.lastModified;
          }
          super(processBlobParts(a, q), { type: ae });
          this[lt] = { name: re, lastModified: Ue, type: ae };
        }
        get name() {
          Wt.brandCheck(this, File);
          return this[lt].name;
        }
        get lastModified() {
          Wt.brandCheck(this, File);
          return this[lt].lastModified;
        }
        get type() {
          Wt.brandCheck(this, File);
          return this[lt].type;
        }
      }
      class FileLike {
        constructor(a, C, q = {}) {
          const re = C;
          const ae = q.type;
          const Ue = q.lastModified ?? Date.now();
          this[lt] = { blobLike: a, name: re, type: ae, lastModified: Ue };
        }
        stream(...a) {
          Wt.brandCheck(this, FileLike);
          return this[lt].blobLike.stream(...a);
        }
        arrayBuffer(...a) {
          Wt.brandCheck(this, FileLike);
          return this[lt].blobLike.arrayBuffer(...a);
        }
        slice(...a) {
          Wt.brandCheck(this, FileLike);
          return this[lt].blobLike.slice(...a);
        }
        text(...a) {
          Wt.brandCheck(this, FileLike);
          return this[lt].blobLike.text(...a);
        }
        get size() {
          Wt.brandCheck(this, FileLike);
          return this[lt].blobLike.size;
        }
        get type() {
          Wt.brandCheck(this, FileLike);
          return this[lt].blobLike.type;
        }
        get name() {
          Wt.brandCheck(this, FileLike);
          return this[lt].name;
        }
        get lastModified() {
          Wt.brandCheck(this, FileLike);
          return this[lt].lastModified;
        }
        get [Symbol.toStringTag]() {
          return 'File';
        }
      }
      Object.defineProperties(File.prototype, {
        [Symbol.toStringTag]: { value: 'File', configurable: true },
        name: Ir,
        lastModified: Ir
      });
      Wt.converters.Blob = Wt.interfaceConverter(re);
      Wt.converters.BlobPart = function (a, C) {
        if (Wt.util.Type(a) === 'Object') {
          if (Pt(a)) {
            return Wt.converters.Blob(a, { strict: false });
          }
          if (ArrayBuffer.isView(a) || Ue.isAnyArrayBuffer(a)) {
            return Wt.converters.BufferSource(a, C);
          }
        }
        return Wt.converters.USVString(a, C);
      };
      Wt.converters['sequence<BlobPart>'] = Wt.sequenceConverter(
        Wt.converters.BlobPart
      );
      Wt.converters.FilePropertyBag = Wt.dictionaryConverter([
        {
          key: 'lastModified',
          converter: Wt.converters['long long'],
          get defaultValue() {
            return Date.now();
          }
        },
        { key: 'type', converter: Wt.converters.DOMString, defaultValue: '' },
        {
          key: 'endings',
          converter: (a) => {
            a = Wt.converters.DOMString(a);
            a = a.toLowerCase();
            if (a !== 'native') {
              a = 'transparent';
            }
            return a;
          },
          defaultValue: 'transparent'
        }
      ]);
      function processBlobParts(a, C) {
        const q = [];
        for (const re of a) {
          if (typeof re === 'string') {
            let a = re;
            if (C.endings === 'native') {
              a = convertLineEndingsNative(a);
            }
            q.push(Br.encode(a));
          } else if (Ue.isAnyArrayBuffer(re) || Ue.isTypedArray(re)) {
            if (!re.buffer) {
              q.push(new Uint8Array(re));
            } else {
              q.push(new Uint8Array(re.buffer, re.byteOffset, re.byteLength));
            }
          } else if (Pt(re)) {
            q.push(re);
          }
        }
        return q;
      }
      function convertLineEndingsNative(a) {
        let C = '\n';
        if (process.platform === 'win32') {
          C = '\r\n';
        }
        return a.replace(/\r?\n/g, C);
      }
      function isFileLike(a) {
        return (
          (ae && a instanceof ae) ||
          a instanceof File ||
          (a &&
            (typeof a.stream === 'function' ||
              typeof a.arrayBuffer === 'function') &&
            a[Symbol.toStringTag] === 'File')
        );
      }
      a.exports = { File: File, FileLike: FileLike, isFileLike: isFileLike };
    },
    8076: (a, C, q) => {
      'use strict';
      const { isBlobLike: re, toUSVString: ae, makeIterator: Ue } = q(6860);
      const { kState: lt } = q(3386);
      const { File: Pt, FileLike: Wt, isFileLike: Ar } = q(1575);
      const { webidl: Er } = q(3721);
      const { Blob: Ir, File: Br } = q(4300);
      const Qr = Br ?? Pt;
      class FormData {
        constructor(a) {
          if (a !== undefined) {
            throw Er.errors.conversionFailed({
              prefix: 'FormData constructor',
              argument: 'Argument 1',
              types: ['undefined']
            });
          }
          this[lt] = [];
        }
        append(a, C, q = undefined) {
          Er.brandCheck(this, FormData);
          Er.argumentLengthCheck(arguments, 2, { header: 'FormData.append' });
          if (arguments.length === 3 && !re(C)) {
            throw new TypeError(
              "Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'"
            );
          }
          a = Er.converters.USVString(a);
          C = re(C)
            ? Er.converters.Blob(C, { strict: false })
            : Er.converters.USVString(C);
          q = arguments.length === 3 ? Er.converters.USVString(q) : undefined;
          const ae = makeEntry(a, C, q);
          this[lt].push(ae);
        }
        delete(a) {
          Er.brandCheck(this, FormData);
          Er.argumentLengthCheck(arguments, 1, { header: 'FormData.delete' });
          a = Er.converters.USVString(a);
          this[lt] = this[lt].filter((C) => C.name !== a);
        }
        get(a) {
          Er.brandCheck(this, FormData);
          Er.argumentLengthCheck(arguments, 1, { header: 'FormData.get' });
          a = Er.converters.USVString(a);
          const C = this[lt].findIndex((C) => C.name === a);
          if (C === -1) {
            return null;
          }
          return this[lt][C].value;
        }
        getAll(a) {
          Er.brandCheck(this, FormData);
          Er.argumentLengthCheck(arguments, 1, { header: 'FormData.getAll' });
          a = Er.converters.USVString(a);
          return this[lt].filter((C) => C.name === a).map((a) => a.value);
        }
        has(a) {
          Er.brandCheck(this, FormData);
          Er.argumentLengthCheck(arguments, 1, { header: 'FormData.has' });
          a = Er.converters.USVString(a);
          return this[lt].findIndex((C) => C.name === a) !== -1;
        }
        set(a, C, q = undefined) {
          Er.brandCheck(this, FormData);
          Er.argumentLengthCheck(arguments, 2, { header: 'FormData.set' });
          if (arguments.length === 3 && !re(C)) {
            throw new TypeError(
              "Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'"
            );
          }
          a = Er.converters.USVString(a);
          C = re(C)
            ? Er.converters.Blob(C, { strict: false })
            : Er.converters.USVString(C);
          q = arguments.length === 3 ? ae(q) : undefined;
          const Ue = makeEntry(a, C, q);
          const Pt = this[lt].findIndex((C) => C.name === a);
          if (Pt !== -1) {
            this[lt] = [
              ...this[lt].slice(0, Pt),
              Ue,
              ...this[lt].slice(Pt + 1).filter((C) => C.name !== a)
            ];
          } else {
            this[lt].push(Ue);
          }
        }
        entries() {
          Er.brandCheck(this, FormData);
          return Ue(
            () => this[lt].map((a) => [a.name, a.value]),
            'FormData',
            'key+value'
          );
        }
        keys() {
          Er.brandCheck(this, FormData);
          return Ue(
            () => this[lt].map((a) => [a.name, a.value]),
            'FormData',
            'key'
          );
        }
        values() {
          Er.brandCheck(this, FormData);
          return Ue(
            () => this[lt].map((a) => [a.name, a.value]),
            'FormData',
            'value'
          );
        }
        forEach(a, C = globalThis) {
          Er.brandCheck(this, FormData);
          Er.argumentLengthCheck(arguments, 1, { header: 'FormData.forEach' });
          if (typeof a !== 'function') {
            throw new TypeError(
              "Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'."
            );
          }
          for (const [q, re] of this) {
            a.apply(C, [re, q, this]);
          }
        }
      }
      FormData.prototype[Symbol.iterator] = FormData.prototype.entries;
      Object.defineProperties(FormData.prototype, {
        [Symbol.toStringTag]: { value: 'FormData', configurable: true }
      });
      function makeEntry(a, C, q) {
        a = Buffer.from(a).toString('utf8');
        if (typeof C === 'string') {
          C = Buffer.from(C).toString('utf8');
        } else {
          if (!Ar(C)) {
            C =
              C instanceof Ir
                ? new Qr([C], 'blob', { type: C.type })
                : new Wt(C, 'blob', { type: C.type });
          }
          if (q !== undefined) {
            const a = { type: C.type, lastModified: C.lastModified };
            C =
              (Br && C instanceof Br) || C instanceof Pt
                ? new Qr([C], q, a)
                : new Wt(C, q, a);
          }
        }
        return { name: a, value: C };
      }
      a.exports = { FormData: FormData };
    },
    128: (a) => {
      'use strict';
      const C = Symbol.for('undici.globalOrigin.1');
      function getGlobalOrigin() {
        return globalThis[C];
      }
      function setGlobalOrigin(a) {
        if (a === undefined) {
          Object.defineProperty(globalThis, C, {
            value: undefined,
            writable: true,
            enumerable: false,
            configurable: false
          });
          return;
        }
        const q = new URL(a);
        if (q.protocol !== 'http:' && q.protocol !== 'https:') {
          throw new TypeError(
            `Only http & https urls are allowed, received ${q.protocol}`
          );
        }
        Object.defineProperty(globalThis, C, {
          value: q,
          writable: true,
          enumerable: false,
          configurable: false
        });
      }
      a.exports = {
        getGlobalOrigin: getGlobalOrigin,
        setGlobalOrigin: setGlobalOrigin
      };
    },
    6909: (a, C, q) => {
      'use strict';
      const { kHeadersList: re, kConstruct: ae } = q(7621);
      const { kGuard: Ue } = q(3386);
      const { kEnumerableProperty: lt } = q(9647);
      const {
        makeIterator: Pt,
        isValidHeaderName: Wt,
        isValidHeaderValue: Ar
      } = q(6860);
      const { webidl: Er } = q(3721);
      const Ir = q(9491);
      const Br = Symbol('headers map');
      const Qr = Symbol('headers map sorted');
      function isHTTPWhiteSpaceCharCode(a) {
        return a === 10 || a === 13 || a === 9 || a === 32;
      }
      function headerValueNormalize(a) {
        let C = 0;
        let q = a.length;
        while (q > C && isHTTPWhiteSpaceCharCode(a.charCodeAt(q - 1))) --q;
        while (q > C && isHTTPWhiteSpaceCharCode(a.charCodeAt(C))) ++C;
        return C === 0 && q === a.length ? a : a.substring(C, q);
      }
      function fill(a, C) {
        if (Array.isArray(C)) {
          for (let q = 0; q < C.length; ++q) {
            const re = C[q];
            if (re.length !== 2) {
              throw Er.errors.exception({
                header: 'Headers constructor',
                message: `expected name/value pair to be length 2, found ${re.length}.`
              });
            }
            appendHeader(a, re[0], re[1]);
          }
        } else if (typeof C === 'object' && C !== null) {
          const q = Object.keys(C);
          for (let re = 0; re < q.length; ++re) {
            appendHeader(a, q[re], C[q[re]]);
          }
        } else {
          throw Er.errors.conversionFailed({
            prefix: 'Headers constructor',
            argument: 'Argument 1',
            types: [
              'sequence<sequence<ByteString>>',
              'record<ByteString, ByteString>'
            ]
          });
        }
      }
      function appendHeader(a, C, q) {
        q = headerValueNormalize(q);
        if (!Wt(C)) {
          throw Er.errors.invalidArgument({
            prefix: 'Headers.append',
            value: C,
            type: 'header name'
          });
        } else if (!Ar(q)) {
          throw Er.errors.invalidArgument({
            prefix: 'Headers.append',
            value: q,
            type: 'header value'
          });
        }
        if (a[Ue] === 'immutable') {
          throw new TypeError('immutable');
        } else if (a[Ue] === 'request-no-cors') {
        }
        return a[re].append(C, q);
      }
      class HeadersList {
        cookies = null;
        constructor(a) {
          if (a instanceof HeadersList) {
            this[Br] = new Map(a[Br]);
            this[Qr] = a[Qr];
            this.cookies = a.cookies === null ? null : [...a.cookies];
          } else {
            this[Br] = new Map(a);
            this[Qr] = null;
          }
        }
        contains(a) {
          a = a.toLowerCase();
          return this[Br].has(a);
        }
        clear() {
          this[Br].clear();
          this[Qr] = null;
          this.cookies = null;
        }
        append(a, C) {
          this[Qr] = null;
          const q = a.toLowerCase();
          const re = this[Br].get(q);
          if (re) {
            const a = q === 'cookie' ? '; ' : ', ';
            this[Br].set(q, { name: re.name, value: `${re.value}${a}${C}` });
          } else {
            this[Br].set(q, { name: a, value: C });
          }
          if (q === 'set-cookie') {
            this.cookies ??= [];
            this.cookies.push(C);
          }
        }
        set(a, C) {
          this[Qr] = null;
          const q = a.toLowerCase();
          if (q === 'set-cookie') {
            this.cookies = [C];
          }
          this[Br].set(q, { name: a, value: C });
        }
        delete(a) {
          this[Qr] = null;
          a = a.toLowerCase();
          if (a === 'set-cookie') {
            this.cookies = null;
          }
          this[Br].delete(a);
        }
        get(a) {
          const C = this[Br].get(a.toLowerCase());
          return C === undefined ? null : C.value;
        }
        *[Symbol.iterator]() {
          for (const [a, { value: C }] of this[Br]) {
            yield [a, C];
          }
        }
        get entries() {
          const a = {};
          if (this[Br].size) {
            for (const { name: C, value: q } of this[Br].values()) {
              a[C] = q;
            }
          }
          return a;
        }
      }
      class Headers {
        constructor(a = undefined) {
          if (a === ae) {
            return;
          }
          this[re] = new HeadersList();
          this[Ue] = 'none';
          if (a !== undefined) {
            a = Er.converters.HeadersInit(a);
            fill(this, a);
          }
        }
        append(a, C) {
          Er.brandCheck(this, Headers);
          Er.argumentLengthCheck(arguments, 2, { header: 'Headers.append' });
          a = Er.converters.ByteString(a);
          C = Er.converters.ByteString(C);
          return appendHeader(this, a, C);
        }
        delete(a) {
          Er.brandCheck(this, Headers);
          Er.argumentLengthCheck(arguments, 1, { header: 'Headers.delete' });
          a = Er.converters.ByteString(a);
          if (!Wt(a)) {
            throw Er.errors.invalidArgument({
              prefix: 'Headers.delete',
              value: a,
              type: 'header name'
            });
          }
          if (this[Ue] === 'immutable') {
            throw new TypeError('immutable');
          } else if (this[Ue] === 'request-no-cors') {
          }
          if (!this[re].contains(a)) {
            return;
          }
          this[re].delete(a);
        }
        get(a) {
          Er.brandCheck(this, Headers);
          Er.argumentLengthCheck(arguments, 1, { header: 'Headers.get' });
          a = Er.converters.ByteString(a);
          if (!Wt(a)) {
            throw Er.errors.invalidArgument({
              prefix: 'Headers.get',
              value: a,
              type: 'header name'
            });
          }
          return this[re].get(a);
        }
        has(a) {
          Er.brandCheck(this, Headers);
          Er.argumentLengthCheck(arguments, 1, { header: 'Headers.has' });
          a = Er.converters.ByteString(a);
          if (!Wt(a)) {
            throw Er.errors.invalidArgument({
              prefix: 'Headers.has',
              value: a,
              type: 'header name'
            });
          }
          return this[re].contains(a);
        }
        set(a, C) {
          Er.brandCheck(this, Headers);
          Er.argumentLengthCheck(arguments, 2, { header: 'Headers.set' });
          a = Er.converters.ByteString(a);
          C = Er.converters.ByteString(C);
          C = headerValueNormalize(C);
          if (!Wt(a)) {
            throw Er.errors.invalidArgument({
              prefix: 'Headers.set',
              value: a,
              type: 'header name'
            });
          } else if (!Ar(C)) {
            throw Er.errors.invalidArgument({
              prefix: 'Headers.set',
              value: C,
              type: 'header value'
            });
          }
          if (this[Ue] === 'immutable') {
            throw new TypeError('immutable');
          } else if (this[Ue] === 'request-no-cors') {
          }
          this[re].set(a, C);
        }
        getSetCookie() {
          Er.brandCheck(this, Headers);
          const a = this[re].cookies;
          if (a) {
            return [...a];
          }
          return [];
        }
        get [Qr]() {
          if (this[re][Qr]) {
            return this[re][Qr];
          }
          const a = [];
          const C = [...this[re]].sort((a, C) => (a[0] < C[0] ? -1 : 1));
          const q = this[re].cookies;
          for (let re = 0; re < C.length; ++re) {
            const [ae, Ue] = C[re];
            if (ae === 'set-cookie') {
              for (let C = 0; C < q.length; ++C) {
                a.push([ae, q[C]]);
              }
            } else {
              Ir(Ue !== null);
              a.push([ae, Ue]);
            }
          }
          this[re][Qr] = a;
          return a;
        }
        keys() {
          Er.brandCheck(this, Headers);
          if (this[Ue] === 'immutable') {
            const a = this[Qr];
            return Pt(() => a, 'Headers', 'key');
          }
          return Pt(() => [...this[Qr].values()], 'Headers', 'key');
        }
        values() {
          Er.brandCheck(this, Headers);
          if (this[Ue] === 'immutable') {
            const a = this[Qr];
            return Pt(() => a, 'Headers', 'value');
          }
          return Pt(() => [...this[Qr].values()], 'Headers', 'value');
        }
        entries() {
          Er.brandCheck(this, Headers);
          if (this[Ue] === 'immutable') {
            const a = this[Qr];
            return Pt(() => a, 'Headers', 'key+value');
          }
          return Pt(() => [...this[Qr].values()], 'Headers', 'key+value');
        }
        forEach(a, C = globalThis) {
          Er.brandCheck(this, Headers);
          Er.argumentLengthCheck(arguments, 1, { header: 'Headers.forEach' });
          if (typeof a !== 'function') {
            throw new TypeError(
              "Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'."
            );
          }
          for (const [q, re] of this) {
            a.apply(C, [re, q, this]);
          }
        }
        [Symbol.for('nodejs.util.inspect.custom')]() {
          Er.brandCheck(this, Headers);
          return this[re];
        }
      }
      Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
      Object.defineProperties(Headers.prototype, {
        append: lt,
        delete: lt,
        get: lt,
        has: lt,
        set: lt,
        getSetCookie: lt,
        keys: lt,
        values: lt,
        entries: lt,
        forEach: lt,
        [Symbol.iterator]: { enumerable: false },
        [Symbol.toStringTag]: { value: 'Headers', configurable: true }
      });
      Er.converters.HeadersInit = function (a) {
        if (Er.util.Type(a) === 'Object') {
          if (a[Symbol.iterator]) {
            return Er.converters['sequence<sequence<ByteString>>'](a);
          }
          return Er.converters['record<ByteString, ByteString>'](a);
        }
        throw Er.errors.conversionFailed({
          prefix: 'Headers constructor',
          argument: 'Argument 1',
          types: [
            'sequence<sequence<ByteString>>',
            'record<ByteString, ByteString>'
          ]
        });
      };
      a.exports = { fill: fill, Headers: Headers, HeadersList: HeadersList };
    },
    3254: (a, C, q) => {
      'use strict';
      const {
        Response: re,
        makeNetworkError: ae,
        makeAppropriateNetworkError: Ue,
        filterResponse: lt,
        makeResponse: Pt
      } = q(6913);
      const { Headers: Wt } = q(6909);
      const { Request: Ar, makeRequest: Er } = q(9787);
      const Ir = q(9796);
      const {
        bytesMatch: Br,
        makePolicyContainer: Qr,
        clonePolicyContainer: kr,
        requestBadPort: Dr,
        TAOCheck: Nr,
        appendRequestOriginHeader: Lr,
        responseLocationURL: Fr,
        requestCurrentURL: Mr,
        setRequestReferrerPolicyOnRedirect: Pr,
        tryUpgradeRequestToAPotentiallyTrustworthyURL: Or,
        createOpaqueTimingInfo: xr,
        appendFetchMetadata: Ur,
        corsCheck: Gr,
        crossOriginResourcePolicyCheck: Hr,
        determineRequestsReferrer: Vr,
        coarsenedSharedCurrentTime: Wr,
        createDeferredPromise: Yr,
        isBlobLike: jr,
        sameOrigin: Jr,
        isCancelled: zr,
        isAborted: $r,
        isErrorLike: Kr,
        fullyReadBody: Xr,
        readableStreamClose: Zr,
        isomorphicEncode: es,
        urlIsLocal: ts,
        urlIsHttpHttpsScheme: rs,
        urlHasHttpsScheme: ss
      } = q(6860);
      const { kState: ns, kHeaders: os, kGuard: as, kRealm: ls } = q(3386);
      const cs = q(9491);
      const { safelyExtractBody: As } = q(6477);
      const {
        redirectStatusSet: ds,
        nullBodyStatus: us,
        safeMethodsSet: ps,
        requestBodyHeader: hs,
        subresourceSet: ms,
        DOMException: fs
      } = q(756);
      const { kHeadersList: gs } = q(7621);
      const Es = q(2361);
      const { Readable: Cs, pipeline: bs } = q(2781);
      const {
        addAbortListener: ys,
        isErrored: Is,
        isReadable: ws,
        nodeMajor: Bs,
        nodeMinor: Qs
      } = q(9647);
      const { dataURLProcessor: vs, serializeAMimeType: Ss } = q(6932);
      const { TransformStream: _s } = q(5356);
      const { getGlobalDispatcher: Ts } = q(5683);
      const { webidl: ks } = q(3721);
      const { STATUS_CODES: Rs } = q(3685);
      const Ds = ['GET', 'HEAD'];
      let Ns;
      let Ls = globalThis.ReadableStream;
      class Fetch extends Es {
        constructor(a) {
          super();
          this.dispatcher = a;
          this.connection = null;
          this.dump = false;
          this.state = 'ongoing';
          this.setMaxListeners(21);
        }
        terminate(a) {
          if (this.state !== 'ongoing') {
            return;
          }
          this.state = 'terminated';
          this.connection?.destroy(a);
          this.emit('terminated', a);
        }
        abort(a) {
          if (this.state !== 'ongoing') {
            return;
          }
          this.state = 'aborted';
          if (!a) {
            a = new fs('The operation was aborted.', 'AbortError');
          }
          this.serializedAbortReason = a;
          this.connection?.destroy(a);
          this.emit('terminated', a);
        }
      }
      function fetch(a, C = {}) {
        ks.argumentLengthCheck(arguments, 1, { header: 'globalThis.fetch' });
        const q = Yr();
        let ae;
        try {
          ae = new Ar(a, C);
        } catch (a) {
          q.reject(a);
          return q.promise;
        }
        const Ue = ae[ns];
        if (ae.signal.aborted) {
          abortFetch(q, Ue, null, ae.signal.reason);
          return q.promise;
        }
        const lt = Ue.client.globalObject;
        if (lt?.constructor?.name === 'ServiceWorkerGlobalScope') {
          Ue.serviceWorkers = 'none';
        }
        let Pt = null;
        const Wt = null;
        let Er = false;
        let Ir = null;
        ys(ae.signal, () => {
          Er = true;
          cs(Ir != null);
          Ir.abort(ae.signal.reason);
          abortFetch(q, Ue, Pt, ae.signal.reason);
        });
        const handleFetchDone = (a) => finalizeAndReportTiming(a, 'fetch');
        const processResponse = (a) => {
          if (Er) {
            return Promise.resolve();
          }
          if (a.aborted) {
            abortFetch(q, Ue, Pt, Ir.serializedAbortReason);
            return Promise.resolve();
          }
          if (a.type === 'error') {
            q.reject(
              Object.assign(new TypeError('fetch failed'), { cause: a.error })
            );
            return Promise.resolve();
          }
          Pt = new re();
          Pt[ns] = a;
          Pt[ls] = Wt;
          Pt[os][gs] = a.headersList;
          Pt[os][as] = 'immutable';
          Pt[os][ls] = Wt;
          q.resolve(Pt);
        };
        Ir = fetching({
          request: Ue,
          processResponseEndOfBody: handleFetchDone,
          processResponse: processResponse,
          dispatcher: C.dispatcher ?? Ts()
        });
        return q.promise;
      }
      function finalizeAndReportTiming(a, C = 'other') {
        if (a.type === 'error' && a.aborted) {
          return;
        }
        if (!a.urlList?.length) {
          return;
        }
        const q = a.urlList[0];
        let re = a.timingInfo;
        let ae = a.cacheState;
        if (!rs(q)) {
          return;
        }
        if (re === null) {
          return;
        }
        if (!a.timingAllowPassed) {
          re = xr({ startTime: re.startTime });
          ae = '';
        }
        re.endTime = Wr();
        a.timingInfo = re;
        markResourceTiming(re, q, C, globalThis, ae);
      }
      function markResourceTiming(a, C, q, re, ae) {
        if (Bs > 18 || (Bs === 18 && Qs >= 2)) {
          performance.markResourceTiming(a, C.href, q, re, ae);
        }
      }
      function abortFetch(a, C, q, re) {
        if (!re) {
          re = new fs('The operation was aborted.', 'AbortError');
        }
        a.reject(re);
        if (C.body != null && ws(C.body?.stream)) {
          C.body.stream.cancel(re).catch((a) => {
            if (a.code === 'ERR_INVALID_STATE') {
              return;
            }
            throw a;
          });
        }
        if (q == null) {
          return;
        }
        const ae = q[ns];
        if (ae.body != null && ws(ae.body?.stream)) {
          ae.body.stream.cancel(re).catch((a) => {
            if (a.code === 'ERR_INVALID_STATE') {
              return;
            }
            throw a;
          });
        }
      }
      function fetching({
        request: a,
        processRequestBodyChunkLength: C,
        processRequestEndOfBody: q,
        processResponse: re,
        processResponseEndOfBody: ae,
        processResponseConsumeBody: Ue,
        useParallelQueue: lt = false,
        dispatcher: Pt
      }) {
        let Wt = null;
        let Ar = false;
        if (a.client != null) {
          Wt = a.client.globalObject;
          Ar = a.client.crossOriginIsolatedCapability;
        }
        const Er = Wr(Ar);
        const Ir = xr({ startTime: Er });
        const Br = {
          controller: new Fetch(Pt),
          request: a,
          timingInfo: Ir,
          processRequestBodyChunkLength: C,
          processRequestEndOfBody: q,
          processResponse: re,
          processResponseConsumeBody: Ue,
          processResponseEndOfBody: ae,
          taskDestination: Wt,
          crossOriginIsolatedCapability: Ar
        };
        cs(!a.body || a.body.stream);
        if (a.window === 'client') {
          a.window =
            a.client?.globalObject?.constructor?.name === 'Window'
              ? a.client
              : 'no-window';
        }
        if (a.origin === 'client') {
          a.origin = a.client?.origin;
        }
        if (a.policyContainer === 'client') {
          if (a.client != null) {
            a.policyContainer = kr(a.client.policyContainer);
          } else {
            a.policyContainer = Qr();
          }
        }
        if (!a.headersList.contains('accept')) {
          const C = '*/*';
          a.headersList.append('accept', C);
        }
        if (!a.headersList.contains('accept-language')) {
          a.headersList.append('accept-language', '*');
        }
        if (a.priority === null) {
        }
        if (ms.has(a.destination)) {
        }
        mainFetch(Br).catch((a) => {
          Br.controller.terminate(a);
        });
        return Br.controller;
      }
      async function mainFetch(a, C = false) {
        const q = a.request;
        let re = null;
        if (q.localURLsOnly && !ts(Mr(q))) {
          re = ae('local URLs only');
        }
        Or(q);
        if (Dr(q) === 'blocked') {
          re = ae('bad port');
        }
        if (q.referrerPolicy === '') {
          q.referrerPolicy = q.policyContainer.referrerPolicy;
        }
        if (q.referrer !== 'no-referrer') {
          q.referrer = Vr(q);
        }
        if (re === null) {
          re = await (async () => {
            const C = Mr(q);
            if (
              (Jr(C, q.url) && q.responseTainting === 'basic') ||
              C.protocol === 'data:' ||
              q.mode === 'navigate' ||
              q.mode === 'websocket'
            ) {
              q.responseTainting = 'basic';
              return await schemeFetch(a);
            }
            if (q.mode === 'same-origin') {
              return ae('request mode cannot be "same-origin"');
            }
            if (q.mode === 'no-cors') {
              if (q.redirect !== 'follow') {
                return ae(
                  'redirect mode cannot be "follow" for "no-cors" request'
                );
              }
              q.responseTainting = 'opaque';
              return await schemeFetch(a);
            }
            if (!rs(Mr(q))) {
              return ae('URL scheme must be a HTTP(S) scheme');
            }
            q.responseTainting = 'cors';
            return await httpFetch(a);
          })();
        }
        if (C) {
          return re;
        }
        if (re.status !== 0 && !re.internalResponse) {
          if (q.responseTainting === 'cors') {
          }
          if (q.responseTainting === 'basic') {
            re = lt(re, 'basic');
          } else if (q.responseTainting === 'cors') {
            re = lt(re, 'cors');
          } else if (q.responseTainting === 'opaque') {
            re = lt(re, 'opaque');
          } else {
            cs(false);
          }
        }
        let Ue = re.status === 0 ? re : re.internalResponse;
        if (Ue.urlList.length === 0) {
          Ue.urlList.push(...q.urlList);
        }
        if (!q.timingAllowFailed) {
          re.timingAllowPassed = true;
        }
        if (
          re.type === 'opaque' &&
          Ue.status === 206 &&
          Ue.rangeRequested &&
          !q.headers.contains('range')
        ) {
          re = Ue = ae();
        }
        if (
          re.status !== 0 &&
          (q.method === 'HEAD' ||
            q.method === 'CONNECT' ||
            us.includes(Ue.status))
        ) {
          Ue.body = null;
          a.controller.dump = true;
        }
        if (q.integrity) {
          const processBodyError = (C) => fetchFinale(a, ae(C));
          if (q.responseTainting === 'opaque' || re.body == null) {
            processBodyError(re.error);
            return;
          }
          const processBody = (C) => {
            if (!Br(C, q.integrity)) {
              processBodyError('integrity mismatch');
              return;
            }
            re.body = As(C)[0];
            fetchFinale(a, re);
          };
          await Xr(re.body, processBody, processBodyError);
        } else {
          fetchFinale(a, re);
        }
      }
      function schemeFetch(a) {
        if (zr(a) && a.request.redirectCount === 0) {
          return Promise.resolve(Ue(a));
        }
        const { request: C } = a;
        const { protocol: re } = Mr(C);
        switch (re) {
          case 'about:': {
            return Promise.resolve(ae('about scheme is not supported'));
          }
          case 'blob:': {
            if (!Ns) {
              Ns = q(4300).resolveObjectURL;
            }
            const a = Mr(C);
            if (a.search.length !== 0) {
              return Promise.resolve(
                ae('NetworkError when attempting to fetch resource.')
              );
            }
            const re = Ns(a.toString());
            if (C.method !== 'GET' || !jr(re)) {
              return Promise.resolve(ae('invalid method'));
            }
            const Ue = As(re);
            const lt = Ue[0];
            const Wt = es(`${lt.length}`);
            const Ar = Ue[1] ?? '';
            const Er = Pt({
              statusText: 'OK',
              headersList: [
                ['content-length', { name: 'Content-Length', value: Wt }],
                ['content-type', { name: 'Content-Type', value: Ar }]
              ]
            });
            Er.body = lt;
            return Promise.resolve(Er);
          }
          case 'data:': {
            const a = Mr(C);
            const q = vs(a);
            if (q === 'failure') {
              return Promise.resolve(ae('failed to fetch the data URL'));
            }
            const re = Ss(q.mimeType);
            return Promise.resolve(
              Pt({
                statusText: 'OK',
                headersList: [
                  ['content-type', { name: 'Content-Type', value: re }]
                ],
                body: As(q.body)[0]
              })
            );
          }
          case 'file:': {
            return Promise.resolve(ae('not implemented... yet...'));
          }
          case 'http:':
          case 'https:': {
            return httpFetch(a).catch((a) => ae(a));
          }
          default: {
            return Promise.resolve(ae('unknown scheme'));
          }
        }
      }
      function finalizeResponse(a, C) {
        a.request.done = true;
        if (a.processResponseDone != null) {
          queueMicrotask(() => a.processResponseDone(C));
        }
      }
      function fetchFinale(a, C) {
        if (C.type === 'error') {
          C.urlList = [a.request.urlList[0]];
          C.timingInfo = xr({ startTime: a.timingInfo.startTime });
        }
        const processResponseEndOfBody = () => {
          a.request.done = true;
          if (a.processResponseEndOfBody != null) {
            queueMicrotask(() => a.processResponseEndOfBody(C));
          }
        };
        if (a.processResponse != null) {
          queueMicrotask(() => a.processResponse(C));
        }
        if (C.body == null) {
          processResponseEndOfBody();
        } else {
          const identityTransformAlgorithm = (a, C) => {
            C.enqueue(a);
          };
          const a = new _s(
            {
              start() {},
              transform: identityTransformAlgorithm,
              flush: processResponseEndOfBody
            },
            {
              size() {
                return 1;
              }
            },
            {
              size() {
                return 1;
              }
            }
          );
          C.body = { stream: C.body.stream.pipeThrough(a) };
        }
        if (a.processResponseConsumeBody != null) {
          const processBody = (q) => a.processResponseConsumeBody(C, q);
          const processBodyError = (q) => a.processResponseConsumeBody(C, q);
          if (C.body == null) {
            queueMicrotask(() => processBody(null));
          } else {
            return Xr(C.body, processBody, processBodyError);
          }
          return Promise.resolve();
        }
      }
      async function httpFetch(a) {
        const C = a.request;
        let q = null;
        let re = null;
        const Ue = a.timingInfo;
        if (C.serviceWorkers === 'all') {
        }
        if (q === null) {
          if (C.redirect === 'follow') {
            C.serviceWorkers = 'none';
          }
          re = q = await httpNetworkOrCacheFetch(a);
          if (C.responseTainting === 'cors' && Gr(C, q) === 'failure') {
            return ae('cors failure');
          }
          if (Nr(C, q) === 'failure') {
            C.timingAllowFailed = true;
          }
        }
        if (
          (C.responseTainting === 'opaque' || q.type === 'opaque') &&
          Hr(C.origin, C.client, C.destination, re) === 'blocked'
        ) {
          return ae('blocked');
        }
        if (ds.has(re.status)) {
          if (C.redirect !== 'manual') {
            a.controller.connection.destroy();
          }
          if (C.redirect === 'error') {
            q = ae('unexpected redirect');
          } else if (C.redirect === 'manual') {
            q = re;
          } else if (C.redirect === 'follow') {
            q = await httpRedirectFetch(a, q);
          } else {
            cs(false);
          }
        }
        q.timingInfo = Ue;
        return q;
      }
      function httpRedirectFetch(a, C) {
        const q = a.request;
        const re = C.internalResponse ? C.internalResponse : C;
        let Ue;
        try {
          Ue = Fr(re, Mr(q).hash);
          if (Ue == null) {
            return C;
          }
        } catch (a) {
          return Promise.resolve(ae(a));
        }
        if (!rs(Ue)) {
          return Promise.resolve(ae('URL scheme must be a HTTP(S) scheme'));
        }
        if (q.redirectCount === 20) {
          return Promise.resolve(ae('redirect count exceeded'));
        }
        q.redirectCount += 1;
        if (q.mode === 'cors' && (Ue.username || Ue.password) && !Jr(q, Ue)) {
          return Promise.resolve(
            ae('cross origin not allowed for request mode "cors"')
          );
        }
        if (q.responseTainting === 'cors' && (Ue.username || Ue.password)) {
          return Promise.resolve(
            ae('URL cannot contain credentials for request mode "cors"')
          );
        }
        if (re.status !== 303 && q.body != null && q.body.source == null) {
          return Promise.resolve(ae());
        }
        if (
          ([301, 302].includes(re.status) && q.method === 'POST') ||
          (re.status === 303 && !Ds.includes(q.method))
        ) {
          q.method = 'GET';
          q.body = null;
          for (const a of hs) {
            q.headersList.delete(a);
          }
        }
        if (!Jr(Mr(q), Ue)) {
          q.headersList.delete('authorization');
          q.headersList.delete('proxy-authorization', true);
          q.headersList.delete('cookie');
          q.headersList.delete('host');
        }
        if (q.body != null) {
          cs(q.body.source != null);
          q.body = As(q.body.source)[0];
        }
        const lt = a.timingInfo;
        lt.redirectEndTime = lt.postRedirectStartTime = Wr(
          a.crossOriginIsolatedCapability
        );
        if (lt.redirectStartTime === 0) {
          lt.redirectStartTime = lt.startTime;
        }
        q.urlList.push(Ue);
        Pr(q, re);
        return mainFetch(a, true);
      }
      async function httpNetworkOrCacheFetch(a, C = false, q = false) {
        const re = a.request;
        let lt = null;
        let Pt = null;
        let Wt = null;
        const Ar = null;
        const Ir = false;
        if (re.window === 'no-window' && re.redirect === 'error') {
          lt = a;
          Pt = re;
        } else {
          Pt = Er(re);
          lt = { ...a };
          lt.request = Pt;
        }
        const Br =
          re.credentials === 'include' ||
          (re.credentials === 'same-origin' && re.responseTainting === 'basic');
        const Qr = Pt.body ? Pt.body.length : null;
        let kr = null;
        if (Pt.body == null && ['POST', 'PUT'].includes(Pt.method)) {
          kr = '0';
        }
        if (Qr != null) {
          kr = es(`${Qr}`);
        }
        if (kr != null) {
          Pt.headersList.append('content-length', kr);
        }
        if (Qr != null && Pt.keepalive) {
        }
        if (Pt.referrer instanceof URL) {
          Pt.headersList.append('referer', es(Pt.referrer.href));
        }
        Lr(Pt);
        Ur(Pt);
        if (!Pt.headersList.contains('user-agent')) {
          Pt.headersList.append(
            'user-agent',
            typeof esbuildDetection === 'undefined' ? 'undici' : 'node'
          );
        }
        if (
          Pt.cache === 'default' &&
          (Pt.headersList.contains('if-modified-since') ||
            Pt.headersList.contains('if-none-match') ||
            Pt.headersList.contains('if-unmodified-since') ||
            Pt.headersList.contains('if-match') ||
            Pt.headersList.contains('if-range'))
        ) {
          Pt.cache = 'no-store';
        }
        if (
          Pt.cache === 'no-cache' &&
          !Pt.preventNoCacheCacheControlHeaderModification &&
          !Pt.headersList.contains('cache-control')
        ) {
          Pt.headersList.append('cache-control', 'max-age=0');
        }
        if (Pt.cache === 'no-store' || Pt.cache === 'reload') {
          if (!Pt.headersList.contains('pragma')) {
            Pt.headersList.append('pragma', 'no-cache');
          }
          if (!Pt.headersList.contains('cache-control')) {
            Pt.headersList.append('cache-control', 'no-cache');
          }
        }
        if (Pt.headersList.contains('range')) {
          Pt.headersList.append('accept-encoding', 'identity');
        }
        if (!Pt.headersList.contains('accept-encoding')) {
          if (ss(Mr(Pt))) {
            Pt.headersList.append('accept-encoding', 'br, gzip, deflate');
          } else {
            Pt.headersList.append('accept-encoding', 'gzip, deflate');
          }
        }
        Pt.headersList.delete('host');
        if (Br) {
        }
        if (Ar == null) {
          Pt.cache = 'no-store';
        }
        if (Pt.mode !== 'no-store' && Pt.mode !== 'reload') {
        }
        if (Wt == null) {
          if (Pt.mode === 'only-if-cached') {
            return ae('only if cached');
          }
          const a = await httpNetworkFetch(lt, Br, q);
          if (!ps.has(Pt.method) && a.status >= 200 && a.status <= 399) {
          }
          if (Ir && a.status === 304) {
          }
          if (Wt == null) {
            Wt = a;
          }
        }
        Wt.urlList = [...Pt.urlList];
        if (Pt.headersList.contains('range')) {
          Wt.rangeRequested = true;
        }
        Wt.requestIncludesCredentials = Br;
        if (Wt.status === 407) {
          if (re.window === 'no-window') {
            return ae();
          }
          if (zr(a)) {
            return Ue(a);
          }
          return ae('proxy authentication required');
        }
        if (
          Wt.status === 421 &&
          !q &&
          (re.body == null || re.body.source != null)
        ) {
          if (zr(a)) {
            return Ue(a);
          }
          a.controller.connection.destroy();
          Wt = await httpNetworkOrCacheFetch(a, C, true);
        }
        if (C) {
        }
        return Wt;
      }
      async function httpNetworkFetch(a, C = false, re = false) {
        cs(!a.controller.connection || a.controller.connection.destroyed);
        a.controller.connection = {
          abort: null,
          destroyed: false,
          destroy(a) {
            if (!this.destroyed) {
              this.destroyed = true;
              this.abort?.(
                a ?? new fs('The operation was aborted.', 'AbortError')
              );
            }
          }
        };
        const lt = a.request;
        let Ar = null;
        const Er = a.timingInfo;
        const Br = null;
        if (Br == null) {
          lt.cache = 'no-store';
        }
        const Qr = re ? 'yes' : 'no';
        if (lt.mode === 'websocket') {
        } else {
        }
        let kr = null;
        if (lt.body == null && a.processRequestEndOfBody) {
          queueMicrotask(() => a.processRequestEndOfBody());
        } else if (lt.body != null) {
          const processBodyChunk = async function* (C) {
            if (zr(a)) {
              return;
            }
            yield C;
            a.processRequestBodyChunkLength?.(C.byteLength);
          };
          const processEndOfBody = () => {
            if (zr(a)) {
              return;
            }
            if (a.processRequestEndOfBody) {
              a.processRequestEndOfBody();
            }
          };
          const processBodyError = (C) => {
            if (zr(a)) {
              return;
            }
            if (C.name === 'AbortError') {
              a.controller.abort();
            } else {
              a.controller.terminate(C);
            }
          };
          kr = (async function* () {
            try {
              for await (const a of lt.body.stream) {
                yield* processBodyChunk(a);
              }
              processEndOfBody();
            } catch (a) {
              processBodyError(a);
            }
          })();
        }
        try {
          const {
            body: C,
            status: q,
            statusText: re,
            headersList: ae,
            socket: Ue
          } = await dispatch({ body: kr });
          if (Ue) {
            Ar = Pt({ status: q, statusText: re, headersList: ae, socket: Ue });
          } else {
            const Ue = C[Symbol.asyncIterator]();
            a.controller.next = () => Ue.next();
            Ar = Pt({ status: q, statusText: re, headersList: ae });
          }
        } catch (C) {
          if (C.name === 'AbortError') {
            a.controller.connection.destroy();
            return Ue(a, C);
          }
          return ae(C);
        }
        const pullAlgorithm = () => {
          a.controller.resume();
        };
        const cancelAlgorithm = (C) => {
          a.controller.abort(C);
        };
        if (!Ls) {
          Ls = q(5356).ReadableStream;
        }
        const Dr = new Ls(
          {
            async start(C) {
              a.controller.controller = C;
            },
            async pull(a) {
              await pullAlgorithm(a);
            },
            async cancel(a) {
              await cancelAlgorithm(a);
            }
          },
          {
            highWaterMark: 0,
            size() {
              return 1;
            }
          }
        );
        Ar.body = { stream: Dr };
        a.controller.on('terminated', onAborted);
        a.controller.resume = async () => {
          while (true) {
            let C;
            let q;
            try {
              const { done: q, value: re } = await a.controller.next();
              if ($r(a)) {
                break;
              }
              C = q ? undefined : re;
            } catch (re) {
              if (a.controller.ended && !Er.encodedBodySize) {
                C = undefined;
              } else {
                C = re;
                q = true;
              }
            }
            if (C === undefined) {
              Zr(a.controller.controller);
              finalizeResponse(a, Ar);
              return;
            }
            Er.decodedBodySize += C?.byteLength ?? 0;
            if (q) {
              a.controller.terminate(C);
              return;
            }
            a.controller.controller.enqueue(new Uint8Array(C));
            if (Is(Dr)) {
              a.controller.terminate();
              return;
            }
            if (!a.controller.controller.desiredSize) {
              return;
            }
          }
        };
        function onAborted(C) {
          if ($r(a)) {
            Ar.aborted = true;
            if (ws(Dr)) {
              a.controller.controller.error(a.controller.serializedAbortReason);
            }
          } else {
            if (ws(Dr)) {
              a.controller.controller.error(
                new TypeError('terminated', { cause: Kr(C) ? C : undefined })
              );
            }
          }
          a.controller.connection.destroy();
        }
        return Ar;
        async function dispatch({ body: C }) {
          const q = Mr(lt);
          const re = a.controller.dispatcher;
          return new Promise((ae, Ue) =>
            re.dispatch(
              {
                path: q.pathname + q.search,
                origin: q.origin,
                method: lt.method,
                body: a.controller.dispatcher.isMockActive
                  ? lt.body && (lt.body.source || lt.body.stream)
                  : C,
                headers: lt.headersList.entries,
                maxRedirections: 0,
                upgrade: lt.mode === 'websocket' ? 'websocket' : undefined
              },
              {
                body: null,
                abort: null,
                onConnect(C) {
                  const { connection: q } = a.controller;
                  if (q.destroyed) {
                    C(new fs('The operation was aborted.', 'AbortError'));
                  } else {
                    a.controller.on('terminated', C);
                    this.abort = q.abort = C;
                  }
                },
                onHeaders(a, C, q, re) {
                  if (a < 200) {
                    return;
                  }
                  let Ue = [];
                  let Pt = '';
                  const Ar = new Wt();
                  if (Array.isArray(C)) {
                    for (let a = 0; a < C.length; a += 2) {
                      const q = C[a + 0].toString('latin1');
                      const re = C[a + 1].toString('latin1');
                      if (q.toLowerCase() === 'content-encoding') {
                        Ue = re
                          .toLowerCase()
                          .split(',')
                          .map((a) => a.trim());
                      } else if (q.toLowerCase() === 'location') {
                        Pt = re;
                      }
                      Ar[gs].append(q, re);
                    }
                  } else {
                    const a = Object.keys(C);
                    for (const q of a) {
                      const a = C[q];
                      if (q.toLowerCase() === 'content-encoding') {
                        Ue = a
                          .toLowerCase()
                          .split(',')
                          .map((a) => a.trim())
                          .reverse();
                      } else if (q.toLowerCase() === 'location') {
                        Pt = a;
                      }
                      Ar[gs].append(q, a);
                    }
                  }
                  this.body = new Cs({ read: q });
                  const Er = [];
                  const Br = lt.redirect === 'follow' && Pt && ds.has(a);
                  if (
                    lt.method !== 'HEAD' &&
                    lt.method !== 'CONNECT' &&
                    !us.includes(a) &&
                    !Br
                  ) {
                    for (const a of Ue) {
                      if (a === 'x-gzip' || a === 'gzip') {
                        Er.push(
                          Ir.createGunzip({
                            flush: Ir.constants.Z_SYNC_FLUSH,
                            finishFlush: Ir.constants.Z_SYNC_FLUSH
                          })
                        );
                      } else if (a === 'deflate') {
                        Er.push(Ir.createInflate());
                      } else if (a === 'br') {
                        Er.push(Ir.createBrotliDecompress());
                      } else {
                        Er.length = 0;
                        break;
                      }
                    }
                  }
                  ae({
                    status: a,
                    statusText: re,
                    headersList: Ar[gs],
                    body: Er.length
                      ? bs(this.body, ...Er, () => {})
                      : this.body.on('error', () => {})
                  });
                  return true;
                },
                onData(C) {
                  if (a.controller.dump) {
                    return;
                  }
                  const q = C;
                  Er.encodedBodySize += q.byteLength;
                  return this.body.push(q);
                },
                onComplete() {
                  if (this.abort) {
                    a.controller.off('terminated', this.abort);
                  }
                  a.controller.ended = true;
                  this.body.push(null);
                },
                onError(C) {
                  if (this.abort) {
                    a.controller.off('terminated', this.abort);
                  }
                  this.body?.destroy(C);
                  a.controller.terminate(C);
                  Ue(C);
                },
                onUpgrade(a, C, q) {
                  if (a !== 101) {
                    return;
                  }
                  const re = new Wt();
                  for (let a = 0; a < C.length; a += 2) {
                    const q = C[a + 0].toString('latin1');
                    const ae = C[a + 1].toString('latin1');
                    re[gs].append(q, ae);
                  }
                  ae({
                    status: a,
                    statusText: Rs[a],
                    headersList: re[gs],
                    socket: q
                  });
                  return true;
                }
              }
            )
          );
        }
      }
      a.exports = {
        fetch: fetch,
        Fetch: Fetch,
        fetching: fetching,
        finalizeAndReportTiming: finalizeAndReportTiming
      };
    },
    9787: (a, C, q) => {
      'use strict';
      const { extractBody: re, mixinBody: ae, cloneBody: Ue } = q(6477);
      const { Headers: lt, fill: Pt, HeadersList: Wt } = q(6909);
      const { FinalizationRegistry: Ar } = q(9374)();
      const Er = q(9647);
      const {
        isValidHTTPToken: Ir,
        sameOrigin: Br,
        normalizeMethod: Qr,
        makePolicyContainer: kr,
        normalizeMethodRecord: Dr
      } = q(6860);
      const {
        forbiddenMethodsSet: Nr,
        corsSafeListedMethodsSet: Lr,
        referrerPolicy: Fr,
        requestRedirect: Mr,
        requestMode: Pr,
        requestCredentials: Or,
        requestCache: xr,
        requestDuplex: Ur
      } = q(756);
      const { kEnumerableProperty: Gr } = Er;
      const {
        kHeaders: Hr,
        kSignal: Vr,
        kState: Wr,
        kGuard: Yr,
        kRealm: jr
      } = q(3386);
      const { webidl: Jr } = q(3721);
      const { getGlobalOrigin: zr } = q(128);
      const { URLSerializer: $r } = q(6932);
      const { kHeadersList: Kr, kConstruct: Xr } = q(7621);
      const Zr = q(9491);
      const {
        getMaxListeners: es,
        setMaxListeners: ts,
        getEventListeners: rs,
        defaultMaxListeners: ss
      } = q(2361);
      let ns = globalThis.TransformStream;
      const os = Symbol('abortController');
      const as = new Ar(({ signal: a, abort: C }) => {
        a.removeEventListener('abort', C);
      });
      class Request {
        constructor(a, C = {}) {
          if (a === Xr) {
            return;
          }
          Jr.argumentLengthCheck(arguments, 1, {
            header: 'Request constructor'
          });
          a = Jr.converters.RequestInfo(a);
          C = Jr.converters.RequestInit(C);
          this[jr] = {
            settingsObject: {
              baseUrl: zr(),
              get origin() {
                return this.baseUrl?.origin;
              },
              policyContainer: kr()
            }
          };
          let ae = null;
          let Ue = null;
          const Ar = this[jr].settingsObject.baseUrl;
          let Fr = null;
          if (typeof a === 'string') {
            let C;
            try {
              C = new URL(a, Ar);
            } catch (C) {
              throw new TypeError('Failed to parse URL from ' + a, {
                cause: C
              });
            }
            if (C.username || C.password) {
              throw new TypeError(
                'Request cannot be constructed from a URL that includes credentials: ' +
                  a
              );
            }
            ae = makeRequest({ urlList: [C] });
            Ue = 'cors';
          } else {
            Zr(a instanceof Request);
            ae = a[Wr];
            Fr = a[Vr];
          }
          const Mr = this[jr].settingsObject.origin;
          let Pr = 'client';
          if (
            ae.window?.constructor?.name === 'EnvironmentSettingsObject' &&
            Br(ae.window, Mr)
          ) {
            Pr = ae.window;
          }
          if (C.window != null) {
            throw new TypeError(`'window' option '${Pr}' must be null`);
          }
          if ('window' in C) {
            Pr = 'no-window';
          }
          ae = makeRequest({
            method: ae.method,
            headersList: ae.headersList,
            unsafeRequest: ae.unsafeRequest,
            client: this[jr].settingsObject,
            window: Pr,
            priority: ae.priority,
            origin: ae.origin,
            referrer: ae.referrer,
            referrerPolicy: ae.referrerPolicy,
            mode: ae.mode,
            credentials: ae.credentials,
            cache: ae.cache,
            redirect: ae.redirect,
            integrity: ae.integrity,
            keepalive: ae.keepalive,
            reloadNavigation: ae.reloadNavigation,
            historyNavigation: ae.historyNavigation,
            urlList: [...ae.urlList]
          });
          const Or = Object.keys(C).length !== 0;
          if (Or) {
            if (ae.mode === 'navigate') {
              ae.mode = 'same-origin';
            }
            ae.reloadNavigation = false;
            ae.historyNavigation = false;
            ae.origin = 'client';
            ae.referrer = 'client';
            ae.referrerPolicy = '';
            ae.url = ae.urlList[ae.urlList.length - 1];
            ae.urlList = [ae.url];
          }
          if (C.referrer !== undefined) {
            const a = C.referrer;
            if (a === '') {
              ae.referrer = 'no-referrer';
            } else {
              let C;
              try {
                C = new URL(a, Ar);
              } catch (C) {
                throw new TypeError(`Referrer "${a}" is not a valid URL.`, {
                  cause: C
                });
              }
              if (
                (C.protocol === 'about:' && C.hostname === 'client') ||
                (Mr && !Br(C, this[jr].settingsObject.baseUrl))
              ) {
                ae.referrer = 'client';
              } else {
                ae.referrer = C;
              }
            }
          }
          if (C.referrerPolicy !== undefined) {
            ae.referrerPolicy = C.referrerPolicy;
          }
          let xr;
          if (C.mode !== undefined) {
            xr = C.mode;
          } else {
            xr = Ue;
          }
          if (xr === 'navigate') {
            throw Jr.errors.exception({
              header: 'Request constructor',
              message: 'invalid request mode navigate.'
            });
          }
          if (xr != null) {
            ae.mode = xr;
          }
          if (C.credentials !== undefined) {
            ae.credentials = C.credentials;
          }
          if (C.cache !== undefined) {
            ae.cache = C.cache;
          }
          if (ae.cache === 'only-if-cached' && ae.mode !== 'same-origin') {
            throw new TypeError(
              "'only-if-cached' can be set only with 'same-origin' mode"
            );
          }
          if (C.redirect !== undefined) {
            ae.redirect = C.redirect;
          }
          if (C.integrity != null) {
            ae.integrity = String(C.integrity);
          }
          if (C.keepalive !== undefined) {
            ae.keepalive = Boolean(C.keepalive);
          }
          if (C.method !== undefined) {
            let a = C.method;
            if (!Ir(a)) {
              throw new TypeError(`'${a}' is not a valid HTTP method.`);
            }
            if (Nr.has(a.toUpperCase())) {
              throw new TypeError(`'${a}' HTTP method is unsupported.`);
            }
            a = Dr[a] ?? Qr(a);
            ae.method = a;
          }
          if (C.signal !== undefined) {
            Fr = C.signal;
          }
          this[Wr] = ae;
          const Ur = new AbortController();
          this[Vr] = Ur.signal;
          this[Vr][jr] = this[jr];
          if (Fr != null) {
            if (
              !Fr ||
              typeof Fr.aborted !== 'boolean' ||
              typeof Fr.addEventListener !== 'function'
            ) {
              throw new TypeError(
                "Failed to construct 'Request': member signal is not of type AbortSignal."
              );
            }
            if (Fr.aborted) {
              Ur.abort(Fr.reason);
            } else {
              this[os] = Ur;
              const a = new WeakRef(Ur);
              const abort = function () {
                const C = a.deref();
                if (C !== undefined) {
                  C.abort(this.reason);
                }
              };
              try {
                if (typeof es === 'function' && es(Fr) === ss) {
                  ts(100, Fr);
                } else if (rs(Fr, 'abort').length >= ss) {
                  ts(100, Fr);
                }
              } catch {}
              Er.addAbortListener(Fr, abort);
              as.register(Ur, { signal: Fr, abort: abort });
            }
          }
          this[Hr] = new lt(Xr);
          this[Hr][Kr] = ae.headersList;
          this[Hr][Yr] = 'request';
          this[Hr][jr] = this[jr];
          if (xr === 'no-cors') {
            if (!Lr.has(ae.method)) {
              throw new TypeError(
                `'${ae.method} is unsupported in no-cors mode.`
              );
            }
            this[Hr][Yr] = 'request-no-cors';
          }
          if (Or) {
            const a = this[Hr][Kr];
            const q = C.headers !== undefined ? C.headers : new Wt(a);
            a.clear();
            if (q instanceof Wt) {
              for (const [C, re] of q) {
                a.append(C, re);
              }
              a.cookies = q.cookies;
            } else {
              Pt(this[Hr], q);
            }
          }
          const Gr = a instanceof Request ? a[Wr].body : null;
          if (
            (C.body != null || Gr != null) &&
            (ae.method === 'GET' || ae.method === 'HEAD')
          ) {
            throw new TypeError(
              'Request with GET/HEAD method cannot have body.'
            );
          }
          let $r = null;
          if (C.body != null) {
            const [a, q] = re(C.body, ae.keepalive);
            $r = a;
            if (q && !this[Hr][Kr].contains('content-type')) {
              this[Hr].append('content-type', q);
            }
          }
          const ls = $r ?? Gr;
          if (ls != null && ls.source == null) {
            if ($r != null && C.duplex == null) {
              throw new TypeError(
                'RequestInit: duplex option is required when sending a body.'
              );
            }
            if (ae.mode !== 'same-origin' && ae.mode !== 'cors') {
              throw new TypeError(
                'If request is made from ReadableStream, mode should be "same-origin" or "cors"'
              );
            }
            ae.useCORSPreflightFlag = true;
          }
          let cs = ls;
          if ($r == null && Gr != null) {
            if (Er.isDisturbed(Gr.stream) || Gr.stream.locked) {
              throw new TypeError(
                'Cannot construct a Request with a Request object that has already been used.'
              );
            }
            if (!ns) {
              ns = q(5356).TransformStream;
            }
            const a = new ns();
            Gr.stream.pipeThrough(a);
            cs = { source: Gr.source, length: Gr.length, stream: a.readable };
          }
          this[Wr].body = cs;
        }
        get method() {
          Jr.brandCheck(this, Request);
          return this[Wr].method;
        }
        get url() {
          Jr.brandCheck(this, Request);
          return $r(this[Wr].url);
        }
        get headers() {
          Jr.brandCheck(this, Request);
          return this[Hr];
        }
        get destination() {
          Jr.brandCheck(this, Request);
          return this[Wr].destination;
        }
        get referrer() {
          Jr.brandCheck(this, Request);
          if (this[Wr].referrer === 'no-referrer') {
            return '';
          }
          if (this[Wr].referrer === 'client') {
            return 'about:client';
          }
          return this[Wr].referrer.toString();
        }
        get referrerPolicy() {
          Jr.brandCheck(this, Request);
          return this[Wr].referrerPolicy;
        }
        get mode() {
          Jr.brandCheck(this, Request);
          return this[Wr].mode;
        }
        get credentials() {
          return this[Wr].credentials;
        }
        get cache() {
          Jr.brandCheck(this, Request);
          return this[Wr].cache;
        }
        get redirect() {
          Jr.brandCheck(this, Request);
          return this[Wr].redirect;
        }
        get integrity() {
          Jr.brandCheck(this, Request);
          return this[Wr].integrity;
        }
        get keepalive() {
          Jr.brandCheck(this, Request);
          return this[Wr].keepalive;
        }
        get isReloadNavigation() {
          Jr.brandCheck(this, Request);
          return this[Wr].reloadNavigation;
        }
        get isHistoryNavigation() {
          Jr.brandCheck(this, Request);
          return this[Wr].historyNavigation;
        }
        get signal() {
          Jr.brandCheck(this, Request);
          return this[Vr];
        }
        get body() {
          Jr.brandCheck(this, Request);
          return this[Wr].body ? this[Wr].body.stream : null;
        }
        get bodyUsed() {
          Jr.brandCheck(this, Request);
          return !!this[Wr].body && Er.isDisturbed(this[Wr].body.stream);
        }
        get duplex() {
          Jr.brandCheck(this, Request);
          return 'half';
        }
        clone() {
          Jr.brandCheck(this, Request);
          if (this.bodyUsed || this.body?.locked) {
            throw new TypeError('unusable');
          }
          const a = cloneRequest(this[Wr]);
          const C = new Request(Xr);
          C[Wr] = a;
          C[jr] = this[jr];
          C[Hr] = new lt(Xr);
          C[Hr][Kr] = a.headersList;
          C[Hr][Yr] = this[Hr][Yr];
          C[Hr][jr] = this[Hr][jr];
          const q = new AbortController();
          if (this.signal.aborted) {
            q.abort(this.signal.reason);
          } else {
            Er.addAbortListener(this.signal, () => {
              q.abort(this.signal.reason);
            });
          }
          C[Vr] = q.signal;
          return C;
        }
      }
      ae(Request);
      function makeRequest(a) {
        const C = {
          method: 'GET',
          localURLsOnly: false,
          unsafeRequest: false,
          body: null,
          client: null,
          reservedClient: null,
          replacesClientId: '',
          window: 'client',
          keepalive: false,
          serviceWorkers: 'all',
          initiator: '',
          destination: '',
          priority: null,
          origin: 'client',
          policyContainer: 'client',
          referrer: 'client',
          referrerPolicy: '',
          mode: 'no-cors',
          useCORSPreflightFlag: false,
          credentials: 'same-origin',
          useCredentials: false,
          cache: 'default',
          redirect: 'follow',
          integrity: '',
          cryptoGraphicsNonceMetadata: '',
          parserMetadata: '',
          reloadNavigation: false,
          historyNavigation: false,
          userActivation: false,
          taintedOrigin: false,
          redirectCount: 0,
          responseTainting: 'basic',
          preventNoCacheCacheControlHeaderModification: false,
          done: false,
          timingAllowFailed: false,
          ...a,
          headersList: a.headersList ? new Wt(a.headersList) : new Wt()
        };
        C.url = C.urlList[0];
        return C;
      }
      function cloneRequest(a) {
        const C = makeRequest({ ...a, body: null });
        if (a.body != null) {
          C.body = Ue(a.body);
        }
        return C;
      }
      Object.defineProperties(Request.prototype, {
        method: Gr,
        url: Gr,
        headers: Gr,
        redirect: Gr,
        clone: Gr,
        signal: Gr,
        duplex: Gr,
        destination: Gr,
        body: Gr,
        bodyUsed: Gr,
        isHistoryNavigation: Gr,
        isReloadNavigation: Gr,
        keepalive: Gr,
        integrity: Gr,
        cache: Gr,
        credentials: Gr,
        attribute: Gr,
        referrerPolicy: Gr,
        referrer: Gr,
        mode: Gr,
        [Symbol.toStringTag]: { value: 'Request', configurable: true }
      });
      Jr.converters.Request = Jr.interfaceConverter(Request);
      Jr.converters.RequestInfo = function (a) {
        if (typeof a === 'string') {
          return Jr.converters.USVString(a);
        }
        if (a instanceof Request) {
          return Jr.converters.Request(a);
        }
        return Jr.converters.USVString(a);
      };
      Jr.converters.AbortSignal = Jr.interfaceConverter(AbortSignal);
      Jr.converters.RequestInit = Jr.dictionaryConverter([
        { key: 'method', converter: Jr.converters.ByteString },
        { key: 'headers', converter: Jr.converters.HeadersInit },
        {
          key: 'body',
          converter: Jr.nullableConverter(Jr.converters.BodyInit)
        },
        { key: 'referrer', converter: Jr.converters.USVString },
        {
          key: 'referrerPolicy',
          converter: Jr.converters.DOMString,
          allowedValues: Fr
        },
        { key: 'mode', converter: Jr.converters.DOMString, allowedValues: Pr },
        {
          key: 'credentials',
          converter: Jr.converters.DOMString,
          allowedValues: Or
        },
        { key: 'cache', converter: Jr.converters.DOMString, allowedValues: xr },
        {
          key: 'redirect',
          converter: Jr.converters.DOMString,
          allowedValues: Mr
        },
        { key: 'integrity', converter: Jr.converters.DOMString },
        { key: 'keepalive', converter: Jr.converters.boolean },
        {
          key: 'signal',
          converter: Jr.nullableConverter((a) =>
            Jr.converters.AbortSignal(a, { strict: false })
          )
        },
        { key: 'window', converter: Jr.converters.any },
        { key: 'duplex', converter: Jr.converters.DOMString, allowedValues: Ur }
      ]);
      a.exports = { Request: Request, makeRequest: makeRequest };
    },
    6913: (a, C, q) => {
      'use strict';
      const { Headers: re, HeadersList: ae, fill: Ue } = q(6909);
      const { extractBody: lt, cloneBody: Pt, mixinBody: Wt } = q(6477);
      const Ar = q(9647);
      const { kEnumerableProperty: Er } = Ar;
      const {
        isValidReasonPhrase: Ir,
        isCancelled: Br,
        isAborted: Qr,
        isBlobLike: kr,
        serializeJavascriptValueToJSONString: Dr,
        isErrorLike: Nr,
        isomorphicEncode: Lr
      } = q(6860);
      const {
        redirectStatusSet: Fr,
        nullBodyStatus: Mr,
        DOMException: Pr
      } = q(756);
      const { kState: Or, kHeaders: xr, kGuard: Ur, kRealm: Gr } = q(3386);
      const { webidl: Hr } = q(3721);
      const { FormData: Vr } = q(8076);
      const { getGlobalOrigin: Wr } = q(128);
      const { URLSerializer: Yr } = q(6932);
      const { kHeadersList: jr, kConstruct: Jr } = q(7621);
      const zr = q(9491);
      const { types: $r } = q(3837);
      const Kr = globalThis.ReadableStream || q(5356).ReadableStream;
      const Xr = new TextEncoder('utf-8');
      class Response {
        static error() {
          const a = { settingsObject: {} };
          const C = new Response();
          C[Or] = makeNetworkError();
          C[Gr] = a;
          C[xr][jr] = C[Or].headersList;
          C[xr][Ur] = 'immutable';
          C[xr][Gr] = a;
          return C;
        }
        static json(a, C = {}) {
          Hr.argumentLengthCheck(arguments, 1, { header: 'Response.json' });
          if (C !== null) {
            C = Hr.converters.ResponseInit(C);
          }
          const q = Xr.encode(Dr(a));
          const re = lt(q);
          const ae = { settingsObject: {} };
          const Ue = new Response();
          Ue[Gr] = ae;
          Ue[xr][Ur] = 'response';
          Ue[xr][Gr] = ae;
          initializeResponse(Ue, C, { body: re[0], type: 'application/json' });
          return Ue;
        }
        static redirect(a, C = 302) {
          const q = { settingsObject: {} };
          Hr.argumentLengthCheck(arguments, 1, { header: 'Response.redirect' });
          a = Hr.converters.USVString(a);
          C = Hr.converters['unsigned short'](C);
          let re;
          try {
            re = new URL(a, Wr());
          } catch (C) {
            throw Object.assign(
              new TypeError('Failed to parse URL from ' + a),
              { cause: C }
            );
          }
          if (!Fr.has(C)) {
            throw new RangeError('Invalid status code ' + C);
          }
          const ae = new Response();
          ae[Gr] = q;
          ae[xr][Ur] = 'immutable';
          ae[xr][Gr] = q;
          ae[Or].status = C;
          const Ue = Lr(Yr(re));
          ae[Or].headersList.append('location', Ue);
          return ae;
        }
        constructor(a = null, C = {}) {
          if (a !== null) {
            a = Hr.converters.BodyInit(a);
          }
          C = Hr.converters.ResponseInit(C);
          this[Gr] = { settingsObject: {} };
          this[Or] = makeResponse({});
          this[xr] = new re(Jr);
          this[xr][Ur] = 'response';
          this[xr][jr] = this[Or].headersList;
          this[xr][Gr] = this[Gr];
          let q = null;
          if (a != null) {
            const [C, re] = lt(a);
            q = { body: C, type: re };
          }
          initializeResponse(this, C, q);
        }
        get type() {
          Hr.brandCheck(this, Response);
          return this[Or].type;
        }
        get url() {
          Hr.brandCheck(this, Response);
          const a = this[Or].urlList;
          const C = a[a.length - 1] ?? null;
          if (C === null) {
            return '';
          }
          return Yr(C, true);
        }
        get redirected() {
          Hr.brandCheck(this, Response);
          return this[Or].urlList.length > 1;
        }
        get status() {
          Hr.brandCheck(this, Response);
          return this[Or].status;
        }
        get ok() {
          Hr.brandCheck(this, Response);
          return this[Or].status >= 200 && this[Or].status <= 299;
        }
        get statusText() {
          Hr.brandCheck(this, Response);
          return this[Or].statusText;
        }
        get headers() {
          Hr.brandCheck(this, Response);
          return this[xr];
        }
        get body() {
          Hr.brandCheck(this, Response);
          return this[Or].body ? this[Or].body.stream : null;
        }
        get bodyUsed() {
          Hr.brandCheck(this, Response);
          return !!this[Or].body && Ar.isDisturbed(this[Or].body.stream);
        }
        clone() {
          Hr.brandCheck(this, Response);
          if (this.bodyUsed || (this.body && this.body.locked)) {
            throw Hr.errors.exception({
              header: 'Response.clone',
              message: 'Body has already been consumed.'
            });
          }
          const a = cloneResponse(this[Or]);
          const C = new Response();
          C[Or] = a;
          C[Gr] = this[Gr];
          C[xr][jr] = a.headersList;
          C[xr][Ur] = this[xr][Ur];
          C[xr][Gr] = this[xr][Gr];
          return C;
        }
      }
      Wt(Response);
      Object.defineProperties(Response.prototype, {
        type: Er,
        url: Er,
        status: Er,
        ok: Er,
        redirected: Er,
        statusText: Er,
        headers: Er,
        clone: Er,
        body: Er,
        bodyUsed: Er,
        [Symbol.toStringTag]: { value: 'Response', configurable: true }
      });
      Object.defineProperties(Response, { json: Er, redirect: Er, error: Er });
      function cloneResponse(a) {
        if (a.internalResponse) {
          return filterResponse(cloneResponse(a.internalResponse), a.type);
        }
        const C = makeResponse({ ...a, body: null });
        if (a.body != null) {
          C.body = Pt(a.body);
        }
        return C;
      }
      function makeResponse(a) {
        return {
          aborted: false,
          rangeRequested: false,
          timingAllowPassed: false,
          requestIncludesCredentials: false,
          type: 'default',
          status: 200,
          timingInfo: null,
          cacheState: '',
          statusText: '',
          ...a,
          headersList: a.headersList ? new ae(a.headersList) : new ae(),
          urlList: a.urlList ? [...a.urlList] : []
        };
      }
      function makeNetworkError(a) {
        const C = Nr(a);
        return makeResponse({
          type: 'error',
          status: 0,
          error: C ? a : new Error(a ? String(a) : a),
          aborted: a && a.name === 'AbortError'
        });
      }
      function makeFilteredResponse(a, C) {
        C = { internalResponse: a, ...C };
        return new Proxy(a, {
          get(a, q) {
            return q in C ? C[q] : a[q];
          },
          set(a, q, re) {
            zr(!(q in C));
            a[q] = re;
            return true;
          }
        });
      }
      function filterResponse(a, C) {
        if (C === 'basic') {
          return makeFilteredResponse(a, {
            type: 'basic',
            headersList: a.headersList
          });
        } else if (C === 'cors') {
          return makeFilteredResponse(a, {
            type: 'cors',
            headersList: a.headersList
          });
        } else if (C === 'opaque') {
          return makeFilteredResponse(a, {
            type: 'opaque',
            urlList: Object.freeze([]),
            status: 0,
            statusText: '',
            body: null
          });
        } else if (C === 'opaqueredirect') {
          return makeFilteredResponse(a, {
            type: 'opaqueredirect',
            status: 0,
            statusText: '',
            headersList: [],
            body: null
          });
        } else {
          zr(false);
        }
      }
      function makeAppropriateNetworkError(a, C = null) {
        zr(Br(a));
        return Qr(a)
          ? makeNetworkError(
              Object.assign(
                new Pr('The operation was aborted.', 'AbortError'),
                { cause: C }
              )
            )
          : makeNetworkError(
              Object.assign(new Pr('Request was cancelled.'), { cause: C })
            );
      }
      function initializeResponse(a, C, q) {
        if (C.status !== null && (C.status < 200 || C.status > 599)) {
          throw new RangeError(
            'init["status"] must be in the range of 200 to 599, inclusive.'
          );
        }
        if ('statusText' in C && C.statusText != null) {
          if (!Ir(String(C.statusText))) {
            throw new TypeError('Invalid statusText');
          }
        }
        if ('status' in C && C.status != null) {
          a[Or].status = C.status;
        }
        if ('statusText' in C && C.statusText != null) {
          a[Or].statusText = C.statusText;
        }
        if ('headers' in C && C.headers != null) {
          Ue(a[xr], C.headers);
        }
        if (q) {
          if (Mr.includes(a.status)) {
            throw Hr.errors.exception({
              header: 'Response constructor',
              message: 'Invalid response status code ' + a.status
            });
          }
          a[Or].body = q.body;
          if (q.type != null && !a[Or].headersList.contains('Content-Type')) {
            a[Or].headersList.append('content-type', q.type);
          }
        }
      }
      Hr.converters.ReadableStream = Hr.interfaceConverter(Kr);
      Hr.converters.FormData = Hr.interfaceConverter(Vr);
      Hr.converters.URLSearchParams = Hr.interfaceConverter(URLSearchParams);
      Hr.converters.XMLHttpRequestBodyInit = function (a) {
        if (typeof a === 'string') {
          return Hr.converters.USVString(a);
        }
        if (kr(a)) {
          return Hr.converters.Blob(a, { strict: false });
        }
        if ($r.isArrayBuffer(a) || $r.isTypedArray(a) || $r.isDataView(a)) {
          return Hr.converters.BufferSource(a);
        }
        if (Ar.isFormDataLike(a)) {
          return Hr.converters.FormData(a, { strict: false });
        }
        if (a instanceof URLSearchParams) {
          return Hr.converters.URLSearchParams(a);
        }
        return Hr.converters.DOMString(a);
      };
      Hr.converters.BodyInit = function (a) {
        if (a instanceof Kr) {
          return Hr.converters.ReadableStream(a);
        }
        if (a?.[Symbol.asyncIterator]) {
          return a;
        }
        return Hr.converters.XMLHttpRequestBodyInit(a);
      };
      Hr.converters.ResponseInit = Hr.dictionaryConverter([
        {
          key: 'status',
          converter: Hr.converters['unsigned short'],
          defaultValue: 200
        },
        {
          key: 'statusText',
          converter: Hr.converters.ByteString,
          defaultValue: ''
        },
        { key: 'headers', converter: Hr.converters.HeadersInit }
      ]);
      a.exports = {
        makeNetworkError: makeNetworkError,
        makeResponse: makeResponse,
        makeAppropriateNetworkError: makeAppropriateNetworkError,
        filterResponse: filterResponse,
        Response: Response,
        cloneResponse: cloneResponse
      };
    },
    3386: (a) => {
      'use strict';
      a.exports = {
        kUrl: Symbol('url'),
        kHeaders: Symbol('headers'),
        kSignal: Symbol('signal'),
        kState: Symbol('state'),
        kGuard: Symbol('guard'),
        kRealm: Symbol('realm')
      };
    },
    6860: (a, C, q) => {
      'use strict';
      const {
        redirectStatusSet: re,
        referrerPolicySet: ae,
        badPortsSet: Ue
      } = q(756);
      const { getGlobalOrigin: lt } = q(128);
      const { performance: Pt } = q(4074);
      const {
        isBlobLike: Wt,
        toUSVString: Ar,
        ReadableStreamFrom: Er
      } = q(9647);
      const Ir = q(9491);
      const { isUint8Array: Br } = q(9830);
      let Qr = [];
      let kr;
      try {
        kr = q(6113);
        const a = ['sha256', 'sha384', 'sha512'];
        Qr = kr.getHashes().filter((C) => a.includes(C));
      } catch {}
      function responseURL(a) {
        const C = a.urlList;
        const q = C.length;
        return q === 0 ? null : C[q - 1].toString();
      }
      function responseLocationURL(a, C) {
        if (!re.has(a.status)) {
          return null;
        }
        let q = a.headersList.get('location');
        if (q !== null && isValidHeaderValue(q)) {
          q = new URL(q, responseURL(a));
        }
        if (q && !q.hash) {
          q.hash = C;
        }
        return q;
      }
      function requestCurrentURL(a) {
        return a.urlList[a.urlList.length - 1];
      }
      function requestBadPort(a) {
        const C = requestCurrentURL(a);
        if (urlIsHttpHttpsScheme(C) && Ue.has(C.port)) {
          return 'blocked';
        }
        return 'allowed';
      }
      function isErrorLike(a) {
        return (
          a instanceof Error ||
          a?.constructor?.name === 'Error' ||
          a?.constructor?.name === 'DOMException'
        );
      }
      function isValidReasonPhrase(a) {
        for (let C = 0; C < a.length; ++C) {
          const q = a.charCodeAt(C);
          if (!(q === 9 || (q >= 32 && q <= 126) || (q >= 128 && q <= 255))) {
            return false;
          }
        }
        return true;
      }
      function isTokenCharCode(a) {
        switch (a) {
          case 34:
          case 40:
          case 41:
          case 44:
          case 47:
          case 58:
          case 59:
          case 60:
          case 61:
          case 62:
          case 63:
          case 64:
          case 91:
          case 92:
          case 93:
          case 123:
          case 125:
            return false;
          default:
            return a >= 33 && a <= 126;
        }
      }
      function isValidHTTPToken(a) {
        if (a.length === 0) {
          return false;
        }
        for (let C = 0; C < a.length; ++C) {
          if (!isTokenCharCode(a.charCodeAt(C))) {
            return false;
          }
        }
        return true;
      }
      function isValidHeaderName(a) {
        return isValidHTTPToken(a);
      }
      function isValidHeaderValue(a) {
        if (
          a.startsWith('\t') ||
          a.startsWith(' ') ||
          a.endsWith('\t') ||
          a.endsWith(' ')
        ) {
          return false;
        }
        if (a.includes('\0') || a.includes('\r') || a.includes('\n')) {
          return false;
        }
        return true;
      }
      function setRequestReferrerPolicyOnRedirect(a, C) {
        const { headersList: q } = C;
        const re = (q.get('referrer-policy') ?? '').split(',');
        let Ue = '';
        if (re.length > 0) {
          for (let a = re.length; a !== 0; a--) {
            const C = re[a - 1].trim();
            if (ae.has(C)) {
              Ue = C;
              break;
            }
          }
        }
        if (Ue !== '') {
          a.referrerPolicy = Ue;
        }
      }
      function crossOriginResourcePolicyCheck() {
        return 'allowed';
      }
      function corsCheck() {
        return 'success';
      }
      function TAOCheck() {
        return 'success';
      }
      function appendFetchMetadata(a) {
        let C = null;
        C = a.mode;
        a.headersList.set('sec-fetch-mode', C);
      }
      function appendRequestOriginHeader(a) {
        let C = a.origin;
        if (a.responseTainting === 'cors' || a.mode === 'websocket') {
          if (C) {
            a.headersList.append('origin', C);
          }
        } else if (a.method !== 'GET' && a.method !== 'HEAD') {
          switch (a.referrerPolicy) {
            case 'no-referrer':
              C = null;
              break;
            case 'no-referrer-when-downgrade':
            case 'strict-origin':
            case 'strict-origin-when-cross-origin':
              if (
                a.origin &&
                urlHasHttpsScheme(a.origin) &&
                !urlHasHttpsScheme(requestCurrentURL(a))
              ) {
                C = null;
              }
              break;
            case 'same-origin':
              if (!sameOrigin(a, requestCurrentURL(a))) {
                C = null;
              }
              break;
            default:
          }
          if (C) {
            a.headersList.append('origin', C);
          }
        }
      }
      function coarsenedSharedCurrentTime(a) {
        return Pt.now();
      }
      function createOpaqueTimingInfo(a) {
        return {
          startTime: a.startTime ?? 0,
          redirectStartTime: 0,
          redirectEndTime: 0,
          postRedirectStartTime: a.startTime ?? 0,
          finalServiceWorkerStartTime: 0,
          finalNetworkResponseStartTime: 0,
          finalNetworkRequestStartTime: 0,
          endTime: 0,
          encodedBodySize: 0,
          decodedBodySize: 0,
          finalConnectionTimingInfo: null
        };
      }
      function makePolicyContainer() {
        return { referrerPolicy: 'strict-origin-when-cross-origin' };
      }
      function clonePolicyContainer(a) {
        return { referrerPolicy: a.referrerPolicy };
      }
      function determineRequestsReferrer(a) {
        const C = a.referrerPolicy;
        Ir(C);
        let q = null;
        if (a.referrer === 'client') {
          const a = lt();
          if (!a || a.origin === 'null') {
            return 'no-referrer';
          }
          q = new URL(a);
        } else if (a.referrer instanceof URL) {
          q = a.referrer;
        }
        let re = stripURLForReferrer(q);
        const ae = stripURLForReferrer(q, true);
        if (re.toString().length > 4096) {
          re = ae;
        }
        const Ue = sameOrigin(a, re);
        const Pt =
          isURLPotentiallyTrustworthy(re) &&
          !isURLPotentiallyTrustworthy(a.url);
        switch (C) {
          case 'origin':
            return ae != null ? ae : stripURLForReferrer(q, true);
          case 'unsafe-url':
            return re;
          case 'same-origin':
            return Ue ? ae : 'no-referrer';
          case 'origin-when-cross-origin':
            return Ue ? re : ae;
          case 'strict-origin-when-cross-origin': {
            const C = requestCurrentURL(a);
            if (sameOrigin(re, C)) {
              return re;
            }
            if (
              isURLPotentiallyTrustworthy(re) &&
              !isURLPotentiallyTrustworthy(C)
            ) {
              return 'no-referrer';
            }
            return ae;
          }
          case 'strict-origin':
          case 'no-referrer-when-downgrade':
          default:
            return Pt ? 'no-referrer' : ae;
        }
      }
      function stripURLForReferrer(a, C) {
        Ir(a instanceof URL);
        if (
          a.protocol === 'file:' ||
          a.protocol === 'about:' ||
          a.protocol === 'blank:'
        ) {
          return 'no-referrer';
        }
        a.username = '';
        a.password = '';
        a.hash = '';
        if (C) {
          a.pathname = '';
          a.search = '';
        }
        return a;
      }
      function isURLPotentiallyTrustworthy(a) {
        if (!(a instanceof URL)) {
          return false;
        }
        if (a.href === 'about:blank' || a.href === 'about:srcdoc') {
          return true;
        }
        if (a.protocol === 'data:') return true;
        if (a.protocol === 'file:') return true;
        return isOriginPotentiallyTrustworthy(a.origin);
        function isOriginPotentiallyTrustworthy(a) {
          if (a == null || a === 'null') return false;
          const C = new URL(a);
          if (C.protocol === 'https:' || C.protocol === 'wss:') {
            return true;
          }
          if (
            /^127(?:\.[0-9]+){0,2}\.[0-9]+$|^\[(?:0*:)*?:?0*1\]$/.test(
              C.hostname
            ) ||
            C.hostname === 'localhost' ||
            C.hostname.includes('localhost.') ||
            C.hostname.endsWith('.localhost')
          ) {
            return true;
          }
          return false;
        }
      }
      function bytesMatch(a, C) {
        if (kr === undefined) {
          return true;
        }
        const q = parseMetadata(C);
        if (q === 'no metadata') {
          return true;
        }
        if (q.length === 0) {
          return true;
        }
        const re = getStrongestMetadata(q);
        const ae = filterMetadataListByAlgorithm(q, re);
        for (const C of ae) {
          const q = C.algo;
          const re = C.hash;
          let ae = kr.createHash(q).update(a).digest('base64');
          if (ae[ae.length - 1] === '=') {
            if (ae[ae.length - 2] === '=') {
              ae = ae.slice(0, -2);
            } else {
              ae = ae.slice(0, -1);
            }
          }
          if (compareBase64Mixed(ae, re)) {
            return true;
          }
        }
        return false;
      }
      const Dr =
        /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\s|$)( +[!-~]*)?)?/i;
      function parseMetadata(a) {
        const C = [];
        let q = true;
        for (const re of a.split(' ')) {
          q = false;
          const a = Dr.exec(re);
          if (
            a === null ||
            a.groups === undefined ||
            a.groups.algo === undefined
          ) {
            continue;
          }
          const ae = a.groups.algo.toLowerCase();
          if (Qr.includes(ae)) {
            C.push(a.groups);
          }
        }
        if (q === true) {
          return 'no metadata';
        }
        return C;
      }
      function getStrongestMetadata(a) {
        let C = a[0].algo;
        if (C[3] === '5') {
          return C;
        }
        for (let q = 1; q < a.length; ++q) {
          const re = a[q];
          if (re.algo[3] === '5') {
            C = 'sha512';
            break;
          } else if (C[3] === '3') {
            continue;
          } else if (re.algo[3] === '3') {
            C = 'sha384';
          }
        }
        return C;
      }
      function filterMetadataListByAlgorithm(a, C) {
        if (a.length === 1) {
          return a;
        }
        let q = 0;
        for (let re = 0; re < a.length; ++re) {
          if (a[re].algo === C) {
            a[q++] = a[re];
          }
        }
        a.length = q;
        return a;
      }
      function compareBase64Mixed(a, C) {
        if (a.length !== C.length) {
          return false;
        }
        for (let q = 0; q < a.length; ++q) {
          if (a[q] !== C[q]) {
            if (
              (a[q] === '+' && C[q] === '-') ||
              (a[q] === '/' && C[q] === '_')
            ) {
              continue;
            }
            return false;
          }
        }
        return true;
      }
      function tryUpgradeRequestToAPotentiallyTrustworthyURL(a) {}
      function sameOrigin(a, C) {
        if (a.origin === C.origin && a.origin === 'null') {
          return true;
        }
        if (
          a.protocol === C.protocol &&
          a.hostname === C.hostname &&
          a.port === C.port
        ) {
          return true;
        }
        return false;
      }
      function createDeferredPromise() {
        let a;
        let C;
        const q = new Promise((q, re) => {
          a = q;
          C = re;
        });
        return { promise: q, resolve: a, reject: C };
      }
      function isAborted(a) {
        return a.controller.state === 'aborted';
      }
      function isCancelled(a) {
        return (
          a.controller.state === 'aborted' ||
          a.controller.state === 'terminated'
        );
      }
      const Nr = {
        delete: 'DELETE',
        DELETE: 'DELETE',
        get: 'GET',
        GET: 'GET',
        head: 'HEAD',
        HEAD: 'HEAD',
        options: 'OPTIONS',
        OPTIONS: 'OPTIONS',
        post: 'POST',
        POST: 'POST',
        put: 'PUT',
        PUT: 'PUT'
      };
      Object.setPrototypeOf(Nr, null);
      function normalizeMethod(a) {
        return Nr[a.toLowerCase()] ?? a;
      }
      function serializeJavascriptValueToJSONString(a) {
        const C = JSON.stringify(a);
        if (C === undefined) {
          throw new TypeError('Value is not JSON serializable');
        }
        Ir(typeof C === 'string');
        return C;
      }
      const Lr = Object.getPrototypeOf(
        Object.getPrototypeOf([][Symbol.iterator]())
      );
      function makeIterator(a, C, q) {
        const re = { index: 0, kind: q, target: a };
        const ae = {
          next() {
            if (Object.getPrototypeOf(this) !== ae) {
              throw new TypeError(
                `'next' called on an object that does not implement interface ${C} Iterator.`
              );
            }
            const { index: a, kind: q, target: Ue } = re;
            const lt = Ue();
            const Pt = lt.length;
            if (a >= Pt) {
              return { value: undefined, done: true };
            }
            const Wt = lt[a];
            re.index = a + 1;
            return iteratorResult(Wt, q);
          },
          [Symbol.toStringTag]: `${C} Iterator`
        };
        Object.setPrototypeOf(ae, Lr);
        return Object.setPrototypeOf({}, ae);
      }
      function iteratorResult(a, C) {
        let q;
        switch (C) {
          case 'key': {
            q = a[0];
            break;
          }
          case 'value': {
            q = a[1];
            break;
          }
          case 'key+value': {
            q = a;
            break;
          }
        }
        return { value: q, done: false };
      }
      async function fullyReadBody(a, C, q) {
        const re = C;
        const ae = q;
        let Ue;
        try {
          Ue = a.stream.getReader();
        } catch (a) {
          ae(a);
          return;
        }
        try {
          const a = await readAllBytes(Ue);
          re(a);
        } catch (a) {
          ae(a);
        }
      }
      let Fr = globalThis.ReadableStream;
      function isReadableStreamLike(a) {
        if (!Fr) {
          Fr = q(5356).ReadableStream;
        }
        return (
          a instanceof Fr ||
          (a[Symbol.toStringTag] === 'ReadableStream' &&
            typeof a.tee === 'function')
        );
      }
      const Mr = 65535;
      function isomorphicDecode(a) {
        if (a.length < Mr) {
          return String.fromCharCode(...a);
        }
        return a.reduce((a, C) => a + String.fromCharCode(C), '');
      }
      function readableStreamClose(a) {
        try {
          a.close();
        } catch (a) {
          if (!a.message.includes('Controller is already closed')) {
            throw a;
          }
        }
      }
      function isomorphicEncode(a) {
        for (let C = 0; C < a.length; C++) {
          Ir(a.charCodeAt(C) <= 255);
        }
        return a;
      }
      async function readAllBytes(a) {
        const C = [];
        let q = 0;
        while (true) {
          const { done: re, value: ae } = await a.read();
          if (re) {
            return Buffer.concat(C, q);
          }
          if (!Br(ae)) {
            throw new TypeError('Received non-Uint8Array chunk');
          }
          C.push(ae);
          q += ae.length;
        }
      }
      function urlIsLocal(a) {
        Ir('protocol' in a);
        const C = a.protocol;
        return C === 'about:' || C === 'blob:' || C === 'data:';
      }
      function urlHasHttpsScheme(a) {
        if (typeof a === 'string') {
          return a.startsWith('https:');
        }
        return a.protocol === 'https:';
      }
      function urlIsHttpHttpsScheme(a) {
        Ir('protocol' in a);
        const C = a.protocol;
        return C === 'http:' || C === 'https:';
      }
      const Pr =
        Object.hasOwn || ((a, C) => Object.prototype.hasOwnProperty.call(a, C));
      a.exports = {
        isAborted: isAborted,
        isCancelled: isCancelled,
        createDeferredPromise: createDeferredPromise,
        ReadableStreamFrom: Er,
        toUSVString: Ar,
        tryUpgradeRequestToAPotentiallyTrustworthyURL:
          tryUpgradeRequestToAPotentiallyTrustworthyURL,
        coarsenedSharedCurrentTime: coarsenedSharedCurrentTime,
        determineRequestsReferrer: determineRequestsReferrer,
        makePolicyContainer: makePolicyContainer,
        clonePolicyContainer: clonePolicyContainer,
        appendFetchMetadata: appendFetchMetadata,
        appendRequestOriginHeader: appendRequestOriginHeader,
        TAOCheck: TAOCheck,
        corsCheck: corsCheck,
        crossOriginResourcePolicyCheck: crossOriginResourcePolicyCheck,
        createOpaqueTimingInfo: createOpaqueTimingInfo,
        setRequestReferrerPolicyOnRedirect: setRequestReferrerPolicyOnRedirect,
        isValidHTTPToken: isValidHTTPToken,
        requestBadPort: requestBadPort,
        requestCurrentURL: requestCurrentURL,
        responseURL: responseURL,
        responseLocationURL: responseLocationURL,
        isBlobLike: Wt,
        isURLPotentiallyTrustworthy: isURLPotentiallyTrustworthy,
        isValidReasonPhrase: isValidReasonPhrase,
        sameOrigin: sameOrigin,
        normalizeMethod: normalizeMethod,
        serializeJavascriptValueToJSONString:
          serializeJavascriptValueToJSONString,
        makeIterator: makeIterator,
        isValidHeaderName: isValidHeaderName,
        isValidHeaderValue: isValidHeaderValue,
        hasOwn: Pr,
        isErrorLike: isErrorLike,
        fullyReadBody: fullyReadBody,
        bytesMatch: bytesMatch,
        isReadableStreamLike: isReadableStreamLike,
        readableStreamClose: readableStreamClose,
        isomorphicEncode: isomorphicEncode,
        isomorphicDecode: isomorphicDecode,
        urlIsLocal: urlIsLocal,
        urlHasHttpsScheme: urlHasHttpsScheme,
        urlIsHttpHttpsScheme: urlIsHttpHttpsScheme,
        readAllBytes: readAllBytes,
        normalizeMethodRecord: Nr,
        parseMetadata: parseMetadata
      };
    },
    3721: (a, C, q) => {
      'use strict';
      const { types: re } = q(3837);
      const { hasOwn: ae, toUSVString: Ue } = q(6860);
      const lt = {};
      lt.converters = {};
      lt.util = {};
      lt.errors = {};
      lt.errors.exception = function (a) {
        return new TypeError(`${a.header}: ${a.message}`);
      };
      lt.errors.conversionFailed = function (a) {
        const C = a.types.length === 1 ? '' : ' one of';
        const q =
          `${a.argument} could not be converted to` +
          `${C}: ${a.types.join(', ')}.`;
        return lt.errors.exception({ header: a.prefix, message: q });
      };
      lt.errors.invalidArgument = function (a) {
        return lt.errors.exception({
          header: a.prefix,
          message: `"${a.value}" is an invalid ${a.type}.`
        });
      };
      lt.brandCheck = function (a, C, q = undefined) {
        if (q?.strict !== false && !(a instanceof C)) {
          throw new TypeError('Illegal invocation');
        } else {
          return a?.[Symbol.toStringTag] === C.prototype[Symbol.toStringTag];
        }
      };
      lt.argumentLengthCheck = function ({ length: a }, C, q) {
        if (a < C) {
          throw lt.errors.exception({
            message:
              `${C} argument${C !== 1 ? 's' : ''} required, ` +
              `but${a ? ' only' : ''} ${a} found.`,
            ...q
          });
        }
      };
      lt.illegalConstructor = function () {
        throw lt.errors.exception({
          header: 'TypeError',
          message: 'Illegal constructor'
        });
      };
      lt.util.Type = function (a) {
        switch (typeof a) {
          case 'undefined':
            return 'Undefined';
          case 'boolean':
            return 'Boolean';
          case 'string':
            return 'String';
          case 'symbol':
            return 'Symbol';
          case 'number':
            return 'Number';
          case 'bigint':
            return 'BigInt';
          case 'function':
          case 'object': {
            if (a === null) {
              return 'Null';
            }
            return 'Object';
          }
        }
      };
      lt.util.ConvertToInt = function (a, C, q, re = {}) {
        let ae;
        let Ue;
        if (C === 64) {
          ae = Math.pow(2, 53) - 1;
          if (q === 'unsigned') {
            Ue = 0;
          } else {
            Ue = Math.pow(-2, 53) + 1;
          }
        } else if (q === 'unsigned') {
          Ue = 0;
          ae = Math.pow(2, C) - 1;
        } else {
          Ue = Math.pow(-2, C) - 1;
          ae = Math.pow(2, C - 1) - 1;
        }
        let Pt = Number(a);
        if (Pt === 0) {
          Pt = 0;
        }
        if (re.enforceRange === true) {
          if (
            Number.isNaN(Pt) ||
            Pt === Number.POSITIVE_INFINITY ||
            Pt === Number.NEGATIVE_INFINITY
          ) {
            throw lt.errors.exception({
              header: 'Integer conversion',
              message: `Could not convert ${a} to an integer.`
            });
          }
          Pt = lt.util.IntegerPart(Pt);
          if (Pt < Ue || Pt > ae) {
            throw lt.errors.exception({
              header: 'Integer conversion',
              message: `Value must be between ${Ue}-${ae}, got ${Pt}.`
            });
          }
          return Pt;
        }
        if (!Number.isNaN(Pt) && re.clamp === true) {
          Pt = Math.min(Math.max(Pt, Ue), ae);
          if (Math.floor(Pt) % 2 === 0) {
            Pt = Math.floor(Pt);
          } else {
            Pt = Math.ceil(Pt);
          }
          return Pt;
        }
        if (
          Number.isNaN(Pt) ||
          (Pt === 0 && Object.is(0, Pt)) ||
          Pt === Number.POSITIVE_INFINITY ||
          Pt === Number.NEGATIVE_INFINITY
        ) {
          return 0;
        }
        Pt = lt.util.IntegerPart(Pt);
        Pt = Pt % Math.pow(2, C);
        if (q === 'signed' && Pt >= Math.pow(2, C) - 1) {
          return Pt - Math.pow(2, C);
        }
        return Pt;
      };
      lt.util.IntegerPart = function (a) {
        const C = Math.floor(Math.abs(a));
        if (a < 0) {
          return -1 * C;
        }
        return C;
      };
      lt.sequenceConverter = function (a) {
        return (C) => {
          if (lt.util.Type(C) !== 'Object') {
            throw lt.errors.exception({
              header: 'Sequence',
              message: `Value of type ${lt.util.Type(C)} is not an Object.`
            });
          }
          const q = C?.[Symbol.iterator]?.();
          const re = [];
          if (q === undefined || typeof q.next !== 'function') {
            throw lt.errors.exception({
              header: 'Sequence',
              message: 'Object is not an iterator.'
            });
          }
          while (true) {
            const { done: C, value: ae } = q.next();
            if (C) {
              break;
            }
            re.push(a(ae));
          }
          return re;
        };
      };
      lt.recordConverter = function (a, C) {
        return (q) => {
          if (lt.util.Type(q) !== 'Object') {
            throw lt.errors.exception({
              header: 'Record',
              message: `Value of type ${lt.util.Type(q)} is not an Object.`
            });
          }
          const ae = {};
          if (!re.isProxy(q)) {
            const re = Object.keys(q);
            for (const Ue of re) {
              const re = a(Ue);
              const lt = C(q[Ue]);
              ae[re] = lt;
            }
            return ae;
          }
          const Ue = Reflect.ownKeys(q);
          for (const re of Ue) {
            const Ue = Reflect.getOwnPropertyDescriptor(q, re);
            if (Ue?.enumerable) {
              const Ue = a(re);
              const lt = C(q[re]);
              ae[Ue] = lt;
            }
          }
          return ae;
        };
      };
      lt.interfaceConverter = function (a) {
        return (C, q = {}) => {
          if (q.strict !== false && !(C instanceof a)) {
            throw lt.errors.exception({
              header: a.name,
              message: `Expected ${C} to be an instance of ${a.name}.`
            });
          }
          return C;
        };
      };
      lt.dictionaryConverter = function (a) {
        return (C) => {
          const q = lt.util.Type(C);
          const re = {};
          if (q === 'Null' || q === 'Undefined') {
            return re;
          } else if (q !== 'Object') {
            throw lt.errors.exception({
              header: 'Dictionary',
              message: `Expected ${C} to be one of: Null, Undefined, Object.`
            });
          }
          for (const q of a) {
            const { key: a, defaultValue: Ue, required: Pt, converter: Wt } = q;
            if (Pt === true) {
              if (!ae(C, a)) {
                throw lt.errors.exception({
                  header: 'Dictionary',
                  message: `Missing required key "${a}".`
                });
              }
            }
            let Ar = C[a];
            const Er = ae(q, 'defaultValue');
            if (Er && Ar !== null) {
              Ar = Ar ?? Ue;
            }
            if (Pt || Er || Ar !== undefined) {
              Ar = Wt(Ar);
              if (q.allowedValues && !q.allowedValues.includes(Ar)) {
                throw lt.errors.exception({
                  header: 'Dictionary',
                  message: `${Ar} is not an accepted type. Expected one of ${q.allowedValues.join(', ')}.`
                });
              }
              re[a] = Ar;
            }
          }
          return re;
        };
      };
      lt.nullableConverter = function (a) {
        return (C) => {
          if (C === null) {
            return C;
          }
          return a(C);
        };
      };
      lt.converters.DOMString = function (a, C = {}) {
        if (a === null && C.legacyNullToEmptyString) {
          return '';
        }
        if (typeof a === 'symbol') {
          throw new TypeError(
            'Could not convert argument of type symbol to string.'
          );
        }
        return String(a);
      };
      lt.converters.ByteString = function (a) {
        const C = lt.converters.DOMString(a);
        for (let a = 0; a < C.length; a++) {
          if (C.charCodeAt(a) > 255) {
            throw new TypeError(
              'Cannot convert argument to a ByteString because the character at ' +
                `index ${a} has a value of ${C.charCodeAt(a)} which is greater than 255.`
            );
          }
        }
        return C;
      };
      lt.converters.USVString = Ue;
      lt.converters.boolean = function (a) {
        const C = Boolean(a);
        return C;
      };
      lt.converters.any = function (a) {
        return a;
      };
      lt.converters['long long'] = function (a) {
        const C = lt.util.ConvertToInt(a, 64, 'signed');
        return C;
      };
      lt.converters['unsigned long long'] = function (a) {
        const C = lt.util.ConvertToInt(a, 64, 'unsigned');
        return C;
      };
      lt.converters['unsigned long'] = function (a) {
        const C = lt.util.ConvertToInt(a, 32, 'unsigned');
        return C;
      };
      lt.converters['unsigned short'] = function (a, C) {
        const q = lt.util.ConvertToInt(a, 16, 'unsigned', C);
        return q;
      };
      lt.converters.ArrayBuffer = function (a, C = {}) {
        if (lt.util.Type(a) !== 'Object' || !re.isAnyArrayBuffer(a)) {
          throw lt.errors.conversionFailed({
            prefix: `${a}`,
            argument: `${a}`,
            types: ['ArrayBuffer']
          });
        }
        if (C.allowShared === false && re.isSharedArrayBuffer(a)) {
          throw lt.errors.exception({
            header: 'ArrayBuffer',
            message: 'SharedArrayBuffer is not allowed.'
          });
        }
        return a;
      };
      lt.converters.TypedArray = function (a, C, q = {}) {
        if (
          lt.util.Type(a) !== 'Object' ||
          !re.isTypedArray(a) ||
          a.constructor.name !== C.name
        ) {
          throw lt.errors.conversionFailed({
            prefix: `${C.name}`,
            argument: `${a}`,
            types: [C.name]
          });
        }
        if (q.allowShared === false && re.isSharedArrayBuffer(a.buffer)) {
          throw lt.errors.exception({
            header: 'ArrayBuffer',
            message: 'SharedArrayBuffer is not allowed.'
          });
        }
        return a;
      };
      lt.converters.DataView = function (a, C = {}) {
        if (lt.util.Type(a) !== 'Object' || !re.isDataView(a)) {
          throw lt.errors.exception({
            header: 'DataView',
            message: 'Object is not a DataView.'
          });
        }
        if (C.allowShared === false && re.isSharedArrayBuffer(a.buffer)) {
          throw lt.errors.exception({
            header: 'ArrayBuffer',
            message: 'SharedArrayBuffer is not allowed.'
          });
        }
        return a;
      };
      lt.converters.BufferSource = function (a, C = {}) {
        if (re.isAnyArrayBuffer(a)) {
          return lt.converters.ArrayBuffer(a, C);
        }
        if (re.isTypedArray(a)) {
          return lt.converters.TypedArray(a, a.constructor);
        }
        if (re.isDataView(a)) {
          return lt.converters.DataView(a, C);
        }
        throw new TypeError(`Could not convert ${a} to a BufferSource.`);
      };
      lt.converters['sequence<ByteString>'] = lt.sequenceConverter(
        lt.converters.ByteString
      );
      lt.converters['sequence<sequence<ByteString>>'] = lt.sequenceConverter(
        lt.converters['sequence<ByteString>']
      );
      lt.converters['record<ByteString, ByteString>'] = lt.recordConverter(
        lt.converters.ByteString,
        lt.converters.ByteString
      );
      a.exports = { webidl: lt };
    },
    2444: (a) => {
      'use strict';
      function getEncoding(a) {
        if (!a) {
          return 'failure';
        }
        switch (a.trim().toLowerCase()) {
          case 'unicode-1-1-utf-8':
          case 'unicode11utf8':
          case 'unicode20utf8':
          case 'utf-8':
          case 'utf8':
          case 'x-unicode20utf8':
            return 'UTF-8';
          case '866':
          case 'cp866':
          case 'csibm866':
          case 'ibm866':
            return 'IBM866';
          case 'csisolatin2':
          case 'iso-8859-2':
          case 'iso-ir-101':
          case 'iso8859-2':
          case 'iso88592':
          case 'iso_8859-2':
          case 'iso_8859-2:1987':
          case 'l2':
          case 'latin2':
            return 'ISO-8859-2';
          case 'csisolatin3':
          case 'iso-8859-3':
          case 'iso-ir-109':
          case 'iso8859-3':
          case 'iso88593':
          case 'iso_8859-3':
          case 'iso_8859-3:1988':
          case 'l3':
          case 'latin3':
            return 'ISO-8859-3';
          case 'csisolatin4':
          case 'iso-8859-4':
          case 'iso-ir-110':
          case 'iso8859-4':
          case 'iso88594':
          case 'iso_8859-4':
          case 'iso_8859-4:1988':
          case 'l4':
          case 'latin4':
            return 'ISO-8859-4';
          case 'csisolatincyrillic':
          case 'cyrillic':
          case 'iso-8859-5':
          case 'iso-ir-144':
          case 'iso8859-5':
          case 'iso88595':
          case 'iso_8859-5':
          case 'iso_8859-5:1988':
            return 'ISO-8859-5';
          case 'arabic':
          case 'asmo-708':
          case 'csiso88596e':
          case 'csiso88596i':
          case 'csisolatinarabic':
          case 'ecma-114':
          case 'iso-8859-6':
          case 'iso-8859-6-e':
          case 'iso-8859-6-i':
          case 'iso-ir-127':
          case 'iso8859-6':
          case 'iso88596':
          case 'iso_8859-6':
          case 'iso_8859-6:1987':
            return 'ISO-8859-6';
          case 'csisolatingreek':
          case 'ecma-118':
          case 'elot_928':
          case 'greek':
          case 'greek8':
          case 'iso-8859-7':
          case 'iso-ir-126':
          case 'iso8859-7':
          case 'iso88597':
          case 'iso_8859-7':
          case 'iso_8859-7:1987':
          case 'sun_eu_greek':
            return 'ISO-8859-7';
          case 'csiso88598e':
          case 'csisolatinhebrew':
          case 'hebrew':
          case 'iso-8859-8':
          case 'iso-8859-8-e':
          case 'iso-ir-138':
          case 'iso8859-8':
          case 'iso88598':
          case 'iso_8859-8':
          case 'iso_8859-8:1988':
          case 'visual':
            return 'ISO-8859-8';
          case 'csiso88598i':
          case 'iso-8859-8-i':
          case 'logical':
            return 'ISO-8859-8-I';
          case 'csisolatin6':
          case 'iso-8859-10':
          case 'iso-ir-157':
          case 'iso8859-10':
          case 'iso885910':
          case 'l6':
          case 'latin6':
            return 'ISO-8859-10';
          case 'iso-8859-13':
          case 'iso8859-13':
          case 'iso885913':
            return 'ISO-8859-13';
          case 'iso-8859-14':
          case 'iso8859-14':
          case 'iso885914':
            return 'ISO-8859-14';
          case 'csisolatin9':
          case 'iso-8859-15':
          case 'iso8859-15':
          case 'iso885915':
          case 'iso_8859-15':
          case 'l9':
            return 'ISO-8859-15';
          case 'iso-8859-16':
            return 'ISO-8859-16';
          case 'cskoi8r':
          case 'koi':
          case 'koi8':
          case 'koi8-r':
          case 'koi8_r':
            return 'KOI8-R';
          case 'koi8-ru':
          case 'koi8-u':
            return 'KOI8-U';
          case 'csmacintosh':
          case 'mac':
          case 'macintosh':
          case 'x-mac-roman':
            return 'macintosh';
          case 'iso-8859-11':
          case 'iso8859-11':
          case 'iso885911':
          case 'tis-620':
          case 'windows-874':
            return 'windows-874';
          case 'cp1250':
          case 'windows-1250':
          case 'x-cp1250':
            return 'windows-1250';
          case 'cp1251':
          case 'windows-1251':
          case 'x-cp1251':
            return 'windows-1251';
          case 'ansi_x3.4-1968':
          case 'ascii':
          case 'cp1252':
          case 'cp819':
          case 'csisolatin1':
          case 'ibm819':
          case 'iso-8859-1':
          case 'iso-ir-100':
          case 'iso8859-1':
          case 'iso88591':
          case 'iso_8859-1':
          case 'iso_8859-1:1987':
          case 'l1':
          case 'latin1':
          case 'us-ascii':
          case 'windows-1252':
          case 'x-cp1252':
            return 'windows-1252';
          case 'cp1253':
          case 'windows-1253':
          case 'x-cp1253':
            return 'windows-1253';
          case 'cp1254':
          case 'csisolatin5':
          case 'iso-8859-9':
          case 'iso-ir-148':
          case 'iso8859-9':
          case 'iso88599':
          case 'iso_8859-9':
          case 'iso_8859-9:1989':
          case 'l5':
          case 'latin5':
          case 'windows-1254':
          case 'x-cp1254':
            return 'windows-1254';
          case 'cp1255':
          case 'windows-1255':
          case 'x-cp1255':
            return 'windows-1255';
          case 'cp1256':
          case 'windows-1256':
          case 'x-cp1256':
            return 'windows-1256';
          case 'cp1257':
          case 'windows-1257':
          case 'x-cp1257':
            return 'windows-1257';
          case 'cp1258':
          case 'windows-1258':
          case 'x-cp1258':
            return 'windows-1258';
          case 'x-mac-cyrillic':
          case 'x-mac-ukrainian':
            return 'x-mac-cyrillic';
          case 'chinese':
          case 'csgb2312':
          case 'csiso58gb231280':
          case 'gb2312':
          case 'gb_2312':
          case 'gb_2312-80':
          case 'gbk':
          case 'iso-ir-58':
          case 'x-gbk':
            return 'GBK';
          case 'gb18030':
            return 'gb18030';
          case 'big5':
          case 'big5-hkscs':
          case 'cn-big5':
          case 'csbig5':
          case 'x-x-big5':
            return 'Big5';
          case 'cseucpkdfmtjapanese':
          case 'euc-jp':
          case 'x-euc-jp':
            return 'EUC-JP';
          case 'csiso2022jp':
          case 'iso-2022-jp':
            return 'ISO-2022-JP';
          case 'csshiftjis':
          case 'ms932':
          case 'ms_kanji':
          case 'shift-jis':
          case 'shift_jis':
          case 'sjis':
          case 'windows-31j':
          case 'x-sjis':
            return 'Shift_JIS';
          case 'cseuckr':
          case 'csksc56011987':
          case 'euc-kr':
          case 'iso-ir-149':
          case 'korean':
          case 'ks_c_5601-1987':
          case 'ks_c_5601-1989':
          case 'ksc5601':
          case 'ksc_5601':
          case 'windows-949':
            return 'EUC-KR';
          case 'csiso2022kr':
          case 'hz-gb-2312':
          case 'iso-2022-cn':
          case 'iso-2022-cn-ext':
          case 'iso-2022-kr':
          case 'replacement':
            return 'replacement';
          case 'unicodefffe':
          case 'utf-16be':
            return 'UTF-16BE';
          case 'csunicode':
          case 'iso-10646-ucs-2':
          case 'ucs-2':
          case 'unicode':
          case 'unicodefeff':
          case 'utf-16':
          case 'utf-16le':
            return 'UTF-16LE';
          case 'x-user-defined':
            return 'x-user-defined';
          default:
            return 'failure';
        }
      }
      a.exports = { getEncoding: getEncoding };
    },
    6528: (a, C, q) => {
      'use strict';
      const {
        staticPropertyDescriptors: re,
        readOperation: ae,
        fireAProgressEvent: Ue
      } = q(2882);
      const {
        kState: lt,
        kError: Pt,
        kResult: Wt,
        kEvents: Ar,
        kAborted: Er
      } = q(3738);
      const { webidl: Ir } = q(3721);
      const { kEnumerableProperty: Br } = q(9647);
      class FileReader extends EventTarget {
        constructor() {
          super();
          this[lt] = 'empty';
          this[Wt] = null;
          this[Pt] = null;
          this[Ar] = {
            loadend: null,
            error: null,
            abort: null,
            load: null,
            progress: null,
            loadstart: null
          };
        }
        readAsArrayBuffer(a) {
          Ir.brandCheck(this, FileReader);
          Ir.argumentLengthCheck(arguments, 1, {
            header: 'FileReader.readAsArrayBuffer'
          });
          a = Ir.converters.Blob(a, { strict: false });
          ae(this, a, 'ArrayBuffer');
        }
        readAsBinaryString(a) {
          Ir.brandCheck(this, FileReader);
          Ir.argumentLengthCheck(arguments, 1, {
            header: 'FileReader.readAsBinaryString'
          });
          a = Ir.converters.Blob(a, { strict: false });
          ae(this, a, 'BinaryString');
        }
        readAsText(a, C = undefined) {
          Ir.brandCheck(this, FileReader);
          Ir.argumentLengthCheck(arguments, 1, {
            header: 'FileReader.readAsText'
          });
          a = Ir.converters.Blob(a, { strict: false });
          if (C !== undefined) {
            C = Ir.converters.DOMString(C);
          }
          ae(this, a, 'Text', C);
        }
        readAsDataURL(a) {
          Ir.brandCheck(this, FileReader);
          Ir.argumentLengthCheck(arguments, 1, {
            header: 'FileReader.readAsDataURL'
          });
          a = Ir.converters.Blob(a, { strict: false });
          ae(this, a, 'DataURL');
        }
        abort() {
          if (this[lt] === 'empty' || this[lt] === 'done') {
            this[Wt] = null;
            return;
          }
          if (this[lt] === 'loading') {
            this[lt] = 'done';
            this[Wt] = null;
          }
          this[Er] = true;
          Ue('abort', this);
          if (this[lt] !== 'loading') {
            Ue('loadend', this);
          }
        }
        get readyState() {
          Ir.brandCheck(this, FileReader);
          switch (this[lt]) {
            case 'empty':
              return this.EMPTY;
            case 'loading':
              return this.LOADING;
            case 'done':
              return this.DONE;
          }
        }
        get result() {
          Ir.brandCheck(this, FileReader);
          return this[Wt];
        }
        get error() {
          Ir.brandCheck(this, FileReader);
          return this[Pt];
        }
        get onloadend() {
          Ir.brandCheck(this, FileReader);
          return this[Ar].loadend;
        }
        set onloadend(a) {
          Ir.brandCheck(this, FileReader);
          if (this[Ar].loadend) {
            this.removeEventListener('loadend', this[Ar].loadend);
          }
          if (typeof a === 'function') {
            this[Ar].loadend = a;
            this.addEventListener('loadend', a);
          } else {
            this[Ar].loadend = null;
          }
        }
        get onerror() {
          Ir.brandCheck(this, FileReader);
          return this[Ar].error;
        }
        set onerror(a) {
          Ir.brandCheck(this, FileReader);
          if (this[Ar].error) {
            this.removeEventListener('error', this[Ar].error);
          }
          if (typeof a === 'function') {
            this[Ar].error = a;
            this.addEventListener('error', a);
          } else {
            this[Ar].error = null;
          }
        }
        get onloadstart() {
          Ir.brandCheck(this, FileReader);
          return this[Ar].loadstart;
        }
        set onloadstart(a) {
          Ir.brandCheck(this, FileReader);
          if (this[Ar].loadstart) {
            this.removeEventListener('loadstart', this[Ar].loadstart);
          }
          if (typeof a === 'function') {
            this[Ar].loadstart = a;
            this.addEventListener('loadstart', a);
          } else {
            this[Ar].loadstart = null;
          }
        }
        get onprogress() {
          Ir.brandCheck(this, FileReader);
          return this[Ar].progress;
        }
        set onprogress(a) {
          Ir.brandCheck(this, FileReader);
          if (this[Ar].progress) {
            this.removeEventListener('progress', this[Ar].progress);
          }
          if (typeof a === 'function') {
            this[Ar].progress = a;
            this.addEventListener('progress', a);
          } else {
            this[Ar].progress = null;
          }
        }
        get onload() {
          Ir.brandCheck(this, FileReader);
          return this[Ar].load;
        }
        set onload(a) {
          Ir.brandCheck(this, FileReader);
          if (this[Ar].load) {
            this.removeEventListener('load', this[Ar].load);
          }
          if (typeof a === 'function') {
            this[Ar].load = a;
            this.addEventListener('load', a);
          } else {
            this[Ar].load = null;
          }
        }
        get onabort() {
          Ir.brandCheck(this, FileReader);
          return this[Ar].abort;
        }
        set onabort(a) {
          Ir.brandCheck(this, FileReader);
          if (this[Ar].abort) {
            this.removeEventListener('abort', this[Ar].abort);
          }
          if (typeof a === 'function') {
            this[Ar].abort = a;
            this.addEventListener('abort', a);
          } else {
            this[Ar].abort = null;
          }
        }
      }
      FileReader.EMPTY = FileReader.prototype.EMPTY = 0;
      FileReader.LOADING = FileReader.prototype.LOADING = 1;
      FileReader.DONE = FileReader.prototype.DONE = 2;
      Object.defineProperties(FileReader.prototype, {
        EMPTY: re,
        LOADING: re,
        DONE: re,
        readAsArrayBuffer: Br,
        readAsBinaryString: Br,
        readAsText: Br,
        readAsDataURL: Br,
        abort: Br,
        readyState: Br,
        result: Br,
        error: Br,
        onloadstart: Br,
        onprogress: Br,
        onload: Br,
        onabort: Br,
        onerror: Br,
        onloadend: Br,
        [Symbol.toStringTag]: {
          value: 'FileReader',
          writable: false,
          enumerable: false,
          configurable: true
        }
      });
      Object.defineProperties(FileReader, { EMPTY: re, LOADING: re, DONE: re });
      a.exports = { FileReader: FileReader };
    },
    6002: (a, C, q) => {
      'use strict';
      const { webidl: re } = q(3721);
      const ae = Symbol('ProgressEvent state');
      class ProgressEvent extends Event {
        constructor(a, C = {}) {
          a = re.converters.DOMString(a);
          C = re.converters.ProgressEventInit(C ?? {});
          super(a, C);
          this[ae] = {
            lengthComputable: C.lengthComputable,
            loaded: C.loaded,
            total: C.total
          };
        }
        get lengthComputable() {
          re.brandCheck(this, ProgressEvent);
          return this[ae].lengthComputable;
        }
        get loaded() {
          re.brandCheck(this, ProgressEvent);
          return this[ae].loaded;
        }
        get total() {
          re.brandCheck(this, ProgressEvent);
          return this[ae].total;
        }
      }
      re.converters.ProgressEventInit = re.dictionaryConverter([
        {
          key: 'lengthComputable',
          converter: re.converters.boolean,
          defaultValue: false
        },
        {
          key: 'loaded',
          converter: re.converters['unsigned long long'],
          defaultValue: 0
        },
        {
          key: 'total',
          converter: re.converters['unsigned long long'],
          defaultValue: 0
        },
        {
          key: 'bubbles',
          converter: re.converters.boolean,
          defaultValue: false
        },
        {
          key: 'cancelable',
          converter: re.converters.boolean,
          defaultValue: false
        },
        {
          key: 'composed',
          converter: re.converters.boolean,
          defaultValue: false
        }
      ]);
      a.exports = { ProgressEvent: ProgressEvent };
    },
    3738: (a) => {
      'use strict';
      a.exports = {
        kState: Symbol('FileReader state'),
        kResult: Symbol('FileReader result'),
        kError: Symbol('FileReader error'),
        kLastProgressEventFired: Symbol(
          'FileReader last progress event fired timestamp'
        ),
        kEvents: Symbol('FileReader events'),
        kAborted: Symbol('FileReader aborted')
      };
    },
    2882: (a, C, q) => {
      'use strict';
      const {
        kState: re,
        kError: ae,
        kResult: Ue,
        kAborted: lt,
        kLastProgressEventFired: Pt
      } = q(3738);
      const { ProgressEvent: Wt } = q(6002);
      const { getEncoding: Ar } = q(2444);
      const { DOMException: Er } = q(756);
      const { serializeAMimeType: Ir, parseMIMEType: Br } = q(6932);
      const { types: Qr } = q(3837);
      const { StringDecoder: kr } = q(1576);
      const { btoa: Dr } = q(4300);
      const Nr = { enumerable: true, writable: false, configurable: false };
      function readOperation(a, C, q, Wt) {
        if (a[re] === 'loading') {
          throw new Er('Invalid state', 'InvalidStateError');
        }
        a[re] = 'loading';
        a[Ue] = null;
        a[ae] = null;
        const Ar = C.stream();
        const Ir = Ar.getReader();
        const Br = [];
        let kr = Ir.read();
        let Dr = true;
        (async () => {
          while (!a[lt]) {
            try {
              const { done: Ar, value: Er } = await kr;
              if (Dr && !a[lt]) {
                queueMicrotask(() => {
                  fireAProgressEvent('loadstart', a);
                });
              }
              Dr = false;
              if (!Ar && Qr.isUint8Array(Er)) {
                Br.push(Er);
                if (
                  (a[Pt] === undefined || Date.now() - a[Pt] >= 50) &&
                  !a[lt]
                ) {
                  a[Pt] = Date.now();
                  queueMicrotask(() => {
                    fireAProgressEvent('progress', a);
                  });
                }
                kr = Ir.read();
              } else if (Ar) {
                queueMicrotask(() => {
                  a[re] = 'done';
                  try {
                    const re = packageData(Br, q, C.type, Wt);
                    if (a[lt]) {
                      return;
                    }
                    a[Ue] = re;
                    fireAProgressEvent('load', a);
                  } catch (C) {
                    a[ae] = C;
                    fireAProgressEvent('error', a);
                  }
                  if (a[re] !== 'loading') {
                    fireAProgressEvent('loadend', a);
                  }
                });
                break;
              }
            } catch (C) {
              if (a[lt]) {
                return;
              }
              queueMicrotask(() => {
                a[re] = 'done';
                a[ae] = C;
                fireAProgressEvent('error', a);
                if (a[re] !== 'loading') {
                  fireAProgressEvent('loadend', a);
                }
              });
              break;
            }
          }
        })();
      }
      function fireAProgressEvent(a, C) {
        const q = new Wt(a, { bubbles: false, cancelable: false });
        C.dispatchEvent(q);
      }
      function packageData(a, C, q, re) {
        switch (C) {
          case 'DataURL': {
            let C = 'data:';
            const re = Br(q || 'application/octet-stream');
            if (re !== 'failure') {
              C += Ir(re);
            }
            C += ';base64,';
            const ae = new kr('latin1');
            for (const q of a) {
              C += Dr(ae.write(q));
            }
            C += Dr(ae.end());
            return C;
          }
          case 'Text': {
            let C = 'failure';
            if (re) {
              C = Ar(re);
            }
            if (C === 'failure' && q) {
              const a = Br(q);
              if (a !== 'failure') {
                C = Ar(a.parameters.get('charset'));
              }
            }
            if (C === 'failure') {
              C = 'UTF-8';
            }
            return decode(a, C);
          }
          case 'ArrayBuffer': {
            const C = combineByteSequences(a);
            return C.buffer;
          }
          case 'BinaryString': {
            let C = '';
            const q = new kr('latin1');
            for (const re of a) {
              C += q.write(re);
            }
            C += q.end();
            return C;
          }
        }
      }
      function decode(a, C) {
        const q = combineByteSequences(a);
        const re = BOMSniffing(q);
        let ae = 0;
        if (re !== null) {
          C = re;
          ae = re === 'UTF-8' ? 3 : 2;
        }
        const Ue = q.slice(ae);
        return new TextDecoder(C).decode(Ue);
      }
      function BOMSniffing(a) {
        const [C, q, re] = a;
        if (C === 239 && q === 187 && re === 191) {
          return 'UTF-8';
        } else if (C === 254 && q === 255) {
          return 'UTF-16BE';
        } else if (C === 255 && q === 254) {
          return 'UTF-16LE';
        }
        return null;
      }
      function combineByteSequences(a) {
        const C = a.reduce((a, C) => a + C.byteLength, 0);
        let q = 0;
        return a.reduce((a, C) => {
          a.set(C, q);
          q += C.byteLength;
          return a;
        }, new Uint8Array(C));
      }
      a.exports = {
        staticPropertyDescriptors: Nr,
        readOperation: readOperation,
        fireAProgressEvent: fireAProgressEvent
      };
    },
    5683: (a, C, q) => {
      'use strict';
      const re = Symbol.for('undici.globalDispatcher.1');
      const { InvalidArgumentError: ae } = q(3501);
      const Ue = q(8551);
      if (getGlobalDispatcher() === undefined) {
        setGlobalDispatcher(new Ue());
      }
      function setGlobalDispatcher(a) {
        if (!a || typeof a.dispatch !== 'function') {
          throw new ae('Argument agent must implement Agent');
        }
        Object.defineProperty(globalThis, re, {
          value: a,
          writable: true,
          enumerable: false,
          configurable: false
        });
      }
      function getGlobalDispatcher() {
        return globalThis[re];
      }
      a.exports = {
        setGlobalDispatcher: setGlobalDispatcher,
        getGlobalDispatcher: getGlobalDispatcher
      };
    },
    3563: (a) => {
      'use strict';
      a.exports = class DecoratorHandler {
        constructor(a) {
          this.handler = a;
        }
        onConnect(...a) {
          return this.handler.onConnect(...a);
        }
        onError(...a) {
          return this.handler.onError(...a);
        }
        onUpgrade(...a) {
          return this.handler.onUpgrade(...a);
        }
        onHeaders(...a) {
          return this.handler.onHeaders(...a);
        }
        onData(...a) {
          return this.handler.onData(...a);
        }
        onComplete(...a) {
          return this.handler.onComplete(...a);
        }
        onBodySent(...a) {
          return this.handler.onBodySent(...a);
        }
      };
    },
    6086: (a, C, q) => {
      'use strict';
      const re = q(9647);
      const { kBodyUsed: ae } = q(7621);
      const Ue = q(9491);
      const { InvalidArgumentError: lt } = q(3501);
      const Pt = q(2361);
      const Wt = [300, 301, 302, 303, 307, 308];
      const Ar = Symbol('body');
      class BodyAsyncIterable {
        constructor(a) {
          this[Ar] = a;
          this[ae] = false;
        }
        async *[Symbol.asyncIterator]() {
          Ue(!this[ae], 'disturbed');
          this[ae] = true;
          yield* this[Ar];
        }
      }
      class RedirectHandler {
        constructor(a, C, q, Wt) {
          if (C != null && (!Number.isInteger(C) || C < 0)) {
            throw new lt('maxRedirections must be a positive number');
          }
          re.validateHandler(Wt, q.method, q.upgrade);
          this.dispatch = a;
          this.location = null;
          this.abort = null;
          this.opts = { ...q, maxRedirections: 0 };
          this.maxRedirections = C;
          this.handler = Wt;
          this.history = [];
          if (re.isStream(this.opts.body)) {
            if (re.bodyLength(this.opts.body) === 0) {
              this.opts.body.on('data', function () {
                Ue(false);
              });
            }
            if (typeof this.opts.body.readableDidRead !== 'boolean') {
              this.opts.body[ae] = false;
              Pt.prototype.on.call(this.opts.body, 'data', function () {
                this[ae] = true;
              });
            }
          } else if (
            this.opts.body &&
            typeof this.opts.body.pipeTo === 'function'
          ) {
            this.opts.body = new BodyAsyncIterable(this.opts.body);
          } else if (
            this.opts.body &&
            typeof this.opts.body !== 'string' &&
            !ArrayBuffer.isView(this.opts.body) &&
            re.isIterable(this.opts.body)
          ) {
            this.opts.body = new BodyAsyncIterable(this.opts.body);
          }
        }
        onConnect(a) {
          this.abort = a;
          this.handler.onConnect(a, { history: this.history });
        }
        onUpgrade(a, C, q) {
          this.handler.onUpgrade(a, C, q);
        }
        onError(a) {
          this.handler.onError(a);
        }
        onHeaders(a, C, q, ae) {
          this.location =
            this.history.length >= this.maxRedirections ||
            re.isDisturbed(this.opts.body)
              ? null
              : parseLocation(a, C);
          if (this.opts.origin) {
            this.history.push(new URL(this.opts.path, this.opts.origin));
          }
          if (!this.location) {
            return this.handler.onHeaders(a, C, q, ae);
          }
          const {
            origin: Ue,
            pathname: lt,
            search: Pt
          } = re.parseURL(
            new URL(
              this.location,
              this.opts.origin && new URL(this.opts.path, this.opts.origin)
            )
          );
          const Wt = Pt ? `${lt}${Pt}` : lt;
          this.opts.headers = cleanRequestHeaders(
            this.opts.headers,
            a === 303,
            this.opts.origin !== Ue
          );
          this.opts.path = Wt;
          this.opts.origin = Ue;
          this.opts.maxRedirections = 0;
          this.opts.query = null;
          if (a === 303 && this.opts.method !== 'HEAD') {
            this.opts.method = 'GET';
            this.opts.body = null;
          }
        }
        onData(a) {
          if (this.location) {
          } else {
            return this.handler.onData(a);
          }
        }
        onComplete(a) {
          if (this.location) {
            this.location = null;
            this.abort = null;
            this.dispatch(this.opts, this);
          } else {
            this.handler.onComplete(a);
          }
        }
        onBodySent(a) {
          if (this.handler.onBodySent) {
            this.handler.onBodySent(a);
          }
        }
      }
      function parseLocation(a, C) {
        if (Wt.indexOf(a) === -1) {
          return null;
        }
        for (let a = 0; a < C.length; a += 2) {
          if (C[a].toString().toLowerCase() === 'location') {
            return C[a + 1];
          }
        }
      }
      function shouldRemoveHeader(a, C, q) {
        if (a.length === 4) {
          return re.headerNameToString(a) === 'host';
        }
        if (C && re.headerNameToString(a).startsWith('content-')) {
          return true;
        }
        if (q && (a.length === 13 || a.length === 6 || a.length === 19)) {
          const C = re.headerNameToString(a);
          return (
            C === 'authorization' ||
            C === 'cookie' ||
            C === 'proxy-authorization'
          );
        }
        return false;
      }
      function cleanRequestHeaders(a, C, q) {
        const re = [];
        if (Array.isArray(a)) {
          for (let ae = 0; ae < a.length; ae += 2) {
            if (!shouldRemoveHeader(a[ae], C, q)) {
              re.push(a[ae], a[ae + 1]);
            }
          }
        } else if (a && typeof a === 'object') {
          for (const ae of Object.keys(a)) {
            if (!shouldRemoveHeader(ae, C, q)) {
              re.push(ae, a[ae]);
            }
          }
        } else {
          Ue(a == null, 'headers must be an object or an array');
        }
        return re;
      }
      a.exports = RedirectHandler;
    },
    6734: (a, C, q) => {
      const re = q(9491);
      const { kRetryHandlerDefaultRetry: ae } = q(7621);
      const { RequestRetryError: Ue } = q(3501);
      const {
        isDisturbed: lt,
        parseHeaders: Pt,
        parseRangeHeader: Wt
      } = q(9647);
      function calculateRetryAfterHeader(a) {
        const C = Date.now();
        const q = new Date(a).getTime() - C;
        return q;
      }
      class RetryHandler {
        constructor(a, C) {
          const { retryOptions: q, ...re } = a;
          const {
            retry: Ue,
            maxRetries: lt,
            maxTimeout: Pt,
            minTimeout: Wt,
            timeoutFactor: Ar,
            methods: Er,
            errorCodes: Ir,
            retryAfter: Br,
            statusCodes: Qr
          } = q ?? {};
          this.dispatch = C.dispatch;
          this.handler = C.handler;
          this.opts = re;
          this.abort = null;
          this.aborted = false;
          this.retryOpts = {
            retry: Ue ?? RetryHandler[ae],
            retryAfter: Br ?? true,
            maxTimeout: Pt ?? 30 * 1e3,
            timeout: Wt ?? 500,
            timeoutFactor: Ar ?? 2,
            maxRetries: lt ?? 5,
            methods: Er ?? ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE'],
            statusCodes: Qr ?? [500, 502, 503, 504, 429],
            errorCodes: Ir ?? [
              'ECONNRESET',
              'ECONNREFUSED',
              'ENOTFOUND',
              'ENETDOWN',
              'ENETUNREACH',
              'EHOSTDOWN',
              'EHOSTUNREACH',
              'EPIPE'
            ]
          };
          this.retryCount = 0;
          this.start = 0;
          this.end = null;
          this.etag = null;
          this.resume = null;
          this.handler.onConnect((a) => {
            this.aborted = true;
            if (this.abort) {
              this.abort(a);
            } else {
              this.reason = a;
            }
          });
        }
        onRequestSent() {
          if (this.handler.onRequestSent) {
            this.handler.onRequestSent();
          }
        }
        onUpgrade(a, C, q) {
          if (this.handler.onUpgrade) {
            this.handler.onUpgrade(a, C, q);
          }
        }
        onConnect(a) {
          if (this.aborted) {
            a(this.reason);
          } else {
            this.abort = a;
          }
        }
        onBodySent(a) {
          if (this.handler.onBodySent) return this.handler.onBodySent(a);
        }
        static [ae](a, { state: C, opts: q }, re) {
          const { statusCode: ae, code: Ue, headers: lt } = a;
          const { method: Pt, retryOptions: Wt } = q;
          const {
            maxRetries: Ar,
            timeout: Er,
            maxTimeout: Ir,
            timeoutFactor: Br,
            statusCodes: Qr,
            errorCodes: kr,
            methods: Dr
          } = Wt;
          let { counter: Nr, currentTimeout: Lr } = C;
          Lr = Lr != null && Lr > 0 ? Lr : Er;
          if (
            Ue &&
            Ue !== 'UND_ERR_REQ_RETRY' &&
            Ue !== 'UND_ERR_SOCKET' &&
            !kr.includes(Ue)
          ) {
            re(a);
            return;
          }
          if (Array.isArray(Dr) && !Dr.includes(Pt)) {
            re(a);
            return;
          }
          if (ae != null && Array.isArray(Qr) && !Qr.includes(ae)) {
            re(a);
            return;
          }
          if (Nr > Ar) {
            re(a);
            return;
          }
          let Fr = lt != null && lt['retry-after'];
          if (Fr) {
            Fr = Number(Fr);
            Fr = isNaN(Fr) ? calculateRetryAfterHeader(Fr) : Fr * 1e3;
          }
          const Mr = Fr > 0 ? Math.min(Fr, Ir) : Math.min(Lr * Br ** Nr, Ir);
          C.currentTimeout = Mr;
          setTimeout(() => re(null), Mr);
        }
        onHeaders(a, C, q, ae) {
          const lt = Pt(C);
          this.retryCount += 1;
          if (a >= 300) {
            this.abort(
              new Ue('Request failed', a, {
                headers: lt,
                count: this.retryCount
              })
            );
            return false;
          }
          if (this.resume != null) {
            this.resume = null;
            if (a !== 206) {
              return true;
            }
            const C = Wt(lt['content-range']);
            if (!C) {
              this.abort(
                new Ue('Content-Range mismatch', a, {
                  headers: lt,
                  count: this.retryCount
                })
              );
              return false;
            }
            if (this.etag != null && this.etag !== lt.etag) {
              this.abort(
                new Ue('ETag mismatch', a, {
                  headers: lt,
                  count: this.retryCount
                })
              );
              return false;
            }
            const { start: ae, size: Pt, end: Ar = Pt } = C;
            re(this.start === ae, 'content-range mismatch');
            re(this.end == null || this.end === Ar, 'content-range mismatch');
            this.resume = q;
            return true;
          }
          if (this.end == null) {
            if (a === 206) {
              const Ue = Wt(lt['content-range']);
              if (Ue == null) {
                return this.handler.onHeaders(a, C, q, ae);
              }
              const { start: Pt, size: Ar, end: Er = Ar } = Ue;
              re(
                Pt != null && Number.isFinite(Pt) && this.start !== Pt,
                'content-range mismatch'
              );
              re(Number.isFinite(Pt));
              re(
                Er != null && Number.isFinite(Er) && this.end !== Er,
                'invalid content-length'
              );
              this.start = Pt;
              this.end = Er;
            }
            if (this.end == null) {
              const a = lt['content-length'];
              this.end = a != null ? Number(a) : null;
            }
            re(Number.isFinite(this.start));
            re(
              this.end == null || Number.isFinite(this.end),
              'invalid content-length'
            );
            this.resume = q;
            this.etag = lt.etag != null ? lt.etag : null;
            return this.handler.onHeaders(a, C, q, ae);
          }
          const Ar = new Ue('Request failed', a, {
            headers: lt,
            count: this.retryCount
          });
          this.abort(Ar);
          return false;
        }
        onData(a) {
          this.start += a.length;
          return this.handler.onData(a);
        }
        onComplete(a) {
          this.retryCount = 0;
          return this.handler.onComplete(a);
        }
        onError(a) {
          if (this.aborted || lt(this.opts.body)) {
            return this.handler.onError(a);
          }
          this.retryOpts.retry(
            a,
            {
              state: {
                counter: this.retryCount++,
                currentTimeout: this.retryAfter
              },
              opts: { retryOptions: this.retryOpts, ...this.opts }
            },
            onRetry.bind(this)
          );
          function onRetry(a) {
            if (a != null || this.aborted || lt(this.opts.body)) {
              return this.handler.onError(a);
            }
            if (this.start !== 0) {
              this.opts = {
                ...this.opts,
                headers: {
                  ...this.opts.headers,
                  range: `bytes=${this.start}-${this.end ?? ''}`
                }
              };
            }
            try {
              this.dispatch(this.opts, this);
            } catch (a) {
              this.handler.onError(a);
            }
          }
        }
      }
      a.exports = RetryHandler;
    },
    3163: (a, C, q) => {
      'use strict';
      const re = q(6086);
      function createRedirectInterceptor({ maxRedirections: a }) {
        return (C) =>
          function Intercept(q, ae) {
            const { maxRedirections: Ue = a } = q;
            if (!Ue) {
              return C(q, ae);
            }
            const lt = new re(C, Ue, q, ae);
            q = { ...q, maxRedirections: 0 };
            return C(q, lt);
          };
      }
      a.exports = createRedirectInterceptor;
    },
    446: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C.SPECIAL_HEADERS =
        C.HEADER_STATE =
        C.MINOR =
        C.MAJOR =
        C.CONNECTION_TOKEN_CHARS =
        C.HEADER_CHARS =
        C.TOKEN =
        C.STRICT_TOKEN =
        C.HEX =
        C.URL_CHAR =
        C.STRICT_URL_CHAR =
        C.USERINFO_CHARS =
        C.MARK =
        C.ALPHANUM =
        C.NUM =
        C.HEX_MAP =
        C.NUM_MAP =
        C.ALPHA =
        C.FINISH =
        C.H_METHOD_MAP =
        C.METHOD_MAP =
        C.METHODS_RTSP =
        C.METHODS_ICE =
        C.METHODS_HTTP =
        C.METHODS =
        C.LENIENT_FLAGS =
        C.FLAGS =
        C.TYPE =
        C.ERROR =
          void 0;
      const re = q(8675);
      var ae;
      (function (a) {
        a[(a['OK'] = 0)] = 'OK';
        a[(a['INTERNAL'] = 1)] = 'INTERNAL';
        a[(a['STRICT'] = 2)] = 'STRICT';
        a[(a['LF_EXPECTED'] = 3)] = 'LF_EXPECTED';
        a[(a['UNEXPECTED_CONTENT_LENGTH'] = 4)] = 'UNEXPECTED_CONTENT_LENGTH';
        a[(a['CLOSED_CONNECTION'] = 5)] = 'CLOSED_CONNECTION';
        a[(a['INVALID_METHOD'] = 6)] = 'INVALID_METHOD';
        a[(a['INVALID_URL'] = 7)] = 'INVALID_URL';
        a[(a['INVALID_CONSTANT'] = 8)] = 'INVALID_CONSTANT';
        a[(a['INVALID_VERSION'] = 9)] = 'INVALID_VERSION';
        a[(a['INVALID_HEADER_TOKEN'] = 10)] = 'INVALID_HEADER_TOKEN';
        a[(a['INVALID_CONTENT_LENGTH'] = 11)] = 'INVALID_CONTENT_LENGTH';
        a[(a['INVALID_CHUNK_SIZE'] = 12)] = 'INVALID_CHUNK_SIZE';
        a[(a['INVALID_STATUS'] = 13)] = 'INVALID_STATUS';
        a[(a['INVALID_EOF_STATE'] = 14)] = 'INVALID_EOF_STATE';
        a[(a['INVALID_TRANSFER_ENCODING'] = 15)] = 'INVALID_TRANSFER_ENCODING';
        a[(a['CB_MESSAGE_BEGIN'] = 16)] = 'CB_MESSAGE_BEGIN';
        a[(a['CB_HEADERS_COMPLETE'] = 17)] = 'CB_HEADERS_COMPLETE';
        a[(a['CB_MESSAGE_COMPLETE'] = 18)] = 'CB_MESSAGE_COMPLETE';
        a[(a['CB_CHUNK_HEADER'] = 19)] = 'CB_CHUNK_HEADER';
        a[(a['CB_CHUNK_COMPLETE'] = 20)] = 'CB_CHUNK_COMPLETE';
        a[(a['PAUSED'] = 21)] = 'PAUSED';
        a[(a['PAUSED_UPGRADE'] = 22)] = 'PAUSED_UPGRADE';
        a[(a['PAUSED_H2_UPGRADE'] = 23)] = 'PAUSED_H2_UPGRADE';
        a[(a['USER'] = 24)] = 'USER';
      })((ae = C.ERROR || (C.ERROR = {})));
      var Ue;
      (function (a) {
        a[(a['BOTH'] = 0)] = 'BOTH';
        a[(a['REQUEST'] = 1)] = 'REQUEST';
        a[(a['RESPONSE'] = 2)] = 'RESPONSE';
      })((Ue = C.TYPE || (C.TYPE = {})));
      var lt;
      (function (a) {
        a[(a['CONNECTION_KEEP_ALIVE'] = 1)] = 'CONNECTION_KEEP_ALIVE';
        a[(a['CONNECTION_CLOSE'] = 2)] = 'CONNECTION_CLOSE';
        a[(a['CONNECTION_UPGRADE'] = 4)] = 'CONNECTION_UPGRADE';
        a[(a['CHUNKED'] = 8)] = 'CHUNKED';
        a[(a['UPGRADE'] = 16)] = 'UPGRADE';
        a[(a['CONTENT_LENGTH'] = 32)] = 'CONTENT_LENGTH';
        a[(a['SKIPBODY'] = 64)] = 'SKIPBODY';
        a[(a['TRAILING'] = 128)] = 'TRAILING';
        a[(a['TRANSFER_ENCODING'] = 512)] = 'TRANSFER_ENCODING';
      })((lt = C.FLAGS || (C.FLAGS = {})));
      var Pt;
      (function (a) {
        a[(a['HEADERS'] = 1)] = 'HEADERS';
        a[(a['CHUNKED_LENGTH'] = 2)] = 'CHUNKED_LENGTH';
        a[(a['KEEP_ALIVE'] = 4)] = 'KEEP_ALIVE';
      })((Pt = C.LENIENT_FLAGS || (C.LENIENT_FLAGS = {})));
      var Wt;
      (function (a) {
        a[(a['DELETE'] = 0)] = 'DELETE';
        a[(a['GET'] = 1)] = 'GET';
        a[(a['HEAD'] = 2)] = 'HEAD';
        a[(a['POST'] = 3)] = 'POST';
        a[(a['PUT'] = 4)] = 'PUT';
        a[(a['CONNECT'] = 5)] = 'CONNECT';
        a[(a['OPTIONS'] = 6)] = 'OPTIONS';
        a[(a['TRACE'] = 7)] = 'TRACE';
        a[(a['COPY'] = 8)] = 'COPY';
        a[(a['LOCK'] = 9)] = 'LOCK';
        a[(a['MKCOL'] = 10)] = 'MKCOL';
        a[(a['MOVE'] = 11)] = 'MOVE';
        a[(a['PROPFIND'] = 12)] = 'PROPFIND';
        a[(a['PROPPATCH'] = 13)] = 'PROPPATCH';
        a[(a['SEARCH'] = 14)] = 'SEARCH';
        a[(a['UNLOCK'] = 15)] = 'UNLOCK';
        a[(a['BIND'] = 16)] = 'BIND';
        a[(a['REBIND'] = 17)] = 'REBIND';
        a[(a['UNBIND'] = 18)] = 'UNBIND';
        a[(a['ACL'] = 19)] = 'ACL';
        a[(a['REPORT'] = 20)] = 'REPORT';
        a[(a['MKACTIVITY'] = 21)] = 'MKACTIVITY';
        a[(a['CHECKOUT'] = 22)] = 'CHECKOUT';
        a[(a['MERGE'] = 23)] = 'MERGE';
        a[(a['M-SEARCH'] = 24)] = 'M-SEARCH';
        a[(a['NOTIFY'] = 25)] = 'NOTIFY';
        a[(a['SUBSCRIBE'] = 26)] = 'SUBSCRIBE';
        a[(a['UNSUBSCRIBE'] = 27)] = 'UNSUBSCRIBE';
        a[(a['PATCH'] = 28)] = 'PATCH';
        a[(a['PURGE'] = 29)] = 'PURGE';
        a[(a['MKCALENDAR'] = 30)] = 'MKCALENDAR';
        a[(a['LINK'] = 31)] = 'LINK';
        a[(a['UNLINK'] = 32)] = 'UNLINK';
        a[(a['SOURCE'] = 33)] = 'SOURCE';
        a[(a['PRI'] = 34)] = 'PRI';
        a[(a['DESCRIBE'] = 35)] = 'DESCRIBE';
        a[(a['ANNOUNCE'] = 36)] = 'ANNOUNCE';
        a[(a['SETUP'] = 37)] = 'SETUP';
        a[(a['PLAY'] = 38)] = 'PLAY';
        a[(a['PAUSE'] = 39)] = 'PAUSE';
        a[(a['TEARDOWN'] = 40)] = 'TEARDOWN';
        a[(a['GET_PARAMETER'] = 41)] = 'GET_PARAMETER';
        a[(a['SET_PARAMETER'] = 42)] = 'SET_PARAMETER';
        a[(a['REDIRECT'] = 43)] = 'REDIRECT';
        a[(a['RECORD'] = 44)] = 'RECORD';
        a[(a['FLUSH'] = 45)] = 'FLUSH';
      })((Wt = C.METHODS || (C.METHODS = {})));
      C.METHODS_HTTP = [
        Wt.DELETE,
        Wt.GET,
        Wt.HEAD,
        Wt.POST,
        Wt.PUT,
        Wt.CONNECT,
        Wt.OPTIONS,
        Wt.TRACE,
        Wt.COPY,
        Wt.LOCK,
        Wt.MKCOL,
        Wt.MOVE,
        Wt.PROPFIND,
        Wt.PROPPATCH,
        Wt.SEARCH,
        Wt.UNLOCK,
        Wt.BIND,
        Wt.REBIND,
        Wt.UNBIND,
        Wt.ACL,
        Wt.REPORT,
        Wt.MKACTIVITY,
        Wt.CHECKOUT,
        Wt.MERGE,
        Wt['M-SEARCH'],
        Wt.NOTIFY,
        Wt.SUBSCRIBE,
        Wt.UNSUBSCRIBE,
        Wt.PATCH,
        Wt.PURGE,
        Wt.MKCALENDAR,
        Wt.LINK,
        Wt.UNLINK,
        Wt.PRI,
        Wt.SOURCE
      ];
      C.METHODS_ICE = [Wt.SOURCE];
      C.METHODS_RTSP = [
        Wt.OPTIONS,
        Wt.DESCRIBE,
        Wt.ANNOUNCE,
        Wt.SETUP,
        Wt.PLAY,
        Wt.PAUSE,
        Wt.TEARDOWN,
        Wt.GET_PARAMETER,
        Wt.SET_PARAMETER,
        Wt.REDIRECT,
        Wt.RECORD,
        Wt.FLUSH,
        Wt.GET,
        Wt.POST
      ];
      C.METHOD_MAP = re.enumToMap(Wt);
      C.H_METHOD_MAP = {};
      Object.keys(C.METHOD_MAP).forEach((a) => {
        if (/^H/.test(a)) {
          C.H_METHOD_MAP[a] = C.METHOD_MAP[a];
        }
      });
      var Ar;
      (function (a) {
        a[(a['SAFE'] = 0)] = 'SAFE';
        a[(a['SAFE_WITH_CB'] = 1)] = 'SAFE_WITH_CB';
        a[(a['UNSAFE'] = 2)] = 'UNSAFE';
      })((Ar = C.FINISH || (C.FINISH = {})));
      C.ALPHA = [];
      for (let a = 'A'.charCodeAt(0); a <= 'Z'.charCodeAt(0); a++) {
        C.ALPHA.push(String.fromCharCode(a));
        C.ALPHA.push(String.fromCharCode(a + 32));
      }
      C.NUM_MAP = {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9
      };
      C.HEX_MAP = {
        0: 0,
        1: 1,
        2: 2,
        3: 3,
        4: 4,
        5: 5,
        6: 6,
        7: 7,
        8: 8,
        9: 9,
        A: 10,
        B: 11,
        C: 12,
        D: 13,
        E: 14,
        F: 15,
        a: 10,
        b: 11,
        c: 12,
        d: 13,
        e: 14,
        f: 15
      };
      C.NUM = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
      C.ALPHANUM = C.ALPHA.concat(C.NUM);
      C.MARK = ['-', '_', '.', '!', '~', '*', "'", '(', ')'];
      C.USERINFO_CHARS = C.ALPHANUM.concat(C.MARK).concat([
        '%',
        ';',
        ':',
        '&',
        '=',
        '+',
        '$',
        ','
      ]);
      C.STRICT_URL_CHAR = [
        '!',
        '"',
        '$',
        '%',
        '&',
        "'",
        '(',
        ')',
        '*',
        '+',
        ',',
        '-',
        '.',
        '/',
        ':',
        ';',
        '<',
        '=',
        '>',
        '@',
        '[',
        '\\',
        ']',
        '^',
        '_',
        '`',
        '{',
        '|',
        '}',
        '~'
      ].concat(C.ALPHANUM);
      C.URL_CHAR = C.STRICT_URL_CHAR.concat(['\t', '\f']);
      for (let a = 128; a <= 255; a++) {
        C.URL_CHAR.push(a);
      }
      C.HEX = C.NUM.concat([
        'a',
        'b',
        'c',
        'd',
        'e',
        'f',
        'A',
        'B',
        'C',
        'D',
        'E',
        'F'
      ]);
      C.STRICT_TOKEN = [
        '!',
        '#',
        '$',
        '%',
        '&',
        "'",
        '*',
        '+',
        '-',
        '.',
        '^',
        '_',
        '`',
        '|',
        '~'
      ].concat(C.ALPHANUM);
      C.TOKEN = C.STRICT_TOKEN.concat([' ']);
      C.HEADER_CHARS = ['\t'];
      for (let a = 32; a <= 255; a++) {
        if (a !== 127) {
          C.HEADER_CHARS.push(a);
        }
      }
      C.CONNECTION_TOKEN_CHARS = C.HEADER_CHARS.filter((a) => a !== 44);
      C.MAJOR = C.NUM_MAP;
      C.MINOR = C.MAJOR;
      var Er;
      (function (a) {
        a[(a['GENERAL'] = 0)] = 'GENERAL';
        a[(a['CONNECTION'] = 1)] = 'CONNECTION';
        a[(a['CONTENT_LENGTH'] = 2)] = 'CONTENT_LENGTH';
        a[(a['TRANSFER_ENCODING'] = 3)] = 'TRANSFER_ENCODING';
        a[(a['UPGRADE'] = 4)] = 'UPGRADE';
        a[(a['CONNECTION_KEEP_ALIVE'] = 5)] = 'CONNECTION_KEEP_ALIVE';
        a[(a['CONNECTION_CLOSE'] = 6)] = 'CONNECTION_CLOSE';
        a[(a['CONNECTION_UPGRADE'] = 7)] = 'CONNECTION_UPGRADE';
        a[(a['TRANSFER_ENCODING_CHUNKED'] = 8)] = 'TRANSFER_ENCODING_CHUNKED';
      })((Er = C.HEADER_STATE || (C.HEADER_STATE = {})));
      C.SPECIAL_HEADERS = {
        connection: Er.CONNECTION,
        'content-length': Er.CONTENT_LENGTH,
        'proxy-connection': Er.CONNECTION,
        'transfer-encoding': Er.TRANSFER_ENCODING,
        upgrade: Er.UPGRADE
      };
    },
    2959: (a) => {
      a.exports =
        '';
    },
    5674: (a) => {
      a.exports =
        '';
    },
    8675: (a, C) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C.enumToMap = void 0;
      function enumToMap(a) {
        const C = {};
        Object.keys(a).forEach((q) => {
          const re = a[q];
          if (typeof re === 'number') {
            C[q] = re;
          }
        });
        return C;
      }
      C.enumToMap = enumToMap;
    },
    1045: (a, C, q) => {
      'use strict';
      const { kClients: re } = q(7621);
      const ae = q(8551);
      const {
        kAgent: Ue,
        kMockAgentSet: lt,
        kMockAgentGet: Pt,
        kDispatches: Wt,
        kIsMockActive: Ar,
        kNetConnect: Er,
        kGetNetConnect: Ir,
        kOptions: Br,
        kFactory: Qr
      } = q(6978);
      const kr = q(9103);
      const Dr = q(1153);
      const { matchValue: Nr, buildMockOptions: Lr } = q(8121);
      const { InvalidArgumentError: Fr, UndiciError: Mr } = q(3501);
      const Pr = q(3954);
      const Or = q(2799);
      const xr = q(7175);
      class FakeWeakRef {
        constructor(a) {
          this.value = a;
        }
        deref() {
          return this.value;
        }
      }
      class MockAgent extends Pr {
        constructor(a) {
          super(a);
          this[Er] = true;
          this[Ar] = true;
          if (a && a.agent && typeof a.agent.dispatch !== 'function') {
            throw new Fr('Argument opts.agent must implement Agent');
          }
          const C = a && a.agent ? a.agent : new ae(a);
          this[Ue] = C;
          this[re] = C[re];
          this[Br] = Lr(a);
        }
        get(a) {
          let C = this[Pt](a);
          if (!C) {
            C = this[Qr](a);
            this[lt](a, C);
          }
          return C;
        }
        dispatch(a, C) {
          this.get(a.origin);
          return this[Ue].dispatch(a, C);
        }
        async close() {
          await this[Ue].close();
          this[re].clear();
        }
        deactivate() {
          this[Ar] = false;
        }
        activate() {
          this[Ar] = true;
        }
        enableNetConnect(a) {
          if (
            typeof a === 'string' ||
            typeof a === 'function' ||
            a instanceof RegExp
          ) {
            if (Array.isArray(this[Er])) {
              this[Er].push(a);
            } else {
              this[Er] = [a];
            }
          } else if (typeof a === 'undefined') {
            this[Er] = true;
          } else {
            throw new Fr(
              'Unsupported matcher. Must be one of String|Function|RegExp.'
            );
          }
        }
        disableNetConnect() {
          this[Er] = false;
        }
        get isMockActive() {
          return this[Ar];
        }
        [lt](a, C) {
          this[re].set(a, new FakeWeakRef(C));
        }
        [Qr](a) {
          const C = Object.assign({ agent: this }, this[Br]);
          return this[Br] && this[Br].connections === 1
            ? new kr(a, C)
            : new Dr(a, C);
        }
        [Pt](a) {
          const C = this[re].get(a);
          if (C) {
            return C.deref();
          }
          if (typeof a !== 'string') {
            const C = this[Qr]('http://localhost:9999');
            this[lt](a, C);
            return C;
          }
          for (const [C, q] of Array.from(this[re])) {
            const re = q.deref();
            if (re && typeof C !== 'string' && Nr(C, a)) {
              const C = this[Qr](a);
              this[lt](a, C);
              C[Wt] = re[Wt];
              return C;
            }
          }
        }
        [Ir]() {
          return this[Er];
        }
        pendingInterceptors() {
          const a = this[re];
          return Array.from(a.entries())
            .flatMap(([a, C]) =>
              C.deref()[Wt].map((C) => ({ ...C, origin: a }))
            )
            .filter(({ pending: a }) => a);
        }
        assertNoPendingInterceptors({
          pendingInterceptorsFormatter: a = new xr()
        } = {}) {
          const C = this.pendingInterceptors();
          if (C.length === 0) {
            return;
          }
          const q = new Or('interceptor', 'interceptors').pluralize(C.length);
          throw new Mr(
            `\n${q.count} ${q.noun} ${q.is} pending:\n\n${a.format(C)}\n`.trim()
          );
        }
      }
      a.exports = MockAgent;
    },
    9103: (a, C, q) => {
      'use strict';
      const { promisify: re } = q(3837);
      const ae = q(8352);
      const { buildMockDispatch: Ue } = q(8121);
      const {
        kDispatches: lt,
        kMockAgent: Pt,
        kClose: Wt,
        kOriginalClose: Ar,
        kOrigin: Er,
        kOriginalDispatch: Ir,
        kConnected: Br
      } = q(6978);
      const { MockInterceptor: Qr } = q(448);
      const kr = q(7621);
      const { InvalidArgumentError: Dr } = q(3501);
      class MockClient extends ae {
        constructor(a, C) {
          super(a, C);
          if (!C || !C.agent || typeof C.agent.dispatch !== 'function') {
            throw new Dr('Argument opts.agent must implement Agent');
          }
          this[Pt] = C.agent;
          this[Er] = a;
          this[lt] = [];
          this[Br] = 1;
          this[Ir] = this.dispatch;
          this[Ar] = this.close.bind(this);
          this.dispatch = Ue.call(this);
          this.close = this[Wt];
        }
        get [kr.kConnected]() {
          return this[Br];
        }
        intercept(a) {
          return new Qr(a, this[lt]);
        }
        async [Wt]() {
          await re(this[Ar])();
          this[Br] = 0;
          this[Pt][kr.kClients].delete(this[Er]);
        }
      }
      a.exports = MockClient;
    },
    5458: (a, C, q) => {
      'use strict';
      const { UndiciError: re } = q(3501);
      class MockNotMatchedError extends re {
        constructor(a) {
          super(a);
          Error.captureStackTrace(this, MockNotMatchedError);
          this.name = 'MockNotMatchedError';
          this.message =
            a || 'The request does not match any registered mock dispatches';
          this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED';
        }
      }
      a.exports = { MockNotMatchedError: MockNotMatchedError };
    },
    448: (a, C, q) => {
      'use strict';
      const {
        getResponseData: re,
        buildKey: ae,
        addMockDispatch: Ue
      } = q(8121);
      const {
        kDispatches: lt,
        kDispatchKey: Pt,
        kDefaultHeaders: Wt,
        kDefaultTrailers: Ar,
        kContentLength: Er,
        kMockDispatch: Ir
      } = q(6978);
      const { InvalidArgumentError: Br } = q(3501);
      const { buildURL: Qr } = q(9647);
      class MockScope {
        constructor(a) {
          this[Ir] = a;
        }
        delay(a) {
          if (typeof a !== 'number' || !Number.isInteger(a) || a <= 0) {
            throw new Br('waitInMs must be a valid integer > 0');
          }
          this[Ir].delay = a;
          return this;
        }
        persist() {
          this[Ir].persist = true;
          return this;
        }
        times(a) {
          if (typeof a !== 'number' || !Number.isInteger(a) || a <= 0) {
            throw new Br('repeatTimes must be a valid integer > 0');
          }
          this[Ir].times = a;
          return this;
        }
      }
      class MockInterceptor {
        constructor(a, C) {
          if (typeof a !== 'object') {
            throw new Br('opts must be an object');
          }
          if (typeof a.path === 'undefined') {
            throw new Br('opts.path must be defined');
          }
          if (typeof a.method === 'undefined') {
            a.method = 'GET';
          }
          if (typeof a.path === 'string') {
            if (a.query) {
              a.path = Qr(a.path, a.query);
            } else {
              const C = new URL(a.path, 'data://');
              a.path = C.pathname + C.search;
            }
          }
          if (typeof a.method === 'string') {
            a.method = a.method.toUpperCase();
          }
          this[Pt] = ae(a);
          this[lt] = C;
          this[Wt] = {};
          this[Ar] = {};
          this[Er] = false;
        }
        createMockScopeDispatchData(a, C, q = {}) {
          const ae = re(C);
          const Ue = this[Er] ? { 'content-length': ae.length } : {};
          const lt = { ...this[Wt], ...Ue, ...q.headers };
          const Pt = { ...this[Ar], ...q.trailers };
          return { statusCode: a, data: C, headers: lt, trailers: Pt };
        }
        validateReplyParameters(a, C, q) {
          if (typeof a === 'undefined') {
            throw new Br('statusCode must be defined');
          }
          if (typeof C === 'undefined') {
            throw new Br('data must be defined');
          }
          if (typeof q !== 'object') {
            throw new Br('responseOptions must be an object');
          }
        }
        reply(a) {
          if (typeof a === 'function') {
            const wrappedDefaultsCallback = (C) => {
              const q = a(C);
              if (typeof q !== 'object') {
                throw new Br('reply options callback must return an object');
              }
              const {
                statusCode: re,
                data: ae = '',
                responseOptions: Ue = {}
              } = q;
              this.validateReplyParameters(re, ae, Ue);
              return { ...this.createMockScopeDispatchData(re, ae, Ue) };
            };
            const C = Ue(this[lt], this[Pt], wrappedDefaultsCallback);
            return new MockScope(C);
          }
          const [C, q = '', re = {}] = [...arguments];
          this.validateReplyParameters(C, q, re);
          const ae = this.createMockScopeDispatchData(C, q, re);
          const Wt = Ue(this[lt], this[Pt], ae);
          return new MockScope(Wt);
        }
        replyWithError(a) {
          if (typeof a === 'undefined') {
            throw new Br('error must be defined');
          }
          const C = Ue(this[lt], this[Pt], { error: a });
          return new MockScope(C);
        }
        defaultReplyHeaders(a) {
          if (typeof a === 'undefined') {
            throw new Br('headers must be defined');
          }
          this[Wt] = a;
          return this;
        }
        defaultReplyTrailers(a) {
          if (typeof a === 'undefined') {
            throw new Br('trailers must be defined');
          }
          this[Ar] = a;
          return this;
        }
        replyContentLength() {
          this[Er] = true;
          return this;
        }
      }
      a.exports.MockInterceptor = MockInterceptor;
      a.exports.MockScope = MockScope;
    },
    1153: (a, C, q) => {
      'use strict';
      const { promisify: re } = q(3837);
      const ae = q(9859);
      const { buildMockDispatch: Ue } = q(8121);
      const {
        kDispatches: lt,
        kMockAgent: Pt,
        kClose: Wt,
        kOriginalClose: Ar,
        kOrigin: Er,
        kOriginalDispatch: Ir,
        kConnected: Br
      } = q(6978);
      const { MockInterceptor: Qr } = q(448);
      const kr = q(7621);
      const { InvalidArgumentError: Dr } = q(3501);
      class MockPool extends ae {
        constructor(a, C) {
          super(a, C);
          if (!C || !C.agent || typeof C.agent.dispatch !== 'function') {
            throw new Dr('Argument opts.agent must implement Agent');
          }
          this[Pt] = C.agent;
          this[Er] = a;
          this[lt] = [];
          this[Br] = 1;
          this[Ir] = this.dispatch;
          this[Ar] = this.close.bind(this);
          this.dispatch = Ue.call(this);
          this.close = this[Wt];
        }
        get [kr.kConnected]() {
          return this[Br];
        }
        intercept(a) {
          return new Qr(a, this[lt]);
        }
        async [Wt]() {
          await re(this[Ar])();
          this[Br] = 0;
          this[Pt][kr.kClients].delete(this[Er]);
        }
      }
      a.exports = MockPool;
    },
    6978: (a) => {
      'use strict';
      a.exports = {
        kAgent: Symbol('agent'),
        kOptions: Symbol('options'),
        kFactory: Symbol('factory'),
        kDispatches: Symbol('dispatches'),
        kDispatchKey: Symbol('dispatch key'),
        kDefaultHeaders: Symbol('default headers'),
        kDefaultTrailers: Symbol('default trailers'),
        kContentLength: Symbol('content length'),
        kMockAgent: Symbol('mock agent'),
        kMockAgentSet: Symbol('mock agent set'),
        kMockAgentGet: Symbol('mock agent get'),
        kMockDispatch: Symbol('mock dispatch'),
        kClose: Symbol('close'),
        kOriginalClose: Symbol('original agent close'),
        kOrigin: Symbol('origin'),
        kIsMockActive: Symbol('is mock active'),
        kNetConnect: Symbol('net connect'),
        kGetNetConnect: Symbol('get net connect'),
        kConnected: Symbol('connected')
      };
    },
    8121: (a, C, q) => {
      'use strict';
      const { MockNotMatchedError: re } = q(5458);
      const {
        kDispatches: ae,
        kMockAgent: Ue,
        kOriginalDispatch: lt,
        kOrigin: Pt,
        kGetNetConnect: Wt
      } = q(6978);
      const { buildURL: Ar, nop: Er } = q(9647);
      const { STATUS_CODES: Ir } = q(3685);
      const {
        types: { isPromise: Br }
      } = q(3837);
      function matchValue(a, C) {
        if (typeof a === 'string') {
          return a === C;
        }
        if (a instanceof RegExp) {
          return a.test(C);
        }
        if (typeof a === 'function') {
          return a(C) === true;
        }
        return false;
      }
      function lowerCaseEntries(a) {
        return Object.fromEntries(
          Object.entries(a).map(([a, C]) => [a.toLocaleLowerCase(), C])
        );
      }
      function getHeaderByName(a, C) {
        if (Array.isArray(a)) {
          for (let q = 0; q < a.length; q += 2) {
            if (a[q].toLocaleLowerCase() === C.toLocaleLowerCase()) {
              return a[q + 1];
            }
          }
          return undefined;
        } else if (typeof a.get === 'function') {
          return a.get(C);
        } else {
          return lowerCaseEntries(a)[C.toLocaleLowerCase()];
        }
      }
      function buildHeadersFromArray(a) {
        const C = a.slice();
        const q = [];
        for (let a = 0; a < C.length; a += 2) {
          q.push([C[a], C[a + 1]]);
        }
        return Object.fromEntries(q);
      }
      function matchHeaders(a, C) {
        if (typeof a.headers === 'function') {
          if (Array.isArray(C)) {
            C = buildHeadersFromArray(C);
          }
          return a.headers(C ? lowerCaseEntries(C) : {});
        }
        if (typeof a.headers === 'undefined') {
          return true;
        }
        if (typeof C !== 'object' || typeof a.headers !== 'object') {
          return false;
        }
        for (const [q, re] of Object.entries(a.headers)) {
          const a = getHeaderByName(C, q);
          if (!matchValue(re, a)) {
            return false;
          }
        }
        return true;
      }
      function safeUrl(a) {
        if (typeof a !== 'string') {
          return a;
        }
        const C = a.split('?');
        if (C.length !== 2) {
          return a;
        }
        const q = new URLSearchParams(C.pop());
        q.sort();
        return [...C, q.toString()].join('?');
      }
      function matchKey(a, { path: C, method: q, body: re, headers: ae }) {
        const Ue = matchValue(a.path, C);
        const lt = matchValue(a.method, q);
        const Pt =
          typeof a.body !== 'undefined' ? matchValue(a.body, re) : true;
        const Wt = matchHeaders(a, ae);
        return Ue && lt && Pt && Wt;
      }
      function getResponseData(a) {
        if (Buffer.isBuffer(a)) {
          return a;
        } else if (typeof a === 'object') {
          return JSON.stringify(a);
        } else {
          return a.toString();
        }
      }
      function getMockDispatch(a, C) {
        const q = C.query ? Ar(C.path, C.query) : C.path;
        const ae = typeof q === 'string' ? safeUrl(q) : q;
        let Ue = a
          .filter(({ consumed: a }) => !a)
          .filter(({ path: a }) => matchValue(safeUrl(a), ae));
        if (Ue.length === 0) {
          throw new re(`Mock dispatch not matched for path '${ae}'`);
        }
        Ue = Ue.filter(({ method: a }) => matchValue(a, C.method));
        if (Ue.length === 0) {
          throw new re(`Mock dispatch not matched for method '${C.method}'`);
        }
        Ue = Ue.filter(({ body: a }) =>
          typeof a !== 'undefined' ? matchValue(a, C.body) : true
        );
        if (Ue.length === 0) {
          throw new re(`Mock dispatch not matched for body '${C.body}'`);
        }
        Ue = Ue.filter((a) => matchHeaders(a, C.headers));
        if (Ue.length === 0) {
          throw new re(
            `Mock dispatch not matched for headers '${typeof C.headers === 'object' ? JSON.stringify(C.headers) : C.headers}'`
          );
        }
        return Ue[0];
      }
      function addMockDispatch(a, C, q) {
        const re = {
          timesInvoked: 0,
          times: 1,
          persist: false,
          consumed: false
        };
        const ae = typeof q === 'function' ? { callback: q } : { ...q };
        const Ue = { ...re, ...C, pending: true, data: { error: null, ...ae } };
        a.push(Ue);
        return Ue;
      }
      function deleteMockDispatch(a, C) {
        const q = a.findIndex((a) => {
          if (!a.consumed) {
            return false;
          }
          return matchKey(a, C);
        });
        if (q !== -1) {
          a.splice(q, 1);
        }
      }
      function buildKey(a) {
        const { path: C, method: q, body: re, headers: ae, query: Ue } = a;
        return { path: C, method: q, body: re, headers: ae, query: Ue };
      }
      function generateKeyValues(a) {
        return Object.entries(a).reduce(
          (a, [C, q]) => [
            ...a,
            Buffer.from(`${C}`),
            Array.isArray(q)
              ? q.map((a) => Buffer.from(`${a}`))
              : Buffer.from(`${q}`)
          ],
          []
        );
      }
      function getStatusText(a) {
        return Ir[a] || 'unknown';
      }
      async function getResponse(a) {
        const C = [];
        for await (const q of a) {
          C.push(q);
        }
        return Buffer.concat(C).toString('utf8');
      }
      function mockDispatch(a, C) {
        const q = buildKey(a);
        const re = getMockDispatch(this[ae], q);
        re.timesInvoked++;
        if (re.data.callback) {
          re.data = { ...re.data, ...re.data.callback(a) };
        }
        const {
          data: {
            statusCode: Ue,
            data: lt,
            headers: Pt,
            trailers: Wt,
            error: Ar
          },
          delay: Ir,
          persist: Qr
        } = re;
        const { timesInvoked: kr, times: Dr } = re;
        re.consumed = !Qr && kr >= Dr;
        re.pending = kr < Dr;
        if (Ar !== null) {
          deleteMockDispatch(this[ae], q);
          C.onError(Ar);
          return true;
        }
        if (typeof Ir === 'number' && Ir > 0) {
          setTimeout(() => {
            handleReply(this[ae]);
          }, Ir);
        } else {
          handleReply(this[ae]);
        }
        function handleReply(re, ae = lt) {
          const Ar = Array.isArray(a.headers)
            ? buildHeadersFromArray(a.headers)
            : a.headers;
          const Ir = typeof ae === 'function' ? ae({ ...a, headers: Ar }) : ae;
          if (Br(Ir)) {
            Ir.then((a) => handleReply(re, a));
            return;
          }
          const Qr = getResponseData(Ir);
          const kr = generateKeyValues(Pt);
          const Dr = generateKeyValues(Wt);
          C.abort = Er;
          C.onHeaders(Ue, kr, resume, getStatusText(Ue));
          C.onData(Buffer.from(Qr));
          C.onComplete(Dr);
          deleteMockDispatch(re, q);
        }
        function resume() {}
        return true;
      }
      function buildMockDispatch() {
        const a = this[Ue];
        const C = this[Pt];
        const q = this[lt];
        return function dispatch(ae, Ue) {
          if (a.isMockActive) {
            try {
              mockDispatch.call(this, ae, Ue);
            } catch (lt) {
              if (lt instanceof re) {
                const Pt = a[Wt]();
                if (Pt === false) {
                  throw new re(
                    `${lt.message}: subsequent request to origin ${C} was not allowed (net.connect disabled)`
                  );
                }
                if (checkNetConnect(Pt, C)) {
                  q.call(this, ae, Ue);
                } else {
                  throw new re(
                    `${lt.message}: subsequent request to origin ${C} was not allowed (net.connect is not enabled for this origin)`
                  );
                }
              } else {
                throw lt;
              }
            }
          } else {
            q.call(this, ae, Ue);
          }
        };
      }
      function checkNetConnect(a, C) {
        const q = new URL(C);
        if (a === true) {
          return true;
        } else if (Array.isArray(a) && a.some((a) => matchValue(a, q.host))) {
          return true;
        }
        return false;
      }
      function buildMockOptions(a) {
        if (a) {
          const { agent: C, ...q } = a;
          return q;
        }
      }
      a.exports = {
        getResponseData: getResponseData,
        getMockDispatch: getMockDispatch,
        addMockDispatch: addMockDispatch,
        deleteMockDispatch: deleteMockDispatch,
        buildKey: buildKey,
        generateKeyValues: generateKeyValues,
        matchValue: matchValue,
        getResponse: getResponse,
        getStatusText: getStatusText,
        mockDispatch: mockDispatch,
        buildMockDispatch: buildMockDispatch,
        checkNetConnect: checkNetConnect,
        buildMockOptions: buildMockOptions,
        getHeaderByName: getHeaderByName
      };
    },
    7175: (a, C, q) => {
      'use strict';
      const { Transform: re } = q(2781);
      const { Console: ae } = q(6206);
      a.exports = class PendingInterceptorsFormatter {
        constructor({ disableColors: a } = {}) {
          this.transform = new re({
            transform(a, C, q) {
              q(null, a);
            }
          });
          this.logger = new ae({
            stdout: this.transform,
            inspectOptions: { colors: !a && !process.env.CI }
          });
        }
        format(a) {
          const C = a.map(
            ({
              method: a,
              path: C,
              data: { statusCode: q },
              persist: re,
              times: ae,
              timesInvoked: Ue,
              origin: lt
            }) => ({
              Method: a,
              Origin: lt,
              Path: C,
              'Status code': q,
              Persistent: re ? '✅' : '❌',
              Invocations: Ue,
              Remaining: re ? Infinity : ae - Ue
            })
          );
          this.logger.table(C);
          return this.transform.read().toString();
        }
      };
    },
    2799: (a) => {
      'use strict';
      const C = { pronoun: 'it', is: 'is', was: 'was', this: 'this' };
      const q = { pronoun: 'they', is: 'are', was: 'were', this: 'these' };
      a.exports = class Pluralizer {
        constructor(a, C) {
          this.singular = a;
          this.plural = C;
        }
        pluralize(a) {
          const re = a === 1;
          const ae = re ? C : q;
          const Ue = re ? this.singular : this.plural;
          return { ...ae, count: a, noun: Ue };
        }
      };
    },
    4680: (a) => {
      'use strict';
      const C = 2048;
      const q = C - 1;
      class FixedCircularBuffer {
        constructor() {
          this.bottom = 0;
          this.top = 0;
          this.list = new Array(C);
          this.next = null;
        }
        isEmpty() {
          return this.top === this.bottom;
        }
        isFull() {
          return ((this.top + 1) & q) === this.bottom;
        }
        push(a) {
          this.list[this.top] = a;
          this.top = (this.top + 1) & q;
        }
        shift() {
          const a = this.list[this.bottom];
          if (a === undefined) return null;
          this.list[this.bottom] = undefined;
          this.bottom = (this.bottom + 1) & q;
          return a;
        }
      }
      a.exports = class FixedQueue {
        constructor() {
          this.head = this.tail = new FixedCircularBuffer();
        }
        isEmpty() {
          return this.head.isEmpty();
        }
        push(a) {
          if (this.head.isFull()) {
            this.head = this.head.next = new FixedCircularBuffer();
          }
          this.head.push(a);
        }
        shift() {
          const a = this.tail;
          const C = a.shift();
          if (a.isEmpty() && a.next !== null) {
            this.tail = a.next;
          }
          return C;
        }
      };
    },
    5411: (a, C, q) => {
      'use strict';
      const re = q(6775);
      const ae = q(4680);
      const {
        kConnected: Ue,
        kSize: lt,
        kRunning: Pt,
        kPending: Wt,
        kQueued: Ar,
        kBusy: Er,
        kFree: Ir,
        kUrl: Br,
        kClose: Qr,
        kDestroy: kr,
        kDispatch: Dr
      } = q(7621);
      const Nr = q(8294);
      const Lr = Symbol('clients');
      const Fr = Symbol('needDrain');
      const Mr = Symbol('queue');
      const Pr = Symbol('closed resolve');
      const Or = Symbol('onDrain');
      const xr = Symbol('onConnect');
      const Ur = Symbol('onDisconnect');
      const Gr = Symbol('onConnectionError');
      const Hr = Symbol('get dispatcher');
      const Vr = Symbol('add client');
      const Wr = Symbol('remove client');
      const Yr = Symbol('stats');
      class PoolBase extends re {
        constructor() {
          super();
          this[Mr] = new ae();
          this[Lr] = [];
          this[Ar] = 0;
          const a = this;
          this[Or] = function onDrain(C, q) {
            const re = a[Mr];
            let ae = false;
            while (!ae) {
              const C = re.shift();
              if (!C) {
                break;
              }
              a[Ar]--;
              ae = !this.dispatch(C.opts, C.handler);
            }
            this[Fr] = ae;
            if (!this[Fr] && a[Fr]) {
              a[Fr] = false;
              a.emit('drain', C, [a, ...q]);
            }
            if (a[Pr] && re.isEmpty()) {
              Promise.all(a[Lr].map((a) => a.close())).then(a[Pr]);
            }
          };
          this[xr] = (C, q) => {
            a.emit('connect', C, [a, ...q]);
          };
          this[Ur] = (C, q, re) => {
            a.emit('disconnect', C, [a, ...q], re);
          };
          this[Gr] = (C, q, re) => {
            a.emit('connectionError', C, [a, ...q], re);
          };
          this[Yr] = new Nr(this);
        }
        get [Er]() {
          return this[Fr];
        }
        get [Ue]() {
          return this[Lr].filter((a) => a[Ue]).length;
        }
        get [Ir]() {
          return this[Lr].filter((a) => a[Ue] && !a[Fr]).length;
        }
        get [Wt]() {
          let a = this[Ar];
          for (const { [Wt]: C } of this[Lr]) {
            a += C;
          }
          return a;
        }
        get [Pt]() {
          let a = 0;
          for (const { [Pt]: C } of this[Lr]) {
            a += C;
          }
          return a;
        }
        get [lt]() {
          let a = this[Ar];
          for (const { [lt]: C } of this[Lr]) {
            a += C;
          }
          return a;
        }
        get stats() {
          return this[Yr];
        }
        async [Qr]() {
          if (this[Mr].isEmpty()) {
            return Promise.all(this[Lr].map((a) => a.close()));
          } else {
            return new Promise((a) => {
              this[Pr] = a;
            });
          }
        }
        async [kr](a) {
          while (true) {
            const C = this[Mr].shift();
            if (!C) {
              break;
            }
            C.handler.onError(a);
          }
          return Promise.all(this[Lr].map((C) => C.destroy(a)));
        }
        [Dr](a, C) {
          const q = this[Hr]();
          if (!q) {
            this[Fr] = true;
            this[Mr].push({ opts: a, handler: C });
            this[Ar]++;
          } else if (!q.dispatch(a, C)) {
            q[Fr] = true;
            this[Fr] = !this[Hr]();
          }
          return !this[Fr];
        }
        [Vr](a) {
          a.on('drain', this[Or])
            .on('connect', this[xr])
            .on('disconnect', this[Ur])
            .on('connectionError', this[Gr]);
          this[Lr].push(a);
          if (this[Fr]) {
            process.nextTick(() => {
              if (this[Fr]) {
                this[Or](a[Br], [this, a]);
              }
            });
          }
          return this;
        }
        [Wr](a) {
          a.close(() => {
            const C = this[Lr].indexOf(a);
            if (C !== -1) {
              this[Lr].splice(C, 1);
            }
          });
          this[Fr] = this[Lr].some(
            (a) => !a[Fr] && a.closed !== true && a.destroyed !== true
          );
        }
      }
      a.exports = {
        PoolBase: PoolBase,
        kClients: Lr,
        kNeedDrain: Fr,
        kAddClient: Vr,
        kRemoveClient: Wr,
        kGetDispatcher: Hr
      };
    },
    8294: (a, C, q) => {
      const {
        kFree: re,
        kConnected: ae,
        kPending: Ue,
        kQueued: lt,
        kRunning: Pt,
        kSize: Wt
      } = q(7621);
      const Ar = Symbol('pool');
      class PoolStats {
        constructor(a) {
          this[Ar] = a;
        }
        get connected() {
          return this[Ar][ae];
        }
        get free() {
          return this[Ar][re];
        }
        get pending() {
          return this[Ar][Ue];
        }
        get queued() {
          return this[Ar][lt];
        }
        get running() {
          return this[Ar][Pt];
        }
        get size() {
          return this[Ar][Wt];
        }
      }
      a.exports = PoolStats;
    },
    9859: (a, C, q) => {
      'use strict';
      const {
        PoolBase: re,
        kClients: ae,
        kNeedDrain: Ue,
        kAddClient: lt,
        kGetDispatcher: Pt
      } = q(5411);
      const Wt = q(8352);
      const { InvalidArgumentError: Ar } = q(3501);
      const Er = q(9647);
      const { kUrl: Ir, kInterceptors: Br } = q(7621);
      const Qr = q(6840);
      const kr = Symbol('options');
      const Dr = Symbol('connections');
      const Nr = Symbol('factory');
      function defaultFactory(a, C) {
        return new Wt(a, C);
      }
      class Pool extends re {
        constructor(
          a,
          {
            connections: C,
            factory: q = defaultFactory,
            connect: re,
            connectTimeout: ae,
            tls: Ue,
            maxCachedSessions: lt,
            socketPath: Pt,
            autoSelectFamily: Wt,
            autoSelectFamilyAttemptTimeout: Lr,
            allowH2: Fr,
            ...Mr
          } = {}
        ) {
          super();
          if (C != null && (!Number.isFinite(C) || C < 0)) {
            throw new Ar('invalid connections');
          }
          if (typeof q !== 'function') {
            throw new Ar('factory must be a function.');
          }
          if (
            re != null &&
            typeof re !== 'function' &&
            typeof re !== 'object'
          ) {
            throw new Ar('connect must be a function or an object');
          }
          if (typeof re !== 'function') {
            re = Qr({
              ...Ue,
              maxCachedSessions: lt,
              allowH2: Fr,
              socketPath: Pt,
              timeout: ae,
              ...(Er.nodeHasAutoSelectFamily && Wt
                ? { autoSelectFamily: Wt, autoSelectFamilyAttemptTimeout: Lr }
                : undefined),
              ...re
            });
          }
          this[Br] =
            Mr.interceptors &&
            Mr.interceptors.Pool &&
            Array.isArray(Mr.interceptors.Pool)
              ? Mr.interceptors.Pool
              : [];
          this[Dr] = C || null;
          this[Ir] = Er.parseOrigin(a);
          this[kr] = { ...Er.deepClone(Mr), connect: re, allowH2: Fr };
          this[kr].interceptors = Mr.interceptors
            ? { ...Mr.interceptors }
            : undefined;
          this[Nr] = q;
        }
        [Pt]() {
          let a = this[ae].find((a) => !a[Ue]);
          if (a) {
            return a;
          }
          if (!this[Dr] || this[ae].length < this[Dr]) {
            a = this[Nr](this[Ir], this[kr]);
            this[lt](a);
          }
          return a;
        }
      }
      a.exports = Pool;
    },
    7929: (a, C, q) => {
      'use strict';
      const {
        kProxy: re,
        kClose: ae,
        kDestroy: Ue,
        kInterceptors: lt
      } = q(7621);
      const { URL: Pt } = q(7310);
      const Wt = q(8551);
      const Ar = q(9859);
      const Er = q(6775);
      const { InvalidArgumentError: Ir, RequestAbortedError: Br } = q(3501);
      const Qr = q(6840);
      const kr = Symbol('proxy agent');
      const Dr = Symbol('proxy client');
      const Nr = Symbol('proxy headers');
      const Lr = Symbol('request tls settings');
      const Fr = Symbol('proxy tls settings');
      const Mr = Symbol('connect endpoint function');
      function defaultProtocolPort(a) {
        return a === 'https:' ? 443 : 80;
      }
      function buildProxyOptions(a) {
        if (typeof a === 'string') {
          a = { uri: a };
        }
        if (!a || !a.uri) {
          throw new Ir('Proxy opts.uri is mandatory');
        }
        return { uri: a.uri, protocol: a.protocol || 'https' };
      }
      function defaultFactory(a, C) {
        return new Ar(a, C);
      }
      class ProxyAgent extends Er {
        constructor(a) {
          super(a);
          this[re] = buildProxyOptions(a);
          this[kr] = new Wt(a);
          this[lt] =
            a.interceptors &&
            a.interceptors.ProxyAgent &&
            Array.isArray(a.interceptors.ProxyAgent)
              ? a.interceptors.ProxyAgent
              : [];
          if (typeof a === 'string') {
            a = { uri: a };
          }
          if (!a || !a.uri) {
            throw new Ir('Proxy opts.uri is mandatory');
          }
          const { clientFactory: C = defaultFactory } = a;
          if (typeof C !== 'function') {
            throw new Ir('Proxy opts.clientFactory must be a function.');
          }
          this[Lr] = a.requestTls;
          this[Fr] = a.proxyTls;
          this[Nr] = a.headers || {};
          const q = new Pt(a.uri);
          const {
            origin: ae,
            port: Ue,
            host: Ar,
            username: Er,
            password: Pr
          } = q;
          if (a.auth && a.token) {
            throw new Ir(
              'opts.auth cannot be used in combination with opts.token'
            );
          } else if (a.auth) {
            this[Nr]['proxy-authorization'] = `Basic ${a.auth}`;
          } else if (a.token) {
            this[Nr]['proxy-authorization'] = a.token;
          } else if (Er && Pr) {
            this[Nr]['proxy-authorization'] =
              `Basic ${Buffer.from(`${decodeURIComponent(Er)}:${decodeURIComponent(Pr)}`).toString('base64')}`;
          }
          const Or = Qr({ ...a.proxyTls });
          this[Mr] = Qr({ ...a.requestTls });
          this[Dr] = C(q, { connect: Or });
          this[kr] = new Wt({
            ...a,
            connect: async (a, C) => {
              let q = a.host;
              if (!a.port) {
                q += `:${defaultProtocolPort(a.protocol)}`;
              }
              try {
                const { socket: re, statusCode: lt } = await this[Dr].connect({
                  origin: ae,
                  port: Ue,
                  path: q,
                  signal: a.signal,
                  headers: { ...this[Nr], host: Ar }
                });
                if (lt !== 200) {
                  re.on('error', () => {}).destroy();
                  C(
                    new Br(`Proxy response (${lt}) !== 200 when HTTP Tunneling`)
                  );
                }
                if (a.protocol !== 'https:') {
                  C(null, re);
                  return;
                }
                let Pt;
                if (this[Lr]) {
                  Pt = this[Lr].servername;
                } else {
                  Pt = a.servername;
                }
                this[Mr]({ ...a, servername: Pt, httpSocket: re }, C);
              } catch (a) {
                C(a);
              }
            }
          });
        }
        dispatch(a, C) {
          const { host: q } = new Pt(a.origin);
          const re = buildHeaders(a.headers);
          throwIfProxyAuthIsSent(re);
          return this[kr].dispatch({ ...a, headers: { ...re, host: q } }, C);
        }
        async [ae]() {
          await this[kr].close();
          await this[Dr].close();
        }
        async [Ue]() {
          await this[kr].destroy();
          await this[Dr].destroy();
        }
      }
      function buildHeaders(a) {
        if (Array.isArray(a)) {
          const C = {};
          for (let q = 0; q < a.length; q += 2) {
            C[a[q]] = a[q + 1];
          }
          return C;
        }
        return a;
      }
      function throwIfProxyAuthIsSent(a) {
        const C =
          a &&
          Object.keys(a).find((a) => a.toLowerCase() === 'proxy-authorization');
        if (C) {
          throw new Ir(
            'Proxy-Authorization should be sent in ProxyAgent constructor'
          );
        }
      }
      a.exports = ProxyAgent;
    },
    8748: (a) => {
      'use strict';
      let C = Date.now();
      let q;
      const re = [];
      function onTimeout() {
        C = Date.now();
        let a = re.length;
        let q = 0;
        while (q < a) {
          const ae = re[q];
          if (ae.state === 0) {
            ae.state = C + ae.delay;
          } else if (ae.state > 0 && C >= ae.state) {
            ae.state = -1;
            ae.callback(ae.opaque);
          }
          if (ae.state === -1) {
            ae.state = -2;
            if (q !== a - 1) {
              re[q] = re.pop();
            } else {
              re.pop();
            }
            a -= 1;
          } else {
            q += 1;
          }
        }
        if (re.length > 0) {
          refreshTimeout();
        }
      }
      function refreshTimeout() {
        if (q && q.refresh) {
          q.refresh();
        } else {
          clearTimeout(q);
          q = setTimeout(onTimeout, 1e3);
          if (q.unref) {
            q.unref();
          }
        }
      }
      class Timeout {
        constructor(a, C, q) {
          this.callback = a;
          this.delay = C;
          this.opaque = q;
          this.state = -2;
          this.refresh();
        }
        refresh() {
          if (this.state === -2) {
            re.push(this);
            if (!q || re.length === 1) {
              refreshTimeout();
            }
          }
          this.state = 0;
        }
        clear() {
          this.state = -1;
        }
      }
      a.exports = {
        setTimeout(a, C, q) {
          return C < 1e3 ? setTimeout(a, C, q) : new Timeout(a, C, q);
        },
        clearTimeout(a) {
          if (a instanceof Timeout) {
            a.clear();
          } else {
            clearTimeout(a);
          }
        }
      };
    },
    3592: (a, C, q) => {
      'use strict';
      const re = q(7643);
      const { uid: ae, states: Ue } = q(7479);
      const {
        kReadyState: lt,
        kSentClose: Pt,
        kByteParser: Wt,
        kReceivedClose: Ar
      } = q(6949);
      const { fireEvent: Er, failWebsocketConnection: Ir } = q(4603);
      const { CloseEvent: Br } = q(9134);
      const { makeRequest: Qr } = q(9787);
      const { fetching: kr } = q(3254);
      const { Headers: Dr } = q(6909);
      const { getGlobalDispatcher: Nr } = q(5683);
      const { kHeadersList: Lr } = q(7621);
      const Fr = {};
      Fr.open = re.channel('undici:websocket:open');
      Fr.close = re.channel('undici:websocket:close');
      Fr.socketError = re.channel('undici:websocket:socket_error');
      let Mr;
      try {
        Mr = q(6113);
      } catch {}
      function establishWebSocketConnection(a, C, q, re, Ue) {
        const lt = a;
        lt.protocol = a.protocol === 'ws:' ? 'http:' : 'https:';
        const Pt = Qr({
          urlList: [lt],
          serviceWorkers: 'none',
          referrer: 'no-referrer',
          mode: 'websocket',
          credentials: 'include',
          cache: 'no-store',
          redirect: 'error'
        });
        if (Ue.headers) {
          const a = new Dr(Ue.headers)[Lr];
          Pt.headersList = a;
        }
        const Wt = Mr.randomBytes(16).toString('base64');
        Pt.headersList.append('sec-websocket-key', Wt);
        Pt.headersList.append('sec-websocket-version', '13');
        for (const a of C) {
          Pt.headersList.append('sec-websocket-protocol', a);
        }
        const Ar = '';
        const Er = kr({
          request: Pt,
          useParallelQueue: true,
          dispatcher: Ue.dispatcher ?? Nr(),
          processResponse(a) {
            if (a.type === 'error' || a.status !== 101) {
              Ir(q, 'Received network error or non-101 status code.');
              return;
            }
            if (
              C.length !== 0 &&
              !a.headersList.get('Sec-WebSocket-Protocol')
            ) {
              Ir(q, 'Server did not respond with sent protocols.');
              return;
            }
            if (a.headersList.get('Upgrade')?.toLowerCase() !== 'websocket') {
              Ir(q, 'Server did not set Upgrade header to "websocket".');
              return;
            }
            if (a.headersList.get('Connection')?.toLowerCase() !== 'upgrade') {
              Ir(q, 'Server did not set Connection header to "upgrade".');
              return;
            }
            const Ue = a.headersList.get('Sec-WebSocket-Accept');
            const lt = Mr.createHash('sha1')
              .update(Wt + ae)
              .digest('base64');
            if (Ue !== lt) {
              Ir(q, 'Incorrect hash received in Sec-WebSocket-Accept header.');
              return;
            }
            const Er = a.headersList.get('Sec-WebSocket-Extensions');
            if (Er !== null && Er !== Ar) {
              Ir(q, 'Received different permessage-deflate than the one set.');
              return;
            }
            const Br = a.headersList.get('Sec-WebSocket-Protocol');
            if (
              Br !== null &&
              Br !== Pt.headersList.get('Sec-WebSocket-Protocol')
            ) {
              Ir(q, 'Protocol was not set in the opening handshake.');
              return;
            }
            a.socket.on('data', onSocketData);
            a.socket.on('close', onSocketClose);
            a.socket.on('error', onSocketError);
            if (Fr.open.hasSubscribers) {
              Fr.open.publish({
                address: a.socket.address(),
                protocol: Br,
                extensions: Er
              });
            }
            re(a);
          }
        });
        return Er;
      }
      function onSocketData(a) {
        if (!this.ws[Wt].write(a)) {
          this.pause();
        }
      }
      function onSocketClose() {
        const { ws: a } = this;
        const C = a[Pt] && a[Ar];
        let q = 1005;
        let re = '';
        const ae = a[Wt].closingInfo;
        if (ae) {
          q = ae.code ?? 1005;
          re = ae.reason;
        } else if (!a[Pt]) {
          q = 1006;
        }
        a[lt] = Ue.CLOSED;
        Er('close', a, Br, { wasClean: C, code: q, reason: re });
        if (Fr.close.hasSubscribers) {
          Fr.close.publish({ websocket: a, code: q, reason: re });
        }
      }
      function onSocketError(a) {
        const { ws: C } = this;
        C[lt] = Ue.CLOSING;
        if (Fr.socketError.hasSubscribers) {
          Fr.socketError.publish(a);
        }
        this.destroy();
      }
      a.exports = {
        establishWebSocketConnection: establishWebSocketConnection
      };
    },
    7479: (a) => {
      'use strict';
      const C = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11';
      const q = { enumerable: true, writable: false, configurable: false };
      const re = { CONNECTING: 0, OPEN: 1, CLOSING: 2, CLOSED: 3 };
      const ae = {
        CONTINUATION: 0,
        TEXT: 1,
        BINARY: 2,
        CLOSE: 8,
        PING: 9,
        PONG: 10
      };
      const Ue = 2 ** 16 - 1;
      const lt = {
        INFO: 0,
        PAYLOADLENGTH_16: 2,
        PAYLOADLENGTH_64: 3,
        READ_DATA: 4
      };
      const Pt = Buffer.allocUnsafe(0);
      a.exports = {
        uid: C,
        staticPropertyDescriptors: q,
        states: re,
        opcodes: ae,
        maxUnsigned16Bit: Ue,
        parserStates: lt,
        emptyBuffer: Pt
      };
    },
    9134: (a, C, q) => {
      'use strict';
      const { webidl: re } = q(3721);
      const { kEnumerableProperty: ae } = q(9647);
      const { MessagePort: Ue } = q(1267);
      class MessageEvent extends Event {
        #o;
        constructor(a, C = {}) {
          re.argumentLengthCheck(arguments, 1, {
            header: 'MessageEvent constructor'
          });
          a = re.converters.DOMString(a);
          C = re.converters.MessageEventInit(C);
          super(a, C);
          this.#o = C;
        }
        get data() {
          re.brandCheck(this, MessageEvent);
          return this.#o.data;
        }
        get origin() {
          re.brandCheck(this, MessageEvent);
          return this.#o.origin;
        }
        get lastEventId() {
          re.brandCheck(this, MessageEvent);
          return this.#o.lastEventId;
        }
        get source() {
          re.brandCheck(this, MessageEvent);
          return this.#o.source;
        }
        get ports() {
          re.brandCheck(this, MessageEvent);
          if (!Object.isFrozen(this.#o.ports)) {
            Object.freeze(this.#o.ports);
          }
          return this.#o.ports;
        }
        initMessageEvent(
          a,
          C = false,
          q = false,
          ae = null,
          Ue = '',
          lt = '',
          Pt = null,
          Wt = []
        ) {
          re.brandCheck(this, MessageEvent);
          re.argumentLengthCheck(arguments, 1, {
            header: 'MessageEvent.initMessageEvent'
          });
          return new MessageEvent(a, {
            bubbles: C,
            cancelable: q,
            data: ae,
            origin: Ue,
            lastEventId: lt,
            source: Pt,
            ports: Wt
          });
        }
      }
      class CloseEvent extends Event {
        #o;
        constructor(a, C = {}) {
          re.argumentLengthCheck(arguments, 1, {
            header: 'CloseEvent constructor'
          });
          a = re.converters.DOMString(a);
          C = re.converters.CloseEventInit(C);
          super(a, C);
          this.#o = C;
        }
        get wasClean() {
          re.brandCheck(this, CloseEvent);
          return this.#o.wasClean;
        }
        get code() {
          re.brandCheck(this, CloseEvent);
          return this.#o.code;
        }
        get reason() {
          re.brandCheck(this, CloseEvent);
          return this.#o.reason;
        }
      }
      class ErrorEvent extends Event {
        #o;
        constructor(a, C) {
          re.argumentLengthCheck(arguments, 1, {
            header: 'ErrorEvent constructor'
          });
          super(a, C);
          a = re.converters.DOMString(a);
          C = re.converters.ErrorEventInit(C ?? {});
          this.#o = C;
        }
        get message() {
          re.brandCheck(this, ErrorEvent);
          return this.#o.message;
        }
        get filename() {
          re.brandCheck(this, ErrorEvent);
          return this.#o.filename;
        }
        get lineno() {
          re.brandCheck(this, ErrorEvent);
          return this.#o.lineno;
        }
        get colno() {
          re.brandCheck(this, ErrorEvent);
          return this.#o.colno;
        }
        get error() {
          re.brandCheck(this, ErrorEvent);
          return this.#o.error;
        }
      }
      Object.defineProperties(MessageEvent.prototype, {
        [Symbol.toStringTag]: { value: 'MessageEvent', configurable: true },
        data: ae,
        origin: ae,
        lastEventId: ae,
        source: ae,
        ports: ae,
        initMessageEvent: ae
      });
      Object.defineProperties(CloseEvent.prototype, {
        [Symbol.toStringTag]: { value: 'CloseEvent', configurable: true },
        reason: ae,
        code: ae,
        wasClean: ae
      });
      Object.defineProperties(ErrorEvent.prototype, {
        [Symbol.toStringTag]: { value: 'ErrorEvent', configurable: true },
        message: ae,
        filename: ae,
        lineno: ae,
        colno: ae,
        error: ae
      });
      re.converters.MessagePort = re.interfaceConverter(Ue);
      re.converters['sequence<MessagePort>'] = re.sequenceConverter(
        re.converters.MessagePort
      );
      const lt = [
        {
          key: 'bubbles',
          converter: re.converters.boolean,
          defaultValue: false
        },
        {
          key: 'cancelable',
          converter: re.converters.boolean,
          defaultValue: false
        },
        {
          key: 'composed',
          converter: re.converters.boolean,
          defaultValue: false
        }
      ];
      re.converters.MessageEventInit = re.dictionaryConverter([
        ...lt,
        { key: 'data', converter: re.converters.any, defaultValue: null },
        { key: 'origin', converter: re.converters.USVString, defaultValue: '' },
        {
          key: 'lastEventId',
          converter: re.converters.DOMString,
          defaultValue: ''
        },
        {
          key: 'source',
          converter: re.nullableConverter(re.converters.MessagePort),
          defaultValue: null
        },
        {
          key: 'ports',
          converter: re.converters['sequence<MessagePort>'],
          get defaultValue() {
            return [];
          }
        }
      ]);
      re.converters.CloseEventInit = re.dictionaryConverter([
        ...lt,
        {
          key: 'wasClean',
          converter: re.converters.boolean,
          defaultValue: false
        },
        {
          key: 'code',
          converter: re.converters['unsigned short'],
          defaultValue: 0
        },
        { key: 'reason', converter: re.converters.USVString, defaultValue: '' }
      ]);
      re.converters.ErrorEventInit = re.dictionaryConverter([
        ...lt,
        {
          key: 'message',
          converter: re.converters.DOMString,
          defaultValue: ''
        },
        {
          key: 'filename',
          converter: re.converters.USVString,
          defaultValue: ''
        },
        {
          key: 'lineno',
          converter: re.converters['unsigned long'],
          defaultValue: 0
        },
        {
          key: 'colno',
          converter: re.converters['unsigned long'],
          defaultValue: 0
        },
        { key: 'error', converter: re.converters.any }
      ]);
      a.exports = {
        MessageEvent: MessageEvent,
        CloseEvent: CloseEvent,
        ErrorEvent: ErrorEvent
      };
    },
    5156: (a, C, q) => {
      'use strict';
      const { maxUnsigned16Bit: re } = q(7479);
      let ae;
      try {
        ae = q(6113);
      } catch {}
      class WebsocketFrameSend {
        constructor(a) {
          this.frameData = a;
          this.maskKey = ae.randomBytes(4);
        }
        createFrame(a) {
          const C = this.frameData?.byteLength ?? 0;
          let q = C;
          let ae = 6;
          if (C > re) {
            ae += 8;
            q = 127;
          } else if (C > 125) {
            ae += 2;
            q = 126;
          }
          const Ue = Buffer.allocUnsafe(C + ae);
          Ue[0] = Ue[1] = 0;
          Ue[0] |= 128;
          Ue[0] = (Ue[0] & 240) + a;
          /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */ Ue[
            ae - 4
          ] = this.maskKey[0];
          Ue[ae - 3] = this.maskKey[1];
          Ue[ae - 2] = this.maskKey[2];
          Ue[ae - 1] = this.maskKey[3];
          Ue[1] = q;
          if (q === 126) {
            Ue.writeUInt16BE(C, 2);
          } else if (q === 127) {
            Ue[2] = Ue[3] = 0;
            Ue.writeUIntBE(C, 4, 6);
          }
          Ue[1] |= 128;
          for (let a = 0; a < C; a++) {
            Ue[ae + a] = this.frameData[a] ^ this.maskKey[a % 4];
          }
          return Ue;
        }
      }
      a.exports = { WebsocketFrameSend: WebsocketFrameSend };
    },
    4944: (a, C, q) => {
      'use strict';
      const { Writable: re } = q(2781);
      const ae = q(7643);
      const {
        parserStates: Ue,
        opcodes: lt,
        states: Pt,
        emptyBuffer: Wt
      } = q(7479);
      const {
        kReadyState: Ar,
        kSentClose: Er,
        kResponse: Ir,
        kReceivedClose: Br
      } = q(6949);
      const {
        isValidStatusCode: Qr,
        failWebsocketConnection: kr,
        websocketMessageReceived: Dr
      } = q(4603);
      const { WebsocketFrameSend: Nr } = q(5156);
      const Lr = {};
      Lr.ping = ae.channel('undici:websocket:ping');
      Lr.pong = ae.channel('undici:websocket:pong');
      class ByteParser extends re {
        #a = [];
        #i = 0;
        #l = Ue.INFO;
        #c = {};
        #A = [];
        constructor(a) {
          super();
          this.ws = a;
        }
        _write(a, C, q) {
          this.#a.push(a);
          this.#i += a.length;
          this.run(q);
        }
        run(a) {
          while (true) {
            if (this.#l === Ue.INFO) {
              if (this.#i < 2) {
                return a();
              }
              const C = this.consume(2);
              this.#c.fin = (C[0] & 128) !== 0;
              this.#c.opcode = C[0] & 15;
              this.#c.originalOpcode ??= this.#c.opcode;
              this.#c.fragmented =
                !this.#c.fin && this.#c.opcode !== lt.CONTINUATION;
              if (
                this.#c.fragmented &&
                this.#c.opcode !== lt.BINARY &&
                this.#c.opcode !== lt.TEXT
              ) {
                kr(this.ws, 'Invalid frame type was fragmented.');
                return;
              }
              const q = C[1] & 127;
              if (q <= 125) {
                this.#c.payloadLength = q;
                this.#l = Ue.READ_DATA;
              } else if (q === 126) {
                this.#l = Ue.PAYLOADLENGTH_16;
              } else if (q === 127) {
                this.#l = Ue.PAYLOADLENGTH_64;
              }
              if (this.#c.fragmented && q > 125) {
                kr(this.ws, 'Fragmented frame exceeded 125 bytes.');
                return;
              } else if (
                (this.#c.opcode === lt.PING ||
                  this.#c.opcode === lt.PONG ||
                  this.#c.opcode === lt.CLOSE) &&
                q > 125
              ) {
                kr(
                  this.ws,
                  'Payload length for control frame exceeded 125 bytes.'
                );
                return;
              } else if (this.#c.opcode === lt.CLOSE) {
                if (q === 1) {
                  kr(this.ws, 'Received close frame with a 1-byte body.');
                  return;
                }
                const a = this.consume(q);
                this.#c.closeInfo = this.parseCloseBody(false, a);
                if (!this.ws[Er]) {
                  const a = Buffer.allocUnsafe(2);
                  a.writeUInt16BE(this.#c.closeInfo.code, 0);
                  const C = new Nr(a);
                  this.ws[Ir].socket.write(C.createFrame(lt.CLOSE), (a) => {
                    if (!a) {
                      this.ws[Er] = true;
                    }
                  });
                }
                this.ws[Ar] = Pt.CLOSING;
                this.ws[Br] = true;
                this.end();
                return;
              } else if (this.#c.opcode === lt.PING) {
                const C = this.consume(q);
                if (!this.ws[Br]) {
                  const a = new Nr(C);
                  this.ws[Ir].socket.write(a.createFrame(lt.PONG));
                  if (Lr.ping.hasSubscribers) {
                    Lr.ping.publish({ payload: C });
                  }
                }
                this.#l = Ue.INFO;
                if (this.#i > 0) {
                  continue;
                } else {
                  a();
                  return;
                }
              } else if (this.#c.opcode === lt.PONG) {
                const C = this.consume(q);
                if (Lr.pong.hasSubscribers) {
                  Lr.pong.publish({ payload: C });
                }
                if (this.#i > 0) {
                  continue;
                } else {
                  a();
                  return;
                }
              }
            } else if (this.#l === Ue.PAYLOADLENGTH_16) {
              if (this.#i < 2) {
                return a();
              }
              const C = this.consume(2);
              this.#c.payloadLength = C.readUInt16BE(0);
              this.#l = Ue.READ_DATA;
            } else if (this.#l === Ue.PAYLOADLENGTH_64) {
              if (this.#i < 8) {
                return a();
              }
              const C = this.consume(8);
              const q = C.readUInt32BE(0);
              if (q > 2 ** 31 - 1) {
                kr(this.ws, 'Received payload length > 2^31 bytes.');
                return;
              }
              const re = C.readUInt32BE(4);
              this.#c.payloadLength = (q << 8) + re;
              this.#l = Ue.READ_DATA;
            } else if (this.#l === Ue.READ_DATA) {
              if (this.#i < this.#c.payloadLength) {
                return a();
              } else if (this.#i >= this.#c.payloadLength) {
                const a = this.consume(this.#c.payloadLength);
                this.#A.push(a);
                if (
                  !this.#c.fragmented ||
                  (this.#c.fin && this.#c.opcode === lt.CONTINUATION)
                ) {
                  const a = Buffer.concat(this.#A);
                  Dr(this.ws, this.#c.originalOpcode, a);
                  this.#c = {};
                  this.#A.length = 0;
                }
                this.#l = Ue.INFO;
              }
            }
            if (this.#i > 0) {
              continue;
            } else {
              a();
              break;
            }
          }
        }
        consume(a) {
          if (a > this.#i) {
            return null;
          } else if (a === 0) {
            return Wt;
          }
          if (this.#a[0].length === a) {
            this.#i -= this.#a[0].length;
            return this.#a.shift();
          }
          const C = Buffer.allocUnsafe(a);
          let q = 0;
          while (q !== a) {
            const re = this.#a[0];
            const { length: ae } = re;
            if (ae + q === a) {
              C.set(this.#a.shift(), q);
              break;
            } else if (ae + q > a) {
              C.set(re.subarray(0, a - q), q);
              this.#a[0] = re.subarray(a - q);
              break;
            } else {
              C.set(this.#a.shift(), q);
              q += re.length;
            }
          }
          this.#i -= a;
          return C;
        }
        parseCloseBody(a, C) {
          let q;
          if (C.length >= 2) {
            q = C.readUInt16BE(0);
          }
          if (a) {
            if (!Qr(q)) {
              return null;
            }
            return { code: q };
          }
          let re = C.subarray(2);
          if (re[0] === 239 && re[1] === 187 && re[2] === 191) {
            re = re.subarray(3);
          }
          if (q !== undefined && !Qr(q)) {
            return null;
          }
          try {
            re = new TextDecoder('utf-8', { fatal: true }).decode(re);
          } catch {
            return null;
          }
          return { code: q, reason: re };
        }
        get closingInfo() {
          return this.#c.closeInfo;
        }
      }
      a.exports = { ByteParser: ByteParser };
    },
    6949: (a) => {
      'use strict';
      a.exports = {
        kWebSocketURL: Symbol('url'),
        kReadyState: Symbol('ready state'),
        kController: Symbol('controller'),
        kResponse: Symbol('response'),
        kBinaryType: Symbol('binary type'),
        kSentClose: Symbol('sent close'),
        kReceivedClose: Symbol('received close'),
        kByteParser: Symbol('byte parser')
      };
    },
    4603: (a, C, q) => {
      'use strict';
      const {
        kReadyState: re,
        kController: ae,
        kResponse: Ue,
        kBinaryType: lt,
        kWebSocketURL: Pt
      } = q(6949);
      const { states: Wt, opcodes: Ar } = q(7479);
      const { MessageEvent: Er, ErrorEvent: Ir } = q(9134);
      function isEstablished(a) {
        return a[re] === Wt.OPEN;
      }
      function isClosing(a) {
        return a[re] === Wt.CLOSING;
      }
      function isClosed(a) {
        return a[re] === Wt.CLOSED;
      }
      function fireEvent(a, C, q = Event, re) {
        const ae = new q(a, re);
        C.dispatchEvent(ae);
      }
      function websocketMessageReceived(a, C, q) {
        if (a[re] !== Wt.OPEN) {
          return;
        }
        let ae;
        if (C === Ar.TEXT) {
          try {
            ae = new TextDecoder('utf-8', { fatal: true }).decode(q);
          } catch {
            failWebsocketConnection(a, 'Received invalid UTF-8 in text frame.');
            return;
          }
        } else if (C === Ar.BINARY) {
          if (a[lt] === 'blob') {
            ae = new Blob([q]);
          } else {
            ae = new Uint8Array(q).buffer;
          }
        }
        fireEvent('message', a, Er, { origin: a[Pt].origin, data: ae });
      }
      function isValidSubprotocol(a) {
        if (a.length === 0) {
          return false;
        }
        for (const C of a) {
          const a = C.charCodeAt(0);
          if (
            a < 33 ||
            a > 126 ||
            C === '(' ||
            C === ')' ||
            C === '<' ||
            C === '>' ||
            C === '@' ||
            C === ',' ||
            C === ';' ||
            C === ':' ||
            C === '\\' ||
            C === '"' ||
            C === '/' ||
            C === '[' ||
            C === ']' ||
            C === '?' ||
            C === '=' ||
            C === '{' ||
            C === '}' ||
            a === 32 ||
            a === 9
          ) {
            return false;
          }
        }
        return true;
      }
      function isValidStatusCode(a) {
        if (a >= 1e3 && a < 1015) {
          return a !== 1004 && a !== 1005 && a !== 1006;
        }
        return a >= 3e3 && a <= 4999;
      }
      function failWebsocketConnection(a, C) {
        const { [ae]: q, [Ue]: re } = a;
        q.abort();
        if (re?.socket && !re.socket.destroyed) {
          re.socket.destroy();
        }
        if (C) {
          fireEvent('error', a, Ir, { error: new Error(C) });
        }
      }
      a.exports = {
        isEstablished: isEstablished,
        isClosing: isClosing,
        isClosed: isClosed,
        fireEvent: fireEvent,
        isValidSubprotocol: isValidSubprotocol,
        isValidStatusCode: isValidStatusCode,
        failWebsocketConnection: failWebsocketConnection,
        websocketMessageReceived: websocketMessageReceived
      };
    },
    553: (a, C, q) => {
      'use strict';
      const { webidl: re } = q(3721);
      const { DOMException: ae } = q(756);
      const { URLSerializer: Ue } = q(6932);
      const { getGlobalOrigin: lt } = q(128);
      const {
        staticPropertyDescriptors: Pt,
        states: Wt,
        opcodes: Ar,
        emptyBuffer: Er
      } = q(7479);
      const {
        kWebSocketURL: Ir,
        kReadyState: Br,
        kController: Qr,
        kBinaryType: kr,
        kResponse: Dr,
        kSentClose: Nr,
        kByteParser: Lr
      } = q(6949);
      const {
        isEstablished: Fr,
        isClosing: Mr,
        isValidSubprotocol: Pr,
        failWebsocketConnection: Or,
        fireEvent: xr
      } = q(4603);
      const { establishWebSocketConnection: Ur } = q(3592);
      const { WebsocketFrameSend: Gr } = q(5156);
      const { ByteParser: Hr } = q(4944);
      const { kEnumerableProperty: Vr, isBlobLike: Wr } = q(9647);
      const { getGlobalDispatcher: Yr } = q(5683);
      const { types: jr } = q(3837);
      let Jr = false;
      class WebSocket extends EventTarget {
        #d = { open: null, error: null, close: null, message: null };
        #u = 0;
        #p = '';
        #h = '';
        constructor(a, C = []) {
          super();
          re.argumentLengthCheck(arguments, 1, {
            header: 'WebSocket constructor'
          });
          if (!Jr) {
            Jr = true;
            process.emitWarning(
              'WebSockets are experimental, expect them to change at any time.',
              { code: 'UNDICI-WS' }
            );
          }
          const q =
            re.converters['DOMString or sequence<DOMString> or WebSocketInit'](
              C
            );
          a = re.converters.USVString(a);
          C = q.protocols;
          const Ue = lt();
          let Pt;
          try {
            Pt = new URL(a, Ue);
          } catch (a) {
            throw new ae(a, 'SyntaxError');
          }
          if (Pt.protocol === 'http:') {
            Pt.protocol = 'ws:';
          } else if (Pt.protocol === 'https:') {
            Pt.protocol = 'wss:';
          }
          if (Pt.protocol !== 'ws:' && Pt.protocol !== 'wss:') {
            throw new ae(
              `Expected a ws: or wss: protocol, got ${Pt.protocol}`,
              'SyntaxError'
            );
          }
          if (Pt.hash || Pt.href.endsWith('#')) {
            throw new ae('Got fragment', 'SyntaxError');
          }
          if (typeof C === 'string') {
            C = [C];
          }
          if (C.length !== new Set(C.map((a) => a.toLowerCase())).size) {
            throw new ae('Invalid Sec-WebSocket-Protocol value', 'SyntaxError');
          }
          if (C.length > 0 && !C.every((a) => Pr(a))) {
            throw new ae('Invalid Sec-WebSocket-Protocol value', 'SyntaxError');
          }
          this[Ir] = new URL(Pt.href);
          this[Qr] = Ur(Pt, C, this, (a) => this.#m(a), q);
          this[Br] = WebSocket.CONNECTING;
          this[kr] = 'blob';
        }
        close(a = undefined, C = undefined) {
          re.brandCheck(this, WebSocket);
          if (a !== undefined) {
            a = re.converters['unsigned short'](a, { clamp: true });
          }
          if (C !== undefined) {
            C = re.converters.USVString(C);
          }
          if (a !== undefined) {
            if (a !== 1e3 && (a < 3e3 || a > 4999)) {
              throw new ae('invalid code', 'InvalidAccessError');
            }
          }
          let q = 0;
          if (C !== undefined) {
            q = Buffer.byteLength(C);
            if (q > 123) {
              throw new ae(
                `Reason must be less than 123 bytes; received ${q}`,
                'SyntaxError'
              );
            }
          }
          if (this[Br] === WebSocket.CLOSING || this[Br] === WebSocket.CLOSED) {
          } else if (!Fr(this)) {
            Or(this, 'Connection was closed before it was established.');
            this[Br] = WebSocket.CLOSING;
          } else if (!Mr(this)) {
            const re = new Gr();
            if (a !== undefined && C === undefined) {
              re.frameData = Buffer.allocUnsafe(2);
              re.frameData.writeUInt16BE(a, 0);
            } else if (a !== undefined && C !== undefined) {
              re.frameData = Buffer.allocUnsafe(2 + q);
              re.frameData.writeUInt16BE(a, 0);
              re.frameData.write(C, 2, 'utf-8');
            } else {
              re.frameData = Er;
            }
            const ae = this[Dr].socket;
            ae.write(re.createFrame(Ar.CLOSE), (a) => {
              if (!a) {
                this[Nr] = true;
              }
            });
            this[Br] = Wt.CLOSING;
          } else {
            this[Br] = WebSocket.CLOSING;
          }
        }
        send(a) {
          re.brandCheck(this, WebSocket);
          re.argumentLengthCheck(arguments, 1, { header: 'WebSocket.send' });
          a = re.converters.WebSocketSendData(a);
          if (this[Br] === WebSocket.CONNECTING) {
            throw new ae('Sent before connected.', 'InvalidStateError');
          }
          if (!Fr(this) || Mr(this)) {
            return;
          }
          const C = this[Dr].socket;
          if (typeof a === 'string') {
            const q = Buffer.from(a);
            const re = new Gr(q);
            const ae = re.createFrame(Ar.TEXT);
            this.#u += q.byteLength;
            C.write(ae, () => {
              this.#u -= q.byteLength;
            });
          } else if (jr.isArrayBuffer(a)) {
            const q = Buffer.from(a);
            const re = new Gr(q);
            const ae = re.createFrame(Ar.BINARY);
            this.#u += q.byteLength;
            C.write(ae, () => {
              this.#u -= q.byteLength;
            });
          } else if (ArrayBuffer.isView(a)) {
            const q = Buffer.from(a, a.byteOffset, a.byteLength);
            const re = new Gr(q);
            const ae = re.createFrame(Ar.BINARY);
            this.#u += q.byteLength;
            C.write(ae, () => {
              this.#u -= q.byteLength;
            });
          } else if (Wr(a)) {
            const q = new Gr();
            a.arrayBuffer().then((a) => {
              const re = Buffer.from(a);
              q.frameData = re;
              const ae = q.createFrame(Ar.BINARY);
              this.#u += re.byteLength;
              C.write(ae, () => {
                this.#u -= re.byteLength;
              });
            });
          }
        }
        get readyState() {
          re.brandCheck(this, WebSocket);
          return this[Br];
        }
        get bufferedAmount() {
          re.brandCheck(this, WebSocket);
          return this.#u;
        }
        get url() {
          re.brandCheck(this, WebSocket);
          return Ue(this[Ir]);
        }
        get extensions() {
          re.brandCheck(this, WebSocket);
          return this.#h;
        }
        get protocol() {
          re.brandCheck(this, WebSocket);
          return this.#p;
        }
        get onopen() {
          re.brandCheck(this, WebSocket);
          return this.#d.open;
        }
        set onopen(a) {
          re.brandCheck(this, WebSocket);
          if (this.#d.open) {
            this.removeEventListener('open', this.#d.open);
          }
          if (typeof a === 'function') {
            this.#d.open = a;
            this.addEventListener('open', a);
          } else {
            this.#d.open = null;
          }
        }
        get onerror() {
          re.brandCheck(this, WebSocket);
          return this.#d.error;
        }
        set onerror(a) {
          re.brandCheck(this, WebSocket);
          if (this.#d.error) {
            this.removeEventListener('error', this.#d.error);
          }
          if (typeof a === 'function') {
            this.#d.error = a;
            this.addEventListener('error', a);
          } else {
            this.#d.error = null;
          }
        }
        get onclose() {
          re.brandCheck(this, WebSocket);
          return this.#d.close;
        }
        set onclose(a) {
          re.brandCheck(this, WebSocket);
          if (this.#d.close) {
            this.removeEventListener('close', this.#d.close);
          }
          if (typeof a === 'function') {
            this.#d.close = a;
            this.addEventListener('close', a);
          } else {
            this.#d.close = null;
          }
        }
        get onmessage() {
          re.brandCheck(this, WebSocket);
          return this.#d.message;
        }
        set onmessage(a) {
          re.brandCheck(this, WebSocket);
          if (this.#d.message) {
            this.removeEventListener('message', this.#d.message);
          }
          if (typeof a === 'function') {
            this.#d.message = a;
            this.addEventListener('message', a);
          } else {
            this.#d.message = null;
          }
        }
        get binaryType() {
          re.brandCheck(this, WebSocket);
          return this[kr];
        }
        set binaryType(a) {
          re.brandCheck(this, WebSocket);
          if (a !== 'blob' && a !== 'arraybuffer') {
            this[kr] = 'blob';
          } else {
            this[kr] = a;
          }
        }
        #m(a) {
          this[Dr] = a;
          const C = new Hr(this);
          C.on('drain', function onParserDrain() {
            this.ws[Dr].socket.resume();
          });
          a.socket.ws = this;
          this[Lr] = C;
          this[Br] = Wt.OPEN;
          const q = a.headersList.get('sec-websocket-extensions');
          if (q !== null) {
            this.#h = q;
          }
          const re = a.headersList.get('sec-websocket-protocol');
          if (re !== null) {
            this.#p = re;
          }
          xr('open', this);
        }
      }
      WebSocket.CONNECTING = WebSocket.prototype.CONNECTING = Wt.CONNECTING;
      WebSocket.OPEN = WebSocket.prototype.OPEN = Wt.OPEN;
      WebSocket.CLOSING = WebSocket.prototype.CLOSING = Wt.CLOSING;
      WebSocket.CLOSED = WebSocket.prototype.CLOSED = Wt.CLOSED;
      Object.defineProperties(WebSocket.prototype, {
        CONNECTING: Pt,
        OPEN: Pt,
        CLOSING: Pt,
        CLOSED: Pt,
        url: Vr,
        readyState: Vr,
        bufferedAmount: Vr,
        onopen: Vr,
        onerror: Vr,
        onclose: Vr,
        close: Vr,
        onmessage: Vr,
        binaryType: Vr,
        send: Vr,
        extensions: Vr,
        protocol: Vr,
        [Symbol.toStringTag]: {
          value: 'WebSocket',
          writable: false,
          enumerable: false,
          configurable: true
        }
      });
      Object.defineProperties(WebSocket, {
        CONNECTING: Pt,
        OPEN: Pt,
        CLOSING: Pt,
        CLOSED: Pt
      });
      re.converters['sequence<DOMString>'] = re.sequenceConverter(
        re.converters.DOMString
      );
      re.converters['DOMString or sequence<DOMString>'] = function (a) {
        if (re.util.Type(a) === 'Object' && Symbol.iterator in a) {
          return re.converters['sequence<DOMString>'](a);
        }
        return re.converters.DOMString(a);
      };
      re.converters.WebSocketInit = re.dictionaryConverter([
        {
          key: 'protocols',
          converter: re.converters['DOMString or sequence<DOMString>'],
          get defaultValue() {
            return [];
          }
        },
        {
          key: 'dispatcher',
          converter: (a) => a,
          get defaultValue() {
            return Yr();
          }
        },
        {
          key: 'headers',
          converter: re.nullableConverter(re.converters.HeadersInit)
        }
      ]);
      re.converters['DOMString or sequence<DOMString> or WebSocketInit'] =
        function (a) {
          if (re.util.Type(a) === 'Object' && !(Symbol.iterator in a)) {
            return re.converters.WebSocketInit(a);
          }
          return {
            protocols: re.converters['DOMString or sequence<DOMString>'](a)
          };
        };
      re.converters.WebSocketSendData = function (a) {
        if (re.util.Type(a) === 'Object') {
          if (Wr(a)) {
            return re.converters.Blob(a, { strict: false });
          }
          if (ArrayBuffer.isView(a) || jr.isAnyArrayBuffer(a)) {
            return re.converters.BufferSource(a);
          }
        }
        return re.converters.USVString(a);
      };
      a.exports = { WebSocket: WebSocket };
    },
    5592: (a, C) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      function getUserAgent() {
        if (typeof navigator === 'object' && 'userAgent' in navigator) {
          return navigator.userAgent;
        }
        if (typeof process === 'object' && process.version !== undefined) {
          return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
        }
        return '<environment undetectable>';
      }
      C.getUserAgent = getUserAgent;
    },
    7338: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      Object.defineProperty(C, 'v1', {
        enumerable: true,
        get: function () {
          return re.default;
        }
      });
      Object.defineProperty(C, 'v3', {
        enumerable: true,
        get: function () {
          return ae.default;
        }
      });
      Object.defineProperty(C, 'v4', {
        enumerable: true,
        get: function () {
          return Ue.default;
        }
      });
      Object.defineProperty(C, 'v5', {
        enumerable: true,
        get: function () {
          return lt.default;
        }
      });
      Object.defineProperty(C, 'NIL', {
        enumerable: true,
        get: function () {
          return Pt.default;
        }
      });
      Object.defineProperty(C, 'version', {
        enumerable: true,
        get: function () {
          return Wt.default;
        }
      });
      Object.defineProperty(C, 'validate', {
        enumerable: true,
        get: function () {
          return Ar.default;
        }
      });
      Object.defineProperty(C, 'stringify', {
        enumerable: true,
        get: function () {
          return Er.default;
        }
      });
      Object.defineProperty(C, 'parse', {
        enumerable: true,
        get: function () {
          return Ir.default;
        }
      });
      var re = _interopRequireDefault(q(6101));
      var ae = _interopRequireDefault(q(9456));
      var Ue = _interopRequireDefault(q(1071));
      var lt = _interopRequireDefault(q(8057));
      var Pt = _interopRequireDefault(q(7448));
      var Wt = _interopRequireDefault(q(5530));
      var Ar = _interopRequireDefault(q(324));
      var Er = _interopRequireDefault(q(5284));
      var Ir = _interopRequireDefault(q(6067));
      function _interopRequireDefault(a) {
        return a && a.__esModule ? a : { default: a };
      }
    },
    8612: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = void 0;
      var re = _interopRequireDefault(q(6113));
      function _interopRequireDefault(a) {
        return a && a.__esModule ? a : { default: a };
      }
      function md5(a) {
        if (Array.isArray(a)) {
          a = Buffer.from(a);
        } else if (typeof a === 'string') {
          a = Buffer.from(a, 'utf8');
        }
        return re.default.createHash('md5').update(a).digest();
      }
      var ae = md5;
      C['default'] = ae;
    },
    7448: (a, C) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = void 0;
      var q = '00000000-0000-0000-0000-000000000000';
      C['default'] = q;
    },
    6067: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = void 0;
      var re = _interopRequireDefault(q(324));
      function _interopRequireDefault(a) {
        return a && a.__esModule ? a : { default: a };
      }
      function parse(a) {
        if (!(0, re.default)(a)) {
          throw TypeError('Invalid UUID');
        }
        let C;
        const q = new Uint8Array(16);
        q[0] = (C = parseInt(a.slice(0, 8), 16)) >>> 24;
        q[1] = (C >>> 16) & 255;
        q[2] = (C >>> 8) & 255;
        q[3] = C & 255;
        q[4] = (C = parseInt(a.slice(9, 13), 16)) >>> 8;
        q[5] = C & 255;
        q[6] = (C = parseInt(a.slice(14, 18), 16)) >>> 8;
        q[7] = C & 255;
        q[8] = (C = parseInt(a.slice(19, 23), 16)) >>> 8;
        q[9] = C & 255;
        q[10] = ((C = parseInt(a.slice(24, 36), 16)) / 1099511627776) & 255;
        q[11] = (C / 4294967296) & 255;
        q[12] = (C >>> 24) & 255;
        q[13] = (C >>> 16) & 255;
        q[14] = (C >>> 8) & 255;
        q[15] = C & 255;
        return q;
      }
      var ae = parse;
      C['default'] = ae;
    },
    7610: (a, C) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = void 0;
      var q =
        /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
      C['default'] = q;
    },
    6750: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = rng;
      var re = _interopRequireDefault(q(6113));
      function _interopRequireDefault(a) {
        return a && a.__esModule ? a : { default: a };
      }
      const ae = new Uint8Array(256);
      let Ue = ae.length;
      function rng() {
        if (Ue > ae.length - 16) {
          re.default.randomFillSync(ae);
          Ue = 0;
        }
        return ae.slice(Ue, (Ue += 16));
      }
    },
    4920: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = void 0;
      var re = _interopRequireDefault(q(6113));
      function _interopRequireDefault(a) {
        return a && a.__esModule ? a : { default: a };
      }
      function sha1(a) {
        if (Array.isArray(a)) {
          a = Buffer.from(a);
        } else if (typeof a === 'string') {
          a = Buffer.from(a, 'utf8');
        }
        return re.default.createHash('sha1').update(a).digest();
      }
      var ae = sha1;
      C['default'] = ae;
    },
    5284: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = void 0;
      var re = _interopRequireDefault(q(324));
      function _interopRequireDefault(a) {
        return a && a.__esModule ? a : { default: a };
      }
      const ae = [];
      for (let a = 0; a < 256; ++a) {
        ae.push((a + 256).toString(16).substr(1));
      }
      function stringify(a, C = 0) {
        const q = (
          ae[a[C + 0]] +
          ae[a[C + 1]] +
          ae[a[C + 2]] +
          ae[a[C + 3]] +
          '-' +
          ae[a[C + 4]] +
          ae[a[C + 5]] +
          '-' +
          ae[a[C + 6]] +
          ae[a[C + 7]] +
          '-' +
          ae[a[C + 8]] +
          ae[a[C + 9]] +
          '-' +
          ae[a[C + 10]] +
          ae[a[C + 11]] +
          ae[a[C + 12]] +
          ae[a[C + 13]] +
          ae[a[C + 14]] +
          ae[a[C + 15]]
        ).toLowerCase();
        if (!(0, re.default)(q)) {
          throw TypeError('Stringified UUID is invalid');
        }
        return q;
      }
      var Ue = stringify;
      C['default'] = Ue;
    },
    6101: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = void 0;
      var re = _interopRequireDefault(q(6750));
      var ae = _interopRequireDefault(q(5284));
      function _interopRequireDefault(a) {
        return a && a.__esModule ? a : { default: a };
      }
      let Ue;
      let lt;
      let Pt = 0;
      let Wt = 0;
      function v1(a, C, q) {
        let Ar = (C && q) || 0;
        const Er = C || new Array(16);
        a = a || {};
        let Ir = a.node || Ue;
        let Br = a.clockseq !== undefined ? a.clockseq : lt;
        if (Ir == null || Br == null) {
          const C = a.random || (a.rng || re.default)();
          if (Ir == null) {
            Ir = Ue = [C[0] | 1, C[1], C[2], C[3], C[4], C[5]];
          }
          if (Br == null) {
            Br = lt = ((C[6] << 8) | C[7]) & 16383;
          }
        }
        let Qr = a.msecs !== undefined ? a.msecs : Date.now();
        let kr = a.nsecs !== undefined ? a.nsecs : Wt + 1;
        const Dr = Qr - Pt + (kr - Wt) / 1e4;
        if (Dr < 0 && a.clockseq === undefined) {
          Br = (Br + 1) & 16383;
        }
        if ((Dr < 0 || Qr > Pt) && a.nsecs === undefined) {
          kr = 0;
        }
        if (kr >= 1e4) {
          throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
        }
        Pt = Qr;
        Wt = kr;
        lt = Br;
        Qr += 122192928e5;
        const Nr = ((Qr & 268435455) * 1e4 + kr) % 4294967296;
        Er[Ar++] = (Nr >>> 24) & 255;
        Er[Ar++] = (Nr >>> 16) & 255;
        Er[Ar++] = (Nr >>> 8) & 255;
        Er[Ar++] = Nr & 255;
        const Lr = ((Qr / 4294967296) * 1e4) & 268435455;
        Er[Ar++] = (Lr >>> 8) & 255;
        Er[Ar++] = Lr & 255;
        Er[Ar++] = ((Lr >>> 24) & 15) | 16;
        Er[Ar++] = (Lr >>> 16) & 255;
        Er[Ar++] = (Br >>> 8) | 128;
        Er[Ar++] = Br & 255;
        for (let a = 0; a < 6; ++a) {
          Er[Ar + a] = Ir[a];
        }
        return C || (0, ae.default)(Er);
      }
      var Ar = v1;
      C['default'] = Ar;
    },
    9456: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = void 0;
      var re = _interopRequireDefault(q(9390));
      var ae = _interopRequireDefault(q(8612));
      function _interopRequireDefault(a) {
        return a && a.__esModule ? a : { default: a };
      }
      const Ue = (0, re.default)('v3', 48, ae.default);
      var lt = Ue;
      C['default'] = lt;
    },
    9390: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = _default;
      C.URL = C.DNS = void 0;
      var re = _interopRequireDefault(q(5284));
      var ae = _interopRequireDefault(q(6067));
      function _interopRequireDefault(a) {
        return a && a.__esModule ? a : { default: a };
      }
      function stringToBytes(a) {
        a = unescape(encodeURIComponent(a));
        const C = [];
        for (let q = 0; q < a.length; ++q) {
          C.push(a.charCodeAt(q));
        }
        return C;
      }
      const Ue = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
      C.DNS = Ue;
      const lt = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
      C.URL = lt;
      function _default(a, C, q) {
        function generateUUID(a, Ue, lt, Pt) {
          if (typeof a === 'string') {
            a = stringToBytes(a);
          }
          if (typeof Ue === 'string') {
            Ue = (0, ae.default)(Ue);
          }
          if (Ue.length !== 16) {
            throw TypeError(
              'Namespace must be array-like (16 iterable integer values, 0-255)'
            );
          }
          let Wt = new Uint8Array(16 + a.length);
          Wt.set(Ue);
          Wt.set(a, Ue.length);
          Wt = q(Wt);
          Wt[6] = (Wt[6] & 15) | C;
          Wt[8] = (Wt[8] & 63) | 128;
          if (lt) {
            Pt = Pt || 0;
            for (let a = 0; a < 16; ++a) {
              lt[Pt + a] = Wt[a];
            }
            return lt;
          }
          return (0, re.default)(Wt);
        }
        try {
          generateUUID.name = a;
        } catch (a) {}
        generateUUID.DNS = Ue;
        generateUUID.URL = lt;
        return generateUUID;
      }
    },
    1071: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = void 0;
      var re = _interopRequireDefault(q(6750));
      var ae = _interopRequireDefault(q(5284));
      function _interopRequireDefault(a) {
        return a && a.__esModule ? a : { default: a };
      }
      function v4(a, C, q) {
        a = a || {};
        const Ue = a.random || (a.rng || re.default)();
        Ue[6] = (Ue[6] & 15) | 64;
        Ue[8] = (Ue[8] & 63) | 128;
        if (C) {
          q = q || 0;
          for (let a = 0; a < 16; ++a) {
            C[q + a] = Ue[a];
          }
          return C;
        }
        return (0, ae.default)(Ue);
      }
      var Ue = v4;
      C['default'] = Ue;
    },
    8057: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = void 0;
      var re = _interopRequireDefault(q(9390));
      var ae = _interopRequireDefault(q(4920));
      function _interopRequireDefault(a) {
        return a && a.__esModule ? a : { default: a };
      }
      const Ue = (0, re.default)('v5', 80, ae.default);
      var lt = Ue;
      C['default'] = lt;
    },
    324: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = void 0;
      var re = _interopRequireDefault(q(7610));
      function _interopRequireDefault(a) {
        return a && a.__esModule ? a : { default: a };
      }
      function validate(a) {
        return typeof a === 'string' && re.default.test(a);
      }
      var ae = validate;
      C['default'] = ae;
    },
    5530: (a, C, q) => {
      'use strict';
      Object.defineProperty(C, '__esModule', { value: true });
      C['default'] = void 0;
      var re = _interopRequireDefault(q(324));
      function _interopRequireDefault(a) {
        return a && a.__esModule ? a : { default: a };
      }
      function version(a) {
        if (!(0, re.default)(a)) {
          throw TypeError('Invalid UUID');
        }
        return parseInt(a.substr(14, 1), 16);
      }
      var ae = version;
      C['default'] = ae;
    },
    5304: function (a, C) {
      /**
       * @license
       * web-streams-polyfill v3.3.3
       * Copyright 2024 Mattias Buelens, Diwank Singh Tomer and other contributors.
       * This code is released under the MIT license.
       * SPDX-License-Identifier: MIT
       */
      (function (a, q) {
        true ? q(C) : 0;
      })(this, function (a) {
        'use strict';
        function noop() {
          return undefined;
        }
        function typeIsObject(a) {
          return (
            (typeof a === 'object' && a !== null) || typeof a === 'function'
          );
        }
        const C = noop;
        function setFunctionName(a, C) {
          try {
            Object.defineProperty(a, 'name', { value: C, configurable: true });
          } catch (a) {}
        }
        const q = Promise;
        const re = Promise.prototype.then;
        const ae = Promise.reject.bind(q);
        function newPromise(a) {
          return new q(a);
        }
        function promiseResolvedWith(a) {
          return newPromise((C) => C(a));
        }
        function promiseRejectedWith(a) {
          return ae(a);
        }
        function PerformPromiseThen(a, C, q) {
          return re.call(a, C, q);
        }
        function uponPromise(a, q, re) {
          PerformPromiseThen(PerformPromiseThen(a, q, re), undefined, C);
        }
        function uponFulfillment(a, C) {
          uponPromise(a, C);
        }
        function uponRejection(a, C) {
          uponPromise(a, undefined, C);
        }
        function transformPromiseWith(a, C, q) {
          return PerformPromiseThen(a, C, q);
        }
        function setPromiseIsHandledToTrue(a) {
          PerformPromiseThen(a, undefined, C);
        }
        let _queueMicrotask = (a) => {
          if (typeof queueMicrotask === 'function') {
            _queueMicrotask = queueMicrotask;
          } else {
            const a = promiseResolvedWith(undefined);
            _queueMicrotask = (C) => PerformPromiseThen(a, C);
          }
          return _queueMicrotask(a);
        };
        function reflectCall(a, C, q) {
          if (typeof a !== 'function') {
            throw new TypeError('Argument is not a function');
          }
          return Function.prototype.apply.call(a, C, q);
        }
        function promiseCall(a, C, q) {
          try {
            return promiseResolvedWith(reflectCall(a, C, q));
          } catch (a) {
            return promiseRejectedWith(a);
          }
        }
        const Ue = 16384;
        class SimpleQueue {
          constructor() {
            this._cursor = 0;
            this._size = 0;
            this._front = { _elements: [], _next: undefined };
            this._back = this._front;
            this._cursor = 0;
            this._size = 0;
          }
          get length() {
            return this._size;
          }
          push(a) {
            const C = this._back;
            let q = C;
            if (C._elements.length === Ue - 1) {
              q = { _elements: [], _next: undefined };
            }
            C._elements.push(a);
            if (q !== C) {
              this._back = q;
              C._next = q;
            }
            ++this._size;
          }
          shift() {
            const a = this._front;
            let C = a;
            const q = this._cursor;
            let re = q + 1;
            const ae = a._elements;
            const lt = ae[q];
            if (re === Ue) {
              C = a._next;
              re = 0;
            }
            --this._size;
            this._cursor = re;
            if (a !== C) {
              this._front = C;
            }
            ae[q] = undefined;
            return lt;
          }
          forEach(a) {
            let C = this._cursor;
            let q = this._front;
            let re = q._elements;
            while (C !== re.length || q._next !== undefined) {
              if (C === re.length) {
                q = q._next;
                re = q._elements;
                C = 0;
                if (re.length === 0) {
                  break;
                }
              }
              a(re[C]);
              ++C;
            }
          }
          peek() {
            const a = this._front;
            const C = this._cursor;
            return a._elements[C];
          }
        }
        const lt = Symbol('[[AbortSteps]]');
        const Pt = Symbol('[[ErrorSteps]]');
        const Wt = Symbol('[[CancelSteps]]');
        const Ar = Symbol('[[PullSteps]]');
        const Er = Symbol('[[ReleaseSteps]]');
        function ReadableStreamReaderGenericInitialize(a, C) {
          a._ownerReadableStream = C;
          C._reader = a;
          if (C._state === 'readable') {
            defaultReaderClosedPromiseInitialize(a);
          } else if (C._state === 'closed') {
            defaultReaderClosedPromiseInitializeAsResolved(a);
          } else {
            defaultReaderClosedPromiseInitializeAsRejected(a, C._storedError);
          }
        }
        function ReadableStreamReaderGenericCancel(a, C) {
          const q = a._ownerReadableStream;
          return ReadableStreamCancel(q, C);
        }
        function ReadableStreamReaderGenericRelease(a) {
          const C = a._ownerReadableStream;
          if (C._state === 'readable') {
            defaultReaderClosedPromiseReject(
              a,
              new TypeError(
                `Reader was released and can no longer be used to monitor the stream's closedness`
              )
            );
          } else {
            defaultReaderClosedPromiseResetToRejected(
              a,
              new TypeError(
                `Reader was released and can no longer be used to monitor the stream's closedness`
              )
            );
          }
          C._readableStreamController[Er]();
          C._reader = undefined;
          a._ownerReadableStream = undefined;
        }
        function readerLockException(a) {
          return new TypeError(
            'Cannot ' + a + ' a stream using a released reader'
          );
        }
        function defaultReaderClosedPromiseInitialize(a) {
          a._closedPromise = newPromise((C, q) => {
            a._closedPromise_resolve = C;
            a._closedPromise_reject = q;
          });
        }
        function defaultReaderClosedPromiseInitializeAsRejected(a, C) {
          defaultReaderClosedPromiseInitialize(a);
          defaultReaderClosedPromiseReject(a, C);
        }
        function defaultReaderClosedPromiseInitializeAsResolved(a) {
          defaultReaderClosedPromiseInitialize(a);
          defaultReaderClosedPromiseResolve(a);
        }
        function defaultReaderClosedPromiseReject(a, C) {
          if (a._closedPromise_reject === undefined) {
            return;
          }
          setPromiseIsHandledToTrue(a._closedPromise);
          a._closedPromise_reject(C);
          a._closedPromise_resolve = undefined;
          a._closedPromise_reject = undefined;
        }
        function defaultReaderClosedPromiseResetToRejected(a, C) {
          defaultReaderClosedPromiseInitializeAsRejected(a, C);
        }
        function defaultReaderClosedPromiseResolve(a) {
          if (a._closedPromise_resolve === undefined) {
            return;
          }
          a._closedPromise_resolve(undefined);
          a._closedPromise_resolve = undefined;
          a._closedPromise_reject = undefined;
        }
        const Ir =
          Number.isFinite ||
          function (a) {
            return typeof a === 'number' && isFinite(a);
          };
        const Br =
          Math.trunc ||
          function (a) {
            return a < 0 ? Math.ceil(a) : Math.floor(a);
          };
        function isDictionary(a) {
          return typeof a === 'object' || typeof a === 'function';
        }
        function assertDictionary(a, C) {
          if (a !== undefined && !isDictionary(a)) {
            throw new TypeError(`${C} is not an object.`);
          }
        }
        function assertFunction(a, C) {
          if (typeof a !== 'function') {
            throw new TypeError(`${C} is not a function.`);
          }
        }
        function isObject(a) {
          return (
            (typeof a === 'object' && a !== null) || typeof a === 'function'
          );
        }
        function assertObject(a, C) {
          if (!isObject(a)) {
            throw new TypeError(`${C} is not an object.`);
          }
        }
        function assertRequiredArgument(a, C, q) {
          if (a === undefined) {
            throw new TypeError(`Parameter ${C} is required in '${q}'.`);
          }
        }
        function assertRequiredField(a, C, q) {
          if (a === undefined) {
            throw new TypeError(`${C} is required in '${q}'.`);
          }
        }
        function convertUnrestrictedDouble(a) {
          return Number(a);
        }
        function censorNegativeZero(a) {
          return a === 0 ? 0 : a;
        }
        function integerPart(a) {
          return censorNegativeZero(Br(a));
        }
        function convertUnsignedLongLongWithEnforceRange(a, C) {
          const q = 0;
          const re = Number.MAX_SAFE_INTEGER;
          let ae = Number(a);
          ae = censorNegativeZero(ae);
          if (!Ir(ae)) {
            throw new TypeError(`${C} is not a finite number`);
          }
          ae = integerPart(ae);
          if (ae < q || ae > re) {
            throw new TypeError(
              `${C} is outside the accepted range of ${q} to ${re}, inclusive`
            );
          }
          if (!Ir(ae) || ae === 0) {
            return 0;
          }
          return ae;
        }
        function assertReadableStream(a, C) {
          if (!IsReadableStream(a)) {
            throw new TypeError(`${C} is not a ReadableStream.`);
          }
        }
        function AcquireReadableStreamDefaultReader(a) {
          return new ReadableStreamDefaultReader(a);
        }
        function ReadableStreamAddReadRequest(a, C) {
          a._reader._readRequests.push(C);
        }
        function ReadableStreamFulfillReadRequest(a, C, q) {
          const re = a._reader;
          const ae = re._readRequests.shift();
          if (q) {
            ae._closeSteps();
          } else {
            ae._chunkSteps(C);
          }
        }
        function ReadableStreamGetNumReadRequests(a) {
          return a._reader._readRequests.length;
        }
        function ReadableStreamHasDefaultReader(a) {
          const C = a._reader;
          if (C === undefined) {
            return false;
          }
          if (!IsReadableStreamDefaultReader(C)) {
            return false;
          }
          return true;
        }
        class ReadableStreamDefaultReader {
          constructor(a) {
            assertRequiredArgument(a, 1, 'ReadableStreamDefaultReader');
            assertReadableStream(a, 'First parameter');
            if (IsReadableStreamLocked(a)) {
              throw new TypeError(
                'This stream has already been locked for exclusive reading by another reader'
              );
            }
            ReadableStreamReaderGenericInitialize(this, a);
            this._readRequests = new SimpleQueue();
          }
          get closed() {
            if (!IsReadableStreamDefaultReader(this)) {
              return promiseRejectedWith(
                defaultReaderBrandCheckException('closed')
              );
            }
            return this._closedPromise;
          }
          cancel(a = undefined) {
            if (!IsReadableStreamDefaultReader(this)) {
              return promiseRejectedWith(
                defaultReaderBrandCheckException('cancel')
              );
            }
            if (this._ownerReadableStream === undefined) {
              return promiseRejectedWith(readerLockException('cancel'));
            }
            return ReadableStreamReaderGenericCancel(this, a);
          }
          read() {
            if (!IsReadableStreamDefaultReader(this)) {
              return promiseRejectedWith(
                defaultReaderBrandCheckException('read')
              );
            }
            if (this._ownerReadableStream === undefined) {
              return promiseRejectedWith(readerLockException('read from'));
            }
            let a;
            let C;
            const q = newPromise((q, re) => {
              a = q;
              C = re;
            });
            const re = {
              _chunkSteps: (C) => a({ value: C, done: false }),
              _closeSteps: () => a({ value: undefined, done: true }),
              _errorSteps: (a) => C(a)
            };
            ReadableStreamDefaultReaderRead(this, re);
            return q;
          }
          releaseLock() {
            if (!IsReadableStreamDefaultReader(this)) {
              throw defaultReaderBrandCheckException('releaseLock');
            }
            if (this._ownerReadableStream === undefined) {
              return;
            }
            ReadableStreamDefaultReaderRelease(this);
          }
        }
        Object.defineProperties(ReadableStreamDefaultReader.prototype, {
          cancel: { enumerable: true },
          read: { enumerable: true },
          releaseLock: { enumerable: true },
          closed: { enumerable: true }
        });
        setFunctionName(ReadableStreamDefaultReader.prototype.cancel, 'cancel');
        setFunctionName(ReadableStreamDefaultReader.prototype.read, 'read');
        setFunctionName(
          ReadableStreamDefaultReader.prototype.releaseLock,
          'releaseLock'
        );
        if (typeof Symbol.toStringTag === 'symbol') {
          Object.defineProperty(
            ReadableStreamDefaultReader.prototype,
            Symbol.toStringTag,
            { value: 'ReadableStreamDefaultReader', configurable: true }
          );
        }
        function IsReadableStreamDefaultReader(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(a, '_readRequests')) {
            return false;
          }
          return a instanceof ReadableStreamDefaultReader;
        }
        function ReadableStreamDefaultReaderRead(a, C) {
          const q = a._ownerReadableStream;
          q._disturbed = true;
          if (q._state === 'closed') {
            C._closeSteps();
          } else if (q._state === 'errored') {
            C._errorSteps(q._storedError);
          } else {
            q._readableStreamController[Ar](C);
          }
        }
        function ReadableStreamDefaultReaderRelease(a) {
          ReadableStreamReaderGenericRelease(a);
          const C = new TypeError('Reader was released');
          ReadableStreamDefaultReaderErrorReadRequests(a, C);
        }
        function ReadableStreamDefaultReaderErrorReadRequests(a, C) {
          const q = a._readRequests;
          a._readRequests = new SimpleQueue();
          q.forEach((a) => {
            a._errorSteps(C);
          });
        }
        function defaultReaderBrandCheckException(a) {
          return new TypeError(
            `ReadableStreamDefaultReader.prototype.${a} can only be used on a ReadableStreamDefaultReader`
          );
        }
        const Qr = Object.getPrototypeOf(
          Object.getPrototypeOf(async function* () {}).prototype
        );
        class ReadableStreamAsyncIteratorImpl {
          constructor(a, C) {
            this._ongoingPromise = undefined;
            this._isFinished = false;
            this._reader = a;
            this._preventCancel = C;
          }
          next() {
            const nextSteps = () => this._nextSteps();
            this._ongoingPromise = this._ongoingPromise
              ? transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps)
              : nextSteps();
            return this._ongoingPromise;
          }
          return(a) {
            const returnSteps = () => this._returnSteps(a);
            return this._ongoingPromise
              ? transformPromiseWith(
                  this._ongoingPromise,
                  returnSteps,
                  returnSteps
                )
              : returnSteps();
          }
          _nextSteps() {
            if (this._isFinished) {
              return Promise.resolve({ value: undefined, done: true });
            }
            const a = this._reader;
            let C;
            let q;
            const re = newPromise((a, re) => {
              C = a;
              q = re;
            });
            const ae = {
              _chunkSteps: (a) => {
                this._ongoingPromise = undefined;
                _queueMicrotask(() => C({ value: a, done: false }));
              },
              _closeSteps: () => {
                this._ongoingPromise = undefined;
                this._isFinished = true;
                ReadableStreamReaderGenericRelease(a);
                C({ value: undefined, done: true });
              },
              _errorSteps: (C) => {
                this._ongoingPromise = undefined;
                this._isFinished = true;
                ReadableStreamReaderGenericRelease(a);
                q(C);
              }
            };
            ReadableStreamDefaultReaderRead(a, ae);
            return re;
          }
          _returnSteps(a) {
            if (this._isFinished) {
              return Promise.resolve({ value: a, done: true });
            }
            this._isFinished = true;
            const C = this._reader;
            if (!this._preventCancel) {
              const q = ReadableStreamReaderGenericCancel(C, a);
              ReadableStreamReaderGenericRelease(C);
              return transformPromiseWith(q, () => ({ value: a, done: true }));
            }
            ReadableStreamReaderGenericRelease(C);
            return promiseResolvedWith({ value: a, done: true });
          }
        }
        const kr = {
          next() {
            if (!IsReadableStreamAsyncIterator(this)) {
              return promiseRejectedWith(
                streamAsyncIteratorBrandCheckException('next')
              );
            }
            return this._asyncIteratorImpl.next();
          },
          return(a) {
            if (!IsReadableStreamAsyncIterator(this)) {
              return promiseRejectedWith(
                streamAsyncIteratorBrandCheckException('return')
              );
            }
            return this._asyncIteratorImpl.return(a);
          }
        };
        Object.setPrototypeOf(kr, Qr);
        function AcquireReadableStreamAsyncIterator(a, C) {
          const q = AcquireReadableStreamDefaultReader(a);
          const re = new ReadableStreamAsyncIteratorImpl(q, C);
          const ae = Object.create(kr);
          ae._asyncIteratorImpl = re;
          return ae;
        }
        function IsReadableStreamAsyncIterator(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(a, '_asyncIteratorImpl')) {
            return false;
          }
          try {
            return (
              a._asyncIteratorImpl instanceof ReadableStreamAsyncIteratorImpl
            );
          } catch (a) {
            return false;
          }
        }
        function streamAsyncIteratorBrandCheckException(a) {
          return new TypeError(
            `ReadableStreamAsyncIterator.${a} can only be used on a ReadableSteamAsyncIterator`
          );
        }
        const Dr =
          Number.isNaN ||
          function (a) {
            return a !== a;
          };
        var Nr, Lr, Fr;
        function CreateArrayFromList(a) {
          return a.slice();
        }
        function CopyDataBlockBytes(a, C, q, re, ae) {
          new Uint8Array(a).set(new Uint8Array(q, re, ae), C);
        }
        let TransferArrayBuffer = (a) => {
          if (typeof a.transfer === 'function') {
            TransferArrayBuffer = (a) => a.transfer();
          } else if (typeof structuredClone === 'function') {
            TransferArrayBuffer = (a) => structuredClone(a, { transfer: [a] });
          } else {
            TransferArrayBuffer = (a) => a;
          }
          return TransferArrayBuffer(a);
        };
        let IsDetachedBuffer = (a) => {
          if (typeof a.detached === 'boolean') {
            IsDetachedBuffer = (a) => a.detached;
          } else {
            IsDetachedBuffer = (a) => a.byteLength === 0;
          }
          return IsDetachedBuffer(a);
        };
        function ArrayBufferSlice(a, C, q) {
          if (a.slice) {
            return a.slice(C, q);
          }
          const re = q - C;
          const ae = new ArrayBuffer(re);
          CopyDataBlockBytes(ae, 0, a, C, re);
          return ae;
        }
        function GetMethod(a, C) {
          const q = a[C];
          if (q === undefined || q === null) {
            return undefined;
          }
          if (typeof q !== 'function') {
            throw new TypeError(`${String(C)} is not a function`);
          }
          return q;
        }
        function CreateAsyncFromSyncIterator(a) {
          const C = { [Symbol.iterator]: () => a.iterator };
          const q = (async function* () {
            return yield* C;
          })();
          const re = q.next;
          return { iterator: q, nextMethod: re, done: false };
        }
        const Mr =
          (Fr =
            (Nr = Symbol.asyncIterator) !== null && Nr !== void 0
              ? Nr
              : (Lr = Symbol.for) === null || Lr === void 0
                ? void 0
                : Lr.call(Symbol, 'Symbol.asyncIterator')) !== null &&
          Fr !== void 0
            ? Fr
            : '@@asyncIterator';
        function GetIterator(a, C = 'sync', q) {
          if (q === undefined) {
            if (C === 'async') {
              q = GetMethod(a, Mr);
              if (q === undefined) {
                const C = GetMethod(a, Symbol.iterator);
                const q = GetIterator(a, 'sync', C);
                return CreateAsyncFromSyncIterator(q);
              }
            } else {
              q = GetMethod(a, Symbol.iterator);
            }
          }
          if (q === undefined) {
            throw new TypeError('The object is not iterable');
          }
          const re = reflectCall(q, a, []);
          if (!typeIsObject(re)) {
            throw new TypeError('The iterator method must return an object');
          }
          const ae = re.next;
          return { iterator: re, nextMethod: ae, done: false };
        }
        function IteratorNext(a) {
          const C = reflectCall(a.nextMethod, a.iterator, []);
          if (!typeIsObject(C)) {
            throw new TypeError(
              'The iterator.next() method must return an object'
            );
          }
          return C;
        }
        function IteratorComplete(a) {
          return Boolean(a.done);
        }
        function IteratorValue(a) {
          return a.value;
        }
        function IsNonNegativeNumber(a) {
          if (typeof a !== 'number') {
            return false;
          }
          if (Dr(a)) {
            return false;
          }
          if (a < 0) {
            return false;
          }
          return true;
        }
        function CloneAsUint8Array(a) {
          const C = ArrayBufferSlice(
            a.buffer,
            a.byteOffset,
            a.byteOffset + a.byteLength
          );
          return new Uint8Array(C);
        }
        function DequeueValue(a) {
          const C = a._queue.shift();
          a._queueTotalSize -= C.size;
          if (a._queueTotalSize < 0) {
            a._queueTotalSize = 0;
          }
          return C.value;
        }
        function EnqueueValueWithSize(a, C, q) {
          if (!IsNonNegativeNumber(q) || q === Infinity) {
            throw new RangeError(
              'Size must be a finite, non-NaN, non-negative number.'
            );
          }
          a._queue.push({ value: C, size: q });
          a._queueTotalSize += q;
        }
        function PeekQueueValue(a) {
          const C = a._queue.peek();
          return C.value;
        }
        function ResetQueue(a) {
          a._queue = new SimpleQueue();
          a._queueTotalSize = 0;
        }
        function isDataViewConstructor(a) {
          return a === DataView;
        }
        function isDataView(a) {
          return isDataViewConstructor(a.constructor);
        }
        function arrayBufferViewElementSize(a) {
          if (isDataViewConstructor(a)) {
            return 1;
          }
          return a.BYTES_PER_ELEMENT;
        }
        class ReadableStreamBYOBRequest {
          constructor() {
            throw new TypeError('Illegal constructor');
          }
          get view() {
            if (!IsReadableStreamBYOBRequest(this)) {
              throw byobRequestBrandCheckException('view');
            }
            return this._view;
          }
          respond(a) {
            if (!IsReadableStreamBYOBRequest(this)) {
              throw byobRequestBrandCheckException('respond');
            }
            assertRequiredArgument(a, 1, 'respond');
            a = convertUnsignedLongLongWithEnforceRange(a, 'First parameter');
            if (this._associatedReadableByteStreamController === undefined) {
              throw new TypeError('This BYOB request has been invalidated');
            }
            if (IsDetachedBuffer(this._view.buffer)) {
              throw new TypeError(
                `The BYOB request's buffer has been detached and so cannot be used as a response`
              );
            }
            ReadableByteStreamControllerRespond(
              this._associatedReadableByteStreamController,
              a
            );
          }
          respondWithNewView(a) {
            if (!IsReadableStreamBYOBRequest(this)) {
              throw byobRequestBrandCheckException('respondWithNewView');
            }
            assertRequiredArgument(a, 1, 'respondWithNewView');
            if (!ArrayBuffer.isView(a)) {
              throw new TypeError(
                'You can only respond with array buffer views'
              );
            }
            if (this._associatedReadableByteStreamController === undefined) {
              throw new TypeError('This BYOB request has been invalidated');
            }
            if (IsDetachedBuffer(a.buffer)) {
              throw new TypeError(
                "The given view's buffer has been detached and so cannot be used as a response"
              );
            }
            ReadableByteStreamControllerRespondWithNewView(
              this._associatedReadableByteStreamController,
              a
            );
          }
        }
        Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
          respond: { enumerable: true },
          respondWithNewView: { enumerable: true },
          view: { enumerable: true }
        });
        setFunctionName(ReadableStreamBYOBRequest.prototype.respond, 'respond');
        setFunctionName(
          ReadableStreamBYOBRequest.prototype.respondWithNewView,
          'respondWithNewView'
        );
        if (typeof Symbol.toStringTag === 'symbol') {
          Object.defineProperty(
            ReadableStreamBYOBRequest.prototype,
            Symbol.toStringTag,
            { value: 'ReadableStreamBYOBRequest', configurable: true }
          );
        }
        class ReadableByteStreamController {
          constructor() {
            throw new TypeError('Illegal constructor');
          }
          get byobRequest() {
            if (!IsReadableByteStreamController(this)) {
              throw byteStreamControllerBrandCheckException('byobRequest');
            }
            return ReadableByteStreamControllerGetBYOBRequest(this);
          }
          get desiredSize() {
            if (!IsReadableByteStreamController(this)) {
              throw byteStreamControllerBrandCheckException('desiredSize');
            }
            return ReadableByteStreamControllerGetDesiredSize(this);
          }
          close() {
            if (!IsReadableByteStreamController(this)) {
              throw byteStreamControllerBrandCheckException('close');
            }
            if (this._closeRequested) {
              throw new TypeError(
                'The stream has already been closed; do not close it again!'
              );
            }
            const a = this._controlledReadableByteStream._state;
            if (a !== 'readable') {
              throw new TypeError(
                `The stream (in ${a} state) is not in the readable state and cannot be closed`
              );
            }
            ReadableByteStreamControllerClose(this);
          }
          enqueue(a) {
            if (!IsReadableByteStreamController(this)) {
              throw byteStreamControllerBrandCheckException('enqueue');
            }
            assertRequiredArgument(a, 1, 'enqueue');
            if (!ArrayBuffer.isView(a)) {
              throw new TypeError('chunk must be an array buffer view');
            }
            if (a.byteLength === 0) {
              throw new TypeError('chunk must have non-zero byteLength');
            }
            if (a.buffer.byteLength === 0) {
              throw new TypeError(
                `chunk's buffer must have non-zero byteLength`
              );
            }
            if (this._closeRequested) {
              throw new TypeError('stream is closed or draining');
            }
            const C = this._controlledReadableByteStream._state;
            if (C !== 'readable') {
              throw new TypeError(
                `The stream (in ${C} state) is not in the readable state and cannot be enqueued to`
              );
            }
            ReadableByteStreamControllerEnqueue(this, a);
          }
          error(a = undefined) {
            if (!IsReadableByteStreamController(this)) {
              throw byteStreamControllerBrandCheckException('error');
            }
            ReadableByteStreamControllerError(this, a);
          }
          [Wt](a) {
            ReadableByteStreamControllerClearPendingPullIntos(this);
            ResetQueue(this);
            const C = this._cancelAlgorithm(a);
            ReadableByteStreamControllerClearAlgorithms(this);
            return C;
          }
          [Ar](a) {
            const C = this._controlledReadableByteStream;
            if (this._queueTotalSize > 0) {
              ReadableByteStreamControllerFillReadRequestFromQueue(this, a);
              return;
            }
            const q = this._autoAllocateChunkSize;
            if (q !== undefined) {
              let C;
              try {
                C = new ArrayBuffer(q);
              } catch (C) {
                a._errorSteps(C);
                return;
              }
              const re = {
                buffer: C,
                bufferByteLength: q,
                byteOffset: 0,
                byteLength: q,
                bytesFilled: 0,
                minimumFill: 1,
                elementSize: 1,
                viewConstructor: Uint8Array,
                readerType: 'default'
              };
              this._pendingPullIntos.push(re);
            }
            ReadableStreamAddReadRequest(C, a);
            ReadableByteStreamControllerCallPullIfNeeded(this);
          }
          [Er]() {
            if (this._pendingPullIntos.length > 0) {
              const a = this._pendingPullIntos.peek();
              a.readerType = 'none';
              this._pendingPullIntos = new SimpleQueue();
              this._pendingPullIntos.push(a);
            }
          }
        }
        Object.defineProperties(ReadableByteStreamController.prototype, {
          close: { enumerable: true },
          enqueue: { enumerable: true },
          error: { enumerable: true },
          byobRequest: { enumerable: true },
          desiredSize: { enumerable: true }
        });
        setFunctionName(ReadableByteStreamController.prototype.close, 'close');
        setFunctionName(
          ReadableByteStreamController.prototype.enqueue,
          'enqueue'
        );
        setFunctionName(ReadableByteStreamController.prototype.error, 'error');
        if (typeof Symbol.toStringTag === 'symbol') {
          Object.defineProperty(
            ReadableByteStreamController.prototype,
            Symbol.toStringTag,
            { value: 'ReadableByteStreamController', configurable: true }
          );
        }
        function IsReadableByteStreamController(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (
            !Object.prototype.hasOwnProperty.call(
              a,
              '_controlledReadableByteStream'
            )
          ) {
            return false;
          }
          return a instanceof ReadableByteStreamController;
        }
        function IsReadableStreamBYOBRequest(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (
            !Object.prototype.hasOwnProperty.call(
              a,
              '_associatedReadableByteStreamController'
            )
          ) {
            return false;
          }
          return a instanceof ReadableStreamBYOBRequest;
        }
        function ReadableByteStreamControllerCallPullIfNeeded(a) {
          const C = ReadableByteStreamControllerShouldCallPull(a);
          if (!C) {
            return;
          }
          if (a._pulling) {
            a._pullAgain = true;
            return;
          }
          a._pulling = true;
          const q = a._pullAlgorithm();
          uponPromise(
            q,
            () => {
              a._pulling = false;
              if (a._pullAgain) {
                a._pullAgain = false;
                ReadableByteStreamControllerCallPullIfNeeded(a);
              }
              return null;
            },
            (C) => {
              ReadableByteStreamControllerError(a, C);
              return null;
            }
          );
        }
        function ReadableByteStreamControllerClearPendingPullIntos(a) {
          ReadableByteStreamControllerInvalidateBYOBRequest(a);
          a._pendingPullIntos = new SimpleQueue();
        }
        function ReadableByteStreamControllerCommitPullIntoDescriptor(a, C) {
          let q = false;
          if (a._state === 'closed') {
            q = true;
          }
          const re = ReadableByteStreamControllerConvertPullIntoDescriptor(C);
          if (C.readerType === 'default') {
            ReadableStreamFulfillReadRequest(a, re, q);
          } else {
            ReadableStreamFulfillReadIntoRequest(a, re, q);
          }
        }
        function ReadableByteStreamControllerConvertPullIntoDescriptor(a) {
          const C = a.bytesFilled;
          const q = a.elementSize;
          return new a.viewConstructor(a.buffer, a.byteOffset, C / q);
        }
        function ReadableByteStreamControllerEnqueueChunkToQueue(a, C, q, re) {
          a._queue.push({ buffer: C, byteOffset: q, byteLength: re });
          a._queueTotalSize += re;
        }
        function ReadableByteStreamControllerEnqueueClonedChunkToQueue(
          a,
          C,
          q,
          re
        ) {
          let ae;
          try {
            ae = ArrayBufferSlice(C, q, q + re);
          } catch (C) {
            ReadableByteStreamControllerError(a, C);
            throw C;
          }
          ReadableByteStreamControllerEnqueueChunkToQueue(a, ae, 0, re);
        }
        function ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(
          a,
          C
        ) {
          if (C.bytesFilled > 0) {
            ReadableByteStreamControllerEnqueueClonedChunkToQueue(
              a,
              C.buffer,
              C.byteOffset,
              C.bytesFilled
            );
          }
          ReadableByteStreamControllerShiftPendingPullInto(a);
        }
        function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(
          a,
          C
        ) {
          const q = Math.min(a._queueTotalSize, C.byteLength - C.bytesFilled);
          const re = C.bytesFilled + q;
          let ae = q;
          let Ue = false;
          const lt = re % C.elementSize;
          const Pt = re - lt;
          if (Pt >= C.minimumFill) {
            ae = Pt - C.bytesFilled;
            Ue = true;
          }
          const Wt = a._queue;
          while (ae > 0) {
            const q = Wt.peek();
            const re = Math.min(ae, q.byteLength);
            const Ue = C.byteOffset + C.bytesFilled;
            CopyDataBlockBytes(C.buffer, Ue, q.buffer, q.byteOffset, re);
            if (q.byteLength === re) {
              Wt.shift();
            } else {
              q.byteOffset += re;
              q.byteLength -= re;
            }
            a._queueTotalSize -= re;
            ReadableByteStreamControllerFillHeadPullIntoDescriptor(a, re, C);
            ae -= re;
          }
          return Ue;
        }
        function ReadableByteStreamControllerFillHeadPullIntoDescriptor(
          a,
          C,
          q
        ) {
          q.bytesFilled += C;
        }
        function ReadableByteStreamControllerHandleQueueDrain(a) {
          if (a._queueTotalSize === 0 && a._closeRequested) {
            ReadableByteStreamControllerClearAlgorithms(a);
            ReadableStreamClose(a._controlledReadableByteStream);
          } else {
            ReadableByteStreamControllerCallPullIfNeeded(a);
          }
        }
        function ReadableByteStreamControllerInvalidateBYOBRequest(a) {
          if (a._byobRequest === null) {
            return;
          }
          a._byobRequest._associatedReadableByteStreamController = undefined;
          a._byobRequest._view = null;
          a._byobRequest = null;
        }
        function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(
          a
        ) {
          while (a._pendingPullIntos.length > 0) {
            if (a._queueTotalSize === 0) {
              return;
            }
            const C = a._pendingPullIntos.peek();
            if (
              ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(a, C)
            ) {
              ReadableByteStreamControllerShiftPendingPullInto(a);
              ReadableByteStreamControllerCommitPullIntoDescriptor(
                a._controlledReadableByteStream,
                C
              );
            }
          }
        }
        function ReadableByteStreamControllerProcessReadRequestsUsingQueue(a) {
          const C = a._controlledReadableByteStream._reader;
          while (C._readRequests.length > 0) {
            if (a._queueTotalSize === 0) {
              return;
            }
            const q = C._readRequests.shift();
            ReadableByteStreamControllerFillReadRequestFromQueue(a, q);
          }
        }
        function ReadableByteStreamControllerPullInto(a, C, q, re) {
          const ae = a._controlledReadableByteStream;
          const Ue = C.constructor;
          const lt = arrayBufferViewElementSize(Ue);
          const { byteOffset: Pt, byteLength: Wt } = C;
          const Ar = q * lt;
          let Er;
          try {
            Er = TransferArrayBuffer(C.buffer);
          } catch (a) {
            re._errorSteps(a);
            return;
          }
          const Ir = {
            buffer: Er,
            bufferByteLength: Er.byteLength,
            byteOffset: Pt,
            byteLength: Wt,
            bytesFilled: 0,
            minimumFill: Ar,
            elementSize: lt,
            viewConstructor: Ue,
            readerType: 'byob'
          };
          if (a._pendingPullIntos.length > 0) {
            a._pendingPullIntos.push(Ir);
            ReadableStreamAddReadIntoRequest(ae, re);
            return;
          }
          if (ae._state === 'closed') {
            const a = new Ue(Ir.buffer, Ir.byteOffset, 0);
            re._closeSteps(a);
            return;
          }
          if (a._queueTotalSize > 0) {
            if (
              ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(a, Ir)
            ) {
              const C =
                ReadableByteStreamControllerConvertPullIntoDescriptor(Ir);
              ReadableByteStreamControllerHandleQueueDrain(a);
              re._chunkSteps(C);
              return;
            }
            if (a._closeRequested) {
              const C = new TypeError(
                'Insufficient bytes to fill elements in the given buffer'
              );
              ReadableByteStreamControllerError(a, C);
              re._errorSteps(C);
              return;
            }
          }
          a._pendingPullIntos.push(Ir);
          ReadableStreamAddReadIntoRequest(ae, re);
          ReadableByteStreamControllerCallPullIfNeeded(a);
        }
        function ReadableByteStreamControllerRespondInClosedState(a, C) {
          if (C.readerType === 'none') {
            ReadableByteStreamControllerShiftPendingPullInto(a);
          }
          const q = a._controlledReadableByteStream;
          if (ReadableStreamHasBYOBReader(q)) {
            while (ReadableStreamGetNumReadIntoRequests(q) > 0) {
              const C = ReadableByteStreamControllerShiftPendingPullInto(a);
              ReadableByteStreamControllerCommitPullIntoDescriptor(q, C);
            }
          }
        }
        function ReadableByteStreamControllerRespondInReadableState(a, C, q) {
          ReadableByteStreamControllerFillHeadPullIntoDescriptor(a, C, q);
          if (q.readerType === 'none') {
            ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(a, q);
            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(a);
            return;
          }
          if (q.bytesFilled < q.minimumFill) {
            return;
          }
          ReadableByteStreamControllerShiftPendingPullInto(a);
          const re = q.bytesFilled % q.elementSize;
          if (re > 0) {
            const C = q.byteOffset + q.bytesFilled;
            ReadableByteStreamControllerEnqueueClonedChunkToQueue(
              a,
              q.buffer,
              C - re,
              re
            );
          }
          q.bytesFilled -= re;
          ReadableByteStreamControllerCommitPullIntoDescriptor(
            a._controlledReadableByteStream,
            q
          );
          ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(a);
        }
        function ReadableByteStreamControllerRespondInternal(a, C) {
          const q = a._pendingPullIntos.peek();
          ReadableByteStreamControllerInvalidateBYOBRequest(a);
          const re = a._controlledReadableByteStream._state;
          if (re === 'closed') {
            ReadableByteStreamControllerRespondInClosedState(a, q);
          } else {
            ReadableByteStreamControllerRespondInReadableState(a, C, q);
          }
          ReadableByteStreamControllerCallPullIfNeeded(a);
        }
        function ReadableByteStreamControllerShiftPendingPullInto(a) {
          const C = a._pendingPullIntos.shift();
          return C;
        }
        function ReadableByteStreamControllerShouldCallPull(a) {
          const C = a._controlledReadableByteStream;
          if (C._state !== 'readable') {
            return false;
          }
          if (a._closeRequested) {
            return false;
          }
          if (!a._started) {
            return false;
          }
          if (
            ReadableStreamHasDefaultReader(C) &&
            ReadableStreamGetNumReadRequests(C) > 0
          ) {
            return true;
          }
          if (
            ReadableStreamHasBYOBReader(C) &&
            ReadableStreamGetNumReadIntoRequests(C) > 0
          ) {
            return true;
          }
          const q = ReadableByteStreamControllerGetDesiredSize(a);
          if (q > 0) {
            return true;
          }
          return false;
        }
        function ReadableByteStreamControllerClearAlgorithms(a) {
          a._pullAlgorithm = undefined;
          a._cancelAlgorithm = undefined;
        }
        function ReadableByteStreamControllerClose(a) {
          const C = a._controlledReadableByteStream;
          if (a._closeRequested || C._state !== 'readable') {
            return;
          }
          if (a._queueTotalSize > 0) {
            a._closeRequested = true;
            return;
          }
          if (a._pendingPullIntos.length > 0) {
            const C = a._pendingPullIntos.peek();
            if (C.bytesFilled % C.elementSize !== 0) {
              const C = new TypeError(
                'Insufficient bytes to fill elements in the given buffer'
              );
              ReadableByteStreamControllerError(a, C);
              throw C;
            }
          }
          ReadableByteStreamControllerClearAlgorithms(a);
          ReadableStreamClose(C);
        }
        function ReadableByteStreamControllerEnqueue(a, C) {
          const q = a._controlledReadableByteStream;
          if (a._closeRequested || q._state !== 'readable') {
            return;
          }
          const { buffer: re, byteOffset: ae, byteLength: Ue } = C;
          if (IsDetachedBuffer(re)) {
            throw new TypeError(
              "chunk's buffer is detached and so cannot be enqueued"
            );
          }
          const lt = TransferArrayBuffer(re);
          if (a._pendingPullIntos.length > 0) {
            const C = a._pendingPullIntos.peek();
            if (IsDetachedBuffer(C.buffer)) {
              throw new TypeError(
                "The BYOB request's buffer has been detached and so cannot be filled with an enqueued chunk"
              );
            }
            ReadableByteStreamControllerInvalidateBYOBRequest(a);
            C.buffer = TransferArrayBuffer(C.buffer);
            if (C.readerType === 'none') {
              ReadableByteStreamControllerEnqueueDetachedPullIntoToQueue(a, C);
            }
          }
          if (ReadableStreamHasDefaultReader(q)) {
            ReadableByteStreamControllerProcessReadRequestsUsingQueue(a);
            if (ReadableStreamGetNumReadRequests(q) === 0) {
              ReadableByteStreamControllerEnqueueChunkToQueue(a, lt, ae, Ue);
            } else {
              if (a._pendingPullIntos.length > 0) {
                ReadableByteStreamControllerShiftPendingPullInto(a);
              }
              const C = new Uint8Array(lt, ae, Ue);
              ReadableStreamFulfillReadRequest(q, C, false);
            }
          } else if (ReadableStreamHasBYOBReader(q)) {
            ReadableByteStreamControllerEnqueueChunkToQueue(a, lt, ae, Ue);
            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(a);
          } else {
            ReadableByteStreamControllerEnqueueChunkToQueue(a, lt, ae, Ue);
          }
          ReadableByteStreamControllerCallPullIfNeeded(a);
        }
        function ReadableByteStreamControllerError(a, C) {
          const q = a._controlledReadableByteStream;
          if (q._state !== 'readable') {
            return;
          }
          ReadableByteStreamControllerClearPendingPullIntos(a);
          ResetQueue(a);
          ReadableByteStreamControllerClearAlgorithms(a);
          ReadableStreamError(q, C);
        }
        function ReadableByteStreamControllerFillReadRequestFromQueue(a, C) {
          const q = a._queue.shift();
          a._queueTotalSize -= q.byteLength;
          ReadableByteStreamControllerHandleQueueDrain(a);
          const re = new Uint8Array(q.buffer, q.byteOffset, q.byteLength);
          C._chunkSteps(re);
        }
        function ReadableByteStreamControllerGetBYOBRequest(a) {
          if (a._byobRequest === null && a._pendingPullIntos.length > 0) {
            const C = a._pendingPullIntos.peek();
            const q = new Uint8Array(
              C.buffer,
              C.byteOffset + C.bytesFilled,
              C.byteLength - C.bytesFilled
            );
            const re = Object.create(ReadableStreamBYOBRequest.prototype);
            SetUpReadableStreamBYOBRequest(re, a, q);
            a._byobRequest = re;
          }
          return a._byobRequest;
        }
        function ReadableByteStreamControllerGetDesiredSize(a) {
          const C = a._controlledReadableByteStream._state;
          if (C === 'errored') {
            return null;
          }
          if (C === 'closed') {
            return 0;
          }
          return a._strategyHWM - a._queueTotalSize;
        }
        function ReadableByteStreamControllerRespond(a, C) {
          const q = a._pendingPullIntos.peek();
          const re = a._controlledReadableByteStream._state;
          if (re === 'closed') {
            if (C !== 0) {
              throw new TypeError(
                'bytesWritten must be 0 when calling respond() on a closed stream'
              );
            }
          } else {
            if (C === 0) {
              throw new TypeError(
                'bytesWritten must be greater than 0 when calling respond() on a readable stream'
              );
            }
            if (q.bytesFilled + C > q.byteLength) {
              throw new RangeError('bytesWritten out of range');
            }
          }
          q.buffer = TransferArrayBuffer(q.buffer);
          ReadableByteStreamControllerRespondInternal(a, C);
        }
        function ReadableByteStreamControllerRespondWithNewView(a, C) {
          const q = a._pendingPullIntos.peek();
          const re = a._controlledReadableByteStream._state;
          if (re === 'closed') {
            if (C.byteLength !== 0) {
              throw new TypeError(
                "The view's length must be 0 when calling respondWithNewView() on a closed stream"
              );
            }
          } else {
            if (C.byteLength === 0) {
              throw new TypeError(
                "The view's length must be greater than 0 when calling respondWithNewView() on a readable stream"
              );
            }
          }
          if (q.byteOffset + q.bytesFilled !== C.byteOffset) {
            throw new RangeError(
              'The region specified by view does not match byobRequest'
            );
          }
          if (q.bufferByteLength !== C.buffer.byteLength) {
            throw new RangeError(
              'The buffer of view has different capacity than byobRequest'
            );
          }
          if (q.bytesFilled + C.byteLength > q.byteLength) {
            throw new RangeError(
              'The region specified by view is larger than byobRequest'
            );
          }
          const ae = C.byteLength;
          q.buffer = TransferArrayBuffer(C.buffer);
          ReadableByteStreamControllerRespondInternal(a, ae);
        }
        function SetUpReadableByteStreamController(a, C, q, re, ae, Ue, lt) {
          C._controlledReadableByteStream = a;
          C._pullAgain = false;
          C._pulling = false;
          C._byobRequest = null;
          C._queue = C._queueTotalSize = undefined;
          ResetQueue(C);
          C._closeRequested = false;
          C._started = false;
          C._strategyHWM = Ue;
          C._pullAlgorithm = re;
          C._cancelAlgorithm = ae;
          C._autoAllocateChunkSize = lt;
          C._pendingPullIntos = new SimpleQueue();
          a._readableStreamController = C;
          const Pt = q();
          uponPromise(
            promiseResolvedWith(Pt),
            () => {
              C._started = true;
              ReadableByteStreamControllerCallPullIfNeeded(C);
              return null;
            },
            (a) => {
              ReadableByteStreamControllerError(C, a);
              return null;
            }
          );
        }
        function SetUpReadableByteStreamControllerFromUnderlyingSource(
          a,
          C,
          q
        ) {
          const re = Object.create(ReadableByteStreamController.prototype);
          let ae;
          let Ue;
          let lt;
          if (C.start !== undefined) {
            ae = () => C.start(re);
          } else {
            ae = () => undefined;
          }
          if (C.pull !== undefined) {
            Ue = () => C.pull(re);
          } else {
            Ue = () => promiseResolvedWith(undefined);
          }
          if (C.cancel !== undefined) {
            lt = (a) => C.cancel(a);
          } else {
            lt = () => promiseResolvedWith(undefined);
          }
          const Pt = C.autoAllocateChunkSize;
          if (Pt === 0) {
            throw new TypeError('autoAllocateChunkSize must be greater than 0');
          }
          SetUpReadableByteStreamController(a, re, ae, Ue, lt, q, Pt);
        }
        function SetUpReadableStreamBYOBRequest(a, C, q) {
          a._associatedReadableByteStreamController = C;
          a._view = q;
        }
        function byobRequestBrandCheckException(a) {
          return new TypeError(
            `ReadableStreamBYOBRequest.prototype.${a} can only be used on a ReadableStreamBYOBRequest`
          );
        }
        function byteStreamControllerBrandCheckException(a) {
          return new TypeError(
            `ReadableByteStreamController.prototype.${a} can only be used on a ReadableByteStreamController`
          );
        }
        function convertReaderOptions(a, C) {
          assertDictionary(a, C);
          const q = a === null || a === void 0 ? void 0 : a.mode;
          return {
            mode:
              q === undefined
                ? undefined
                : convertReadableStreamReaderMode(
                    q,
                    `${C} has member 'mode' that`
                  )
          };
        }
        function convertReadableStreamReaderMode(a, C) {
          a = `${a}`;
          if (a !== 'byob') {
            throw new TypeError(
              `${C} '${a}' is not a valid enumeration value for ReadableStreamReaderMode`
            );
          }
          return a;
        }
        function convertByobReadOptions(a, C) {
          var q;
          assertDictionary(a, C);
          const re =
            (q = a === null || a === void 0 ? void 0 : a.min) !== null &&
            q !== void 0
              ? q
              : 1;
          return {
            min: convertUnsignedLongLongWithEnforceRange(
              re,
              `${C} has member 'min' that`
            )
          };
        }
        function AcquireReadableStreamBYOBReader(a) {
          return new ReadableStreamBYOBReader(a);
        }
        function ReadableStreamAddReadIntoRequest(a, C) {
          a._reader._readIntoRequests.push(C);
        }
        function ReadableStreamFulfillReadIntoRequest(a, C, q) {
          const re = a._reader;
          const ae = re._readIntoRequests.shift();
          if (q) {
            ae._closeSteps(C);
          } else {
            ae._chunkSteps(C);
          }
        }
        function ReadableStreamGetNumReadIntoRequests(a) {
          return a._reader._readIntoRequests.length;
        }
        function ReadableStreamHasBYOBReader(a) {
          const C = a._reader;
          if (C === undefined) {
            return false;
          }
          if (!IsReadableStreamBYOBReader(C)) {
            return false;
          }
          return true;
        }
        class ReadableStreamBYOBReader {
          constructor(a) {
            assertRequiredArgument(a, 1, 'ReadableStreamBYOBReader');
            assertReadableStream(a, 'First parameter');
            if (IsReadableStreamLocked(a)) {
              throw new TypeError(
                'This stream has already been locked for exclusive reading by another reader'
              );
            }
            if (!IsReadableByteStreamController(a._readableStreamController)) {
              throw new TypeError(
                'Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +
                  'source'
              );
            }
            ReadableStreamReaderGenericInitialize(this, a);
            this._readIntoRequests = new SimpleQueue();
          }
          get closed() {
            if (!IsReadableStreamBYOBReader(this)) {
              return promiseRejectedWith(
                byobReaderBrandCheckException('closed')
              );
            }
            return this._closedPromise;
          }
          cancel(a = undefined) {
            if (!IsReadableStreamBYOBReader(this)) {
              return promiseRejectedWith(
                byobReaderBrandCheckException('cancel')
              );
            }
            if (this._ownerReadableStream === undefined) {
              return promiseRejectedWith(readerLockException('cancel'));
            }
            return ReadableStreamReaderGenericCancel(this, a);
          }
          read(a, C = {}) {
            if (!IsReadableStreamBYOBReader(this)) {
              return promiseRejectedWith(byobReaderBrandCheckException('read'));
            }
            if (!ArrayBuffer.isView(a)) {
              return promiseRejectedWith(
                new TypeError('view must be an array buffer view')
              );
            }
            if (a.byteLength === 0) {
              return promiseRejectedWith(
                new TypeError('view must have non-zero byteLength')
              );
            }
            if (a.buffer.byteLength === 0) {
              return promiseRejectedWith(
                new TypeError(`view's buffer must have non-zero byteLength`)
              );
            }
            if (IsDetachedBuffer(a.buffer)) {
              return promiseRejectedWith(
                new TypeError("view's buffer has been detached")
              );
            }
            let q;
            try {
              q = convertByobReadOptions(C, 'options');
            } catch (a) {
              return promiseRejectedWith(a);
            }
            const re = q.min;
            if (re === 0) {
              return promiseRejectedWith(
                new TypeError('options.min must be greater than 0')
              );
            }
            if (!isDataView(a)) {
              if (re > a.length) {
                return promiseRejectedWith(
                  new RangeError(
                    "options.min must be less than or equal to view's length"
                  )
                );
              }
            } else if (re > a.byteLength) {
              return promiseRejectedWith(
                new RangeError(
                  "options.min must be less than or equal to view's byteLength"
                )
              );
            }
            if (this._ownerReadableStream === undefined) {
              return promiseRejectedWith(readerLockException('read from'));
            }
            let ae;
            let Ue;
            const lt = newPromise((a, C) => {
              ae = a;
              Ue = C;
            });
            const Pt = {
              _chunkSteps: (a) => ae({ value: a, done: false }),
              _closeSteps: (a) => ae({ value: a, done: true }),
              _errorSteps: (a) => Ue(a)
            };
            ReadableStreamBYOBReaderRead(this, a, re, Pt);
            return lt;
          }
          releaseLock() {
            if (!IsReadableStreamBYOBReader(this)) {
              throw byobReaderBrandCheckException('releaseLock');
            }
            if (this._ownerReadableStream === undefined) {
              return;
            }
            ReadableStreamBYOBReaderRelease(this);
          }
        }
        Object.defineProperties(ReadableStreamBYOBReader.prototype, {
          cancel: { enumerable: true },
          read: { enumerable: true },
          releaseLock: { enumerable: true },
          closed: { enumerable: true }
        });
        setFunctionName(ReadableStreamBYOBReader.prototype.cancel, 'cancel');
        setFunctionName(ReadableStreamBYOBReader.prototype.read, 'read');
        setFunctionName(
          ReadableStreamBYOBReader.prototype.releaseLock,
          'releaseLock'
        );
        if (typeof Symbol.toStringTag === 'symbol') {
          Object.defineProperty(
            ReadableStreamBYOBReader.prototype,
            Symbol.toStringTag,
            { value: 'ReadableStreamBYOBReader', configurable: true }
          );
        }
        function IsReadableStreamBYOBReader(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (!Object.prototype.hasOwnProperty.call(a, '_readIntoRequests')) {
            return false;
          }
          return a instanceof ReadableStreamBYOBReader;
        }
        function ReadableStreamBYOBReaderRead(a, C, q, re) {
          const ae = a._ownerReadableStream;
          ae._disturbed = true;
          if (ae._state === 'errored') {
            re._errorSteps(ae._storedError);
          } else {
            ReadableByteStreamControllerPullInto(
              ae._readableStreamController,
              C,
              q,
              re
            );
          }
        }
        function ReadableStreamBYOBReaderRelease(a) {
          ReadableStreamReaderGenericRelease(a);
          const C = new TypeError('Reader was released');
          ReadableStreamBYOBReaderErrorReadIntoRequests(a, C);
        }
        function ReadableStreamBYOBReaderErrorReadIntoRequests(a, C) {
          const q = a._readIntoRequests;
          a._readIntoRequests = new SimpleQueue();
          q.forEach((a) => {
            a._errorSteps(C);
          });
        }
        function byobReaderBrandCheckException(a) {
          return new TypeError(
            `ReadableStreamBYOBReader.prototype.${a} can only be used on a ReadableStreamBYOBReader`
          );
        }
        function ExtractHighWaterMark(a, C) {
          const { highWaterMark: q } = a;
          if (q === undefined) {
            return C;
          }
          if (Dr(q) || q < 0) {
            throw new RangeError('Invalid highWaterMark');
          }
          return q;
        }
        function ExtractSizeAlgorithm(a) {
          const { size: C } = a;
          if (!C) {
            return () => 1;
          }
          return C;
        }
        function convertQueuingStrategy(a, C) {
          assertDictionary(a, C);
          const q = a === null || a === void 0 ? void 0 : a.highWaterMark;
          const re = a === null || a === void 0 ? void 0 : a.size;
          return {
            highWaterMark:
              q === undefined ? undefined : convertUnrestrictedDouble(q),
            size:
              re === undefined
                ? undefined
                : convertQueuingStrategySize(re, `${C} has member 'size' that`)
          };
        }
        function convertQueuingStrategySize(a, C) {
          assertFunction(a, C);
          return (C) => convertUnrestrictedDouble(a(C));
        }
        function convertUnderlyingSink(a, C) {
          assertDictionary(a, C);
          const q = a === null || a === void 0 ? void 0 : a.abort;
          const re = a === null || a === void 0 ? void 0 : a.close;
          const ae = a === null || a === void 0 ? void 0 : a.start;
          const Ue = a === null || a === void 0 ? void 0 : a.type;
          const lt = a === null || a === void 0 ? void 0 : a.write;
          return {
            abort:
              q === undefined
                ? undefined
                : convertUnderlyingSinkAbortCallback(
                    q,
                    a,
                    `${C} has member 'abort' that`
                  ),
            close:
              re === undefined
                ? undefined
                : convertUnderlyingSinkCloseCallback(
                    re,
                    a,
                    `${C} has member 'close' that`
                  ),
            start:
              ae === undefined
                ? undefined
                : convertUnderlyingSinkStartCallback(
                    ae,
                    a,
                    `${C} has member 'start' that`
                  ),
            write:
              lt === undefined
                ? undefined
                : convertUnderlyingSinkWriteCallback(
                    lt,
                    a,
                    `${C} has member 'write' that`
                  ),
            type: Ue
          };
        }
        function convertUnderlyingSinkAbortCallback(a, C, q) {
          assertFunction(a, q);
          return (q) => promiseCall(a, C, [q]);
        }
        function convertUnderlyingSinkCloseCallback(a, C, q) {
          assertFunction(a, q);
          return () => promiseCall(a, C, []);
        }
        function convertUnderlyingSinkStartCallback(a, C, q) {
          assertFunction(a, q);
          return (q) => reflectCall(a, C, [q]);
        }
        function convertUnderlyingSinkWriteCallback(a, C, q) {
          assertFunction(a, q);
          return (q, re) => promiseCall(a, C, [q, re]);
        }
        function assertWritableStream(a, C) {
          if (!IsWritableStream(a)) {
            throw new TypeError(`${C} is not a WritableStream.`);
          }
        }
        function isAbortSignal(a) {
          if (typeof a !== 'object' || a === null) {
            return false;
          }
          try {
            return typeof a.aborted === 'boolean';
          } catch (a) {
            return false;
          }
        }
        const Pr = typeof AbortController === 'function';
        function createAbortController() {
          if (Pr) {
            return new AbortController();
          }
          return undefined;
        }
        class WritableStream {
          constructor(a = {}, C = {}) {
            if (a === undefined) {
              a = null;
            } else {
              assertObject(a, 'First parameter');
            }
            const q = convertQueuingStrategy(C, 'Second parameter');
            const re = convertUnderlyingSink(a, 'First parameter');
            InitializeWritableStream(this);
            const ae = re.type;
            if (ae !== undefined) {
              throw new RangeError('Invalid type is specified');
            }
            const Ue = ExtractSizeAlgorithm(q);
            const lt = ExtractHighWaterMark(q, 1);
            SetUpWritableStreamDefaultControllerFromUnderlyingSink(
              this,
              re,
              lt,
              Ue
            );
          }
          get locked() {
            if (!IsWritableStream(this)) {
              throw streamBrandCheckException$2('locked');
            }
            return IsWritableStreamLocked(this);
          }
          abort(a = undefined) {
            if (!IsWritableStream(this)) {
              return promiseRejectedWith(streamBrandCheckException$2('abort'));
            }
            if (IsWritableStreamLocked(this)) {
              return promiseRejectedWith(
                new TypeError('Cannot abort a stream that already has a writer')
              );
            }
            return WritableStreamAbort(this, a);
          }
          close() {
            if (!IsWritableStream(this)) {
              return promiseRejectedWith(streamBrandCheckException$2('close'));
            }
            if (IsWritableStreamLocked(this)) {
              return promiseRejectedWith(
                new TypeError('Cannot close a stream that already has a writer')
              );
            }
            if (WritableStreamCloseQueuedOrInFlight(this)) {
              return promiseRejectedWith(
                new TypeError('Cannot close an already-closing stream')
              );
            }
            return WritableStreamClose(this);
          }
          getWriter() {
            if (!IsWritableStream(this)) {
              throw streamBrandCheckException$2('getWriter');
            }
            return AcquireWritableStreamDefaultWriter(this);
          }
        }
        Object.defineProperties(WritableStream.prototype, {
          abort: { enumerable: true },
          close: { enumerable: true },
          getWriter: { enumerable: true },
          locked: { enumerable: true }
        });
        setFunctionName(WritableStream.prototype.abort, 'abort');
        setFunctionName(WritableStream.prototype.close, 'close');
        setFunctionName(WritableStream.prototype.getWriter, 'getWriter');
        if (typeof Symbol.toStringTag === 'symbol') {
          Object.defineProperty(WritableStream.prototype, Symbol.toStringTag, {
            value: 'WritableStream',
            configurable: true
          });
        }
        function AcquireWritableStreamDefaultWriter(a) {
          return new WritableStreamDefaultWriter(a);
        }
        function CreateWritableStream(a, C, q, re, ae = 1, Ue = () => 1) {
          const lt = Object.create(WritableStream.prototype);
          InitializeWritableStream(lt);
          const Pt = Object.create(WritableStreamDefaultController.prototype);
          SetUpWritableStreamDefaultController(lt, Pt, a, C, q, re, ae, Ue);
          return lt;
        }
        function InitializeWritableStream(a) {
          a._state = 'writable';
          a._storedError = undefined;
          a._writer = undefined;
          a._writableStreamController = undefined;
          a._writeRequests = new SimpleQueue();
          a._inFlightWriteRequest = undefined;
          a._closeRequest = undefined;
          a._inFlightCloseRequest = undefined;
          a._pendingAbortRequest = undefined;
          a._backpressure = false;
        }
        function IsWritableStream(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (
            !Object.prototype.hasOwnProperty.call(
              a,
              '_writableStreamController'
            )
          ) {
            return false;
          }
          return a instanceof WritableStream;
        }
        function IsWritableStreamLocked(a) {
          if (a._writer === undefined) {
            return false;
          }
          return true;
        }
        function WritableStreamAbort(a, C) {
          var q;
          if (a._state === 'closed' || a._state === 'errored') {
            return promiseResolvedWith(undefined);
          }
          a._writableStreamController._abortReason = C;
          (q = a._writableStreamController._abortController) === null ||
          q === void 0
            ? void 0
            : q.abort(C);
          const re = a._state;
          if (re === 'closed' || re === 'errored') {
            return promiseResolvedWith(undefined);
          }
          if (a._pendingAbortRequest !== undefined) {
            return a._pendingAbortRequest._promise;
          }
          let ae = false;
          if (re === 'erroring') {
            ae = true;
            C = undefined;
          }
          const Ue = newPromise((q, re) => {
            a._pendingAbortRequest = {
              _promise: undefined,
              _resolve: q,
              _reject: re,
              _reason: C,
              _wasAlreadyErroring: ae
            };
          });
          a._pendingAbortRequest._promise = Ue;
          if (!ae) {
            WritableStreamStartErroring(a, C);
          }
          return Ue;
        }
        function WritableStreamClose(a) {
          const C = a._state;
          if (C === 'closed' || C === 'errored') {
            return promiseRejectedWith(
              new TypeError(
                `The stream (in ${C} state) is not in the writable state and cannot be closed`
              )
            );
          }
          const q = newPromise((C, q) => {
            const re = { _resolve: C, _reject: q };
            a._closeRequest = re;
          });
          const re = a._writer;
          if (re !== undefined && a._backpressure && C === 'writable') {
            defaultWriterReadyPromiseResolve(re);
          }
          WritableStreamDefaultControllerClose(a._writableStreamController);
          return q;
        }
        function WritableStreamAddWriteRequest(a) {
          const C = newPromise((C, q) => {
            const re = { _resolve: C, _reject: q };
            a._writeRequests.push(re);
          });
          return C;
        }
        function WritableStreamDealWithRejection(a, C) {
          const q = a._state;
          if (q === 'writable') {
            WritableStreamStartErroring(a, C);
            return;
          }
          WritableStreamFinishErroring(a);
        }
        function WritableStreamStartErroring(a, C) {
          const q = a._writableStreamController;
          a._state = 'erroring';
          a._storedError = C;
          const re = a._writer;
          if (re !== undefined) {
            WritableStreamDefaultWriterEnsureReadyPromiseRejected(re, C);
          }
          if (!WritableStreamHasOperationMarkedInFlight(a) && q._started) {
            WritableStreamFinishErroring(a);
          }
        }
        function WritableStreamFinishErroring(a) {
          a._state = 'errored';
          a._writableStreamController[Pt]();
          const C = a._storedError;
          a._writeRequests.forEach((a) => {
            a._reject(C);
          });
          a._writeRequests = new SimpleQueue();
          if (a._pendingAbortRequest === undefined) {
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(a);
            return;
          }
          const q = a._pendingAbortRequest;
          a._pendingAbortRequest = undefined;
          if (q._wasAlreadyErroring) {
            q._reject(C);
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(a);
            return;
          }
          const re = a._writableStreamController[lt](q._reason);
          uponPromise(
            re,
            () => {
              q._resolve();
              WritableStreamRejectCloseAndClosedPromiseIfNeeded(a);
              return null;
            },
            (C) => {
              q._reject(C);
              WritableStreamRejectCloseAndClosedPromiseIfNeeded(a);
              return null;
            }
          );
        }
        function WritableStreamFinishInFlightWrite(a) {
          a._inFlightWriteRequest._resolve(undefined);
          a._inFlightWriteRequest = undefined;
        }
        function WritableStreamFinishInFlightWriteWithError(a, C) {
          a._inFlightWriteRequest._reject(C);
          a._inFlightWriteRequest = undefined;
          WritableStreamDealWithRejection(a, C);
        }
        function WritableStreamFinishInFlightClose(a) {
          a._inFlightCloseRequest._resolve(undefined);
          a._inFlightCloseRequest = undefined;
          const C = a._state;
          if (C === 'erroring') {
            a._storedError = undefined;
            if (a._pendingAbortRequest !== undefined) {
              a._pendingAbortRequest._resolve();
              a._pendingAbortRequest = undefined;
            }
          }
          a._state = 'closed';
          const q = a._writer;
          if (q !== undefined) {
            defaultWriterClosedPromiseResolve(q);
          }
        }
        function WritableStreamFinishInFlightCloseWithError(a, C) {
          a._inFlightCloseRequest._reject(C);
          a._inFlightCloseRequest = undefined;
          if (a._pendingAbortRequest !== undefined) {
            a._pendingAbortRequest._reject(C);
            a._pendingAbortRequest = undefined;
          }
          WritableStreamDealWithRejection(a, C);
        }
        function WritableStreamCloseQueuedOrInFlight(a) {
          if (
            a._closeRequest === undefined &&
            a._inFlightCloseRequest === undefined
          ) {
            return false;
          }
          return true;
        }
        function WritableStreamHasOperationMarkedInFlight(a) {
          if (
            a._inFlightWriteRequest === undefined &&
            a._inFlightCloseRequest === undefined
          ) {
            return false;
          }
          return true;
        }
        function WritableStreamMarkCloseRequestInFlight(a) {
          a._inFlightCloseRequest = a._closeRequest;
          a._closeRequest = undefined;
        }
        function WritableStreamMarkFirstWriteRequestInFlight(a) {
          a._inFlightWriteRequest = a._writeRequests.shift();
        }
        function WritableStreamRejectCloseAndClosedPromiseIfNeeded(a) {
          if (a._closeRequest !== undefined) {
            a._closeRequest._reject(a._storedError);
            a._closeRequest = undefined;
          }
          const C = a._writer;
          if (C !== undefined) {
            defaultWriterClosedPromiseReject(C, a._storedError);
          }
        }
        function WritableStreamUpdateBackpressure(a, C) {
          const q = a._writer;
          if (q !== undefined && C !== a._backpressure) {
            if (C) {
              defaultWriterReadyPromiseReset(q);
            } else {
              defaultWriterReadyPromiseResolve(q);
            }
          }
          a._backpressure = C;
        }
        class WritableStreamDefaultWriter {
          constructor(a) {
            assertRequiredArgument(a, 1, 'WritableStreamDefaultWriter');
            assertWritableStream(a, 'First parameter');
            if (IsWritableStreamLocked(a)) {
              throw new TypeError(
                'This stream has already been locked for exclusive writing by another writer'
              );
            }
            this._ownerWritableStream = a;
            a._writer = this;
            const C = a._state;
            if (C === 'writable') {
              if (!WritableStreamCloseQueuedOrInFlight(a) && a._backpressure) {
                defaultWriterReadyPromiseInitialize(this);
              } else {
                defaultWriterReadyPromiseInitializeAsResolved(this);
              }
              defaultWriterClosedPromiseInitialize(this);
            } else if (C === 'erroring') {
              defaultWriterReadyPromiseInitializeAsRejected(
                this,
                a._storedError
              );
              defaultWriterClosedPromiseInitialize(this);
            } else if (C === 'closed') {
              defaultWriterReadyPromiseInitializeAsResolved(this);
              defaultWriterClosedPromiseInitializeAsResolved(this);
            } else {
              const C = a._storedError;
              defaultWriterReadyPromiseInitializeAsRejected(this, C);
              defaultWriterClosedPromiseInitializeAsRejected(this, C);
            }
          }
          get closed() {
            if (!IsWritableStreamDefaultWriter(this)) {
              return promiseRejectedWith(
                defaultWriterBrandCheckException('closed')
              );
            }
            return this._closedPromise;
          }
          get desiredSize() {
            if (!IsWritableStreamDefaultWriter(this)) {
              throw defaultWriterBrandCheckException('desiredSize');
            }
            if (this._ownerWritableStream === undefined) {
              throw defaultWriterLockException('desiredSize');
            }
            return WritableStreamDefaultWriterGetDesiredSize(this);
          }
          get ready() {
            if (!IsWritableStreamDefaultWriter(this)) {
              return promiseRejectedWith(
                defaultWriterBrandCheckException('ready')
              );
            }
            return this._readyPromise;
          }
          abort(a = undefined) {
            if (!IsWritableStreamDefaultWriter(this)) {
              return promiseRejectedWith(
                defaultWriterBrandCheckException('abort')
              );
            }
            if (this._ownerWritableStream === undefined) {
              return promiseRejectedWith(defaultWriterLockException('abort'));
            }
            return WritableStreamDefaultWriterAbort(this, a);
          }
          close() {
            if (!IsWritableStreamDefaultWriter(this)) {
              return promiseRejectedWith(
                defaultWriterBrandCheckException('close')
              );
            }
            const a = this._ownerWritableStream;
            if (a === undefined) {
              return promiseRejectedWith(defaultWriterLockException('close'));
            }
            if (WritableStreamCloseQueuedOrInFlight(a)) {
              return promiseRejectedWith(
                new TypeError('Cannot close an already-closing stream')
              );
            }
            return WritableStreamDefaultWriterClose(this);
          }
          releaseLock() {
            if (!IsWritableStreamDefaultWriter(this)) {
              throw defaultWriterBrandCheckException('releaseLock');
            }
            const a = this._ownerWritableStream;
            if (a === undefined) {
              return;
            }
            WritableStreamDefaultWriterRelease(this);
          }
          write(a = undefined) {
            if (!IsWritableStreamDefaultWriter(this)) {
              return promiseRejectedWith(
                defaultWriterBrandCheckException('write')
              );
            }
            if (this._ownerWritableStream === undefined) {
              return promiseRejectedWith(
                defaultWriterLockException('write to')
              );
            }
            return WritableStreamDefaultWriterWrite(this, a);
          }
        }
        Object.defineProperties(WritableStreamDefaultWriter.prototype, {
          abort: { enumerable: true },
          close: { enumerable: true },
          releaseLock: { enumerable: true },
          write: { enumerable: true },
          closed: { enumerable: true },
          desiredSize: { enumerable: true },
          ready: { enumerable: true }
        });
        setFunctionName(WritableStreamDefaultWriter.prototype.abort, 'abort');
        setFunctionName(WritableStreamDefaultWriter.prototype.close, 'close');
        setFunctionName(
          WritableStreamDefaultWriter.prototype.releaseLock,
          'releaseLock'
        );
        setFunctionName(WritableStreamDefaultWriter.prototype.write, 'write');
        if (typeof Symbol.toStringTag === 'symbol') {
          Object.defineProperty(
            WritableStreamDefaultWriter.prototype,
            Symbol.toStringTag,
            { value: 'WritableStreamDefaultWriter', configurable: true }
          );
        }
        function IsWritableStreamDefaultWriter(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (
            !Object.prototype.hasOwnProperty.call(a, '_ownerWritableStream')
          ) {
            return false;
          }
          return a instanceof WritableStreamDefaultWriter;
        }
        function WritableStreamDefaultWriterAbort(a, C) {
          const q = a._ownerWritableStream;
          return WritableStreamAbort(q, C);
        }
        function WritableStreamDefaultWriterClose(a) {
          const C = a._ownerWritableStream;
          return WritableStreamClose(C);
        }
        function WritableStreamDefaultWriterCloseWithErrorPropagation(a) {
          const C = a._ownerWritableStream;
          const q = C._state;
          if (WritableStreamCloseQueuedOrInFlight(C) || q === 'closed') {
            return promiseResolvedWith(undefined);
          }
          if (q === 'errored') {
            return promiseRejectedWith(C._storedError);
          }
          return WritableStreamDefaultWriterClose(a);
        }
        function WritableStreamDefaultWriterEnsureClosedPromiseRejected(a, C) {
          if (a._closedPromiseState === 'pending') {
            defaultWriterClosedPromiseReject(a, C);
          } else {
            defaultWriterClosedPromiseResetToRejected(a, C);
          }
        }
        function WritableStreamDefaultWriterEnsureReadyPromiseRejected(a, C) {
          if (a._readyPromiseState === 'pending') {
            defaultWriterReadyPromiseReject(a, C);
          } else {
            defaultWriterReadyPromiseResetToRejected(a, C);
          }
        }
        function WritableStreamDefaultWriterGetDesiredSize(a) {
          const C = a._ownerWritableStream;
          const q = C._state;
          if (q === 'errored' || q === 'erroring') {
            return null;
          }
          if (q === 'closed') {
            return 0;
          }
          return WritableStreamDefaultControllerGetDesiredSize(
            C._writableStreamController
          );
        }
        function WritableStreamDefaultWriterRelease(a) {
          const C = a._ownerWritableStream;
          const q = new TypeError(
            `Writer was released and can no longer be used to monitor the stream's closedness`
          );
          WritableStreamDefaultWriterEnsureReadyPromiseRejected(a, q);
          WritableStreamDefaultWriterEnsureClosedPromiseRejected(a, q);
          C._writer = undefined;
          a._ownerWritableStream = undefined;
        }
        function WritableStreamDefaultWriterWrite(a, C) {
          const q = a._ownerWritableStream;
          const re = q._writableStreamController;
          const ae = WritableStreamDefaultControllerGetChunkSize(re, C);
          if (q !== a._ownerWritableStream) {
            return promiseRejectedWith(defaultWriterLockException('write to'));
          }
          const Ue = q._state;
          if (Ue === 'errored') {
            return promiseRejectedWith(q._storedError);
          }
          if (WritableStreamCloseQueuedOrInFlight(q) || Ue === 'closed') {
            return promiseRejectedWith(
              new TypeError(
                'The stream is closing or closed and cannot be written to'
              )
            );
          }
          if (Ue === 'erroring') {
            return promiseRejectedWith(q._storedError);
          }
          const lt = WritableStreamAddWriteRequest(q);
          WritableStreamDefaultControllerWrite(re, C, ae);
          return lt;
        }
        const Or = {};
        class WritableStreamDefaultController {
          constructor() {
            throw new TypeError('Illegal constructor');
          }
          get abortReason() {
            if (!IsWritableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$2('abortReason');
            }
            return this._abortReason;
          }
          get signal() {
            if (!IsWritableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$2('signal');
            }
            if (this._abortController === undefined) {
              throw new TypeError(
                'WritableStreamDefaultController.prototype.signal is not supported'
              );
            }
            return this._abortController.signal;
          }
          error(a = undefined) {
            if (!IsWritableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$2('error');
            }
            const C = this._controlledWritableStream._state;
            if (C !== 'writable') {
              return;
            }
            WritableStreamDefaultControllerError(this, a);
          }
          [lt](a) {
            const C = this._abortAlgorithm(a);
            WritableStreamDefaultControllerClearAlgorithms(this);
            return C;
          }
          [Pt]() {
            ResetQueue(this);
          }
        }
        Object.defineProperties(WritableStreamDefaultController.prototype, {
          abortReason: { enumerable: true },
          signal: { enumerable: true },
          error: { enumerable: true }
        });
        if (typeof Symbol.toStringTag === 'symbol') {
          Object.defineProperty(
            WritableStreamDefaultController.prototype,
            Symbol.toStringTag,
            { value: 'WritableStreamDefaultController', configurable: true }
          );
        }
        function IsWritableStreamDefaultController(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (
            !Object.prototype.hasOwnProperty.call(
              a,
              '_controlledWritableStream'
            )
          ) {
            return false;
          }
          return a instanceof WritableStreamDefaultController;
        }
        function SetUpWritableStreamDefaultController(
          a,
          C,
          q,
          re,
          ae,
          Ue,
          lt,
          Pt
        ) {
          C._controlledWritableStream = a;
          a._writableStreamController = C;
          C._queue = undefined;
          C._queueTotalSize = undefined;
          ResetQueue(C);
          C._abortReason = undefined;
          C._abortController = createAbortController();
          C._started = false;
          C._strategySizeAlgorithm = Pt;
          C._strategyHWM = lt;
          C._writeAlgorithm = re;
          C._closeAlgorithm = ae;
          C._abortAlgorithm = Ue;
          const Wt = WritableStreamDefaultControllerGetBackpressure(C);
          WritableStreamUpdateBackpressure(a, Wt);
          const Ar = q();
          const Er = promiseResolvedWith(Ar);
          uponPromise(
            Er,
            () => {
              C._started = true;
              WritableStreamDefaultControllerAdvanceQueueIfNeeded(C);
              return null;
            },
            (q) => {
              C._started = true;
              WritableStreamDealWithRejection(a, q);
              return null;
            }
          );
        }
        function SetUpWritableStreamDefaultControllerFromUnderlyingSink(
          a,
          C,
          q,
          re
        ) {
          const ae = Object.create(WritableStreamDefaultController.prototype);
          let Ue;
          let lt;
          let Pt;
          let Wt;
          if (C.start !== undefined) {
            Ue = () => C.start(ae);
          } else {
            Ue = () => undefined;
          }
          if (C.write !== undefined) {
            lt = (a) => C.write(a, ae);
          } else {
            lt = () => promiseResolvedWith(undefined);
          }
          if (C.close !== undefined) {
            Pt = () => C.close();
          } else {
            Pt = () => promiseResolvedWith(undefined);
          }
          if (C.abort !== undefined) {
            Wt = (a) => C.abort(a);
          } else {
            Wt = () => promiseResolvedWith(undefined);
          }
          SetUpWritableStreamDefaultController(a, ae, Ue, lt, Pt, Wt, q, re);
        }
        function WritableStreamDefaultControllerClearAlgorithms(a) {
          a._writeAlgorithm = undefined;
          a._closeAlgorithm = undefined;
          a._abortAlgorithm = undefined;
          a._strategySizeAlgorithm = undefined;
        }
        function WritableStreamDefaultControllerClose(a) {
          EnqueueValueWithSize(a, Or, 0);
          WritableStreamDefaultControllerAdvanceQueueIfNeeded(a);
        }
        function WritableStreamDefaultControllerGetChunkSize(a, C) {
          try {
            return a._strategySizeAlgorithm(C);
          } catch (C) {
            WritableStreamDefaultControllerErrorIfNeeded(a, C);
            return 1;
          }
        }
        function WritableStreamDefaultControllerGetDesiredSize(a) {
          return a._strategyHWM - a._queueTotalSize;
        }
        function WritableStreamDefaultControllerWrite(a, C, q) {
          try {
            EnqueueValueWithSize(a, C, q);
          } catch (C) {
            WritableStreamDefaultControllerErrorIfNeeded(a, C);
            return;
          }
          const re = a._controlledWritableStream;
          if (
            !WritableStreamCloseQueuedOrInFlight(re) &&
            re._state === 'writable'
          ) {
            const C = WritableStreamDefaultControllerGetBackpressure(a);
            WritableStreamUpdateBackpressure(re, C);
          }
          WritableStreamDefaultControllerAdvanceQueueIfNeeded(a);
        }
        function WritableStreamDefaultControllerAdvanceQueueIfNeeded(a) {
          const C = a._controlledWritableStream;
          if (!a._started) {
            return;
          }
          if (C._inFlightWriteRequest !== undefined) {
            return;
          }
          const q = C._state;
          if (q === 'erroring') {
            WritableStreamFinishErroring(C);
            return;
          }
          if (a._queue.length === 0) {
            return;
          }
          const re = PeekQueueValue(a);
          if (re === Or) {
            WritableStreamDefaultControllerProcessClose(a);
          } else {
            WritableStreamDefaultControllerProcessWrite(a, re);
          }
        }
        function WritableStreamDefaultControllerErrorIfNeeded(a, C) {
          if (a._controlledWritableStream._state === 'writable') {
            WritableStreamDefaultControllerError(a, C);
          }
        }
        function WritableStreamDefaultControllerProcessClose(a) {
          const C = a._controlledWritableStream;
          WritableStreamMarkCloseRequestInFlight(C);
          DequeueValue(a);
          const q = a._closeAlgorithm();
          WritableStreamDefaultControllerClearAlgorithms(a);
          uponPromise(
            q,
            () => {
              WritableStreamFinishInFlightClose(C);
              return null;
            },
            (a) => {
              WritableStreamFinishInFlightCloseWithError(C, a);
              return null;
            }
          );
        }
        function WritableStreamDefaultControllerProcessWrite(a, C) {
          const q = a._controlledWritableStream;
          WritableStreamMarkFirstWriteRequestInFlight(q);
          const re = a._writeAlgorithm(C);
          uponPromise(
            re,
            () => {
              WritableStreamFinishInFlightWrite(q);
              const C = q._state;
              DequeueValue(a);
              if (!WritableStreamCloseQueuedOrInFlight(q) && C === 'writable') {
                const C = WritableStreamDefaultControllerGetBackpressure(a);
                WritableStreamUpdateBackpressure(q, C);
              }
              WritableStreamDefaultControllerAdvanceQueueIfNeeded(a);
              return null;
            },
            (C) => {
              if (q._state === 'writable') {
                WritableStreamDefaultControllerClearAlgorithms(a);
              }
              WritableStreamFinishInFlightWriteWithError(q, C);
              return null;
            }
          );
        }
        function WritableStreamDefaultControllerGetBackpressure(a) {
          const C = WritableStreamDefaultControllerGetDesiredSize(a);
          return C <= 0;
        }
        function WritableStreamDefaultControllerError(a, C) {
          const q = a._controlledWritableStream;
          WritableStreamDefaultControllerClearAlgorithms(a);
          WritableStreamStartErroring(q, C);
        }
        function streamBrandCheckException$2(a) {
          return new TypeError(
            `WritableStream.prototype.${a} can only be used on a WritableStream`
          );
        }
        function defaultControllerBrandCheckException$2(a) {
          return new TypeError(
            `WritableStreamDefaultController.prototype.${a} can only be used on a WritableStreamDefaultController`
          );
        }
        function defaultWriterBrandCheckException(a) {
          return new TypeError(
            `WritableStreamDefaultWriter.prototype.${a} can only be used on a WritableStreamDefaultWriter`
          );
        }
        function defaultWriterLockException(a) {
          return new TypeError(
            'Cannot ' + a + ' a stream using a released writer'
          );
        }
        function defaultWriterClosedPromiseInitialize(a) {
          a._closedPromise = newPromise((C, q) => {
            a._closedPromise_resolve = C;
            a._closedPromise_reject = q;
            a._closedPromiseState = 'pending';
          });
        }
        function defaultWriterClosedPromiseInitializeAsRejected(a, C) {
          defaultWriterClosedPromiseInitialize(a);
          defaultWriterClosedPromiseReject(a, C);
        }
        function defaultWriterClosedPromiseInitializeAsResolved(a) {
          defaultWriterClosedPromiseInitialize(a);
          defaultWriterClosedPromiseResolve(a);
        }
        function defaultWriterClosedPromiseReject(a, C) {
          if (a._closedPromise_reject === undefined) {
            return;
          }
          setPromiseIsHandledToTrue(a._closedPromise);
          a._closedPromise_reject(C);
          a._closedPromise_resolve = undefined;
          a._closedPromise_reject = undefined;
          a._closedPromiseState = 'rejected';
        }
        function defaultWriterClosedPromiseResetToRejected(a, C) {
          defaultWriterClosedPromiseInitializeAsRejected(a, C);
        }
        function defaultWriterClosedPromiseResolve(a) {
          if (a._closedPromise_resolve === undefined) {
            return;
          }
          a._closedPromise_resolve(undefined);
          a._closedPromise_resolve = undefined;
          a._closedPromise_reject = undefined;
          a._closedPromiseState = 'resolved';
        }
        function defaultWriterReadyPromiseInitialize(a) {
          a._readyPromise = newPromise((C, q) => {
            a._readyPromise_resolve = C;
            a._readyPromise_reject = q;
          });
          a._readyPromiseState = 'pending';
        }
        function defaultWriterReadyPromiseInitializeAsRejected(a, C) {
          defaultWriterReadyPromiseInitialize(a);
          defaultWriterReadyPromiseReject(a, C);
        }
        function defaultWriterReadyPromiseInitializeAsResolved(a) {
          defaultWriterReadyPromiseInitialize(a);
          defaultWriterReadyPromiseResolve(a);
        }
        function defaultWriterReadyPromiseReject(a, C) {
          if (a._readyPromise_reject === undefined) {
            return;
          }
          setPromiseIsHandledToTrue(a._readyPromise);
          a._readyPromise_reject(C);
          a._readyPromise_resolve = undefined;
          a._readyPromise_reject = undefined;
          a._readyPromiseState = 'rejected';
        }
        function defaultWriterReadyPromiseReset(a) {
          defaultWriterReadyPromiseInitialize(a);
        }
        function defaultWriterReadyPromiseResetToRejected(a, C) {
          defaultWriterReadyPromiseInitializeAsRejected(a, C);
        }
        function defaultWriterReadyPromiseResolve(a) {
          if (a._readyPromise_resolve === undefined) {
            return;
          }
          a._readyPromise_resolve(undefined);
          a._readyPromise_resolve = undefined;
          a._readyPromise_reject = undefined;
          a._readyPromiseState = 'fulfilled';
        }
        function getGlobals() {
          if (typeof globalThis !== 'undefined') {
            return globalThis;
          } else if (typeof self !== 'undefined') {
            return self;
          } else if (typeof global !== 'undefined') {
            return global;
          }
          return undefined;
        }
        const xr = getGlobals();
        function isDOMExceptionConstructor(a) {
          if (!(typeof a === 'function' || typeof a === 'object')) {
            return false;
          }
          if (a.name !== 'DOMException') {
            return false;
          }
          try {
            new a();
            return true;
          } catch (a) {
            return false;
          }
        }
        function getFromGlobal() {
          const a = xr === null || xr === void 0 ? void 0 : xr.DOMException;
          return isDOMExceptionConstructor(a) ? a : undefined;
        }
        function createPolyfill() {
          const a = function DOMException(a, C) {
            this.message = a || '';
            this.name = C || 'Error';
            if (Error.captureStackTrace) {
              Error.captureStackTrace(this, this.constructor);
            }
          };
          setFunctionName(a, 'DOMException');
          a.prototype = Object.create(Error.prototype);
          Object.defineProperty(a.prototype, 'constructor', {
            value: a,
            writable: true,
            configurable: true
          });
          return a;
        }
        const Ur = getFromGlobal() || createPolyfill();
        function ReadableStreamPipeTo(a, C, q, re, ae, Ue) {
          const lt = AcquireReadableStreamDefaultReader(a);
          const Pt = AcquireWritableStreamDefaultWriter(C);
          a._disturbed = true;
          let Wt = false;
          let Ar = promiseResolvedWith(undefined);
          return newPromise((Er, Ir) => {
            let Br;
            if (Ue !== undefined) {
              Br = () => {
                const q =
                  Ue.reason !== undefined
                    ? Ue.reason
                    : new Ur('Aborted', 'AbortError');
                const lt = [];
                if (!re) {
                  lt.push(() => {
                    if (C._state === 'writable') {
                      return WritableStreamAbort(C, q);
                    }
                    return promiseResolvedWith(undefined);
                  });
                }
                if (!ae) {
                  lt.push(() => {
                    if (a._state === 'readable') {
                      return ReadableStreamCancel(a, q);
                    }
                    return promiseResolvedWith(undefined);
                  });
                }
                shutdownWithAction(
                  () => Promise.all(lt.map((a) => a())),
                  true,
                  q
                );
              };
              if (Ue.aborted) {
                Br();
                return;
              }
              Ue.addEventListener('abort', Br);
            }
            function pipeLoop() {
              return newPromise((a, C) => {
                function next(q) {
                  if (q) {
                    a();
                  } else {
                    PerformPromiseThen(pipeStep(), next, C);
                  }
                }
                next(false);
              });
            }
            function pipeStep() {
              if (Wt) {
                return promiseResolvedWith(true);
              }
              return PerformPromiseThen(Pt._readyPromise, () =>
                newPromise((a, C) => {
                  ReadableStreamDefaultReaderRead(lt, {
                    _chunkSteps: (C) => {
                      Ar = PerformPromiseThen(
                        WritableStreamDefaultWriterWrite(Pt, C),
                        undefined,
                        noop
                      );
                      a(false);
                    },
                    _closeSteps: () => a(true),
                    _errorSteps: C
                  });
                })
              );
            }
            isOrBecomesErrored(a, lt._closedPromise, (a) => {
              if (!re) {
                shutdownWithAction(() => WritableStreamAbort(C, a), true, a);
              } else {
                shutdown(true, a);
              }
              return null;
            });
            isOrBecomesErrored(C, Pt._closedPromise, (C) => {
              if (!ae) {
                shutdownWithAction(() => ReadableStreamCancel(a, C), true, C);
              } else {
                shutdown(true, C);
              }
              return null;
            });
            isOrBecomesClosed(a, lt._closedPromise, () => {
              if (!q) {
                shutdownWithAction(() =>
                  WritableStreamDefaultWriterCloseWithErrorPropagation(Pt)
                );
              } else {
                shutdown();
              }
              return null;
            });
            if (
              WritableStreamCloseQueuedOrInFlight(C) ||
              C._state === 'closed'
            ) {
              const C = new TypeError(
                'the destination writable stream closed before all data could be piped to it'
              );
              if (!ae) {
                shutdownWithAction(() => ReadableStreamCancel(a, C), true, C);
              } else {
                shutdown(true, C);
              }
            }
            setPromiseIsHandledToTrue(pipeLoop());
            function waitForWritesToFinish() {
              const a = Ar;
              return PerformPromiseThen(Ar, () =>
                a !== Ar ? waitForWritesToFinish() : undefined
              );
            }
            function isOrBecomesErrored(a, C, q) {
              if (a._state === 'errored') {
                q(a._storedError);
              } else {
                uponRejection(C, q);
              }
            }
            function isOrBecomesClosed(a, C, q) {
              if (a._state === 'closed') {
                q();
              } else {
                uponFulfillment(C, q);
              }
            }
            function shutdownWithAction(a, q, re) {
              if (Wt) {
                return;
              }
              Wt = true;
              if (
                C._state === 'writable' &&
                !WritableStreamCloseQueuedOrInFlight(C)
              ) {
                uponFulfillment(waitForWritesToFinish(), doTheRest);
              } else {
                doTheRest();
              }
              function doTheRest() {
                uponPromise(
                  a(),
                  () => finalize(q, re),
                  (a) => finalize(true, a)
                );
                return null;
              }
            }
            function shutdown(a, q) {
              if (Wt) {
                return;
              }
              Wt = true;
              if (
                C._state === 'writable' &&
                !WritableStreamCloseQueuedOrInFlight(C)
              ) {
                uponFulfillment(waitForWritesToFinish(), () => finalize(a, q));
              } else {
                finalize(a, q);
              }
            }
            function finalize(a, C) {
              WritableStreamDefaultWriterRelease(Pt);
              ReadableStreamReaderGenericRelease(lt);
              if (Ue !== undefined) {
                Ue.removeEventListener('abort', Br);
              }
              if (a) {
                Ir(C);
              } else {
                Er(undefined);
              }
              return null;
            }
          });
        }
        class ReadableStreamDefaultController {
          constructor() {
            throw new TypeError('Illegal constructor');
          }
          get desiredSize() {
            if (!IsReadableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$1('desiredSize');
            }
            return ReadableStreamDefaultControllerGetDesiredSize(this);
          }
          close() {
            if (!IsReadableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$1('close');
            }
            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
              throw new TypeError(
                'The stream is not in a state that permits close'
              );
            }
            ReadableStreamDefaultControllerClose(this);
          }
          enqueue(a = undefined) {
            if (!IsReadableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$1('enqueue');
            }
            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
              throw new TypeError(
                'The stream is not in a state that permits enqueue'
              );
            }
            return ReadableStreamDefaultControllerEnqueue(this, a);
          }
          error(a = undefined) {
            if (!IsReadableStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException$1('error');
            }
            ReadableStreamDefaultControllerError(this, a);
          }
          [Wt](a) {
            ResetQueue(this);
            const C = this._cancelAlgorithm(a);
            ReadableStreamDefaultControllerClearAlgorithms(this);
            return C;
          }
          [Ar](a) {
            const C = this._controlledReadableStream;
            if (this._queue.length > 0) {
              const q = DequeueValue(this);
              if (this._closeRequested && this._queue.length === 0) {
                ReadableStreamDefaultControllerClearAlgorithms(this);
                ReadableStreamClose(C);
              } else {
                ReadableStreamDefaultControllerCallPullIfNeeded(this);
              }
              a._chunkSteps(q);
            } else {
              ReadableStreamAddReadRequest(C, a);
              ReadableStreamDefaultControllerCallPullIfNeeded(this);
            }
          }
          [Er]() {}
        }
        Object.defineProperties(ReadableStreamDefaultController.prototype, {
          close: { enumerable: true },
          enqueue: { enumerable: true },
          error: { enumerable: true },
          desiredSize: { enumerable: true }
        });
        setFunctionName(
          ReadableStreamDefaultController.prototype.close,
          'close'
        );
        setFunctionName(
          ReadableStreamDefaultController.prototype.enqueue,
          'enqueue'
        );
        setFunctionName(
          ReadableStreamDefaultController.prototype.error,
          'error'
        );
        if (typeof Symbol.toStringTag === 'symbol') {
          Object.defineProperty(
            ReadableStreamDefaultController.prototype,
            Symbol.toStringTag,
            { value: 'ReadableStreamDefaultController', configurable: true }
          );
        }
        function IsReadableStreamDefaultController(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (
            !Object.prototype.hasOwnProperty.call(
              a,
              '_controlledReadableStream'
            )
          ) {
            return false;
          }
          return a instanceof ReadableStreamDefaultController;
        }
        function ReadableStreamDefaultControllerCallPullIfNeeded(a) {
          const C = ReadableStreamDefaultControllerShouldCallPull(a);
          if (!C) {
            return;
          }
          if (a._pulling) {
            a._pullAgain = true;
            return;
          }
          a._pulling = true;
          const q = a._pullAlgorithm();
          uponPromise(
            q,
            () => {
              a._pulling = false;
              if (a._pullAgain) {
                a._pullAgain = false;
                ReadableStreamDefaultControllerCallPullIfNeeded(a);
              }
              return null;
            },
            (C) => {
              ReadableStreamDefaultControllerError(a, C);
              return null;
            }
          );
        }
        function ReadableStreamDefaultControllerShouldCallPull(a) {
          const C = a._controlledReadableStream;
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(a)) {
            return false;
          }
          if (!a._started) {
            return false;
          }
          if (
            IsReadableStreamLocked(C) &&
            ReadableStreamGetNumReadRequests(C) > 0
          ) {
            return true;
          }
          const q = ReadableStreamDefaultControllerGetDesiredSize(a);
          if (q > 0) {
            return true;
          }
          return false;
        }
        function ReadableStreamDefaultControllerClearAlgorithms(a) {
          a._pullAlgorithm = undefined;
          a._cancelAlgorithm = undefined;
          a._strategySizeAlgorithm = undefined;
        }
        function ReadableStreamDefaultControllerClose(a) {
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(a)) {
            return;
          }
          const C = a._controlledReadableStream;
          a._closeRequested = true;
          if (a._queue.length === 0) {
            ReadableStreamDefaultControllerClearAlgorithms(a);
            ReadableStreamClose(C);
          }
        }
        function ReadableStreamDefaultControllerEnqueue(a, C) {
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(a)) {
            return;
          }
          const q = a._controlledReadableStream;
          if (
            IsReadableStreamLocked(q) &&
            ReadableStreamGetNumReadRequests(q) > 0
          ) {
            ReadableStreamFulfillReadRequest(q, C, false);
          } else {
            let q;
            try {
              q = a._strategySizeAlgorithm(C);
            } catch (C) {
              ReadableStreamDefaultControllerError(a, C);
              throw C;
            }
            try {
              EnqueueValueWithSize(a, C, q);
            } catch (C) {
              ReadableStreamDefaultControllerError(a, C);
              throw C;
            }
          }
          ReadableStreamDefaultControllerCallPullIfNeeded(a);
        }
        function ReadableStreamDefaultControllerError(a, C) {
          const q = a._controlledReadableStream;
          if (q._state !== 'readable') {
            return;
          }
          ResetQueue(a);
          ReadableStreamDefaultControllerClearAlgorithms(a);
          ReadableStreamError(q, C);
        }
        function ReadableStreamDefaultControllerGetDesiredSize(a) {
          const C = a._controlledReadableStream._state;
          if (C === 'errored') {
            return null;
          }
          if (C === 'closed') {
            return 0;
          }
          return a._strategyHWM - a._queueTotalSize;
        }
        function ReadableStreamDefaultControllerHasBackpressure(a) {
          if (ReadableStreamDefaultControllerShouldCallPull(a)) {
            return false;
          }
          return true;
        }
        function ReadableStreamDefaultControllerCanCloseOrEnqueue(a) {
          const C = a._controlledReadableStream._state;
          if (!a._closeRequested && C === 'readable') {
            return true;
          }
          return false;
        }
        function SetUpReadableStreamDefaultController(a, C, q, re, ae, Ue, lt) {
          C._controlledReadableStream = a;
          C._queue = undefined;
          C._queueTotalSize = undefined;
          ResetQueue(C);
          C._started = false;
          C._closeRequested = false;
          C._pullAgain = false;
          C._pulling = false;
          C._strategySizeAlgorithm = lt;
          C._strategyHWM = Ue;
          C._pullAlgorithm = re;
          C._cancelAlgorithm = ae;
          a._readableStreamController = C;
          const Pt = q();
          uponPromise(
            promiseResolvedWith(Pt),
            () => {
              C._started = true;
              ReadableStreamDefaultControllerCallPullIfNeeded(C);
              return null;
            },
            (a) => {
              ReadableStreamDefaultControllerError(C, a);
              return null;
            }
          );
        }
        function SetUpReadableStreamDefaultControllerFromUnderlyingSource(
          a,
          C,
          q,
          re
        ) {
          const ae = Object.create(ReadableStreamDefaultController.prototype);
          let Ue;
          let lt;
          let Pt;
          if (C.start !== undefined) {
            Ue = () => C.start(ae);
          } else {
            Ue = () => undefined;
          }
          if (C.pull !== undefined) {
            lt = () => C.pull(ae);
          } else {
            lt = () => promiseResolvedWith(undefined);
          }
          if (C.cancel !== undefined) {
            Pt = (a) => C.cancel(a);
          } else {
            Pt = () => promiseResolvedWith(undefined);
          }
          SetUpReadableStreamDefaultController(a, ae, Ue, lt, Pt, q, re);
        }
        function defaultControllerBrandCheckException$1(a) {
          return new TypeError(
            `ReadableStreamDefaultController.prototype.${a} can only be used on a ReadableStreamDefaultController`
          );
        }
        function ReadableStreamTee(a, C) {
          if (IsReadableByteStreamController(a._readableStreamController)) {
            return ReadableByteStreamTee(a);
          }
          return ReadableStreamDefaultTee(a);
        }
        function ReadableStreamDefaultTee(a, C) {
          const q = AcquireReadableStreamDefaultReader(a);
          let re = false;
          let ae = false;
          let Ue = false;
          let lt = false;
          let Pt;
          let Wt;
          let Ar;
          let Er;
          let Ir;
          const Br = newPromise((a) => {
            Ir = a;
          });
          function pullAlgorithm() {
            if (re) {
              ae = true;
              return promiseResolvedWith(undefined);
            }
            re = true;
            const a = {
              _chunkSteps: (a) => {
                _queueMicrotask(() => {
                  ae = false;
                  const C = a;
                  const q = a;
                  if (!Ue) {
                    ReadableStreamDefaultControllerEnqueue(
                      Ar._readableStreamController,
                      C
                    );
                  }
                  if (!lt) {
                    ReadableStreamDefaultControllerEnqueue(
                      Er._readableStreamController,
                      q
                    );
                  }
                  re = false;
                  if (ae) {
                    pullAlgorithm();
                  }
                });
              },
              _closeSteps: () => {
                re = false;
                if (!Ue) {
                  ReadableStreamDefaultControllerClose(
                    Ar._readableStreamController
                  );
                }
                if (!lt) {
                  ReadableStreamDefaultControllerClose(
                    Er._readableStreamController
                  );
                }
                if (!Ue || !lt) {
                  Ir(undefined);
                }
              },
              _errorSteps: () => {
                re = false;
              }
            };
            ReadableStreamDefaultReaderRead(q, a);
            return promiseResolvedWith(undefined);
          }
          function cancel1Algorithm(C) {
            Ue = true;
            Pt = C;
            if (lt) {
              const C = CreateArrayFromList([Pt, Wt]);
              const q = ReadableStreamCancel(a, C);
              Ir(q);
            }
            return Br;
          }
          function cancel2Algorithm(C) {
            lt = true;
            Wt = C;
            if (Ue) {
              const C = CreateArrayFromList([Pt, Wt]);
              const q = ReadableStreamCancel(a, C);
              Ir(q);
            }
            return Br;
          }
          function startAlgorithm() {}
          Ar = CreateReadableStream(
            startAlgorithm,
            pullAlgorithm,
            cancel1Algorithm
          );
          Er = CreateReadableStream(
            startAlgorithm,
            pullAlgorithm,
            cancel2Algorithm
          );
          uponRejection(q._closedPromise, (a) => {
            ReadableStreamDefaultControllerError(
              Ar._readableStreamController,
              a
            );
            ReadableStreamDefaultControllerError(
              Er._readableStreamController,
              a
            );
            if (!Ue || !lt) {
              Ir(undefined);
            }
            return null;
          });
          return [Ar, Er];
        }
        function ReadableByteStreamTee(a) {
          let C = AcquireReadableStreamDefaultReader(a);
          let q = false;
          let re = false;
          let ae = false;
          let Ue = false;
          let lt = false;
          let Pt;
          let Wt;
          let Ar;
          let Er;
          let Ir;
          const Br = newPromise((a) => {
            Ir = a;
          });
          function forwardReaderError(a) {
            uponRejection(a._closedPromise, (q) => {
              if (a !== C) {
                return null;
              }
              ReadableByteStreamControllerError(
                Ar._readableStreamController,
                q
              );
              ReadableByteStreamControllerError(
                Er._readableStreamController,
                q
              );
              if (!Ue || !lt) {
                Ir(undefined);
              }
              return null;
            });
          }
          function pullWithDefaultReader() {
            if (IsReadableStreamBYOBReader(C)) {
              ReadableStreamReaderGenericRelease(C);
              C = AcquireReadableStreamDefaultReader(a);
              forwardReaderError(C);
            }
            const Pt = {
              _chunkSteps: (C) => {
                _queueMicrotask(() => {
                  re = false;
                  ae = false;
                  const Pt = C;
                  let Wt = C;
                  if (!Ue && !lt) {
                    try {
                      Wt = CloneAsUint8Array(C);
                    } catch (C) {
                      ReadableByteStreamControllerError(
                        Ar._readableStreamController,
                        C
                      );
                      ReadableByteStreamControllerError(
                        Er._readableStreamController,
                        C
                      );
                      Ir(ReadableStreamCancel(a, C));
                      return;
                    }
                  }
                  if (!Ue) {
                    ReadableByteStreamControllerEnqueue(
                      Ar._readableStreamController,
                      Pt
                    );
                  }
                  if (!lt) {
                    ReadableByteStreamControllerEnqueue(
                      Er._readableStreamController,
                      Wt
                    );
                  }
                  q = false;
                  if (re) {
                    pull1Algorithm();
                  } else if (ae) {
                    pull2Algorithm();
                  }
                });
              },
              _closeSteps: () => {
                q = false;
                if (!Ue) {
                  ReadableByteStreamControllerClose(
                    Ar._readableStreamController
                  );
                }
                if (!lt) {
                  ReadableByteStreamControllerClose(
                    Er._readableStreamController
                  );
                }
                if (Ar._readableStreamController._pendingPullIntos.length > 0) {
                  ReadableByteStreamControllerRespond(
                    Ar._readableStreamController,
                    0
                  );
                }
                if (Er._readableStreamController._pendingPullIntos.length > 0) {
                  ReadableByteStreamControllerRespond(
                    Er._readableStreamController,
                    0
                  );
                }
                if (!Ue || !lt) {
                  Ir(undefined);
                }
              },
              _errorSteps: () => {
                q = false;
              }
            };
            ReadableStreamDefaultReaderRead(C, Pt);
          }
          function pullWithBYOBReader(Pt, Wt) {
            if (IsReadableStreamDefaultReader(C)) {
              ReadableStreamReaderGenericRelease(C);
              C = AcquireReadableStreamBYOBReader(a);
              forwardReaderError(C);
            }
            const Br = Wt ? Er : Ar;
            const Qr = Wt ? Ar : Er;
            const kr = {
              _chunkSteps: (C) => {
                _queueMicrotask(() => {
                  re = false;
                  ae = false;
                  const Pt = Wt ? lt : Ue;
                  const Ar = Wt ? Ue : lt;
                  if (!Ar) {
                    let q;
                    try {
                      q = CloneAsUint8Array(C);
                    } catch (C) {
                      ReadableByteStreamControllerError(
                        Br._readableStreamController,
                        C
                      );
                      ReadableByteStreamControllerError(
                        Qr._readableStreamController,
                        C
                      );
                      Ir(ReadableStreamCancel(a, C));
                      return;
                    }
                    if (!Pt) {
                      ReadableByteStreamControllerRespondWithNewView(
                        Br._readableStreamController,
                        C
                      );
                    }
                    ReadableByteStreamControllerEnqueue(
                      Qr._readableStreamController,
                      q
                    );
                  } else if (!Pt) {
                    ReadableByteStreamControllerRespondWithNewView(
                      Br._readableStreamController,
                      C
                    );
                  }
                  q = false;
                  if (re) {
                    pull1Algorithm();
                  } else if (ae) {
                    pull2Algorithm();
                  }
                });
              },
              _closeSteps: (a) => {
                q = false;
                const C = Wt ? lt : Ue;
                const re = Wt ? Ue : lt;
                if (!C) {
                  ReadableByteStreamControllerClose(
                    Br._readableStreamController
                  );
                }
                if (!re) {
                  ReadableByteStreamControllerClose(
                    Qr._readableStreamController
                  );
                }
                if (a !== undefined) {
                  if (!C) {
                    ReadableByteStreamControllerRespondWithNewView(
                      Br._readableStreamController,
                      a
                    );
                  }
                  if (
                    !re &&
                    Qr._readableStreamController._pendingPullIntos.length > 0
                  ) {
                    ReadableByteStreamControllerRespond(
                      Qr._readableStreamController,
                      0
                    );
                  }
                }
                if (!C || !re) {
                  Ir(undefined);
                }
              },
              _errorSteps: () => {
                q = false;
              }
            };
            ReadableStreamBYOBReaderRead(C, Pt, 1, kr);
          }
          function pull1Algorithm() {
            if (q) {
              re = true;
              return promiseResolvedWith(undefined);
            }
            q = true;
            const a = ReadableByteStreamControllerGetBYOBRequest(
              Ar._readableStreamController
            );
            if (a === null) {
              pullWithDefaultReader();
            } else {
              pullWithBYOBReader(a._view, false);
            }
            return promiseResolvedWith(undefined);
          }
          function pull2Algorithm() {
            if (q) {
              ae = true;
              return promiseResolvedWith(undefined);
            }
            q = true;
            const a = ReadableByteStreamControllerGetBYOBRequest(
              Er._readableStreamController
            );
            if (a === null) {
              pullWithDefaultReader();
            } else {
              pullWithBYOBReader(a._view, true);
            }
            return promiseResolvedWith(undefined);
          }
          function cancel1Algorithm(C) {
            Ue = true;
            Pt = C;
            if (lt) {
              const C = CreateArrayFromList([Pt, Wt]);
              const q = ReadableStreamCancel(a, C);
              Ir(q);
            }
            return Br;
          }
          function cancel2Algorithm(C) {
            lt = true;
            Wt = C;
            if (Ue) {
              const C = CreateArrayFromList([Pt, Wt]);
              const q = ReadableStreamCancel(a, C);
              Ir(q);
            }
            return Br;
          }
          function startAlgorithm() {
            return;
          }
          Ar = CreateReadableByteStream(
            startAlgorithm,
            pull1Algorithm,
            cancel1Algorithm
          );
          Er = CreateReadableByteStream(
            startAlgorithm,
            pull2Algorithm,
            cancel2Algorithm
          );
          forwardReaderError(C);
          return [Ar, Er];
        }
        function isReadableStreamLike(a) {
          return typeIsObject(a) && typeof a.getReader !== 'undefined';
        }
        function ReadableStreamFrom(a) {
          if (isReadableStreamLike(a)) {
            return ReadableStreamFromDefaultReader(a.getReader());
          }
          return ReadableStreamFromIterable(a);
        }
        function ReadableStreamFromIterable(a) {
          let C;
          const q = GetIterator(a, 'async');
          const re = noop;
          function pullAlgorithm() {
            let a;
            try {
              a = IteratorNext(q);
            } catch (a) {
              return promiseRejectedWith(a);
            }
            const re = promiseResolvedWith(a);
            return transformPromiseWith(re, (a) => {
              if (!typeIsObject(a)) {
                throw new TypeError(
                  'The promise returned by the iterator.next() method must fulfill with an object'
                );
              }
              const q = IteratorComplete(a);
              if (q) {
                ReadableStreamDefaultControllerClose(
                  C._readableStreamController
                );
              } else {
                const q = IteratorValue(a);
                ReadableStreamDefaultControllerEnqueue(
                  C._readableStreamController,
                  q
                );
              }
            });
          }
          function cancelAlgorithm(a) {
            const C = q.iterator;
            let re;
            try {
              re = GetMethod(C, 'return');
            } catch (a) {
              return promiseRejectedWith(a);
            }
            if (re === undefined) {
              return promiseResolvedWith(undefined);
            }
            let ae;
            try {
              ae = reflectCall(re, C, [a]);
            } catch (a) {
              return promiseRejectedWith(a);
            }
            const Ue = promiseResolvedWith(ae);
            return transformPromiseWith(Ue, (a) => {
              if (!typeIsObject(a)) {
                throw new TypeError(
                  'The promise returned by the iterator.return() method must fulfill with an object'
                );
              }
              return undefined;
            });
          }
          C = CreateReadableStream(re, pullAlgorithm, cancelAlgorithm, 0);
          return C;
        }
        function ReadableStreamFromDefaultReader(a) {
          let C;
          const q = noop;
          function pullAlgorithm() {
            let q;
            try {
              q = a.read();
            } catch (a) {
              return promiseRejectedWith(a);
            }
            return transformPromiseWith(q, (a) => {
              if (!typeIsObject(a)) {
                throw new TypeError(
                  'The promise returned by the reader.read() method must fulfill with an object'
                );
              }
              if (a.done) {
                ReadableStreamDefaultControllerClose(
                  C._readableStreamController
                );
              } else {
                const q = a.value;
                ReadableStreamDefaultControllerEnqueue(
                  C._readableStreamController,
                  q
                );
              }
            });
          }
          function cancelAlgorithm(C) {
            try {
              return promiseResolvedWith(a.cancel(C));
            } catch (a) {
              return promiseRejectedWith(a);
            }
          }
          C = CreateReadableStream(q, pullAlgorithm, cancelAlgorithm, 0);
          return C;
        }
        function convertUnderlyingDefaultOrByteSource(a, C) {
          assertDictionary(a, C);
          const q = a;
          const re =
            q === null || q === void 0 ? void 0 : q.autoAllocateChunkSize;
          const ae = q === null || q === void 0 ? void 0 : q.cancel;
          const Ue = q === null || q === void 0 ? void 0 : q.pull;
          const lt = q === null || q === void 0 ? void 0 : q.start;
          const Pt = q === null || q === void 0 ? void 0 : q.type;
          return {
            autoAllocateChunkSize:
              re === undefined
                ? undefined
                : convertUnsignedLongLongWithEnforceRange(
                    re,
                    `${C} has member 'autoAllocateChunkSize' that`
                  ),
            cancel:
              ae === undefined
                ? undefined
                : convertUnderlyingSourceCancelCallback(
                    ae,
                    q,
                    `${C} has member 'cancel' that`
                  ),
            pull:
              Ue === undefined
                ? undefined
                : convertUnderlyingSourcePullCallback(
                    Ue,
                    q,
                    `${C} has member 'pull' that`
                  ),
            start:
              lt === undefined
                ? undefined
                : convertUnderlyingSourceStartCallback(
                    lt,
                    q,
                    `${C} has member 'start' that`
                  ),
            type:
              Pt === undefined
                ? undefined
                : convertReadableStreamType(Pt, `${C} has member 'type' that`)
          };
        }
        function convertUnderlyingSourceCancelCallback(a, C, q) {
          assertFunction(a, q);
          return (q) => promiseCall(a, C, [q]);
        }
        function convertUnderlyingSourcePullCallback(a, C, q) {
          assertFunction(a, q);
          return (q) => promiseCall(a, C, [q]);
        }
        function convertUnderlyingSourceStartCallback(a, C, q) {
          assertFunction(a, q);
          return (q) => reflectCall(a, C, [q]);
        }
        function convertReadableStreamType(a, C) {
          a = `${a}`;
          if (a !== 'bytes') {
            throw new TypeError(
              `${C} '${a}' is not a valid enumeration value for ReadableStreamType`
            );
          }
          return a;
        }
        function convertIteratorOptions(a, C) {
          assertDictionary(a, C);
          const q = a === null || a === void 0 ? void 0 : a.preventCancel;
          return { preventCancel: Boolean(q) };
        }
        function convertPipeOptions(a, C) {
          assertDictionary(a, C);
          const q = a === null || a === void 0 ? void 0 : a.preventAbort;
          const re = a === null || a === void 0 ? void 0 : a.preventCancel;
          const ae = a === null || a === void 0 ? void 0 : a.preventClose;
          const Ue = a === null || a === void 0 ? void 0 : a.signal;
          if (Ue !== undefined) {
            assertAbortSignal(Ue, `${C} has member 'signal' that`);
          }
          return {
            preventAbort: Boolean(q),
            preventCancel: Boolean(re),
            preventClose: Boolean(ae),
            signal: Ue
          };
        }
        function assertAbortSignal(a, C) {
          if (!isAbortSignal(a)) {
            throw new TypeError(`${C} is not an AbortSignal.`);
          }
        }
        function convertReadableWritablePair(a, C) {
          assertDictionary(a, C);
          const q = a === null || a === void 0 ? void 0 : a.readable;
          assertRequiredField(q, 'readable', 'ReadableWritablePair');
          assertReadableStream(q, `${C} has member 'readable' that`);
          const re = a === null || a === void 0 ? void 0 : a.writable;
          assertRequiredField(re, 'writable', 'ReadableWritablePair');
          assertWritableStream(re, `${C} has member 'writable' that`);
          return { readable: q, writable: re };
        }
        class ReadableStream {
          constructor(a = {}, C = {}) {
            if (a === undefined) {
              a = null;
            } else {
              assertObject(a, 'First parameter');
            }
            const q = convertQueuingStrategy(C, 'Second parameter');
            const re = convertUnderlyingDefaultOrByteSource(
              a,
              'First parameter'
            );
            InitializeReadableStream(this);
            if (re.type === 'bytes') {
              if (q.size !== undefined) {
                throw new RangeError(
                  'The strategy for a byte stream cannot have a size function'
                );
              }
              const a = ExtractHighWaterMark(q, 0);
              SetUpReadableByteStreamControllerFromUnderlyingSource(
                this,
                re,
                a
              );
            } else {
              const a = ExtractSizeAlgorithm(q);
              const C = ExtractHighWaterMark(q, 1);
              SetUpReadableStreamDefaultControllerFromUnderlyingSource(
                this,
                re,
                C,
                a
              );
            }
          }
          get locked() {
            if (!IsReadableStream(this)) {
              throw streamBrandCheckException$1('locked');
            }
            return IsReadableStreamLocked(this);
          }
          cancel(a = undefined) {
            if (!IsReadableStream(this)) {
              return promiseRejectedWith(streamBrandCheckException$1('cancel'));
            }
            if (IsReadableStreamLocked(this)) {
              return promiseRejectedWith(
                new TypeError(
                  'Cannot cancel a stream that already has a reader'
                )
              );
            }
            return ReadableStreamCancel(this, a);
          }
          getReader(a = undefined) {
            if (!IsReadableStream(this)) {
              throw streamBrandCheckException$1('getReader');
            }
            const C = convertReaderOptions(a, 'First parameter');
            if (C.mode === undefined) {
              return AcquireReadableStreamDefaultReader(this);
            }
            return AcquireReadableStreamBYOBReader(this);
          }
          pipeThrough(a, C = {}) {
            if (!IsReadableStream(this)) {
              throw streamBrandCheckException$1('pipeThrough');
            }
            assertRequiredArgument(a, 1, 'pipeThrough');
            const q = convertReadableWritablePair(a, 'First parameter');
            const re = convertPipeOptions(C, 'Second parameter');
            if (IsReadableStreamLocked(this)) {
              throw new TypeError(
                'ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream'
              );
            }
            if (IsWritableStreamLocked(q.writable)) {
              throw new TypeError(
                'ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream'
              );
            }
            const ae = ReadableStreamPipeTo(
              this,
              q.writable,
              re.preventClose,
              re.preventAbort,
              re.preventCancel,
              re.signal
            );
            setPromiseIsHandledToTrue(ae);
            return q.readable;
          }
          pipeTo(a, C = {}) {
            if (!IsReadableStream(this)) {
              return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));
            }
            if (a === undefined) {
              return promiseRejectedWith(
                `Parameter 1 is required in 'pipeTo'.`
              );
            }
            if (!IsWritableStream(a)) {
              return promiseRejectedWith(
                new TypeError(
                  `ReadableStream.prototype.pipeTo's first argument must be a WritableStream`
                )
              );
            }
            let q;
            try {
              q = convertPipeOptions(C, 'Second parameter');
            } catch (a) {
              return promiseRejectedWith(a);
            }
            if (IsReadableStreamLocked(this)) {
              return promiseRejectedWith(
                new TypeError(
                  'ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'
                )
              );
            }
            if (IsWritableStreamLocked(a)) {
              return promiseRejectedWith(
                new TypeError(
                  'ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'
                )
              );
            }
            return ReadableStreamPipeTo(
              this,
              a,
              q.preventClose,
              q.preventAbort,
              q.preventCancel,
              q.signal
            );
          }
          tee() {
            if (!IsReadableStream(this)) {
              throw streamBrandCheckException$1('tee');
            }
            const a = ReadableStreamTee(this);
            return CreateArrayFromList(a);
          }
          values(a = undefined) {
            if (!IsReadableStream(this)) {
              throw streamBrandCheckException$1('values');
            }
            const C = convertIteratorOptions(a, 'First parameter');
            return AcquireReadableStreamAsyncIterator(this, C.preventCancel);
          }
          [Mr](a) {
            return this.values(a);
          }
          static from(a) {
            return ReadableStreamFrom(a);
          }
        }
        Object.defineProperties(ReadableStream, { from: { enumerable: true } });
        Object.defineProperties(ReadableStream.prototype, {
          cancel: { enumerable: true },
          getReader: { enumerable: true },
          pipeThrough: { enumerable: true },
          pipeTo: { enumerable: true },
          tee: { enumerable: true },
          values: { enumerable: true },
          locked: { enumerable: true }
        });
        setFunctionName(ReadableStream.from, 'from');
        setFunctionName(ReadableStream.prototype.cancel, 'cancel');
        setFunctionName(ReadableStream.prototype.getReader, 'getReader');
        setFunctionName(ReadableStream.prototype.pipeThrough, 'pipeThrough');
        setFunctionName(ReadableStream.prototype.pipeTo, 'pipeTo');
        setFunctionName(ReadableStream.prototype.tee, 'tee');
        setFunctionName(ReadableStream.prototype.values, 'values');
        if (typeof Symbol.toStringTag === 'symbol') {
          Object.defineProperty(ReadableStream.prototype, Symbol.toStringTag, {
            value: 'ReadableStream',
            configurable: true
          });
        }
        Object.defineProperty(ReadableStream.prototype, Mr, {
          value: ReadableStream.prototype.values,
          writable: true,
          configurable: true
        });
        function CreateReadableStream(a, C, q, re = 1, ae = () => 1) {
          const Ue = Object.create(ReadableStream.prototype);
          InitializeReadableStream(Ue);
          const lt = Object.create(ReadableStreamDefaultController.prototype);
          SetUpReadableStreamDefaultController(Ue, lt, a, C, q, re, ae);
          return Ue;
        }
        function CreateReadableByteStream(a, C, q) {
          const re = Object.create(ReadableStream.prototype);
          InitializeReadableStream(re);
          const ae = Object.create(ReadableByteStreamController.prototype);
          SetUpReadableByteStreamController(re, ae, a, C, q, 0, undefined);
          return re;
        }
        function InitializeReadableStream(a) {
          a._state = 'readable';
          a._reader = undefined;
          a._storedError = undefined;
          a._disturbed = false;
        }
        function IsReadableStream(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (
            !Object.prototype.hasOwnProperty.call(
              a,
              '_readableStreamController'
            )
          ) {
            return false;
          }
          return a instanceof ReadableStream;
        }
        function IsReadableStreamLocked(a) {
          if (a._reader === undefined) {
            return false;
          }
          return true;
        }
        function ReadableStreamCancel(a, C) {
          a._disturbed = true;
          if (a._state === 'closed') {
            return promiseResolvedWith(undefined);
          }
          if (a._state === 'errored') {
            return promiseRejectedWith(a._storedError);
          }
          ReadableStreamClose(a);
          const q = a._reader;
          if (q !== undefined && IsReadableStreamBYOBReader(q)) {
            const a = q._readIntoRequests;
            q._readIntoRequests = new SimpleQueue();
            a.forEach((a) => {
              a._closeSteps(undefined);
            });
          }
          const re = a._readableStreamController[Wt](C);
          return transformPromiseWith(re, noop);
        }
        function ReadableStreamClose(a) {
          a._state = 'closed';
          const C = a._reader;
          if (C === undefined) {
            return;
          }
          defaultReaderClosedPromiseResolve(C);
          if (IsReadableStreamDefaultReader(C)) {
            const a = C._readRequests;
            C._readRequests = new SimpleQueue();
            a.forEach((a) => {
              a._closeSteps();
            });
          }
        }
        function ReadableStreamError(a, C) {
          a._state = 'errored';
          a._storedError = C;
          const q = a._reader;
          if (q === undefined) {
            return;
          }
          defaultReaderClosedPromiseReject(q, C);
          if (IsReadableStreamDefaultReader(q)) {
            ReadableStreamDefaultReaderErrorReadRequests(q, C);
          } else {
            ReadableStreamBYOBReaderErrorReadIntoRequests(q, C);
          }
        }
        function streamBrandCheckException$1(a) {
          return new TypeError(
            `ReadableStream.prototype.${a} can only be used on a ReadableStream`
          );
        }
        function convertQueuingStrategyInit(a, C) {
          assertDictionary(a, C);
          const q = a === null || a === void 0 ? void 0 : a.highWaterMark;
          assertRequiredField(q, 'highWaterMark', 'QueuingStrategyInit');
          return { highWaterMark: convertUnrestrictedDouble(q) };
        }
        const byteLengthSizeFunction = (a) => a.byteLength;
        setFunctionName(byteLengthSizeFunction, 'size');
        class ByteLengthQueuingStrategy {
          constructor(a) {
            assertRequiredArgument(a, 1, 'ByteLengthQueuingStrategy');
            a = convertQueuingStrategyInit(a, 'First parameter');
            this._byteLengthQueuingStrategyHighWaterMark = a.highWaterMark;
          }
          get highWaterMark() {
            if (!IsByteLengthQueuingStrategy(this)) {
              throw byteLengthBrandCheckException('highWaterMark');
            }
            return this._byteLengthQueuingStrategyHighWaterMark;
          }
          get size() {
            if (!IsByteLengthQueuingStrategy(this)) {
              throw byteLengthBrandCheckException('size');
            }
            return byteLengthSizeFunction;
          }
        }
        Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
          highWaterMark: { enumerable: true },
          size: { enumerable: true }
        });
        if (typeof Symbol.toStringTag === 'symbol') {
          Object.defineProperty(
            ByteLengthQueuingStrategy.prototype,
            Symbol.toStringTag,
            { value: 'ByteLengthQueuingStrategy', configurable: true }
          );
        }
        function byteLengthBrandCheckException(a) {
          return new TypeError(
            `ByteLengthQueuingStrategy.prototype.${a} can only be used on a ByteLengthQueuingStrategy`
          );
        }
        function IsByteLengthQueuingStrategy(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (
            !Object.prototype.hasOwnProperty.call(
              a,
              '_byteLengthQueuingStrategyHighWaterMark'
            )
          ) {
            return false;
          }
          return a instanceof ByteLengthQueuingStrategy;
        }
        const countSizeFunction = () => 1;
        setFunctionName(countSizeFunction, 'size');
        class CountQueuingStrategy {
          constructor(a) {
            assertRequiredArgument(a, 1, 'CountQueuingStrategy');
            a = convertQueuingStrategyInit(a, 'First parameter');
            this._countQueuingStrategyHighWaterMark = a.highWaterMark;
          }
          get highWaterMark() {
            if (!IsCountQueuingStrategy(this)) {
              throw countBrandCheckException('highWaterMark');
            }
            return this._countQueuingStrategyHighWaterMark;
          }
          get size() {
            if (!IsCountQueuingStrategy(this)) {
              throw countBrandCheckException('size');
            }
            return countSizeFunction;
          }
        }
        Object.defineProperties(CountQueuingStrategy.prototype, {
          highWaterMark: { enumerable: true },
          size: { enumerable: true }
        });
        if (typeof Symbol.toStringTag === 'symbol') {
          Object.defineProperty(
            CountQueuingStrategy.prototype,
            Symbol.toStringTag,
            { value: 'CountQueuingStrategy', configurable: true }
          );
        }
        function countBrandCheckException(a) {
          return new TypeError(
            `CountQueuingStrategy.prototype.${a} can only be used on a CountQueuingStrategy`
          );
        }
        function IsCountQueuingStrategy(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (
            !Object.prototype.hasOwnProperty.call(
              a,
              '_countQueuingStrategyHighWaterMark'
            )
          ) {
            return false;
          }
          return a instanceof CountQueuingStrategy;
        }
        function convertTransformer(a, C) {
          assertDictionary(a, C);
          const q = a === null || a === void 0 ? void 0 : a.cancel;
          const re = a === null || a === void 0 ? void 0 : a.flush;
          const ae = a === null || a === void 0 ? void 0 : a.readableType;
          const Ue = a === null || a === void 0 ? void 0 : a.start;
          const lt = a === null || a === void 0 ? void 0 : a.transform;
          const Pt = a === null || a === void 0 ? void 0 : a.writableType;
          return {
            cancel:
              q === undefined
                ? undefined
                : convertTransformerCancelCallback(
                    q,
                    a,
                    `${C} has member 'cancel' that`
                  ),
            flush:
              re === undefined
                ? undefined
                : convertTransformerFlushCallback(
                    re,
                    a,
                    `${C} has member 'flush' that`
                  ),
            readableType: ae,
            start:
              Ue === undefined
                ? undefined
                : convertTransformerStartCallback(
                    Ue,
                    a,
                    `${C} has member 'start' that`
                  ),
            transform:
              lt === undefined
                ? undefined
                : convertTransformerTransformCallback(
                    lt,
                    a,
                    `${C} has member 'transform' that`
                  ),
            writableType: Pt
          };
        }
        function convertTransformerFlushCallback(a, C, q) {
          assertFunction(a, q);
          return (q) => promiseCall(a, C, [q]);
        }
        function convertTransformerStartCallback(a, C, q) {
          assertFunction(a, q);
          return (q) => reflectCall(a, C, [q]);
        }
        function convertTransformerTransformCallback(a, C, q) {
          assertFunction(a, q);
          return (q, re) => promiseCall(a, C, [q, re]);
        }
        function convertTransformerCancelCallback(a, C, q) {
          assertFunction(a, q);
          return (q) => promiseCall(a, C, [q]);
        }
        class TransformStream {
          constructor(a = {}, C = {}, q = {}) {
            if (a === undefined) {
              a = null;
            }
            const re = convertQueuingStrategy(C, 'Second parameter');
            const ae = convertQueuingStrategy(q, 'Third parameter');
            const Ue = convertTransformer(a, 'First parameter');
            if (Ue.readableType !== undefined) {
              throw new RangeError('Invalid readableType specified');
            }
            if (Ue.writableType !== undefined) {
              throw new RangeError('Invalid writableType specified');
            }
            const lt = ExtractHighWaterMark(ae, 0);
            const Pt = ExtractSizeAlgorithm(ae);
            const Wt = ExtractHighWaterMark(re, 1);
            const Ar = ExtractSizeAlgorithm(re);
            let Er;
            const Ir = newPromise((a) => {
              Er = a;
            });
            InitializeTransformStream(this, Ir, Wt, Ar, lt, Pt);
            SetUpTransformStreamDefaultControllerFromTransformer(this, Ue);
            if (Ue.start !== undefined) {
              Er(Ue.start(this._transformStreamController));
            } else {
              Er(undefined);
            }
          }
          get readable() {
            if (!IsTransformStream(this)) {
              throw streamBrandCheckException('readable');
            }
            return this._readable;
          }
          get writable() {
            if (!IsTransformStream(this)) {
              throw streamBrandCheckException('writable');
            }
            return this._writable;
          }
        }
        Object.defineProperties(TransformStream.prototype, {
          readable: { enumerable: true },
          writable: { enumerable: true }
        });
        if (typeof Symbol.toStringTag === 'symbol') {
          Object.defineProperty(TransformStream.prototype, Symbol.toStringTag, {
            value: 'TransformStream',
            configurable: true
          });
        }
        function InitializeTransformStream(a, C, q, re, ae, Ue) {
          function startAlgorithm() {
            return C;
          }
          function writeAlgorithm(C) {
            return TransformStreamDefaultSinkWriteAlgorithm(a, C);
          }
          function abortAlgorithm(C) {
            return TransformStreamDefaultSinkAbortAlgorithm(a, C);
          }
          function closeAlgorithm() {
            return TransformStreamDefaultSinkCloseAlgorithm(a);
          }
          a._writable = CreateWritableStream(
            startAlgorithm,
            writeAlgorithm,
            closeAlgorithm,
            abortAlgorithm,
            q,
            re
          );
          function pullAlgorithm() {
            return TransformStreamDefaultSourcePullAlgorithm(a);
          }
          function cancelAlgorithm(C) {
            return TransformStreamDefaultSourceCancelAlgorithm(a, C);
          }
          a._readable = CreateReadableStream(
            startAlgorithm,
            pullAlgorithm,
            cancelAlgorithm,
            ae,
            Ue
          );
          a._backpressure = undefined;
          a._backpressureChangePromise = undefined;
          a._backpressureChangePromise_resolve = undefined;
          TransformStreamSetBackpressure(a, true);
          a._transformStreamController = undefined;
        }
        function IsTransformStream(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (
            !Object.prototype.hasOwnProperty.call(
              a,
              '_transformStreamController'
            )
          ) {
            return false;
          }
          return a instanceof TransformStream;
        }
        function TransformStreamError(a, C) {
          ReadableStreamDefaultControllerError(
            a._readable._readableStreamController,
            C
          );
          TransformStreamErrorWritableAndUnblockWrite(a, C);
        }
        function TransformStreamErrorWritableAndUnblockWrite(a, C) {
          TransformStreamDefaultControllerClearAlgorithms(
            a._transformStreamController
          );
          WritableStreamDefaultControllerErrorIfNeeded(
            a._writable._writableStreamController,
            C
          );
          TransformStreamUnblockWrite(a);
        }
        function TransformStreamUnblockWrite(a) {
          if (a._backpressure) {
            TransformStreamSetBackpressure(a, false);
          }
        }
        function TransformStreamSetBackpressure(a, C) {
          if (a._backpressureChangePromise !== undefined) {
            a._backpressureChangePromise_resolve();
          }
          a._backpressureChangePromise = newPromise((C) => {
            a._backpressureChangePromise_resolve = C;
          });
          a._backpressure = C;
        }
        class TransformStreamDefaultController {
          constructor() {
            throw new TypeError('Illegal constructor');
          }
          get desiredSize() {
            if (!IsTransformStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException('desiredSize');
            }
            const a =
              this._controlledTransformStream._readable
                ._readableStreamController;
            return ReadableStreamDefaultControllerGetDesiredSize(a);
          }
          enqueue(a = undefined) {
            if (!IsTransformStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException('enqueue');
            }
            TransformStreamDefaultControllerEnqueue(this, a);
          }
          error(a = undefined) {
            if (!IsTransformStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException('error');
            }
            TransformStreamDefaultControllerError(this, a);
          }
          terminate() {
            if (!IsTransformStreamDefaultController(this)) {
              throw defaultControllerBrandCheckException('terminate');
            }
            TransformStreamDefaultControllerTerminate(this);
          }
        }
        Object.defineProperties(TransformStreamDefaultController.prototype, {
          enqueue: { enumerable: true },
          error: { enumerable: true },
          terminate: { enumerable: true },
          desiredSize: { enumerable: true }
        });
        setFunctionName(
          TransformStreamDefaultController.prototype.enqueue,
          'enqueue'
        );
        setFunctionName(
          TransformStreamDefaultController.prototype.error,
          'error'
        );
        setFunctionName(
          TransformStreamDefaultController.prototype.terminate,
          'terminate'
        );
        if (typeof Symbol.toStringTag === 'symbol') {
          Object.defineProperty(
            TransformStreamDefaultController.prototype,
            Symbol.toStringTag,
            { value: 'TransformStreamDefaultController', configurable: true }
          );
        }
        function IsTransformStreamDefaultController(a) {
          if (!typeIsObject(a)) {
            return false;
          }
          if (
            !Object.prototype.hasOwnProperty.call(
              a,
              '_controlledTransformStream'
            )
          ) {
            return false;
          }
          return a instanceof TransformStreamDefaultController;
        }
        function SetUpTransformStreamDefaultController(a, C, q, re, ae) {
          C._controlledTransformStream = a;
          a._transformStreamController = C;
          C._transformAlgorithm = q;
          C._flushAlgorithm = re;
          C._cancelAlgorithm = ae;
          C._finishPromise = undefined;
          C._finishPromise_resolve = undefined;
          C._finishPromise_reject = undefined;
        }
        function SetUpTransformStreamDefaultControllerFromTransformer(a, C) {
          const q = Object.create(TransformStreamDefaultController.prototype);
          let re;
          let ae;
          let Ue;
          if (C.transform !== undefined) {
            re = (a) => C.transform(a, q);
          } else {
            re = (a) => {
              try {
                TransformStreamDefaultControllerEnqueue(q, a);
                return promiseResolvedWith(undefined);
              } catch (a) {
                return promiseRejectedWith(a);
              }
            };
          }
          if (C.flush !== undefined) {
            ae = () => C.flush(q);
          } else {
            ae = () => promiseResolvedWith(undefined);
          }
          if (C.cancel !== undefined) {
            Ue = (a) => C.cancel(a);
          } else {
            Ue = () => promiseResolvedWith(undefined);
          }
          SetUpTransformStreamDefaultController(a, q, re, ae, Ue);
        }
        function TransformStreamDefaultControllerClearAlgorithms(a) {
          a._transformAlgorithm = undefined;
          a._flushAlgorithm = undefined;
          a._cancelAlgorithm = undefined;
        }
        function TransformStreamDefaultControllerEnqueue(a, C) {
          const q = a._controlledTransformStream;
          const re = q._readable._readableStreamController;
          if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(re)) {
            throw new TypeError(
              'Readable side is not in a state that permits enqueue'
            );
          }
          try {
            ReadableStreamDefaultControllerEnqueue(re, C);
          } catch (a) {
            TransformStreamErrorWritableAndUnblockWrite(q, a);
            throw q._readable._storedError;
          }
          const ae = ReadableStreamDefaultControllerHasBackpressure(re);
          if (ae !== q._backpressure) {
            TransformStreamSetBackpressure(q, true);
          }
        }
        function TransformStreamDefaultControllerError(a, C) {
          TransformStreamError(a._controlledTransformStream, C);
        }
        function TransformStreamDefaultControllerPerformTransform(a, C) {
          const q = a._transformAlgorithm(C);
          return transformPromiseWith(q, undefined, (C) => {
            TransformStreamError(a._controlledTransformStream, C);
            throw C;
          });
        }
        function TransformStreamDefaultControllerTerminate(a) {
          const C = a._controlledTransformStream;
          const q = C._readable._readableStreamController;
          ReadableStreamDefaultControllerClose(q);
          const re = new TypeError('TransformStream terminated');
          TransformStreamErrorWritableAndUnblockWrite(C, re);
        }
        function TransformStreamDefaultSinkWriteAlgorithm(a, C) {
          const q = a._transformStreamController;
          if (a._backpressure) {
            const re = a._backpressureChangePromise;
            return transformPromiseWith(re, () => {
              const re = a._writable;
              const ae = re._state;
              if (ae === 'erroring') {
                throw re._storedError;
              }
              return TransformStreamDefaultControllerPerformTransform(q, C);
            });
          }
          return TransformStreamDefaultControllerPerformTransform(q, C);
        }
        function TransformStreamDefaultSinkAbortAlgorithm(a, C) {
          const q = a._transformStreamController;
          if (q._finishPromise !== undefined) {
            return q._finishPromise;
          }
          const re = a._readable;
          q._finishPromise = newPromise((a, C) => {
            q._finishPromise_resolve = a;
            q._finishPromise_reject = C;
          });
          const ae = q._cancelAlgorithm(C);
          TransformStreamDefaultControllerClearAlgorithms(q);
          uponPromise(
            ae,
            () => {
              if (re._state === 'errored') {
                defaultControllerFinishPromiseReject(q, re._storedError);
              } else {
                ReadableStreamDefaultControllerError(
                  re._readableStreamController,
                  C
                );
                defaultControllerFinishPromiseResolve(q);
              }
              return null;
            },
            (a) => {
              ReadableStreamDefaultControllerError(
                re._readableStreamController,
                a
              );
              defaultControllerFinishPromiseReject(q, a);
              return null;
            }
          );
          return q._finishPromise;
        }
        function TransformStreamDefaultSinkCloseAlgorithm(a) {
          const C = a._transformStreamController;
          if (C._finishPromise !== undefined) {
            return C._finishPromise;
          }
          const q = a._readable;
          C._finishPromise = newPromise((a, q) => {
            C._finishPromise_resolve = a;
            C._finishPromise_reject = q;
          });
          const re = C._flushAlgorithm();
          TransformStreamDefaultControllerClearAlgorithms(C);
          uponPromise(
            re,
            () => {
              if (q._state === 'errored') {
                defaultControllerFinishPromiseReject(C, q._storedError);
              } else {
                ReadableStreamDefaultControllerClose(
                  q._readableStreamController
                );
                defaultControllerFinishPromiseResolve(C);
              }
              return null;
            },
            (a) => {
              ReadableStreamDefaultControllerError(
                q._readableStreamController,
                a
              );
              defaultControllerFinishPromiseReject(C, a);
              return null;
            }
          );
          return C._finishPromise;
        }
        function TransformStreamDefaultSourcePullAlgorithm(a) {
          TransformStreamSetBackpressure(a, false);
          return a._backpressureChangePromise;
        }
        function TransformStreamDefaultSourceCancelAlgorithm(a, C) {
          const q = a._transformStreamController;
          if (q._finishPromise !== undefined) {
            return q._finishPromise;
          }
          const re = a._writable;
          q._finishPromise = newPromise((a, C) => {
            q._finishPromise_resolve = a;
            q._finishPromise_reject = C;
          });
          const ae = q._cancelAlgorithm(C);
          TransformStreamDefaultControllerClearAlgorithms(q);
          uponPromise(
            ae,
            () => {
              if (re._state === 'errored') {
                defaultControllerFinishPromiseReject(q, re._storedError);
              } else {
                WritableStreamDefaultControllerErrorIfNeeded(
                  re._writableStreamController,
                  C
                );
                TransformStreamUnblockWrite(a);
                defaultControllerFinishPromiseResolve(q);
              }
              return null;
            },
            (C) => {
              WritableStreamDefaultControllerErrorIfNeeded(
                re._writableStreamController,
                C
              );
              TransformStreamUnblockWrite(a);
              defaultControllerFinishPromiseReject(q, C);
              return null;
            }
          );
          return q._finishPromise;
        }
        function defaultControllerBrandCheckException(a) {
          return new TypeError(
            `TransformStreamDefaultController.prototype.${a} can only be used on a TransformStreamDefaultController`
          );
        }
        function defaultControllerFinishPromiseResolve(a) {
          if (a._finishPromise_resolve === undefined) {
            return;
          }
          a._finishPromise_resolve();
          a._finishPromise_resolve = undefined;
          a._finishPromise_reject = undefined;
        }
        function defaultControllerFinishPromiseReject(a, C) {
          if (a._finishPromise_reject === undefined) {
            return;
          }
          setPromiseIsHandledToTrue(a._finishPromise);
          a._finishPromise_reject(C);
          a._finishPromise_resolve = undefined;
          a._finishPromise_reject = undefined;
        }
        function streamBrandCheckException(a) {
          return new TypeError(
            `TransformStream.prototype.${a} can only be used on a TransformStream`
          );
        }
        a.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;
        a.CountQueuingStrategy = CountQueuingStrategy;
        a.ReadableByteStreamController = ReadableByteStreamController;
        a.ReadableStream = ReadableStream;
        a.ReadableStreamBYOBReader = ReadableStreamBYOBReader;
        a.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;
        a.ReadableStreamDefaultController = ReadableStreamDefaultController;
        a.ReadableStreamDefaultReader = ReadableStreamDefaultReader;
        a.TransformStream = TransformStream;
        a.TransformStreamDefaultController = TransformStreamDefaultController;
        a.WritableStream = WritableStream;
        a.WritableStreamDefaultController = WritableStreamDefaultController;
        a.WritableStreamDefaultWriter = WritableStreamDefaultWriter;
      });
    },
    369: (a) => {
      'use strict';
      var C = {};
      a.exports = C;
      function sign(a) {
        return a < 0 ? -1 : 1;
      }
      function evenRound(a) {
        if (a % 1 === 0.5 && (a & 1) === 0) {
          return Math.floor(a);
        } else {
          return Math.round(a);
        }
      }
      function createNumberConversion(a, C) {
        if (!C.unsigned) {
          --a;
        }
        const q = C.unsigned ? 0 : -Math.pow(2, a);
        const re = Math.pow(2, a) - 1;
        const ae = C.moduloBitLength
          ? Math.pow(2, C.moduloBitLength)
          : Math.pow(2, a);
        const Ue = C.moduloBitLength
          ? Math.pow(2, C.moduloBitLength - 1)
          : Math.pow(2, a - 1);
        return function (a, lt) {
          if (!lt) lt = {};
          let Pt = +a;
          if (lt.enforceRange) {
            if (!Number.isFinite(Pt)) {
              throw new TypeError('Argument is not a finite number');
            }
            Pt = sign(Pt) * Math.floor(Math.abs(Pt));
            if (Pt < q || Pt > re) {
              throw new TypeError('Argument is not in byte range');
            }
            return Pt;
          }
          if (!isNaN(Pt) && lt.clamp) {
            Pt = evenRound(Pt);
            if (Pt < q) Pt = q;
            if (Pt > re) Pt = re;
            return Pt;
          }
          if (!Number.isFinite(Pt) || Pt === 0) {
            return 0;
          }
          Pt = sign(Pt) * Math.floor(Math.abs(Pt));
          Pt = Pt % ae;
          if (!C.unsigned && Pt >= Ue) {
            return Pt - ae;
          } else if (C.unsigned) {
            if (Pt < 0) {
              Pt += ae;
            } else if (Pt === -0) {
              return 0;
            }
          }
          return Pt;
        };
      }
      C['void'] = function () {
        return undefined;
      };
      C['boolean'] = function (a) {
        return !!a;
      };
      C['byte'] = createNumberConversion(8, { unsigned: false });
      C['octet'] = createNumberConversion(8, { unsigned: true });
      C['short'] = createNumberConversion(16, { unsigned: false });
      C['unsigned short'] = createNumberConversion(16, { unsigned: true });
      C['long'] = createNumberConversion(32, { unsigned: false });
      C['unsigned long'] = createNumberConversion(32, { unsigned: true });
      C['long long'] = createNumberConversion(32, {
        unsigned: false,
        moduloBitLength: 64
      });
      C['unsigned long long'] = createNumberConversion(32, {
        unsigned: true,
        moduloBitLength: 64
      });
      C['double'] = function (a) {
        const C = +a;
        if (!Number.isFinite(C)) {
          throw new TypeError('Argument is not a finite floating-point value');
        }
        return C;
      };
      C['unrestricted double'] = function (a) {
        const C = +a;
        if (isNaN(C)) {
          throw new TypeError('Argument is NaN');
        }
        return C;
      };
      C['float'] = C['double'];
      C['unrestricted float'] = C['unrestricted double'];
      C['DOMString'] = function (a, C) {
        if (!C) C = {};
        if (C.treatNullAsEmptyString && a === null) {
          return '';
        }
        return String(a);
      };
      C['ByteString'] = function (a, C) {
        const q = String(a);
        let re = undefined;
        for (let a = 0; (re = q.codePointAt(a)) !== undefined; ++a) {
          if (re > 255) {
            throw new TypeError('Argument is not a valid bytestring');
          }
        }
        return q;
      };
      C['USVString'] = function (a) {
        const C = String(a);
        const q = C.length;
        const re = [];
        for (let a = 0; a < q; ++a) {
          const ae = C.charCodeAt(a);
          if (ae < 55296 || ae > 57343) {
            re.push(String.fromCodePoint(ae));
          } else if (56320 <= ae && ae <= 57343) {
            re.push(String.fromCodePoint(65533));
          } else {
            if (a === q - 1) {
              re.push(String.fromCodePoint(65533));
            } else {
              const q = C.charCodeAt(a + 1);
              if (56320 <= q && q <= 57343) {
                const C = ae & 1023;
                const Ue = q & 1023;
                re.push(String.fromCodePoint((2 << 15) + (2 << 9) * C + Ue));
                ++a;
              } else {
                re.push(String.fromCodePoint(65533));
              }
            }
          }
        }
        return re.join('');
      };
      C['Date'] = function (a, C) {
        if (!(a instanceof Date)) {
          throw new TypeError('Argument is not a Date object');
        }
        if (isNaN(a)) {
          return undefined;
        }
        return a;
      };
      C['RegExp'] = function (a, C) {
        if (!(a instanceof RegExp)) {
          a = new RegExp(a);
        }
        return a;
      };
    },
    3086: (a, C, q) => {
      'use strict';
      const re = q(5934);
      C.implementation = class URLImpl {
        constructor(a) {
          const C = a[0];
          const q = a[1];
          let ae = null;
          if (q !== undefined) {
            ae = re.basicURLParse(q);
            if (ae === 'failure') {
              throw new TypeError('Invalid base URL');
            }
          }
          const Ue = re.basicURLParse(C, { baseURL: ae });
          if (Ue === 'failure') {
            throw new TypeError('Invalid URL');
          }
          this._url = Ue;
        }
        get href() {
          return re.serializeURL(this._url);
        }
        set href(a) {
          const C = re.basicURLParse(a);
          if (C === 'failure') {
            throw new TypeError('Invalid URL');
          }
          this._url = C;
        }
        get origin() {
          return re.serializeURLOrigin(this._url);
        }
        get protocol() {
          return this._url.scheme + ':';
        }
        set protocol(a) {
          re.basicURLParse(a + ':', {
            url: this._url,
            stateOverride: 'scheme start'
          });
        }
        get username() {
          return this._url.username;
        }
        set username(a) {
          if (re.cannotHaveAUsernamePasswordPort(this._url)) {
            return;
          }
          re.setTheUsername(this._url, a);
        }
        get password() {
          return this._url.password;
        }
        set password(a) {
          if (re.cannotHaveAUsernamePasswordPort(this._url)) {
            return;
          }
          re.setThePassword(this._url, a);
        }
        get host() {
          const a = this._url;
          if (a.host === null) {
            return '';
          }
          if (a.port === null) {
            return re.serializeHost(a.host);
          }
          return re.serializeHost(a.host) + ':' + re.serializeInteger(a.port);
        }
        set host(a) {
          if (this._url.cannotBeABaseURL) {
            return;
          }
          re.basicURLParse(a, { url: this._url, stateOverride: 'host' });
        }
        get hostname() {
          if (this._url.host === null) {
            return '';
          }
          return re.serializeHost(this._url.host);
        }
        set hostname(a) {
          if (this._url.cannotBeABaseURL) {
            return;
          }
          re.basicURLParse(a, { url: this._url, stateOverride: 'hostname' });
        }
        get port() {
          if (this._url.port === null) {
            return '';
          }
          return re.serializeInteger(this._url.port);
        }
        set port(a) {
          if (re.cannotHaveAUsernamePasswordPort(this._url)) {
            return;
          }
          if (a === '') {
            this._url.port = null;
          } else {
            re.basicURLParse(a, { url: this._url, stateOverride: 'port' });
          }
        }
        get pathname() {
          if (this._url.cannotBeABaseURL) {
            return this._url.path[0];
          }
          if (this._url.path.length === 0) {
            return '';
          }
          return '/' + this._url.path.join('/');
        }
        set pathname(a) {
          if (this._url.cannotBeABaseURL) {
            return;
          }
          this._url.path = [];
          re.basicURLParse(a, { url: this._url, stateOverride: 'path start' });
        }
        get search() {
          if (this._url.query === null || this._url.query === '') {
            return '';
          }
          return '?' + this._url.query;
        }
        set search(a) {
          const C = this._url;
          if (a === '') {
            C.query = null;
            return;
          }
          const q = a[0] === '?' ? a.substring(1) : a;
          C.query = '';
          re.basicURLParse(q, { url: C, stateOverride: 'query' });
        }
        get hash() {
          if (this._url.fragment === null || this._url.fragment === '') {
            return '';
          }
          return '#' + this._url.fragment;
        }
        set hash(a) {
          if (a === '') {
            this._url.fragment = null;
            return;
          }
          const C = a[0] === '#' ? a.substring(1) : a;
          this._url.fragment = '';
          re.basicURLParse(C, { url: this._url, stateOverride: 'fragment' });
        }
        toJSON() {
          return this.href;
        }
      };
    },
    4724: (a, C, q) => {
      'use strict';
      const re = q(369);
      const ae = q(724);
      const Ue = q(3086);
      const lt = ae.implSymbol;
      function URL(C) {
        if (!this || this[lt] || !(this instanceof URL)) {
          throw new TypeError(
            "Failed to construct 'URL': Please use the 'new' operator, this DOM object constructor cannot be called as a function."
          );
        }
        if (arguments.length < 1) {
          throw new TypeError(
            "Failed to construct 'URL': 1 argument required, but only " +
              arguments.length +
              ' present.'
          );
        }
        const q = [];
        for (let a = 0; a < arguments.length && a < 2; ++a) {
          q[a] = arguments[a];
        }
        q[0] = re['USVString'](q[0]);
        if (q[1] !== undefined) {
          q[1] = re['USVString'](q[1]);
        }
        a.exports.setup(this, q);
      }
      URL.prototype.toJSON = function toJSON() {
        if (!this || !a.exports.is(this)) {
          throw new TypeError('Illegal invocation');
        }
        const C = [];
        for (let a = 0; a < arguments.length && a < 0; ++a) {
          C[a] = arguments[a];
        }
        return this[lt].toJSON.apply(this[lt], C);
      };
      Object.defineProperty(URL.prototype, 'href', {
        get() {
          return this[lt].href;
        },
        set(a) {
          a = re['USVString'](a);
          this[lt].href = a;
        },
        enumerable: true,
        configurable: true
      });
      URL.prototype.toString = function () {
        if (!this || !a.exports.is(this)) {
          throw new TypeError('Illegal invocation');
        }
        return this.href;
      };
      Object.defineProperty(URL.prototype, 'origin', {
        get() {
          return this[lt].origin;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL.prototype, 'protocol', {
        get() {
          return this[lt].protocol;
        },
        set(a) {
          a = re['USVString'](a);
          this[lt].protocol = a;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL.prototype, 'username', {
        get() {
          return this[lt].username;
        },
        set(a) {
          a = re['USVString'](a);
          this[lt].username = a;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL.prototype, 'password', {
        get() {
          return this[lt].password;
        },
        set(a) {
          a = re['USVString'](a);
          this[lt].password = a;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL.prototype, 'host', {
        get() {
          return this[lt].host;
        },
        set(a) {
          a = re['USVString'](a);
          this[lt].host = a;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL.prototype, 'hostname', {
        get() {
          return this[lt].hostname;
        },
        set(a) {
          a = re['USVString'](a);
          this[lt].hostname = a;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL.prototype, 'port', {
        get() {
          return this[lt].port;
        },
        set(a) {
          a = re['USVString'](a);
          this[lt].port = a;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL.prototype, 'pathname', {
        get() {
          return this[lt].pathname;
        },
        set(a) {
          a = re['USVString'](a);
          this[lt].pathname = a;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL.prototype, 'search', {
        get() {
          return this[lt].search;
        },
        set(a) {
          a = re['USVString'](a);
          this[lt].search = a;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(URL.prototype, 'hash', {
        get() {
          return this[lt].hash;
        },
        set(a) {
          a = re['USVString'](a);
          this[lt].hash = a;
        },
        enumerable: true,
        configurable: true
      });
      a.exports = {
        is(a) {
          return !!a && a[lt] instanceof Ue.implementation;
        },
        create(a, C) {
          let q = Object.create(URL.prototype);
          this.setup(q, a, C);
          return q;
        },
        setup(a, C, q) {
          if (!q) q = {};
          q.wrapper = a;
          a[lt] = new Ue.implementation(C, q);
          a[lt][ae.wrapperSymbol] = a;
        },
        interface: URL,
        expose: { Window: { URL: URL }, Worker: { URL: URL } }
      };
    },
    872: (a, C, q) => {
      'use strict';
      C.URL = q(4724)['interface'];
      C.serializeURL = q(5934).serializeURL;
      C.serializeURLOrigin = q(5934).serializeURLOrigin;
      C.basicURLParse = q(5934).basicURLParse;
      C.setTheUsername = q(5934).setTheUsername;
      C.setThePassword = q(5934).setThePassword;
      C.serializeHost = q(5934).serializeHost;
      C.serializeInteger = q(5934).serializeInteger;
      C.parseURL = q(5934).parseURL;
    },
    5934: (a, C, q) => {
      'use strict';
      const re = q(5477);
      const ae = q(7256);
      const Ue = {
        ftp: 21,
        file: null,
        gopher: 70,
        http: 80,
        https: 443,
        ws: 80,
        wss: 443
      };
      const lt = Symbol('failure');
      function countSymbols(a) {
        return re.ucs2.decode(a).length;
      }
      function at(a, C) {
        const q = a[C];
        return isNaN(q) ? undefined : String.fromCodePoint(q);
      }
      function isASCIIDigit(a) {
        return a >= 48 && a <= 57;
      }
      function isASCIIAlpha(a) {
        return (a >= 65 && a <= 90) || (a >= 97 && a <= 122);
      }
      function isASCIIAlphanumeric(a) {
        return isASCIIAlpha(a) || isASCIIDigit(a);
      }
      function isASCIIHex(a) {
        return isASCIIDigit(a) || (a >= 65 && a <= 70) || (a >= 97 && a <= 102);
      }
      function isSingleDot(a) {
        return a === '.' || a.toLowerCase() === '%2e';
      }
      function isDoubleDot(a) {
        a = a.toLowerCase();
        return a === '..' || a === '%2e.' || a === '.%2e' || a === '%2e%2e';
      }
      function isWindowsDriveLetterCodePoints(a, C) {
        return isASCIIAlpha(a) && (C === 58 || C === 124);
      }
      function isWindowsDriveLetterString(a) {
        return (
          a.length === 2 &&
          isASCIIAlpha(a.codePointAt(0)) &&
          (a[1] === ':' || a[1] === '|')
        );
      }
      function isNormalizedWindowsDriveLetterString(a) {
        return a.length === 2 && isASCIIAlpha(a.codePointAt(0)) && a[1] === ':';
      }
      function containsForbiddenHostCodePoint(a) {
        return (
          a.search(
            /\u0000|\u0009|\u000A|\u000D|\u0020|#|%|\/|:|\?|@|\[|\\|\]/
          ) !== -1
        );
      }
      function containsForbiddenHostCodePointExcludingPercent(a) {
        return (
          a.search(
            /\u0000|\u0009|\u000A|\u000D|\u0020|#|\/|:|\?|@|\[|\\|\]/
          ) !== -1
        );
      }
      function isSpecialScheme(a) {
        return Ue[a] !== undefined;
      }
      function isSpecial(a) {
        return isSpecialScheme(a.scheme);
      }
      function defaultPort(a) {
        return Ue[a];
      }
      function percentEncode(a) {
        let C = a.toString(16).toUpperCase();
        if (C.length === 1) {
          C = '0' + C;
        }
        return '%' + C;
      }
      function utf8PercentEncode(a) {
        const C = new Buffer(a);
        let q = '';
        for (let a = 0; a < C.length; ++a) {
          q += percentEncode(C[a]);
        }
        return q;
      }
      function utf8PercentDecode(a) {
        const C = new Buffer(a);
        const q = [];
        for (let a = 0; a < C.length; ++a) {
          if (C[a] !== 37) {
            q.push(C[a]);
          } else if (
            C[a] === 37 &&
            isASCIIHex(C[a + 1]) &&
            isASCIIHex(C[a + 2])
          ) {
            q.push(parseInt(C.slice(a + 1, a + 3).toString(), 16));
            a += 2;
          } else {
            q.push(C[a]);
          }
        }
        return new Buffer(q).toString();
      }
      function isC0ControlPercentEncode(a) {
        return a <= 31 || a > 126;
      }
      const Pt = new Set([32, 34, 35, 60, 62, 63, 96, 123, 125]);
      function isPathPercentEncode(a) {
        return isC0ControlPercentEncode(a) || Pt.has(a);
      }
      const Wt = new Set([47, 58, 59, 61, 64, 91, 92, 93, 94, 124]);
      function isUserinfoPercentEncode(a) {
        return isPathPercentEncode(a) || Wt.has(a);
      }
      function percentEncodeChar(a, C) {
        const q = String.fromCodePoint(a);
        if (C(a)) {
          return utf8PercentEncode(q);
        }
        return q;
      }
      function parseIPv4Number(a) {
        let C = 10;
        if (
          a.length >= 2 &&
          a.charAt(0) === '0' &&
          a.charAt(1).toLowerCase() === 'x'
        ) {
          a = a.substring(2);
          C = 16;
        } else if (a.length >= 2 && a.charAt(0) === '0') {
          a = a.substring(1);
          C = 8;
        }
        if (a === '') {
          return 0;
        }
        const q = C === 10 ? /[^0-9]/ : C === 16 ? /[^0-9A-Fa-f]/ : /[^0-7]/;
        if (q.test(a)) {
          return lt;
        }
        return parseInt(a, C);
      }
      function parseIPv4(a) {
        const C = a.split('.');
        if (C[C.length - 1] === '') {
          if (C.length > 1) {
            C.pop();
          }
        }
        if (C.length > 4) {
          return a;
        }
        const q = [];
        for (const re of C) {
          if (re === '') {
            return a;
          }
          const C = parseIPv4Number(re);
          if (C === lt) {
            return a;
          }
          q.push(C);
        }
        for (let a = 0; a < q.length - 1; ++a) {
          if (q[a] > 255) {
            return lt;
          }
        }
        if (q[q.length - 1] >= Math.pow(256, 5 - q.length)) {
          return lt;
        }
        let re = q.pop();
        let ae = 0;
        for (const a of q) {
          re += a * Math.pow(256, 3 - ae);
          ++ae;
        }
        return re;
      }
      function serializeIPv4(a) {
        let C = '';
        let q = a;
        for (let a = 1; a <= 4; ++a) {
          C = String(q % 256) + C;
          if (a !== 4) {
            C = '.' + C;
          }
          q = Math.floor(q / 256);
        }
        return C;
      }
      function parseIPv6(a) {
        const C = [0, 0, 0, 0, 0, 0, 0, 0];
        let q = 0;
        let ae = null;
        let Ue = 0;
        a = re.ucs2.decode(a);
        if (a[Ue] === 58) {
          if (a[Ue + 1] !== 58) {
            return lt;
          }
          Ue += 2;
          ++q;
          ae = q;
        }
        while (Ue < a.length) {
          if (q === 8) {
            return lt;
          }
          if (a[Ue] === 58) {
            if (ae !== null) {
              return lt;
            }
            ++Ue;
            ++q;
            ae = q;
            continue;
          }
          let re = 0;
          let Pt = 0;
          while (Pt < 4 && isASCIIHex(a[Ue])) {
            re = re * 16 + parseInt(at(a, Ue), 16);
            ++Ue;
            ++Pt;
          }
          if (a[Ue] === 46) {
            if (Pt === 0) {
              return lt;
            }
            Ue -= Pt;
            if (q > 6) {
              return lt;
            }
            let re = 0;
            while (a[Ue] !== undefined) {
              let ae = null;
              if (re > 0) {
                if (a[Ue] === 46 && re < 4) {
                  ++Ue;
                } else {
                  return lt;
                }
              }
              if (!isASCIIDigit(a[Ue])) {
                return lt;
              }
              while (isASCIIDigit(a[Ue])) {
                const C = parseInt(at(a, Ue));
                if (ae === null) {
                  ae = C;
                } else if (ae === 0) {
                  return lt;
                } else {
                  ae = ae * 10 + C;
                }
                if (ae > 255) {
                  return lt;
                }
                ++Ue;
              }
              C[q] = C[q] * 256 + ae;
              ++re;
              if (re === 2 || re === 4) {
                ++q;
              }
            }
            if (re !== 4) {
              return lt;
            }
            break;
          } else if (a[Ue] === 58) {
            ++Ue;
            if (a[Ue] === undefined) {
              return lt;
            }
          } else if (a[Ue] !== undefined) {
            return lt;
          }
          C[q] = re;
          ++q;
        }
        if (ae !== null) {
          let a = q - ae;
          q = 7;
          while (q !== 0 && a > 0) {
            const re = C[ae + a - 1];
            C[ae + a - 1] = C[q];
            C[q] = re;
            --q;
            --a;
          }
        } else if (ae === null && q !== 8) {
          return lt;
        }
        return C;
      }
      function serializeIPv6(a) {
        let C = '';
        const q = findLongestZeroSequence(a);
        const re = q.idx;
        let ae = false;
        for (let q = 0; q <= 7; ++q) {
          if (ae && a[q] === 0) {
            continue;
          } else if (ae) {
            ae = false;
          }
          if (re === q) {
            const a = q === 0 ? '::' : ':';
            C += a;
            ae = true;
            continue;
          }
          C += a[q].toString(16);
          if (q !== 7) {
            C += ':';
          }
        }
        return C;
      }
      function parseHost(a, C) {
        if (a[0] === '[') {
          if (a[a.length - 1] !== ']') {
            return lt;
          }
          return parseIPv6(a.substring(1, a.length - 1));
        }
        if (!C) {
          return parseOpaqueHost(a);
        }
        const q = utf8PercentDecode(a);
        const re = ae.toASCII(
          q,
          false,
          ae.PROCESSING_OPTIONS.NONTRANSITIONAL,
          false
        );
        if (re === null) {
          return lt;
        }
        if (containsForbiddenHostCodePoint(re)) {
          return lt;
        }
        const Ue = parseIPv4(re);
        if (typeof Ue === 'number' || Ue === lt) {
          return Ue;
        }
        return re;
      }
      function parseOpaqueHost(a) {
        if (containsForbiddenHostCodePointExcludingPercent(a)) {
          return lt;
        }
        let C = '';
        const q = re.ucs2.decode(a);
        for (let a = 0; a < q.length; ++a) {
          C += percentEncodeChar(q[a], isC0ControlPercentEncode);
        }
        return C;
      }
      function findLongestZeroSequence(a) {
        let C = null;
        let q = 1;
        let re = null;
        let ae = 0;
        for (let Ue = 0; Ue < a.length; ++Ue) {
          if (a[Ue] !== 0) {
            if (ae > q) {
              C = re;
              q = ae;
            }
            re = null;
            ae = 0;
          } else {
            if (re === null) {
              re = Ue;
            }
            ++ae;
          }
        }
        if (ae > q) {
          C = re;
          q = ae;
        }
        return { idx: C, len: q };
      }
      function serializeHost(a) {
        if (typeof a === 'number') {
          return serializeIPv4(a);
        }
        if (a instanceof Array) {
          return '[' + serializeIPv6(a) + ']';
        }
        return a;
      }
      function trimControlChars(a) {
        return a.replace(
          /^[\u0000-\u001F\u0020]+|[\u0000-\u001F\u0020]+$/g,
          ''
        );
      }
      function trimTabAndNewline(a) {
        return a.replace(/\u0009|\u000A|\u000D/g, '');
      }
      function shortenPath(a) {
        const C = a.path;
        if (C.length === 0) {
          return;
        }
        if (
          a.scheme === 'file' &&
          C.length === 1 &&
          isNormalizedWindowsDriveLetter(C[0])
        ) {
          return;
        }
        C.pop();
      }
      function includesCredentials(a) {
        return a.username !== '' || a.password !== '';
      }
      function cannotHaveAUsernamePasswordPort(a) {
        return (
          a.host === null ||
          a.host === '' ||
          a.cannotBeABaseURL ||
          a.scheme === 'file'
        );
      }
      function isNormalizedWindowsDriveLetter(a) {
        return /^[A-Za-z]:$/.test(a);
      }
      function URLStateMachine(a, C, q, ae, Ue) {
        this.pointer = 0;
        this.input = a;
        this.base = C || null;
        this.encodingOverride = q || 'utf-8';
        this.stateOverride = Ue;
        this.url = ae;
        this.failure = false;
        this.parseError = false;
        if (!this.url) {
          this.url = {
            scheme: '',
            username: '',
            password: '',
            host: null,
            port: null,
            path: [],
            query: null,
            fragment: null,
            cannotBeABaseURL: false
          };
          const a = trimControlChars(this.input);
          if (a !== this.input) {
            this.parseError = true;
          }
          this.input = a;
        }
        const Pt = trimTabAndNewline(this.input);
        if (Pt !== this.input) {
          this.parseError = true;
        }
        this.input = Pt;
        this.state = Ue || 'scheme start';
        this.buffer = '';
        this.atFlag = false;
        this.arrFlag = false;
        this.passwordTokenSeenFlag = false;
        this.input = re.ucs2.decode(this.input);
        for (; this.pointer <= this.input.length; ++this.pointer) {
          const a = this.input[this.pointer];
          const C = isNaN(a) ? undefined : String.fromCodePoint(a);
          const q = this['parse ' + this.state](a, C);
          if (!q) {
            break;
          } else if (q === lt) {
            this.failure = true;
            break;
          }
        }
      }
      URLStateMachine.prototype['parse scheme start'] =
        function parseSchemeStart(a, C) {
          if (isASCIIAlpha(a)) {
            this.buffer += C.toLowerCase();
            this.state = 'scheme';
          } else if (!this.stateOverride) {
            this.state = 'no scheme';
            --this.pointer;
          } else {
            this.parseError = true;
            return lt;
          }
          return true;
        };
      URLStateMachine.prototype['parse scheme'] = function parseScheme(a, C) {
        if (isASCIIAlphanumeric(a) || a === 43 || a === 45 || a === 46) {
          this.buffer += C.toLowerCase();
        } else if (a === 58) {
          if (this.stateOverride) {
            if (isSpecial(this.url) && !isSpecialScheme(this.buffer)) {
              return false;
            }
            if (!isSpecial(this.url) && isSpecialScheme(this.buffer)) {
              return false;
            }
            if (
              (includesCredentials(this.url) || this.url.port !== null) &&
              this.buffer === 'file'
            ) {
              return false;
            }
            if (
              this.url.scheme === 'file' &&
              (this.url.host === '' || this.url.host === null)
            ) {
              return false;
            }
          }
          this.url.scheme = this.buffer;
          this.buffer = '';
          if (this.stateOverride) {
            return false;
          }
          if (this.url.scheme === 'file') {
            if (
              this.input[this.pointer + 1] !== 47 ||
              this.input[this.pointer + 2] !== 47
            ) {
              this.parseError = true;
            }
            this.state = 'file';
          } else if (
            isSpecial(this.url) &&
            this.base !== null &&
            this.base.scheme === this.url.scheme
          ) {
            this.state = 'special relative or authority';
          } else if (isSpecial(this.url)) {
            this.state = 'special authority slashes';
          } else if (this.input[this.pointer + 1] === 47) {
            this.state = 'path or authority';
            ++this.pointer;
          } else {
            this.url.cannotBeABaseURL = true;
            this.url.path.push('');
            this.state = 'cannot-be-a-base-URL path';
          }
        } else if (!this.stateOverride) {
          this.buffer = '';
          this.state = 'no scheme';
          this.pointer = -1;
        } else {
          this.parseError = true;
          return lt;
        }
        return true;
      };
      URLStateMachine.prototype['parse no scheme'] = function parseNoScheme(a) {
        if (this.base === null || (this.base.cannotBeABaseURL && a !== 35)) {
          return lt;
        } else if (this.base.cannotBeABaseURL && a === 35) {
          this.url.scheme = this.base.scheme;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = '';
          this.url.cannotBeABaseURL = true;
          this.state = 'fragment';
        } else if (this.base.scheme === 'file') {
          this.state = 'file';
          --this.pointer;
        } else {
          this.state = 'relative';
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype['parse special relative or authority'] =
        function parseSpecialRelativeOrAuthority(a) {
          if (a === 47 && this.input[this.pointer + 1] === 47) {
            this.state = 'special authority ignore slashes';
            ++this.pointer;
          } else {
            this.parseError = true;
            this.state = 'relative';
            --this.pointer;
          }
          return true;
        };
      URLStateMachine.prototype['parse path or authority'] =
        function parsePathOrAuthority(a) {
          if (a === 47) {
            this.state = 'authority';
          } else {
            this.state = 'path';
            --this.pointer;
          }
          return true;
        };
      URLStateMachine.prototype['parse relative'] = function parseRelative(a) {
        this.url.scheme = this.base.scheme;
        if (isNaN(a)) {
          this.url.username = this.base.username;
          this.url.password = this.base.password;
          this.url.host = this.base.host;
          this.url.port = this.base.port;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
        } else if (a === 47) {
          this.state = 'relative slash';
        } else if (a === 63) {
          this.url.username = this.base.username;
          this.url.password = this.base.password;
          this.url.host = this.base.host;
          this.url.port = this.base.port;
          this.url.path = this.base.path.slice();
          this.url.query = '';
          this.state = 'query';
        } else if (a === 35) {
          this.url.username = this.base.username;
          this.url.password = this.base.password;
          this.url.host = this.base.host;
          this.url.port = this.base.port;
          this.url.path = this.base.path.slice();
          this.url.query = this.base.query;
          this.url.fragment = '';
          this.state = 'fragment';
        } else if (isSpecial(this.url) && a === 92) {
          this.parseError = true;
          this.state = 'relative slash';
        } else {
          this.url.username = this.base.username;
          this.url.password = this.base.password;
          this.url.host = this.base.host;
          this.url.port = this.base.port;
          this.url.path = this.base.path.slice(0, this.base.path.length - 1);
          this.state = 'path';
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype['parse relative slash'] =
        function parseRelativeSlash(a) {
          if (isSpecial(this.url) && (a === 47 || a === 92)) {
            if (a === 92) {
              this.parseError = true;
            }
            this.state = 'special authority ignore slashes';
          } else if (a === 47) {
            this.state = 'authority';
          } else {
            this.url.username = this.base.username;
            this.url.password = this.base.password;
            this.url.host = this.base.host;
            this.url.port = this.base.port;
            this.state = 'path';
            --this.pointer;
          }
          return true;
        };
      URLStateMachine.prototype['parse special authority slashes'] =
        function parseSpecialAuthoritySlashes(a) {
          if (a === 47 && this.input[this.pointer + 1] === 47) {
            this.state = 'special authority ignore slashes';
            ++this.pointer;
          } else {
            this.parseError = true;
            this.state = 'special authority ignore slashes';
            --this.pointer;
          }
          return true;
        };
      URLStateMachine.prototype['parse special authority ignore slashes'] =
        function parseSpecialAuthorityIgnoreSlashes(a) {
          if (a !== 47 && a !== 92) {
            this.state = 'authority';
            --this.pointer;
          } else {
            this.parseError = true;
          }
          return true;
        };
      URLStateMachine.prototype['parse authority'] = function parseAuthority(
        a,
        C
      ) {
        if (a === 64) {
          this.parseError = true;
          if (this.atFlag) {
            this.buffer = '%40' + this.buffer;
          }
          this.atFlag = true;
          const a = countSymbols(this.buffer);
          for (let C = 0; C < a; ++C) {
            const a = this.buffer.codePointAt(C);
            if (a === 58 && !this.passwordTokenSeenFlag) {
              this.passwordTokenSeenFlag = true;
              continue;
            }
            const q = percentEncodeChar(a, isUserinfoPercentEncode);
            if (this.passwordTokenSeenFlag) {
              this.url.password += q;
            } else {
              this.url.username += q;
            }
          }
          this.buffer = '';
        } else if (
          isNaN(a) ||
          a === 47 ||
          a === 63 ||
          a === 35 ||
          (isSpecial(this.url) && a === 92)
        ) {
          if (this.atFlag && this.buffer === '') {
            this.parseError = true;
            return lt;
          }
          this.pointer -= countSymbols(this.buffer) + 1;
          this.buffer = '';
          this.state = 'host';
        } else {
          this.buffer += C;
        }
        return true;
      };
      URLStateMachine.prototype['parse hostname'] = URLStateMachine.prototype[
        'parse host'
      ] = function parseHostName(a, C) {
        if (this.stateOverride && this.url.scheme === 'file') {
          --this.pointer;
          this.state = 'file host';
        } else if (a === 58 && !this.arrFlag) {
          if (this.buffer === '') {
            this.parseError = true;
            return lt;
          }
          const a = parseHost(this.buffer, isSpecial(this.url));
          if (a === lt) {
            return lt;
          }
          this.url.host = a;
          this.buffer = '';
          this.state = 'port';
          if (this.stateOverride === 'hostname') {
            return false;
          }
        } else if (
          isNaN(a) ||
          a === 47 ||
          a === 63 ||
          a === 35 ||
          (isSpecial(this.url) && a === 92)
        ) {
          --this.pointer;
          if (isSpecial(this.url) && this.buffer === '') {
            this.parseError = true;
            return lt;
          } else if (
            this.stateOverride &&
            this.buffer === '' &&
            (includesCredentials(this.url) || this.url.port !== null)
          ) {
            this.parseError = true;
            return false;
          }
          const a = parseHost(this.buffer, isSpecial(this.url));
          if (a === lt) {
            return lt;
          }
          this.url.host = a;
          this.buffer = '';
          this.state = 'path start';
          if (this.stateOverride) {
            return false;
          }
        } else {
          if (a === 91) {
            this.arrFlag = true;
          } else if (a === 93) {
            this.arrFlag = false;
          }
          this.buffer += C;
        }
        return true;
      };
      URLStateMachine.prototype['parse port'] = function parsePort(a, C) {
        if (isASCIIDigit(a)) {
          this.buffer += C;
        } else if (
          isNaN(a) ||
          a === 47 ||
          a === 63 ||
          a === 35 ||
          (isSpecial(this.url) && a === 92) ||
          this.stateOverride
        ) {
          if (this.buffer !== '') {
            const a = parseInt(this.buffer);
            if (a > Math.pow(2, 16) - 1) {
              this.parseError = true;
              return lt;
            }
            this.url.port = a === defaultPort(this.url.scheme) ? null : a;
            this.buffer = '';
          }
          if (this.stateOverride) {
            return false;
          }
          this.state = 'path start';
          --this.pointer;
        } else {
          this.parseError = true;
          return lt;
        }
        return true;
      };
      const Ar = new Set([47, 92, 63, 35]);
      URLStateMachine.prototype['parse file'] = function parseFile(a) {
        this.url.scheme = 'file';
        if (a === 47 || a === 92) {
          if (a === 92) {
            this.parseError = true;
          }
          this.state = 'file slash';
        } else if (this.base !== null && this.base.scheme === 'file') {
          if (isNaN(a)) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            this.url.query = this.base.query;
          } else if (a === 63) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            this.url.query = '';
            this.state = 'query';
          } else if (a === 35) {
            this.url.host = this.base.host;
            this.url.path = this.base.path.slice();
            this.url.query = this.base.query;
            this.url.fragment = '';
            this.state = 'fragment';
          } else {
            if (
              this.input.length - this.pointer - 1 === 0 ||
              !isWindowsDriveLetterCodePoints(
                a,
                this.input[this.pointer + 1]
              ) ||
              (this.input.length - this.pointer - 1 >= 2 &&
                !Ar.has(this.input[this.pointer + 2]))
            ) {
              this.url.host = this.base.host;
              this.url.path = this.base.path.slice();
              shortenPath(this.url);
            } else {
              this.parseError = true;
            }
            this.state = 'path';
            --this.pointer;
          }
        } else {
          this.state = 'path';
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype['parse file slash'] = function parseFileSlash(
        a
      ) {
        if (a === 47 || a === 92) {
          if (a === 92) {
            this.parseError = true;
          }
          this.state = 'file host';
        } else {
          if (this.base !== null && this.base.scheme === 'file') {
            if (isNormalizedWindowsDriveLetterString(this.base.path[0])) {
              this.url.path.push(this.base.path[0]);
            } else {
              this.url.host = this.base.host;
            }
          }
          this.state = 'path';
          --this.pointer;
        }
        return true;
      };
      URLStateMachine.prototype['parse file host'] = function parseFileHost(
        a,
        C
      ) {
        if (isNaN(a) || a === 47 || a === 92 || a === 63 || a === 35) {
          --this.pointer;
          if (!this.stateOverride && isWindowsDriveLetterString(this.buffer)) {
            this.parseError = true;
            this.state = 'path';
          } else if (this.buffer === '') {
            this.url.host = '';
            if (this.stateOverride) {
              return false;
            }
            this.state = 'path start';
          } else {
            let a = parseHost(this.buffer, isSpecial(this.url));
            if (a === lt) {
              return lt;
            }
            if (a === 'localhost') {
              a = '';
            }
            this.url.host = a;
            if (this.stateOverride) {
              return false;
            }
            this.buffer = '';
            this.state = 'path start';
          }
        } else {
          this.buffer += C;
        }
        return true;
      };
      URLStateMachine.prototype['parse path start'] = function parsePathStart(
        a
      ) {
        if (isSpecial(this.url)) {
          if (a === 92) {
            this.parseError = true;
          }
          this.state = 'path';
          if (a !== 47 && a !== 92) {
            --this.pointer;
          }
        } else if (!this.stateOverride && a === 63) {
          this.url.query = '';
          this.state = 'query';
        } else if (!this.stateOverride && a === 35) {
          this.url.fragment = '';
          this.state = 'fragment';
        } else if (a !== undefined) {
          this.state = 'path';
          if (a !== 47) {
            --this.pointer;
          }
        }
        return true;
      };
      URLStateMachine.prototype['parse path'] = function parsePath(a) {
        if (
          isNaN(a) ||
          a === 47 ||
          (isSpecial(this.url) && a === 92) ||
          (!this.stateOverride && (a === 63 || a === 35))
        ) {
          if (isSpecial(this.url) && a === 92) {
            this.parseError = true;
          }
          if (isDoubleDot(this.buffer)) {
            shortenPath(this.url);
            if (a !== 47 && !(isSpecial(this.url) && a === 92)) {
              this.url.path.push('');
            }
          } else if (
            isSingleDot(this.buffer) &&
            a !== 47 &&
            !(isSpecial(this.url) && a === 92)
          ) {
            this.url.path.push('');
          } else if (!isSingleDot(this.buffer)) {
            if (
              this.url.scheme === 'file' &&
              this.url.path.length === 0 &&
              isWindowsDriveLetterString(this.buffer)
            ) {
              if (this.url.host !== '' && this.url.host !== null) {
                this.parseError = true;
                this.url.host = '';
              }
              this.buffer = this.buffer[0] + ':';
            }
            this.url.path.push(this.buffer);
          }
          this.buffer = '';
          if (
            this.url.scheme === 'file' &&
            (a === undefined || a === 63 || a === 35)
          ) {
            while (this.url.path.length > 1 && this.url.path[0] === '') {
              this.parseError = true;
              this.url.path.shift();
            }
          }
          if (a === 63) {
            this.url.query = '';
            this.state = 'query';
          }
          if (a === 35) {
            this.url.fragment = '';
            this.state = 'fragment';
          }
        } else {
          if (
            a === 37 &&
            (!isASCIIHex(this.input[this.pointer + 1]) ||
              !isASCIIHex(this.input[this.pointer + 2]))
          ) {
            this.parseError = true;
          }
          this.buffer += percentEncodeChar(a, isPathPercentEncode);
        }
        return true;
      };
      URLStateMachine.prototype['parse cannot-be-a-base-URL path'] =
        function parseCannotBeABaseURLPath(a) {
          if (a === 63) {
            this.url.query = '';
            this.state = 'query';
          } else if (a === 35) {
            this.url.fragment = '';
            this.state = 'fragment';
          } else {
            if (!isNaN(a) && a !== 37) {
              this.parseError = true;
            }
            if (
              a === 37 &&
              (!isASCIIHex(this.input[this.pointer + 1]) ||
                !isASCIIHex(this.input[this.pointer + 2]))
            ) {
              this.parseError = true;
            }
            if (!isNaN(a)) {
              this.url.path[0] =
                this.url.path[0] +
                percentEncodeChar(a, isC0ControlPercentEncode);
            }
          }
          return true;
        };
      URLStateMachine.prototype['parse query'] = function parseQuery(a, C) {
        if (isNaN(a) || (!this.stateOverride && a === 35)) {
          if (
            !isSpecial(this.url) ||
            this.url.scheme === 'ws' ||
            this.url.scheme === 'wss'
          ) {
            this.encodingOverride = 'utf-8';
          }
          const C = new Buffer(this.buffer);
          for (let a = 0; a < C.length; ++a) {
            if (
              C[a] < 33 ||
              C[a] > 126 ||
              C[a] === 34 ||
              C[a] === 35 ||
              C[a] === 60 ||
              C[a] === 62
            ) {
              this.url.query += percentEncode(C[a]);
            } else {
              this.url.query += String.fromCodePoint(C[a]);
            }
          }
          this.buffer = '';
          if (a === 35) {
            this.url.fragment = '';
            this.state = 'fragment';
          }
        } else {
          if (
            a === 37 &&
            (!isASCIIHex(this.input[this.pointer + 1]) ||
              !isASCIIHex(this.input[this.pointer + 2]))
          ) {
            this.parseError = true;
          }
          this.buffer += C;
        }
        return true;
      };
      URLStateMachine.prototype['parse fragment'] = function parseFragment(a) {
        if (isNaN(a)) {
        } else if (a === 0) {
          this.parseError = true;
        } else {
          if (
            a === 37 &&
            (!isASCIIHex(this.input[this.pointer + 1]) ||
              !isASCIIHex(this.input[this.pointer + 2]))
          ) {
            this.parseError = true;
          }
          this.url.fragment += percentEncodeChar(a, isC0ControlPercentEncode);
        }
        return true;
      };
      function serializeURL(a, C) {
        let q = a.scheme + ':';
        if (a.host !== null) {
          q += '//';
          if (a.username !== '' || a.password !== '') {
            q += a.username;
            if (a.password !== '') {
              q += ':' + a.password;
            }
            q += '@';
          }
          q += serializeHost(a.host);
          if (a.port !== null) {
            q += ':' + a.port;
          }
        } else if (a.host === null && a.scheme === 'file') {
          q += '//';
        }
        if (a.cannotBeABaseURL) {
          q += a.path[0];
        } else {
          for (const C of a.path) {
            q += '/' + C;
          }
        }
        if (a.query !== null) {
          q += '?' + a.query;
        }
        if (!C && a.fragment !== null) {
          q += '#' + a.fragment;
        }
        return q;
      }
      function serializeOrigin(a) {
        let C = a.scheme + '://';
        C += serializeHost(a.host);
        if (a.port !== null) {
          C += ':' + a.port;
        }
        return C;
      }
      a.exports.serializeURL = serializeURL;
      a.exports.serializeURLOrigin = function (C) {
        switch (C.scheme) {
          case 'blob':
            try {
              return a.exports.serializeURLOrigin(
                a.exports.parseURL(C.path[0])
              );
            } catch (a) {
              return 'null';
            }
          case 'ftp':
          case 'gopher':
          case 'http':
          case 'https':
          case 'ws':
          case 'wss':
            return serializeOrigin({
              scheme: C.scheme,
              host: C.host,
              port: C.port
            });
          case 'file':
            return 'file://';
          default:
            return 'null';
        }
      };
      a.exports.basicURLParse = function (a, C) {
        if (C === undefined) {
          C = {};
        }
        const q = new URLStateMachine(
          a,
          C.baseURL,
          C.encodingOverride,
          C.url,
          C.stateOverride
        );
        if (q.failure) {
          return 'failure';
        }
        return q.url;
      };
      a.exports.setTheUsername = function (a, C) {
        a.username = '';
        const q = re.ucs2.decode(C);
        for (let C = 0; C < q.length; ++C) {
          a.username += percentEncodeChar(q[C], isUserinfoPercentEncode);
        }
      };
      a.exports.setThePassword = function (a, C) {
        a.password = '';
        const q = re.ucs2.decode(C);
        for (let C = 0; C < q.length; ++C) {
          a.password += percentEncodeChar(q[C], isUserinfoPercentEncode);
        }
      };
      a.exports.serializeHost = serializeHost;
      a.exports.cannotHaveAUsernamePasswordPort =
        cannotHaveAUsernamePasswordPort;
      a.exports.serializeInteger = function (a) {
        return String(a);
      };
      a.exports.parseURL = function (C, q) {
        if (q === undefined) {
          q = {};
        }
        return a.exports.basicURLParse(C, {
          baseURL: q.baseURL,
          encodingOverride: q.encodingOverride
        });
      };
    },
    724: (a) => {
      'use strict';
      a.exports.mixin = function mixin(a, C) {
        const q = Object.getOwnPropertyNames(C);
        for (let re = 0; re < q.length; ++re) {
          Object.defineProperty(
            a,
            q[re],
            Object.getOwnPropertyDescriptor(C, q[re])
          );
        }
      };
      a.exports.wrapperSymbol = Symbol('wrapper');
      a.exports.implSymbol = Symbol('impl');
      a.exports.wrapperForImpl = function (C) {
        return C[a.exports.wrapperSymbol];
      };
      a.exports.implForWrapper = function (C) {
        return C[a.exports.implSymbol];
      };
    },
    666: (a) => {
      a.exports = wrappy;
      function wrappy(a, C) {
        if (a && C) return wrappy(a)(C);
        if (typeof a !== 'function')
          throw new TypeError('need wrapper function');
        Object.keys(a).forEach(function (C) {
          wrapper[C] = a[C];
        });
        return wrapper;
        function wrapper() {
          var C = new Array(arguments.length);
          for (var q = 0; q < C.length; q++) {
            C[q] = arguments[q];
          }
          var re = a.apply(this, C);
          var ae = C[C.length - 1];
          if (typeof re === 'function' && re !== ae) {
            Object.keys(ae).forEach(function (a) {
              re[a] = ae[a];
            });
          }
          return re;
        }
      }
    },
    3026: (module) => {
      module.exports = eval('require')('canvas');
    },
    2707: (module) => {
      module.exports = eval('require')('encoding');
    },
    6459: (module) => {
      module.exports = eval('require')('fs-extra');
    },
    9491: (a) => {
      'use strict';
      a.exports = require('assert');
    },
    852: (a) => {
      'use strict';
      a.exports = require('async_hooks');
    },
    4300: (a) => {
      'use strict';
      a.exports = require('buffer');
    },
    6206: (a) => {
      'use strict';
      a.exports = require('console');
    },
    6113: (a) => {
      'use strict';
      a.exports = require('crypto');
    },
    7643: (a) => {
      'use strict';
      a.exports = require('diagnostics_channel');
    },
    2361: (a) => {
      'use strict';
      a.exports = require('events');
    },
    7147: (a) => {
      'use strict';
      a.exports = require('fs');
    },
    3685: (a) => {
      'use strict';
      a.exports = require('http');
    },
    5158: (a) => {
      'use strict';
      a.exports = require('http2');
    },
    5687: (a) => {
      'use strict';
      a.exports = require('https');
    },
    1808: (a) => {
      'use strict';
      a.exports = require('net');
    },
    5673: (a) => {
      'use strict';
      a.exports = require('node:events');
    },
    4492: (a) => {
      'use strict';
      a.exports = require('node:stream');
    },
    7261: (a) => {
      'use strict';
      a.exports = require('node:util');
    },
    2037: (a) => {
      'use strict';
      a.exports = require('os');
    },
    1017: (a) => {
      'use strict';
      a.exports = require('path');
    },
    4074: (a) => {
      'use strict';
      a.exports = require('perf_hooks');
    },
    5477: (a) => {
      'use strict';
      a.exports = require('punycode');
    },
    3477: (a) => {
      'use strict';
      a.exports = require('querystring');
    },
    2781: (a) => {
      'use strict';
      a.exports = require('stream');
    },
    5356: (a) => {
      'use strict';
      a.exports = require('stream/web');
    },
    1576: (a) => {
      'use strict';
      a.exports = require('string_decoder');
    },
    4404: (a) => {
      'use strict';
      a.exports = require('tls');
    },
    7310: (a) => {
      'use strict';
      a.exports = require('url');
    },
    3837: (a) => {
      'use strict';
      a.exports = require('util');
    },
    9830: (a) => {
      'use strict';
      a.exports = require('util/types');
    },
    1267: (a) => {
      'use strict';
      a.exports = require('worker_threads');
    },
    9796: (a) => {
      'use strict';
      a.exports = require('zlib');
    },
    5992: (a, C, q) => {
      'use strict';
      const re = q(4492).Writable;
      const ae = q(7261).inherits;
      const Ue = q(3304);
      const lt = q(4215);
      const Pt = q(5412);
      const Wt = 45;
      const Ar = Buffer.from('-');
      const Er = Buffer.from('\r\n');
      const EMPTY_FN = function () {};
      function Dicer(a) {
        if (!(this instanceof Dicer)) {
          return new Dicer(a);
        }
        re.call(this, a);
        if (!a || (!a.headerFirst && typeof a.boundary !== 'string')) {
          throw new TypeError('Boundary required');
        }
        if (typeof a.boundary === 'string') {
          this.setBoundary(a.boundary);
        } else {
          this._bparser = undefined;
        }
        this._headerFirst = a.headerFirst;
        this._dashes = 0;
        this._parts = 0;
        this._finished = false;
        this._realFinish = false;
        this._isPreamble = true;
        this._justMatched = false;
        this._firstWrite = true;
        this._inHeader = true;
        this._part = undefined;
        this._cb = undefined;
        this._ignoreData = false;
        this._partOpts = { highWaterMark: a.partHwm };
        this._pause = false;
        const C = this;
        this._hparser = new Pt(a);
        this._hparser.on('header', function (a) {
          C._inHeader = false;
          C._part.emit('header', a);
        });
      }
      ae(Dicer, re);
      Dicer.prototype.emit = function (a) {
        if (a === 'finish' && !this._realFinish) {
          if (!this._finished) {
            const a = this;
            process.nextTick(function () {
              a.emit('error', new Error('Unexpected end of multipart data'));
              if (a._part && !a._ignoreData) {
                const C = a._isPreamble ? 'Preamble' : 'Part';
                a._part.emit(
                  'error',
                  new Error(
                    C +
                      ' terminated early due to unexpected end of multipart data'
                  )
                );
                a._part.push(null);
                process.nextTick(function () {
                  a._realFinish = true;
                  a.emit('finish');
                  a._realFinish = false;
                });
                return;
              }
              a._realFinish = true;
              a.emit('finish');
              a._realFinish = false;
            });
          }
        } else {
          re.prototype.emit.apply(this, arguments);
        }
      };
      Dicer.prototype._write = function (a, C, q) {
        if (!this._hparser && !this._bparser) {
          return q();
        }
        if (this._headerFirst && this._isPreamble) {
          if (!this._part) {
            this._part = new lt(this._partOpts);
            if (this.listenerCount('preamble') !== 0) {
              this.emit('preamble', this._part);
            } else {
              this._ignore();
            }
          }
          const C = this._hparser.push(a);
          if (!this._inHeader && C !== undefined && C < a.length) {
            a = a.slice(C);
          } else {
            return q();
          }
        }
        if (this._firstWrite) {
          this._bparser.push(Er);
          this._firstWrite = false;
        }
        this._bparser.push(a);
        if (this._pause) {
          this._cb = q;
        } else {
          q();
        }
      };
      Dicer.prototype.reset = function () {
        this._part = undefined;
        this._bparser = undefined;
        this._hparser = undefined;
      };
      Dicer.prototype.setBoundary = function (a) {
        const C = this;
        this._bparser = new Ue('\r\n--' + a);
        this._bparser.on('info', function (a, q, re, ae) {
          C._oninfo(a, q, re, ae);
        });
      };
      Dicer.prototype._ignore = function () {
        if (this._part && !this._ignoreData) {
          this._ignoreData = true;
          this._part.on('error', EMPTY_FN);
          this._part.resume();
        }
      };
      Dicer.prototype._oninfo = function (a, C, q, re) {
        let ae;
        const Ue = this;
        let Pt = 0;
        let Er;
        let Ir = true;
        if (!this._part && this._justMatched && C) {
          while (this._dashes < 2 && q + Pt < re) {
            if (C[q + Pt] === Wt) {
              ++Pt;
              ++this._dashes;
            } else {
              if (this._dashes) {
                ae = Ar;
              }
              this._dashes = 0;
              break;
            }
          }
          if (this._dashes === 2) {
            if (q + Pt < re && this.listenerCount('trailer') !== 0) {
              this.emit('trailer', C.slice(q + Pt, re));
            }
            this.reset();
            this._finished = true;
            if (Ue._parts === 0) {
              Ue._realFinish = true;
              Ue.emit('finish');
              Ue._realFinish = false;
            }
          }
          if (this._dashes) {
            return;
          }
        }
        if (this._justMatched) {
          this._justMatched = false;
        }
        if (!this._part) {
          this._part = new lt(this._partOpts);
          this._part._read = function (a) {
            Ue._unpause();
          };
          if (this._isPreamble && this.listenerCount('preamble') !== 0) {
            this.emit('preamble', this._part);
          } else if (
            this._isPreamble !== true &&
            this.listenerCount('part') !== 0
          ) {
            this.emit('part', this._part);
          } else {
            this._ignore();
          }
          if (!this._isPreamble) {
            this._inHeader = true;
          }
        }
        if (C && q < re && !this._ignoreData) {
          if (this._isPreamble || !this._inHeader) {
            if (ae) {
              Ir = this._part.push(ae);
            }
            Ir = this._part.push(C.slice(q, re));
            if (!Ir) {
              this._pause = true;
            }
          } else if (!this._isPreamble && this._inHeader) {
            if (ae) {
              this._hparser.push(ae);
            }
            Er = this._hparser.push(C.slice(q, re));
            if (!this._inHeader && Er !== undefined && Er < re) {
              this._oninfo(false, C, q + Er, re);
            }
          }
        }
        if (a) {
          this._hparser.reset();
          if (this._isPreamble) {
            this._isPreamble = false;
          } else {
            if (q !== re) {
              ++this._parts;
              this._part.on('end', function () {
                if (--Ue._parts === 0) {
                  if (Ue._finished) {
                    Ue._realFinish = true;
                    Ue.emit('finish');
                    Ue._realFinish = false;
                  } else {
                    Ue._unpause();
                  }
                }
              });
            }
          }
          this._part.push(null);
          this._part = undefined;
          this._ignoreData = false;
          this._justMatched = true;
          this._dashes = 0;
        }
      };
      Dicer.prototype._unpause = function () {
        if (!this._pause) {
          return;
        }
        this._pause = false;
        if (this._cb) {
          const a = this._cb;
          this._cb = undefined;
          a();
        }
      };
      a.exports = Dicer;
    },
    5412: (a, C, q) => {
      'use strict';
      const re = q(5673).EventEmitter;
      const ae = q(7261).inherits;
      const Ue = q(2160);
      const lt = q(3304);
      const Pt = Buffer.from('\r\n\r\n');
      const Wt = /\r\n/g;
      const Ar = /^([^:]+):[ \t]?([\x00-\xFF]+)?$/;
      function HeaderParser(a) {
        re.call(this);
        a = a || {};
        const C = this;
        this.nread = 0;
        this.maxed = false;
        this.npairs = 0;
        this.maxHeaderPairs = Ue(a, 'maxHeaderPairs', 2e3);
        this.maxHeaderSize = Ue(a, 'maxHeaderSize', 80 * 1024);
        this.buffer = '';
        this.header = {};
        this.finished = false;
        this.ss = new lt(Pt);
        this.ss.on('info', function (a, q, re, ae) {
          if (q && !C.maxed) {
            if (C.nread + ae - re >= C.maxHeaderSize) {
              ae = C.maxHeaderSize - C.nread + re;
              C.nread = C.maxHeaderSize;
              C.maxed = true;
            } else {
              C.nread += ae - re;
            }
            C.buffer += q.toString('binary', re, ae);
          }
          if (a) {
            C._finish();
          }
        });
      }
      ae(HeaderParser, re);
      HeaderParser.prototype.push = function (a) {
        const C = this.ss.push(a);
        if (this.finished) {
          return C;
        }
      };
      HeaderParser.prototype.reset = function () {
        this.finished = false;
        this.buffer = '';
        this.header = {};
        this.ss.reset();
      };
      HeaderParser.prototype._finish = function () {
        if (this.buffer) {
          this._parseHeader();
        }
        this.ss.matches = this.ss.maxMatches;
        const a = this.header;
        this.header = {};
        this.buffer = '';
        this.finished = true;
        this.nread = this.npairs = 0;
        this.maxed = false;
        this.emit('header', a);
      };
      HeaderParser.prototype._parseHeader = function () {
        if (this.npairs === this.maxHeaderPairs) {
          return;
        }
        const a = this.buffer.split(Wt);
        const C = a.length;
        let q, re;
        for (var ae = 0; ae < C; ++ae) {
          if (a[ae].length === 0) {
            continue;
          }
          if (a[ae][0] === '\t' || a[ae][0] === ' ') {
            if (re) {
              this.header[re][this.header[re].length - 1] += a[ae];
              continue;
            }
          }
          const C = a[ae].indexOf(':');
          if (C === -1 || C === 0) {
            return;
          }
          q = Ar.exec(a[ae]);
          re = q[1].toLowerCase();
          this.header[re] = this.header[re] || [];
          this.header[re].push(q[2] || '');
          if (++this.npairs === this.maxHeaderPairs) {
            break;
          }
        }
      };
      a.exports = HeaderParser;
    },
    4215: (a, C, q) => {
      'use strict';
      const re = q(7261).inherits;
      const ae = q(4492).Readable;
      function PartStream(a) {
        ae.call(this, a);
      }
      re(PartStream, ae);
      PartStream.prototype._read = function (a) {};
      a.exports = PartStream;
    },
    3304: (a, C, q) => {
      'use strict';
      const re = q(5673).EventEmitter;
      const ae = q(7261).inherits;
      function SBMH(a) {
        if (typeof a === 'string') {
          a = Buffer.from(a);
        }
        if (!Buffer.isBuffer(a)) {
          throw new TypeError('The needle has to be a String or a Buffer.');
        }
        const C = a.length;
        if (C === 0) {
          throw new Error('The needle cannot be an empty String/Buffer.');
        }
        if (C > 256) {
          throw new Error('The needle cannot have a length bigger than 256.');
        }
        this.maxMatches = Infinity;
        this.matches = 0;
        this._occ = new Array(256).fill(C);
        this._lookbehind_size = 0;
        this._needle = a;
        this._bufpos = 0;
        this._lookbehind = Buffer.alloc(C);
        for (var q = 0; q < C - 1; ++q) {
          this._occ[a[q]] = C - 1 - q;
        }
      }
      ae(SBMH, re);
      SBMH.prototype.reset = function () {
        this._lookbehind_size = 0;
        this.matches = 0;
        this._bufpos = 0;
      };
      SBMH.prototype.push = function (a, C) {
        if (!Buffer.isBuffer(a)) {
          a = Buffer.from(a, 'binary');
        }
        const q = a.length;
        this._bufpos = C || 0;
        let re;
        while (re !== q && this.matches < this.maxMatches) {
          re = this._sbmh_feed(a);
        }
        return re;
      };
      SBMH.prototype._sbmh_feed = function (a) {
        const C = a.length;
        const q = this._needle;
        const re = q.length;
        const ae = q[re - 1];
        let Ue = -this._lookbehind_size;
        let lt;
        if (Ue < 0) {
          while (Ue < 0 && Ue <= C - re) {
            lt = this._sbmh_lookup_char(a, Ue + re - 1);
            if (lt === ae && this._sbmh_memcmp(a, Ue, re - 1)) {
              this._lookbehind_size = 0;
              ++this.matches;
              this.emit('info', true);
              return (this._bufpos = Ue + re);
            }
            Ue += this._occ[lt];
          }
          if (Ue < 0) {
            while (Ue < 0 && !this._sbmh_memcmp(a, Ue, C - Ue)) {
              ++Ue;
            }
          }
          if (Ue >= 0) {
            this.emit(
              'info',
              false,
              this._lookbehind,
              0,
              this._lookbehind_size
            );
            this._lookbehind_size = 0;
          } else {
            const q = this._lookbehind_size + Ue;
            if (q > 0) {
              this.emit('info', false, this._lookbehind, 0, q);
            }
            this._lookbehind.copy(
              this._lookbehind,
              0,
              q,
              this._lookbehind_size - q
            );
            this._lookbehind_size -= q;
            a.copy(this._lookbehind, this._lookbehind_size);
            this._lookbehind_size += C;
            this._bufpos = C;
            return C;
          }
        }
        Ue += (Ue >= 0) * this._bufpos;
        if (a.indexOf(q, Ue) !== -1) {
          Ue = a.indexOf(q, Ue);
          ++this.matches;
          if (Ue > 0) {
            this.emit('info', true, a, this._bufpos, Ue);
          } else {
            this.emit('info', true);
          }
          return (this._bufpos = Ue + re);
        } else {
          Ue = C - re;
        }
        while (
          Ue < C &&
          (a[Ue] !== q[0] ||
            Buffer.compare(
              a.subarray(Ue, Ue + C - Ue),
              q.subarray(0, C - Ue)
            ) !== 0)
        ) {
          ++Ue;
        }
        if (Ue < C) {
          a.copy(this._lookbehind, 0, Ue, Ue + (C - Ue));
          this._lookbehind_size = C - Ue;
        }
        if (Ue > 0) {
          this.emit('info', false, a, this._bufpos, Ue < C ? Ue : C);
        }
        this._bufpos = C;
        return C;
      };
      SBMH.prototype._sbmh_lookup_char = function (a, C) {
        return C < 0 ? this._lookbehind[this._lookbehind_size + C] : a[C];
      };
      SBMH.prototype._sbmh_memcmp = function (a, C, q) {
        for (var re = 0; re < q; ++re) {
          if (this._sbmh_lookup_char(a, C + re) !== this._needle[re]) {
            return false;
          }
        }
        return true;
      };
      a.exports = SBMH;
    },
    6954: (a, C, q) => {
      'use strict';
      const re = q(4492).Writable;
      const { inherits: ae } = q(7261);
      const Ue = q(5992);
      const lt = q(6311);
      const Pt = q(6173);
      const Wt = q(3576);
      function Busboy(a) {
        if (!(this instanceof Busboy)) {
          return new Busboy(a);
        }
        if (typeof a !== 'object') {
          throw new TypeError('Busboy expected an options-Object.');
        }
        if (typeof a.headers !== 'object') {
          throw new TypeError(
            'Busboy expected an options-Object with headers-attribute.'
          );
        }
        if (typeof a.headers['content-type'] !== 'string') {
          throw new TypeError('Missing Content-Type-header.');
        }
        const { headers: C, ...q } = a;
        this.opts = { autoDestroy: false, ...q };
        re.call(this, this.opts);
        this._done = false;
        this._parser = this.getParserByHeaders(C);
        this._finished = false;
      }
      ae(Busboy, re);
      Busboy.prototype.emit = function (a) {
        if (a === 'finish') {
          if (!this._done) {
            this._parser?.end();
            return;
          } else if (this._finished) {
            return;
          }
          this._finished = true;
        }
        re.prototype.emit.apply(this, arguments);
      };
      Busboy.prototype.getParserByHeaders = function (a) {
        const C = Wt(a['content-type']);
        const q = {
          defCharset: this.opts.defCharset,
          fileHwm: this.opts.fileHwm,
          headers: a,
          highWaterMark: this.opts.highWaterMark,
          isPartAFile: this.opts.isPartAFile,
          limits: this.opts.limits,
          parsedConType: C,
          preservePath: this.opts.preservePath
        };
        if (lt.detect.test(C[0])) {
          return new lt(this, q);
        }
        if (Pt.detect.test(C[0])) {
          return new Pt(this, q);
        }
        throw new Error('Unsupported Content-Type.');
      };
      Busboy.prototype._write = function (a, C, q) {
        this._parser.write(a, q);
      };
      a.exports = Busboy;
      a.exports['default'] = Busboy;
      a.exports.Busboy = Busboy;
      a.exports.Dicer = Ue;
    },
    6311: (a, C, q) => {
      'use strict';
      const { Readable: re } = q(4492);
      const { inherits: ae } = q(7261);
      const Ue = q(5992);
      const lt = q(3576);
      const Pt = q(884);
      const Wt = q(6504);
      const Ar = q(2160);
      const Er = /^boundary$/i;
      const Ir = /^form-data$/i;
      const Br = /^charset$/i;
      const Qr = /^filename$/i;
      const kr = /^name$/i;
      Multipart.detect = /^multipart\/form-data/i;
      function Multipart(a, C) {
        let q;
        let re;
        const ae = this;
        let Dr;
        const Nr = C.limits;
        const Lr =
          C.isPartAFile ||
          ((a, C, q) => C === 'application/octet-stream' || q !== undefined);
        const Fr = C.parsedConType || [];
        const Mr = C.defCharset || 'utf8';
        const Pr = C.preservePath;
        const Or = { highWaterMark: C.fileHwm };
        for (q = 0, re = Fr.length; q < re; ++q) {
          if (Array.isArray(Fr[q]) && Er.test(Fr[q][0])) {
            Dr = Fr[q][1];
            break;
          }
        }
        function checkFinished() {
          if (zr === 0 && Xr && !a._done) {
            Xr = false;
            ae.end();
          }
        }
        if (typeof Dr !== 'string') {
          throw new Error('Multipart: Boundary not found');
        }
        const xr = Ar(Nr, 'fieldSize', 1 * 1024 * 1024);
        const Ur = Ar(Nr, 'fileSize', Infinity);
        const Gr = Ar(Nr, 'files', Infinity);
        const Hr = Ar(Nr, 'fields', Infinity);
        const Vr = Ar(Nr, 'parts', Infinity);
        const Wr = Ar(Nr, 'headerPairs', 2e3);
        const Yr = Ar(Nr, 'headerSize', 80 * 1024);
        let jr = 0;
        let Jr = 0;
        let zr = 0;
        let $r;
        let Kr;
        let Xr = false;
        this._needDrain = false;
        this._pause = false;
        this._cb = undefined;
        this._nparts = 0;
        this._boy = a;
        const Zr = {
          boundary: Dr,
          maxHeaderPairs: Wr,
          maxHeaderSize: Yr,
          partHwm: Or.highWaterMark,
          highWaterMark: C.highWaterMark
        };
        this.parser = new Ue(Zr);
        this.parser
          .on('drain', function () {
            ae._needDrain = false;
            if (ae._cb && !ae._pause) {
              const a = ae._cb;
              ae._cb = undefined;
              a();
            }
          })
          .on('part', function onPart(C) {
            if (++ae._nparts > Vr) {
              ae.parser.removeListener('part', onPart);
              ae.parser.on('part', skipPart);
              a.hitPartsLimit = true;
              a.emit('partsLimit');
              return skipPart(C);
            }
            if (Kr) {
              const a = Kr;
              a.emit('end');
              a.removeAllListeners('end');
            }
            C.on('header', function (Ue) {
              let Ar;
              let Er;
              let Dr;
              let Nr;
              let Fr;
              let Vr;
              let Wr = 0;
              if (Ue['content-type']) {
                Dr = lt(Ue['content-type'][0]);
                if (Dr[0]) {
                  Ar = Dr[0].toLowerCase();
                  for (q = 0, re = Dr.length; q < re; ++q) {
                    if (Br.test(Dr[q][0])) {
                      Nr = Dr[q][1].toLowerCase();
                      break;
                    }
                  }
                }
              }
              if (Ar === undefined) {
                Ar = 'text/plain';
              }
              if (Nr === undefined) {
                Nr = Mr;
              }
              if (Ue['content-disposition']) {
                Dr = lt(Ue['content-disposition'][0]);
                if (!Ir.test(Dr[0])) {
                  return skipPart(C);
                }
                for (q = 0, re = Dr.length; q < re; ++q) {
                  if (kr.test(Dr[q][0])) {
                    Er = Dr[q][1];
                  } else if (Qr.test(Dr[q][0])) {
                    Vr = Dr[q][1];
                    if (!Pr) {
                      Vr = Wt(Vr);
                    }
                  }
                }
              } else {
                return skipPart(C);
              }
              if (Ue['content-transfer-encoding']) {
                Fr = Ue['content-transfer-encoding'][0].toLowerCase();
              } else {
                Fr = '7bit';
              }
              let Yr, Xr;
              if (Lr(Er, Ar, Vr)) {
                if (jr === Gr) {
                  if (!a.hitFilesLimit) {
                    a.hitFilesLimit = true;
                    a.emit('filesLimit');
                  }
                  return skipPart(C);
                }
                ++jr;
                if (a.listenerCount('file') === 0) {
                  ae.parser._ignore();
                  return;
                }
                ++zr;
                const q = new FileStream(Or);
                $r = q;
                q.on('end', function () {
                  --zr;
                  ae._pause = false;
                  checkFinished();
                  if (ae._cb && !ae._needDrain) {
                    const a = ae._cb;
                    ae._cb = undefined;
                    a();
                  }
                });
                q._read = function (a) {
                  if (!ae._pause) {
                    return;
                  }
                  ae._pause = false;
                  if (ae._cb && !ae._needDrain) {
                    const a = ae._cb;
                    ae._cb = undefined;
                    a();
                  }
                };
                a.emit('file', Er, q, Vr, Fr, Ar);
                Yr = function (a) {
                  if ((Wr += a.length) > Ur) {
                    const re = Ur - Wr + a.length;
                    if (re > 0) {
                      q.push(a.slice(0, re));
                    }
                    q.truncated = true;
                    q.bytesRead = Ur;
                    C.removeAllListeners('data');
                    q.emit('limit');
                    return;
                  } else if (!q.push(a)) {
                    ae._pause = true;
                  }
                  q.bytesRead = Wr;
                };
                Xr = function () {
                  $r = undefined;
                  q.push(null);
                };
              } else {
                if (Jr === Hr) {
                  if (!a.hitFieldsLimit) {
                    a.hitFieldsLimit = true;
                    a.emit('fieldsLimit');
                  }
                  return skipPart(C);
                }
                ++Jr;
                ++zr;
                let q = '';
                let re = false;
                Kr = C;
                Yr = function (a) {
                  if ((Wr += a.length) > xr) {
                    const ae = xr - (Wr - a.length);
                    q += a.toString('binary', 0, ae);
                    re = true;
                    C.removeAllListeners('data');
                  } else {
                    q += a.toString('binary');
                  }
                };
                Xr = function () {
                  Kr = undefined;
                  if (q.length) {
                    q = Pt(q, 'binary', Nr);
                  }
                  a.emit('field', Er, q, false, re, Fr, Ar);
                  --zr;
                  checkFinished();
                };
              }
              C._readableState.sync = false;
              C.on('data', Yr);
              C.on('end', Xr);
            }).on('error', function (a) {
              if ($r) {
                $r.emit('error', a);
              }
            });
          })
          .on('error', function (C) {
            a.emit('error', C);
          })
          .on('finish', function () {
            Xr = true;
            checkFinished();
          });
      }
      Multipart.prototype.write = function (a, C) {
        const q = this.parser.write(a);
        if (q && !this._pause) {
          C();
        } else {
          this._needDrain = !q;
          this._cb = C;
        }
      };
      Multipart.prototype.end = function () {
        const a = this;
        if (a.parser.writable) {
          a.parser.end();
        } else if (!a._boy._done) {
          process.nextTick(function () {
            a._boy._done = true;
            a._boy.emit('finish');
          });
        }
      };
      function skipPart(a) {
        a.resume();
      }
      function FileStream(a) {
        re.call(this, a);
        this.bytesRead = 0;
        this.truncated = false;
      }
      ae(FileStream, re);
      FileStream.prototype._read = function (a) {};
      a.exports = Multipart;
    },
    6173: (a, C, q) => {
      'use strict';
      const re = q(9687);
      const ae = q(884);
      const Ue = q(2160);
      const lt = /^charset$/i;
      UrlEncoded.detect = /^application\/x-www-form-urlencoded/i;
      function UrlEncoded(a, C) {
        const q = C.limits;
        const ae = C.parsedConType;
        this.boy = a;
        this.fieldSizeLimit = Ue(q, 'fieldSize', 1 * 1024 * 1024);
        this.fieldNameSizeLimit = Ue(q, 'fieldNameSize', 100);
        this.fieldsLimit = Ue(q, 'fields', Infinity);
        let Pt;
        for (var Wt = 0, Ar = ae.length; Wt < Ar; ++Wt) {
          if (Array.isArray(ae[Wt]) && lt.test(ae[Wt][0])) {
            Pt = ae[Wt][1].toLowerCase();
            break;
          }
        }
        if (Pt === undefined) {
          Pt = C.defCharset || 'utf8';
        }
        this.decoder = new re();
        this.charset = Pt;
        this._fields = 0;
        this._state = 'key';
        this._checkingBytes = true;
        this._bytesKey = 0;
        this._bytesVal = 0;
        this._key = '';
        this._val = '';
        this._keyTrunc = false;
        this._valTrunc = false;
        this._hitLimit = false;
      }
      UrlEncoded.prototype.write = function (a, C) {
        if (this._fields === this.fieldsLimit) {
          if (!this.boy.hitFieldsLimit) {
            this.boy.hitFieldsLimit = true;
            this.boy.emit('fieldsLimit');
          }
          return C();
        }
        let q;
        let re;
        let Ue;
        let lt = 0;
        const Pt = a.length;
        while (lt < Pt) {
          if (this._state === 'key') {
            q = re = undefined;
            for (Ue = lt; Ue < Pt; ++Ue) {
              if (!this._checkingBytes) {
                ++lt;
              }
              if (a[Ue] === 61) {
                q = Ue;
                break;
              } else if (a[Ue] === 38) {
                re = Ue;
                break;
              }
              if (
                this._checkingBytes &&
                this._bytesKey === this.fieldNameSizeLimit
              ) {
                this._hitLimit = true;
                break;
              } else if (this._checkingBytes) {
                ++this._bytesKey;
              }
            }
            if (q !== undefined) {
              if (q > lt) {
                this._key += this.decoder.write(a.toString('binary', lt, q));
              }
              this._state = 'val';
              this._hitLimit = false;
              this._checkingBytes = true;
              this._val = '';
              this._bytesVal = 0;
              this._valTrunc = false;
              this.decoder.reset();
              lt = q + 1;
            } else if (re !== undefined) {
              ++this._fields;
              let q;
              const Ue = this._keyTrunc;
              if (re > lt) {
                q = this._key += this.decoder.write(
                  a.toString('binary', lt, re)
                );
              } else {
                q = this._key;
              }
              this._hitLimit = false;
              this._checkingBytes = true;
              this._key = '';
              this._bytesKey = 0;
              this._keyTrunc = false;
              this.decoder.reset();
              if (q.length) {
                this.boy.emit(
                  'field',
                  ae(q, 'binary', this.charset),
                  '',
                  Ue,
                  false
                );
              }
              lt = re + 1;
              if (this._fields === this.fieldsLimit) {
                return C();
              }
            } else if (this._hitLimit) {
              if (Ue > lt) {
                this._key += this.decoder.write(a.toString('binary', lt, Ue));
              }
              lt = Ue;
              if (
                (this._bytesKey = this._key.length) === this.fieldNameSizeLimit
              ) {
                this._checkingBytes = false;
                this._keyTrunc = true;
              }
            } else {
              if (lt < Pt) {
                this._key += this.decoder.write(a.toString('binary', lt));
              }
              lt = Pt;
            }
          } else {
            re = undefined;
            for (Ue = lt; Ue < Pt; ++Ue) {
              if (!this._checkingBytes) {
                ++lt;
              }
              if (a[Ue] === 38) {
                re = Ue;
                break;
              }
              if (
                this._checkingBytes &&
                this._bytesVal === this.fieldSizeLimit
              ) {
                this._hitLimit = true;
                break;
              } else if (this._checkingBytes) {
                ++this._bytesVal;
              }
            }
            if (re !== undefined) {
              ++this._fields;
              if (re > lt) {
                this._val += this.decoder.write(a.toString('binary', lt, re));
              }
              this.boy.emit(
                'field',
                ae(this._key, 'binary', this.charset),
                ae(this._val, 'binary', this.charset),
                this._keyTrunc,
                this._valTrunc
              );
              this._state = 'key';
              this._hitLimit = false;
              this._checkingBytes = true;
              this._key = '';
              this._bytesKey = 0;
              this._keyTrunc = false;
              this.decoder.reset();
              lt = re + 1;
              if (this._fields === this.fieldsLimit) {
                return C();
              }
            } else if (this._hitLimit) {
              if (Ue > lt) {
                this._val += this.decoder.write(a.toString('binary', lt, Ue));
              }
              lt = Ue;
              if (
                (this._val === '' && this.fieldSizeLimit === 0) ||
                (this._bytesVal = this._val.length) === this.fieldSizeLimit
              ) {
                this._checkingBytes = false;
                this._valTrunc = true;
              }
            } else {
              if (lt < Pt) {
                this._val += this.decoder.write(a.toString('binary', lt));
              }
              lt = Pt;
            }
          }
        }
        C();
      };
      UrlEncoded.prototype.end = function () {
        if (this.boy._done) {
          return;
        }
        if (this._state === 'key' && this._key.length > 0) {
          this.boy.emit(
            'field',
            ae(this._key, 'binary', this.charset),
            '',
            this._keyTrunc,
            false
          );
        } else if (this._state === 'val') {
          this.boy.emit(
            'field',
            ae(this._key, 'binary', this.charset),
            ae(this._val, 'binary', this.charset),
            this._keyTrunc,
            this._valTrunc
          );
        }
        this.boy._done = true;
        this.boy.emit('finish');
      };
      a.exports = UrlEncoded;
    },
    9687: (a) => {
      'use strict';
      const C = /\+/g;
      const q = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0
      ];
      function Decoder() {
        this.buffer = undefined;
      }
      Decoder.prototype.write = function (a) {
        a = a.replace(C, ' ');
        let re = '';
        let ae = 0;
        let Ue = 0;
        const lt = a.length;
        for (; ae < lt; ++ae) {
          if (this.buffer !== undefined) {
            if (!q[a.charCodeAt(ae)]) {
              re += '%' + this.buffer;
              this.buffer = undefined;
              --ae;
            } else {
              this.buffer += a[ae];
              ++Ue;
              if (this.buffer.length === 2) {
                re += String.fromCharCode(parseInt(this.buffer, 16));
                this.buffer = undefined;
              }
            }
          } else if (a[ae] === '%') {
            if (ae > Ue) {
              re += a.substring(Ue, ae);
              Ue = ae;
            }
            this.buffer = '';
            ++Ue;
          }
        }
        if (Ue < lt && this.buffer === undefined) {
          re += a.substring(Ue);
        }
        return re;
      };
      Decoder.prototype.reset = function () {
        this.buffer = undefined;
      };
      a.exports = Decoder;
    },
    6504: (a) => {
      'use strict';
      a.exports = function basename(a) {
        if (typeof a !== 'string') {
          return '';
        }
        for (var C = a.length - 1; C >= 0; --C) {
          switch (a.charCodeAt(C)) {
            case 47:
            case 92:
              a = a.slice(C + 1);
              return a === '..' || a === '.' ? '' : a;
          }
        }
        return a === '..' || a === '.' ? '' : a;
      };
    },
    884: function (a) {
      'use strict';
      const C = new TextDecoder('utf-8');
      const q = new Map([
        ['utf-8', C],
        ['utf8', C]
      ]);
      function getDecoder(a) {
        let C;
        while (true) {
          switch (a) {
            case 'utf-8':
            case 'utf8':
              return re.utf8;
            case 'latin1':
            case 'ascii':
            case 'us-ascii':
            case 'iso-8859-1':
            case 'iso8859-1':
            case 'iso88591':
            case 'iso_8859-1':
            case 'windows-1252':
            case 'iso_8859-1:1987':
            case 'cp1252':
            case 'x-cp1252':
              return re.latin1;
            case 'utf16le':
            case 'utf-16le':
            case 'ucs2':
            case 'ucs-2':
              return re.utf16le;
            case 'base64':
              return re.base64;
            default:
              if (C === undefined) {
                C = true;
                a = a.toLowerCase();
                continue;
              }
              return re.other.bind(a);
          }
        }
      }
      const re = {
        utf8: (a, C) => {
          if (a.length === 0) {
            return '';
          }
          if (typeof a === 'string') {
            a = Buffer.from(a, C);
          }
          return a.utf8Slice(0, a.length);
        },
        latin1: (a, C) => {
          if (a.length === 0) {
            return '';
          }
          if (typeof a === 'string') {
            return a;
          }
          return a.latin1Slice(0, a.length);
        },
        utf16le: (a, C) => {
          if (a.length === 0) {
            return '';
          }
          if (typeof a === 'string') {
            a = Buffer.from(a, C);
          }
          return a.ucs2Slice(0, a.length);
        },
        base64: (a, C) => {
          if (a.length === 0) {
            return '';
          }
          if (typeof a === 'string') {
            a = Buffer.from(a, C);
          }
          return a.base64Slice(0, a.length);
        },
        other: (a, C) => {
          if (a.length === 0) {
            return '';
          }
          if (typeof a === 'string') {
            a = Buffer.from(a, C);
          }
          if (q.has(this.toString())) {
            try {
              return q.get(this).decode(a);
            } catch {}
          }
          return typeof a === 'string' ? a : a.toString();
        }
      };
      function decodeText(a, C, q) {
        if (a) {
          return getDecoder(q)(a, C);
        }
        return a;
      }
      a.exports = decodeText;
    },
    2160: (a) => {
      'use strict';
      a.exports = function getLimit(a, C, q) {
        if (!a || a[C] === undefined || a[C] === null) {
          return q;
        }
        if (typeof a[C] !== 'number' || isNaN(a[C])) {
          throw new TypeError('Limit ' + C + ' is not a valid number');
        }
        return a[C];
      };
    },
    3576: (a, C, q) => {
      'use strict';
      const re = q(884);
      const ae = /%[a-fA-F0-9][a-fA-F0-9]/g;
      const Ue = {
        '%00': '\0',
        '%01': '',
        '%02': '',
        '%03': '',
        '%04': '',
        '%05': '',
        '%06': '',
        '%07': '',
        '%08': '\b',
        '%09': '\t',
        '%0a': '\n',
        '%0A': '\n',
        '%0b': '\v',
        '%0B': '\v',
        '%0c': '\f',
        '%0C': '\f',
        '%0d': '\r',
        '%0D': '\r',
        '%0e': '',
        '%0E': '',
        '%0f': '',
        '%0F': '',
        '%10': '',
        '%11': '',
        '%12': '',
        '%13': '',
        '%14': '',
        '%15': '',
        '%16': '',
        '%17': '',
        '%18': '',
        '%19': '',
        '%1a': '',
        '%1A': '',
        '%1b': '',
        '%1B': '',
        '%1c': '',
        '%1C': '',
        '%1d': '',
        '%1D': '',
        '%1e': '',
        '%1E': '',
        '%1f': '',
        '%1F': '',
        '%20': ' ',
        '%21': '!',
        '%22': '"',
        '%23': '#',
        '%24': '$',
        '%25': '%',
        '%26': '&',
        '%27': "'",
        '%28': '(',
        '%29': ')',
        '%2a': '*',
        '%2A': '*',
        '%2b': '+',
        '%2B': '+',
        '%2c': ',',
        '%2C': ',',
        '%2d': '-',
        '%2D': '-',
        '%2e': '.',
        '%2E': '.',
        '%2f': '/',
        '%2F': '/',
        '%30': '0',
        '%31': '1',
        '%32': '2',
        '%33': '3',
        '%34': '4',
        '%35': '5',
        '%36': '6',
        '%37': '7',
        '%38': '8',
        '%39': '9',
        '%3a': ':',
        '%3A': ':',
        '%3b': ';',
        '%3B': ';',
        '%3c': '<',
        '%3C': '<',
        '%3d': '=',
        '%3D': '=',
        '%3e': '>',
        '%3E': '>',
        '%3f': '?',
        '%3F': '?',
        '%40': '@',
        '%41': 'A',
        '%42': 'B',
        '%43': 'C',
        '%44': 'D',
        '%45': 'E',
        '%46': 'F',
        '%47': 'G',
        '%48': 'H',
        '%49': 'I',
        '%4a': 'J',
        '%4A': 'J',
        '%4b': 'K',
        '%4B': 'K',
        '%4c': 'L',
        '%4C': 'L',
        '%4d': 'M',
        '%4D': 'M',
        '%4e': 'N',
        '%4E': 'N',
        '%4f': 'O',
        '%4F': 'O',
        '%50': 'P',
        '%51': 'Q',
        '%52': 'R',
        '%53': 'S',
        '%54': 'T',
        '%55': 'U',
        '%56': 'V',
        '%57': 'W',
        '%58': 'X',
        '%59': 'Y',
        '%5a': 'Z',
        '%5A': 'Z',
        '%5b': '[',
        '%5B': '[',
        '%5c': '\\',
        '%5C': '\\',
        '%5d': ']',
        '%5D': ']',
        '%5e': '^',
        '%5E': '^',
        '%5f': '_',
        '%5F': '_',
        '%60': '`',
        '%61': 'a',
        '%62': 'b',
        '%63': 'c',
        '%64': 'd',
        '%65': 'e',
        '%66': 'f',
        '%67': 'g',
        '%68': 'h',
        '%69': 'i',
        '%6a': 'j',
        '%6A': 'j',
        '%6b': 'k',
        '%6B': 'k',
        '%6c': 'l',
        '%6C': 'l',
        '%6d': 'm',
        '%6D': 'm',
        '%6e': 'n',
        '%6E': 'n',
        '%6f': 'o',
        '%6F': 'o',
        '%70': 'p',
        '%71': 'q',
        '%72': 'r',
        '%73': 's',
        '%74': 't',
        '%75': 'u',
        '%76': 'v',
        '%77': 'w',
        '%78': 'x',
        '%79': 'y',
        '%7a': 'z',
        '%7A': 'z',
        '%7b': '{',
        '%7B': '{',
        '%7c': '|',
        '%7C': '|',
        '%7d': '}',
        '%7D': '}',
        '%7e': '~',
        '%7E': '~',
        '%7f': '',
        '%7F': '',
        '%80': '',
        '%81': '',
        '%82': '',
        '%83': '',
        '%84': '',
        '%85': '',
        '%86': '',
        '%87': '',
        '%88': '',
        '%89': '',
        '%8a': '',
        '%8A': '',
        '%8b': '',
        '%8B': '',
        '%8c': '',
        '%8C': '',
        '%8d': '',
        '%8D': '',
        '%8e': '',
        '%8E': '',
        '%8f': '',
        '%8F': '',
        '%90': '',
        '%91': '',
        '%92': '',
        '%93': '',
        '%94': '',
        '%95': '',
        '%96': '',
        '%97': '',
        '%98': '',
        '%99': '',
        '%9a': '',
        '%9A': '',
        '%9b': '',
        '%9B': '',
        '%9c': '',
        '%9C': '',
        '%9d': '',
        '%9D': '',
        '%9e': '',
        '%9E': '',
        '%9f': '',
        '%9F': '',
        '%a0': ' ',
        '%A0': ' ',
        '%a1': '¡',
        '%A1': '¡',
        '%a2': '¢',
        '%A2': '¢',
        '%a3': '£',
        '%A3': '£',
        '%a4': '¤',
        '%A4': '¤',
        '%a5': '¥',
        '%A5': '¥',
        '%a6': '¦',
        '%A6': '¦',
        '%a7': '§',
        '%A7': '§',
        '%a8': '¨',
        '%A8': '¨',
        '%a9': '©',
        '%A9': '©',
        '%aa': 'ª',
        '%Aa': 'ª',
        '%aA': 'ª',
        '%AA': 'ª',
        '%ab': '«',
        '%Ab': '«',
        '%aB': '«',
        '%AB': '«',
        '%ac': '¬',
        '%Ac': '¬',
        '%aC': '¬',
        '%AC': '¬',
        '%ad': '­',
        '%Ad': '­',
        '%aD': '­',
        '%AD': '­',
        '%ae': '®',
        '%Ae': '®',
        '%aE': '®',
        '%AE': '®',
        '%af': '¯',
        '%Af': '¯',
        '%aF': '¯',
        '%AF': '¯',
        '%b0': '°',
        '%B0': '°',
        '%b1': '±',
        '%B1': '±',
        '%b2': '²',
        '%B2': '²',
        '%b3': '³',
        '%B3': '³',
        '%b4': '´',
        '%B4': '´',
        '%b5': 'µ',
        '%B5': 'µ',
        '%b6': '¶',
        '%B6': '¶',
        '%b7': '·',
        '%B7': '·',
        '%b8': '¸',
        '%B8': '¸',
        '%b9': '¹',
        '%B9': '¹',
        '%ba': 'º',
        '%Ba': 'º',
        '%bA': 'º',
        '%BA': 'º',
        '%bb': '»',
        '%Bb': '»',
        '%bB': '»',
        '%BB': '»',
        '%bc': '¼',
        '%Bc': '¼',
        '%bC': '¼',
        '%BC': '¼',
        '%bd': '½',
        '%Bd': '½',
        '%bD': '½',
        '%BD': '½',
        '%be': '¾',
        '%Be': '¾',
        '%bE': '¾',
        '%BE': '¾',
        '%bf': '¿',
        '%Bf': '¿',
        '%bF': '¿',
        '%BF': '¿',
        '%c0': 'À',
        '%C0': 'À',
        '%c1': 'Á',
        '%C1': 'Á',
        '%c2': 'Â',
        '%C2': 'Â',
        '%c3': 'Ã',
        '%C3': 'Ã',
        '%c4': 'Ä',
        '%C4': 'Ä',
        '%c5': 'Å',
        '%C5': 'Å',
        '%c6': 'Æ',
        '%C6': 'Æ',
        '%c7': 'Ç',
        '%C7': 'Ç',
        '%c8': 'È',
        '%C8': 'È',
        '%c9': 'É',
        '%C9': 'É',
        '%ca': 'Ê',
        '%Ca': 'Ê',
        '%cA': 'Ê',
        '%CA': 'Ê',
        '%cb': 'Ë',
        '%Cb': 'Ë',
        '%cB': 'Ë',
        '%CB': 'Ë',
        '%cc': 'Ì',
        '%Cc': 'Ì',
        '%cC': 'Ì',
        '%CC': 'Ì',
        '%cd': 'Í',
        '%Cd': 'Í',
        '%cD': 'Í',
        '%CD': 'Í',
        '%ce': 'Î',
        '%Ce': 'Î',
        '%cE': 'Î',
        '%CE': 'Î',
        '%cf': 'Ï',
        '%Cf': 'Ï',
        '%cF': 'Ï',
        '%CF': 'Ï',
        '%d0': 'Ð',
        '%D0': 'Ð',
        '%d1': 'Ñ',
        '%D1': 'Ñ',
        '%d2': 'Ò',
        '%D2': 'Ò',
        '%d3': 'Ó',
        '%D3': 'Ó',
        '%d4': 'Ô',
        '%D4': 'Ô',
        '%d5': 'Õ',
        '%D5': 'Õ',
        '%d6': 'Ö',
        '%D6': 'Ö',
        '%d7': '×',
        '%D7': '×',
        '%d8': 'Ø',
        '%D8': 'Ø',
        '%d9': 'Ù',
        '%D9': 'Ù',
        '%da': 'Ú',
        '%Da': 'Ú',
        '%dA': 'Ú',
        '%DA': 'Ú',
        '%db': 'Û',
        '%Db': 'Û',
        '%dB': 'Û',
        '%DB': 'Û',
        '%dc': 'Ü',
        '%Dc': 'Ü',
        '%dC': 'Ü',
        '%DC': 'Ü',
        '%dd': 'Ý',
        '%Dd': 'Ý',
        '%dD': 'Ý',
        '%DD': 'Ý',
        '%de': 'Þ',
        '%De': 'Þ',
        '%dE': 'Þ',
        '%DE': 'Þ',
        '%df': 'ß',
        '%Df': 'ß',
        '%dF': 'ß',
        '%DF': 'ß',
        '%e0': 'à',
        '%E0': 'à',
        '%e1': 'á',
        '%E1': 'á',
        '%e2': 'â',
        '%E2': 'â',
        '%e3': 'ã',
        '%E3': 'ã',
        '%e4': 'ä',
        '%E4': 'ä',
        '%e5': 'å',
        '%E5': 'å',
        '%e6': 'æ',
        '%E6': 'æ',
        '%e7': 'ç',
        '%E7': 'ç',
        '%e8': 'è',
        '%E8': 'è',
        '%e9': 'é',
        '%E9': 'é',
        '%ea': 'ê',
        '%Ea': 'ê',
        '%eA': 'ê',
        '%EA': 'ê',
        '%eb': 'ë',
        '%Eb': 'ë',
        '%eB': 'ë',
        '%EB': 'ë',
        '%ec': 'ì',
        '%Ec': 'ì',
        '%eC': 'ì',
        '%EC': 'ì',
        '%ed': 'í',
        '%Ed': 'í',
        '%eD': 'í',
        '%ED': 'í',
        '%ee': 'î',
        '%Ee': 'î',
        '%eE': 'î',
        '%EE': 'î',
        '%ef': 'ï',
        '%Ef': 'ï',
        '%eF': 'ï',
        '%EF': 'ï',
        '%f0': 'ð',
        '%F0': 'ð',
        '%f1': 'ñ',
        '%F1': 'ñ',
        '%f2': 'ò',
        '%F2': 'ò',
        '%f3': 'ó',
        '%F3': 'ó',
        '%f4': 'ô',
        '%F4': 'ô',
        '%f5': 'õ',
        '%F5': 'õ',
        '%f6': 'ö',
        '%F6': 'ö',
        '%f7': '÷',
        '%F7': '÷',
        '%f8': 'ø',
        '%F8': 'ø',
        '%f9': 'ù',
        '%F9': 'ù',
        '%fa': 'ú',
        '%Fa': 'ú',
        '%fA': 'ú',
        '%FA': 'ú',
        '%fb': 'û',
        '%Fb': 'û',
        '%fB': 'û',
        '%FB': 'û',
        '%fc': 'ü',
        '%Fc': 'ü',
        '%fC': 'ü',
        '%FC': 'ü',
        '%fd': 'ý',
        '%Fd': 'ý',
        '%fD': 'ý',
        '%FD': 'ý',
        '%fe': 'þ',
        '%Fe': 'þ',
        '%fE': 'þ',
        '%FE': 'þ',
        '%ff': 'ÿ',
        '%Ff': 'ÿ',
        '%fF': 'ÿ',
        '%FF': 'ÿ'
      };
      function encodedReplacer(a) {
        return Ue[a];
      }
      const lt = 0;
      const Pt = 1;
      const Wt = 2;
      const Ar = 3;
      function parseParams(a) {
        const C = [];
        let q = lt;
        let Ue = '';
        let Er = false;
        let Ir = false;
        let Br = 0;
        let Qr = '';
        const kr = a.length;
        for (var Dr = 0; Dr < kr; ++Dr) {
          const kr = a[Dr];
          if (kr === '\\' && Er) {
            if (Ir) {
              Ir = false;
            } else {
              Ir = true;
              continue;
            }
          } else if (kr === '"') {
            if (!Ir) {
              if (Er) {
                Er = false;
                q = lt;
              } else {
                Er = true;
              }
              continue;
            } else {
              Ir = false;
            }
          } else {
            if (Ir && Er) {
              Qr += '\\';
            }
            Ir = false;
            if ((q === Wt || q === Ar) && kr === "'") {
              if (q === Wt) {
                q = Ar;
                Ue = Qr.substring(1);
              } else {
                q = Pt;
              }
              Qr = '';
              continue;
            } else if (q === lt && (kr === '*' || kr === '=') && C.length) {
              q = kr === '*' ? Wt : Pt;
              C[Br] = [Qr, undefined];
              Qr = '';
              continue;
            } else if (!Er && kr === ';') {
              q = lt;
              if (Ue) {
                if (Qr.length) {
                  Qr = re(Qr.replace(ae, encodedReplacer), 'binary', Ue);
                }
                Ue = '';
              } else if (Qr.length) {
                Qr = re(Qr, 'binary', 'utf8');
              }
              if (C[Br] === undefined) {
                C[Br] = Qr;
              } else {
                C[Br][1] = Qr;
              }
              Qr = '';
              ++Br;
              continue;
            } else if (!Er && (kr === ' ' || kr === '\t')) {
              continue;
            }
          }
          Qr += kr;
        }
        if (Ue && Qr.length) {
          Qr = re(Qr.replace(ae, encodedReplacer), 'binary', Ue);
        } else if (Qr) {
          Qr = re(Qr, 'binary', 'utf8');
        }
        if (C[Br] === undefined) {
          if (Qr) {
            C[Br] = Qr;
          }
        } else {
          C[Br][1] = Qr;
        }
        return C;
      }
      a.exports = parseParams;
    },
    5244: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(8524);
      var Ue = q(3198);
      var lt = q(1498);
      var Pt = q(7728);
      var Wt = q(6386);
      var Ar = q(4299);
      function resolveCollection(a, C, q, re, ae, Ue) {
        const lt =
          q.type === 'block-map'
            ? Pt.resolveBlockMap(a, C, q, re, Ue)
            : q.type === 'block-seq'
              ? Wt.resolveBlockSeq(a, C, q, re, Ue)
              : Ar.resolveFlowCollection(a, C, q, re, Ue);
        const Er = lt.constructor;
        if (ae === '!' || ae === Er.tagName) {
          lt.tag = Er.tagName;
          return lt;
        }
        if (ae) lt.tag = ae;
        return lt;
      }
      function composeCollection(a, C, q, Pt, Wt) {
        const Ar = Pt.tag;
        const Er = !Ar
          ? null
          : C.directives.tagName(Ar.source, (a) =>
              Wt(Ar, 'TAG_RESOLVE_FAILED', a)
            );
        if (q.type === 'block-seq') {
          const { anchor: a, newlineAfterProp: C } = Pt;
          const q = a && Ar ? (a.offset > Ar.offset ? a : Ar) : a ?? Ar;
          if (q && (!C || C.offset < q.offset)) {
            const a = 'Missing newline after block sequence props';
            Wt(q, 'MISSING_CHAR', a);
          }
        }
        const Ir =
          q.type === 'block-map'
            ? 'map'
            : q.type === 'block-seq'
              ? 'seq'
              : q.start.source === '{'
                ? 'map'
                : 'seq';
        if (
          !Ar ||
          !Er ||
          Er === '!' ||
          (Er === Ue.YAMLMap.tagName && Ir === 'map') ||
          (Er === lt.YAMLSeq.tagName && Ir === 'seq')
        ) {
          return resolveCollection(a, C, q, Wt, Er);
        }
        let Br = C.schema.tags.find((a) => a.tag === Er && a.collection === Ir);
        if (!Br) {
          const re = C.schema.knownTags[Er];
          if (re && re.collection === Ir) {
            C.schema.tags.push(Object.assign({}, re, { default: false }));
            Br = re;
          } else {
            if (re?.collection) {
              Wt(
                Ar,
                'BAD_COLLECTION_TYPE',
                `${re.tag} used for ${Ir} collection, but expects ${re.collection}`,
                true
              );
            } else {
              Wt(Ar, 'TAG_RESOLVE_FAILED', `Unresolved tag: ${Er}`, true);
            }
            return resolveCollection(a, C, q, Wt, Er);
          }
        }
        const Qr = resolveCollection(a, C, q, Wt, Er, Br);
        const kr =
          Br.resolve?.(Qr, (a) => Wt(Ar, 'TAG_RESOLVE_FAILED', a), C.options) ??
          Qr;
        const Dr = re.isNode(kr) ? kr : new ae.Scalar(kr);
        Dr.range = Qr.range;
        Dr.tag = Er;
        if (Br?.format) Dr.format = Br.format;
        return Dr;
      }
      C.composeCollection = composeCollection;
    },
    5094: (a, C, q) => {
      'use strict';
      var re = q(8637);
      var ae = q(2008);
      var Ue = q(16);
      var lt = q(6501);
      function composeDoc(
        a,
        C,
        { offset: q, start: Pt, value: Wt, end: Ar },
        Er
      ) {
        const Ir = Object.assign({ _directives: C }, a);
        const Br = new re.Document(undefined, Ir);
        const Qr = {
          atRoot: true,
          directives: Br.directives,
          options: Br.options,
          schema: Br.schema
        };
        const kr = lt.resolveProps(Pt, {
          indicator: 'doc-start',
          next: Wt ?? Ar?.[0],
          offset: q,
          onError: Er,
          parentIndent: 0,
          startOnNewline: true
        });
        if (kr.found) {
          Br.directives.docStart = true;
          if (
            Wt &&
            (Wt.type === 'block-map' || Wt.type === 'block-seq') &&
            !kr.hasNewline
          )
            Er(
              kr.end,
              'MISSING_CHAR',
              'Block collection cannot start on same line with directives-end marker'
            );
        }
        Br.contents = Wt
          ? ae.composeNode(Qr, Wt, kr, Er)
          : ae.composeEmptyNode(Qr, kr.end, Pt, null, kr, Er);
        const Dr = Br.contents.range[2];
        const Nr = Ue.resolveEnd(Ar, Dr, false, Er);
        if (Nr.comment) Br.comment = Nr.comment;
        Br.range = [q, Dr, Nr.offset];
        return Br;
      }
      C.composeDoc = composeDoc;
    },
    2008: (a, C, q) => {
      'use strict';
      var re = q(8248);
      var ae = q(5244);
      var Ue = q(4895);
      var lt = q(16);
      var Pt = q(6196);
      const Wt = {
        composeNode: composeNode,
        composeEmptyNode: composeEmptyNode
      };
      function composeNode(a, C, q, re) {
        const { spaceBefore: lt, comment: Pt, anchor: Ar, tag: Er } = q;
        let Ir;
        let Br = true;
        switch (C.type) {
          case 'alias':
            Ir = composeAlias(a, C, re);
            if (Ar || Er)
              re(
                C,
                'ALIAS_PROPS',
                'An alias node must not specify any properties'
              );
            break;
          case 'scalar':
          case 'single-quoted-scalar':
          case 'double-quoted-scalar':
          case 'block-scalar':
            Ir = Ue.composeScalar(a, C, Er, re);
            if (Ar) Ir.anchor = Ar.source.substring(1);
            break;
          case 'block-map':
          case 'block-seq':
          case 'flow-collection':
            Ir = ae.composeCollection(Wt, a, C, q, re);
            if (Ar) Ir.anchor = Ar.source.substring(1);
            break;
          default: {
            const ae =
              C.type === 'error'
                ? C.message
                : `Unsupported token (type: ${C.type})`;
            re(C, 'UNEXPECTED_TOKEN', ae);
            Ir = composeEmptyNode(a, C.offset, undefined, null, q, re);
            Br = false;
          }
        }
        if (Ar && Ir.anchor === '')
          re(Ar, 'BAD_ALIAS', 'Anchor cannot be an empty string');
        if (lt) Ir.spaceBefore = true;
        if (Pt) {
          if (C.type === 'scalar' && C.source === '') Ir.comment = Pt;
          else Ir.commentBefore = Pt;
        }
        if (a.options.keepSourceTokens && Br) Ir.srcToken = C;
        return Ir;
      }
      function composeEmptyNode(
        a,
        C,
        q,
        re,
        { spaceBefore: ae, comment: lt, anchor: Wt, tag: Ar, end: Er },
        Ir
      ) {
        const Br = {
          type: 'scalar',
          offset: Pt.emptyScalarPosition(C, q, re),
          indent: -1,
          source: ''
        };
        const Qr = Ue.composeScalar(a, Br, Ar, Ir);
        if (Wt) {
          Qr.anchor = Wt.source.substring(1);
          if (Qr.anchor === '')
            Ir(Wt, 'BAD_ALIAS', 'Anchor cannot be an empty string');
        }
        if (ae) Qr.spaceBefore = true;
        if (lt) {
          Qr.comment = lt;
          Qr.range[2] = Er;
        }
        return Qr;
      }
      function composeAlias(
        { options: a },
        { offset: C, source: q, end: ae },
        Ue
      ) {
        const Pt = new re.Alias(q.substring(1));
        if (Pt.source === '')
          Ue(C, 'BAD_ALIAS', 'Alias cannot be an empty string');
        if (Pt.source.endsWith(':'))
          Ue(
            C + q.length - 1,
            'BAD_ALIAS',
            'Alias ending in : is ambiguous',
            true
          );
        const Wt = C + q.length;
        const Ar = lt.resolveEnd(ae, Wt, a.strict, Ue);
        Pt.range = [C, Wt, Ar.offset];
        if (Ar.comment) Pt.comment = Ar.comment;
        return Pt;
      }
      C.composeEmptyNode = composeEmptyNode;
      C.composeNode = composeNode;
    },
    4895: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(8524);
      var Ue = q(2510);
      var lt = q(3405);
      function composeScalar(a, C, q, Pt) {
        const {
          value: Wt,
          type: Ar,
          comment: Er,
          range: Ir
        } = C.type === 'block-scalar'
          ? Ue.resolveBlockScalar(a, C, Pt)
          : lt.resolveFlowScalar(C, a.options.strict, Pt);
        const Br = q
          ? a.directives.tagName(q.source, (a) =>
              Pt(q, 'TAG_RESOLVE_FAILED', a)
            )
          : null;
        const Qr =
          q && Br
            ? findScalarTagByName(a.schema, Wt, Br, q, Pt)
            : C.type === 'scalar'
              ? findScalarTagByTest(a, Wt, C, Pt)
              : a.schema[re.SCALAR];
        let kr;
        try {
          const Ue = Qr.resolve(
            Wt,
            (a) => Pt(q ?? C, 'TAG_RESOLVE_FAILED', a),
            a.options
          );
          kr = re.isScalar(Ue) ? Ue : new ae.Scalar(Ue);
        } catch (a) {
          const re = a instanceof Error ? a.message : String(a);
          Pt(q ?? C, 'TAG_RESOLVE_FAILED', re);
          kr = new ae.Scalar(Wt);
        }
        kr.range = Ir;
        kr.source = Wt;
        if (Ar) kr.type = Ar;
        if (Br) kr.tag = Br;
        if (Qr.format) kr.format = Qr.format;
        if (Er) kr.comment = Er;
        return kr;
      }
      function findScalarTagByName(a, C, q, ae, Ue) {
        if (q === '!') return a[re.SCALAR];
        const lt = [];
        for (const C of a.tags) {
          if (!C.collection && C.tag === q) {
            if (C.default && C.test) lt.push(C);
            else return C;
          }
        }
        for (const a of lt) if (a.test?.test(C)) return a;
        const Pt = a.knownTags[q];
        if (Pt && !Pt.collection) {
          a.tags.push(
            Object.assign({}, Pt, { default: false, test: undefined })
          );
          return Pt;
        }
        Ue(
          ae,
          'TAG_RESOLVE_FAILED',
          `Unresolved tag: ${q}`,
          q !== 'tag:yaml.org,2002:str'
        );
        return a[re.SCALAR];
      }
      function findScalarTagByTest({ directives: a, schema: C }, q, ae, Ue) {
        const lt =
          C.tags.find((a) => a.default && a.test?.test(q)) || C[re.SCALAR];
        if (C.compat) {
          const Pt =
            C.compat.find((a) => a.default && a.test?.test(q)) ?? C[re.SCALAR];
          if (lt.tag !== Pt.tag) {
            const C = a.tagString(lt.tag);
            const q = a.tagString(Pt.tag);
            const re = `Value may be parsed as either ${C} or ${q}`;
            Ue(ae, 'TAG_RESOLVE_FAILED', re, true);
          }
        }
        return lt;
      }
      C.composeScalar = composeScalar;
    },
    2247: (a, C, q) => {
      'use strict';
      var re = q(713);
      var ae = q(8637);
      var Ue = q(9896);
      var lt = q(175);
      var Pt = q(5094);
      var Wt = q(16);
      function getErrorPos(a) {
        if (typeof a === 'number') return [a, a + 1];
        if (Array.isArray(a)) return a.length === 2 ? a : [a[0], a[1]];
        const { offset: C, source: q } = a;
        return [C, C + (typeof q === 'string' ? q.length : 1)];
      }
      function parsePrelude(a) {
        let C = '';
        let q = false;
        let re = false;
        for (let ae = 0; ae < a.length; ++ae) {
          const Ue = a[ae];
          switch (Ue[0]) {
            case '#':
              C +=
                (C === '' ? '' : re ? '\n\n' : '\n') + (Ue.substring(1) || ' ');
              q = true;
              re = false;
              break;
            case '%':
              if (a[ae + 1]?.[0] !== '#') ae += 1;
              q = false;
              break;
            default:
              if (!q) re = true;
              q = false;
          }
        }
        return { comment: C, afterEmptyLine: re };
      }
      class Composer {
        constructor(a = {}) {
          this.doc = null;
          this.atDirectives = false;
          this.prelude = [];
          this.errors = [];
          this.warnings = [];
          this.onError = (a, C, q, re) => {
            const ae = getErrorPos(a);
            if (re) this.warnings.push(new Ue.YAMLWarning(ae, C, q));
            else this.errors.push(new Ue.YAMLParseError(ae, C, q));
          };
          this.directives = new re.Directives({ version: a.version || '1.2' });
          this.options = a;
        }
        decorate(a, C) {
          const { comment: q, afterEmptyLine: re } = parsePrelude(this.prelude);
          if (q) {
            const ae = a.contents;
            if (C) {
              a.comment = a.comment ? `${a.comment}\n${q}` : q;
            } else if (re || a.directives.docStart || !ae) {
              a.commentBefore = q;
            } else if (lt.isCollection(ae) && !ae.flow && ae.items.length > 0) {
              let a = ae.items[0];
              if (lt.isPair(a)) a = a.key;
              const C = a.commentBefore;
              a.commentBefore = C ? `${q}\n${C}` : q;
            } else {
              const a = ae.commentBefore;
              ae.commentBefore = a ? `${q}\n${a}` : q;
            }
          }
          if (C) {
            Array.prototype.push.apply(a.errors, this.errors);
            Array.prototype.push.apply(a.warnings, this.warnings);
          } else {
            a.errors = this.errors;
            a.warnings = this.warnings;
          }
          this.prelude = [];
          this.errors = [];
          this.warnings = [];
        }
        streamInfo() {
          return {
            comment: parsePrelude(this.prelude).comment,
            directives: this.directives,
            errors: this.errors,
            warnings: this.warnings
          };
        }
        *compose(a, C = false, q = -1) {
          for (const C of a) yield* this.next(C);
          yield* this.end(C, q);
        }
        *next(a) {
          if (process.env.LOG_STREAM) console.dir(a, { depth: null });
          switch (a.type) {
            case 'directive':
              this.directives.add(a.source, (C, q, re) => {
                const ae = getErrorPos(a);
                ae[0] += C;
                this.onError(ae, 'BAD_DIRECTIVE', q, re);
              });
              this.prelude.push(a.source);
              this.atDirectives = true;
              break;
            case 'document': {
              const C = Pt.composeDoc(
                this.options,
                this.directives,
                a,
                this.onError
              );
              if (this.atDirectives && !C.directives.docStart)
                this.onError(
                  a,
                  'MISSING_CHAR',
                  'Missing directives-end/doc-start indicator line'
                );
              this.decorate(C, false);
              if (this.doc) yield this.doc;
              this.doc = C;
              this.atDirectives = false;
              break;
            }
            case 'byte-order-mark':
            case 'space':
              break;
            case 'comment':
            case 'newline':
              this.prelude.push(a.source);
              break;
            case 'error': {
              const C = a.source
                ? `${a.message}: ${JSON.stringify(a.source)}`
                : a.message;
              const q = new Ue.YAMLParseError(
                getErrorPos(a),
                'UNEXPECTED_TOKEN',
                C
              );
              if (this.atDirectives || !this.doc) this.errors.push(q);
              else this.doc.errors.push(q);
              break;
            }
            case 'doc-end': {
              if (!this.doc) {
                const C = 'Unexpected doc-end without preceding document';
                this.errors.push(
                  new Ue.YAMLParseError(getErrorPos(a), 'UNEXPECTED_TOKEN', C)
                );
                break;
              }
              this.doc.directives.docEnd = true;
              const C = Wt.resolveEnd(
                a.end,
                a.offset + a.source.length,
                this.doc.options.strict,
                this.onError
              );
              this.decorate(this.doc, true);
              if (C.comment) {
                const a = this.doc.comment;
                this.doc.comment = a ? `${a}\n${C.comment}` : C.comment;
              }
              this.doc.range[2] = C.offset;
              break;
            }
            default:
              this.errors.push(
                new Ue.YAMLParseError(
                  getErrorPos(a),
                  'UNEXPECTED_TOKEN',
                  `Unsupported token ${a.type}`
                )
              );
          }
        }
        *end(a = false, C = -1) {
          if (this.doc) {
            this.decorate(this.doc, true);
            yield this.doc;
            this.doc = null;
          } else if (a) {
            const a = Object.assign(
              { _directives: this.directives },
              this.options
            );
            const q = new ae.Document(undefined, a);
            if (this.atDirectives)
              this.onError(
                C,
                'MISSING_CHAR',
                'Missing directives-end indicator line'
              );
            q.range = [0, C, C];
            this.decorate(q, false);
            yield q;
          }
        }
      }
      C.Composer = Composer;
    },
    7728: (a, C, q) => {
      'use strict';
      var re = q(764);
      var ae = q(3198);
      var Ue = q(6501);
      var lt = q(7494);
      var Pt = q(6615);
      var Wt = q(4672);
      const Ar = 'All mapping items must start at the same column';
      function resolveBlockMap(
        { composeNode: a, composeEmptyNode: C },
        q,
        Er,
        Ir,
        Br
      ) {
        const Qr = Br?.nodeClass ?? ae.YAMLMap;
        const kr = new Qr(q.schema);
        if (q.atRoot) q.atRoot = false;
        let Dr = Er.offset;
        let Nr = null;
        for (const ae of Er.items) {
          const { start: Br, key: Qr, sep: Lr, value: Fr } = ae;
          const Mr = Ue.resolveProps(Br, {
            indicator: 'explicit-key-ind',
            next: Qr ?? Lr?.[0],
            offset: Dr,
            onError: Ir,
            parentIndent: Er.indent,
            startOnNewline: true
          });
          const Pr = !Mr.found;
          if (Pr) {
            if (Qr) {
              if (Qr.type === 'block-seq')
                Ir(
                  Dr,
                  'BLOCK_AS_IMPLICIT_KEY',
                  'A block sequence may not be used as an implicit map key'
                );
              else if ('indent' in Qr && Qr.indent !== Er.indent)
                Ir(Dr, 'BAD_INDENT', Ar);
            }
            if (!Mr.anchor && !Mr.tag && !Lr) {
              Nr = Mr.end;
              if (Mr.comment) {
                if (kr.comment) kr.comment += '\n' + Mr.comment;
                else kr.comment = Mr.comment;
              }
              continue;
            }
            if (Mr.newlineAfterProp || lt.containsNewline(Qr)) {
              Ir(
                Qr ?? Br[Br.length - 1],
                'MULTILINE_IMPLICIT_KEY',
                'Implicit keys need to be on a single line'
              );
            }
          } else if (Mr.found?.indent !== Er.indent) {
            Ir(Dr, 'BAD_INDENT', Ar);
          }
          const Or = Mr.end;
          const xr = Qr ? a(q, Qr, Mr, Ir) : C(q, Or, Br, null, Mr, Ir);
          if (q.schema.compat) Pt.flowIndentCheck(Er.indent, Qr, Ir);
          if (Wt.mapIncludes(q, kr.items, xr))
            Ir(Or, 'DUPLICATE_KEY', 'Map keys must be unique');
          const Ur = Ue.resolveProps(Lr ?? [], {
            indicator: 'map-value-ind',
            next: Fr,
            offset: xr.range[2],
            onError: Ir,
            parentIndent: Er.indent,
            startOnNewline: !Qr || Qr.type === 'block-scalar'
          });
          Dr = Ur.end;
          if (Ur.found) {
            if (Pr) {
              if (Fr?.type === 'block-map' && !Ur.hasNewline)
                Ir(
                  Dr,
                  'BLOCK_AS_IMPLICIT_KEY',
                  'Nested mappings are not allowed in compact mappings'
                );
              if (q.options.strict && Mr.start < Ur.found.offset - 1024)
                Ir(
                  xr.range,
                  'KEY_OVER_1024_CHARS',
                  'The : indicator must be at most 1024 chars after the start of an implicit block mapping key'
                );
            }
            const Ue = Fr ? a(q, Fr, Ur, Ir) : C(q, Dr, Lr, null, Ur, Ir);
            if (q.schema.compat) Pt.flowIndentCheck(Er.indent, Fr, Ir);
            Dr = Ue.range[2];
            const lt = new re.Pair(xr, Ue);
            if (q.options.keepSourceTokens) lt.srcToken = ae;
            kr.items.push(lt);
          } else {
            if (Pr)
              Ir(
                xr.range,
                'MISSING_CHAR',
                'Implicit map keys need to be followed by map values'
              );
            if (Ur.comment) {
              if (xr.comment) xr.comment += '\n' + Ur.comment;
              else xr.comment = Ur.comment;
            }
            const a = new re.Pair(xr);
            if (q.options.keepSourceTokens) a.srcToken = ae;
            kr.items.push(a);
          }
        }
        if (Nr && Nr < Dr)
          Ir(Nr, 'IMPOSSIBLE', 'Map comment with trailing content');
        kr.range = [Er.offset, Dr, Nr ?? Dr];
        return kr;
      }
      C.resolveBlockMap = resolveBlockMap;
    },
    2510: (a, C, q) => {
      'use strict';
      var re = q(8524);
      function resolveBlockScalar(a, C, q) {
        const ae = C.offset;
        const Ue = parseBlockScalarHeader(C, a.options.strict, q);
        if (!Ue)
          return { value: '', type: null, comment: '', range: [ae, ae, ae] };
        const lt =
          Ue.mode === '>' ? re.Scalar.BLOCK_FOLDED : re.Scalar.BLOCK_LITERAL;
        const Pt = C.source ? splitLines(C.source) : [];
        let Wt = Pt.length;
        for (let a = Pt.length - 1; a >= 0; --a) {
          const C = Pt[a][1];
          if (C === '' || C === '\r') Wt = a;
          else break;
        }
        if (Wt === 0) {
          const a =
            Ue.chomp === '+' && Pt.length > 0
              ? '\n'.repeat(Math.max(1, Pt.length - 1))
              : '';
          let q = ae + Ue.length;
          if (C.source) q += C.source.length;
          return { value: a, type: lt, comment: Ue.comment, range: [ae, q, q] };
        }
        let Ar = C.indent + Ue.indent;
        let Er = C.offset + Ue.length;
        let Ir = 0;
        for (let C = 0; C < Wt; ++C) {
          const [re, ae] = Pt[C];
          if (ae === '' || ae === '\r') {
            if (Ue.indent === 0 && re.length > Ar) Ar = re.length;
          } else {
            if (re.length < Ar) {
              const a =
                'Block scalars with more-indented leading empty lines must use an explicit indentation indicator';
              q(Er + re.length, 'MISSING_CHAR', a);
            }
            if (Ue.indent === 0) Ar = re.length;
            Ir = C;
            if (Ar === 0 && !a.atRoot) {
              const a = 'Block scalar values in collections must be indented';
              q(Er, 'BAD_INDENT', a);
            }
            break;
          }
          Er += re.length + ae.length + 1;
        }
        for (let a = Pt.length - 1; a >= Wt; --a) {
          if (Pt[a][0].length > Ar) Wt = a + 1;
        }
        let Br = '';
        let Qr = '';
        let kr = false;
        for (let a = 0; a < Ir; ++a) Br += Pt[a][0].slice(Ar) + '\n';
        for (let a = Ir; a < Wt; ++a) {
          let [C, ae] = Pt[a];
          Er += C.length + ae.length + 1;
          const Wt = ae[ae.length - 1] === '\r';
          if (Wt) ae = ae.slice(0, -1);
          if (ae && C.length < Ar) {
            const a = Ue.indent
              ? 'explicit indentation indicator'
              : 'first line';
            const re = `Block scalar lines must not be less indented than their ${a}`;
            q(Er - ae.length - (Wt ? 2 : 1), 'BAD_INDENT', re);
            C = '';
          }
          if (lt === re.Scalar.BLOCK_LITERAL) {
            Br += Qr + C.slice(Ar) + ae;
            Qr = '\n';
          } else if (C.length > Ar || ae[0] === '\t') {
            if (Qr === ' ') Qr = '\n';
            else if (!kr && Qr === '\n') Qr = '\n\n';
            Br += Qr + C.slice(Ar) + ae;
            Qr = '\n';
            kr = true;
          } else if (ae === '') {
            if (Qr === '\n') Br += '\n';
            else Qr = '\n';
          } else {
            Br += Qr + ae;
            Qr = ' ';
            kr = false;
          }
        }
        switch (Ue.chomp) {
          case '-':
            break;
          case '+':
            for (let a = Wt; a < Pt.length; ++a)
              Br += '\n' + Pt[a][0].slice(Ar);
            if (Br[Br.length - 1] !== '\n') Br += '\n';
            break;
          default:
            Br += '\n';
        }
        const Dr = ae + Ue.length + C.source.length;
        return {
          value: Br,
          type: lt,
          comment: Ue.comment,
          range: [ae, Dr, Dr]
        };
      }
      function parseBlockScalarHeader({ offset: a, props: C }, q, re) {
        if (C[0].type !== 'block-scalar-header') {
          re(C[0], 'IMPOSSIBLE', 'Block scalar header not found');
          return null;
        }
        const { source: ae } = C[0];
        const Ue = ae[0];
        let lt = 0;
        let Pt = '';
        let Wt = -1;
        for (let C = 1; C < ae.length; ++C) {
          const q = ae[C];
          if (!Pt && (q === '-' || q === '+')) Pt = q;
          else {
            const re = Number(q);
            if (!lt && re) lt = re;
            else if (Wt === -1) Wt = a + C;
          }
        }
        if (Wt !== -1)
          re(
            Wt,
            'UNEXPECTED_TOKEN',
            `Block scalar header includes extra characters: ${ae}`
          );
        let Ar = false;
        let Er = '';
        let Ir = ae.length;
        for (let a = 1; a < C.length; ++a) {
          const ae = C[a];
          switch (ae.type) {
            case 'space':
              Ar = true;
            case 'newline':
              Ir += ae.source.length;
              break;
            case 'comment':
              if (q && !Ar) {
                const a =
                  'Comments must be separated from other tokens by white space characters';
                re(ae, 'MISSING_CHAR', a);
              }
              Ir += ae.source.length;
              Er = ae.source.substring(1);
              break;
            case 'error':
              re(ae, 'UNEXPECTED_TOKEN', ae.message);
              Ir += ae.source.length;
              break;
            default: {
              const a = `Unexpected token in block scalar header: ${ae.type}`;
              re(ae, 'UNEXPECTED_TOKEN', a);
              const C = ae.source;
              if (C && typeof C === 'string') Ir += C.length;
            }
          }
        }
        return { mode: Ue, indent: lt, chomp: Pt, comment: Er, length: Ir };
      }
      function splitLines(a) {
        const C = a.split(/\n( *)/);
        const q = C[0];
        const re = q.match(/^( *)/);
        const ae = re?.[1] ? [re[1], q.slice(re[1].length)] : ['', q];
        const Ue = [ae];
        for (let a = 1; a < C.length; a += 2) Ue.push([C[a], C[a + 1]]);
        return Ue;
      }
      C.resolveBlockScalar = resolveBlockScalar;
    },
    6386: (a, C, q) => {
      'use strict';
      var re = q(1498);
      var ae = q(6501);
      var Ue = q(6615);
      function resolveBlockSeq(
        { composeNode: a, composeEmptyNode: C },
        q,
        lt,
        Pt,
        Wt
      ) {
        const Ar = Wt?.nodeClass ?? re.YAMLSeq;
        const Er = new Ar(q.schema);
        if (q.atRoot) q.atRoot = false;
        let Ir = lt.offset;
        let Br = null;
        for (const { start: re, value: Wt } of lt.items) {
          const Ar = ae.resolveProps(re, {
            indicator: 'seq-item-ind',
            next: Wt,
            offset: Ir,
            onError: Pt,
            parentIndent: lt.indent,
            startOnNewline: true
          });
          if (!Ar.found) {
            if (Ar.anchor || Ar.tag || Wt) {
              if (Wt && Wt.type === 'block-seq')
                Pt(
                  Ar.end,
                  'BAD_INDENT',
                  'All sequence items must start at the same column'
                );
              else Pt(Ir, 'MISSING_CHAR', 'Sequence item without - indicator');
            } else {
              Br = Ar.end;
              if (Ar.comment) Er.comment = Ar.comment;
              continue;
            }
          }
          const Qr = Wt ? a(q, Wt, Ar, Pt) : C(q, Ar.end, re, null, Ar, Pt);
          if (q.schema.compat) Ue.flowIndentCheck(lt.indent, Wt, Pt);
          Ir = Qr.range[2];
          Er.items.push(Qr);
        }
        Er.range = [lt.offset, Ir, Br ?? Ir];
        return Er;
      }
      C.resolveBlockSeq = resolveBlockSeq;
    },
    16: (a, C) => {
      'use strict';
      function resolveEnd(a, C, q, re) {
        let ae = '';
        if (a) {
          let Ue = false;
          let lt = '';
          for (const Pt of a) {
            const { source: a, type: Wt } = Pt;
            switch (Wt) {
              case 'space':
                Ue = true;
                break;
              case 'comment': {
                if (q && !Ue)
                  re(
                    Pt,
                    'MISSING_CHAR',
                    'Comments must be separated from other tokens by white space characters'
                  );
                const C = a.substring(1) || ' ';
                if (!ae) ae = C;
                else ae += lt + C;
                lt = '';
                break;
              }
              case 'newline':
                if (ae) lt += a;
                Ue = true;
                break;
              default:
                re(Pt, 'UNEXPECTED_TOKEN', `Unexpected ${Wt} at node end`);
            }
            C += a.length;
          }
        }
        return { comment: ae, offset: C };
      }
      C.resolveEnd = resolveEnd;
    },
    4299: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(764);
      var Ue = q(3198);
      var lt = q(1498);
      var Pt = q(16);
      var Wt = q(6501);
      var Ar = q(7494);
      var Er = q(4672);
      const Ir = 'Block collections are not allowed within flow collections';
      const isBlock = (a) =>
        a && (a.type === 'block-map' || a.type === 'block-seq');
      function resolveFlowCollection(
        { composeNode: a, composeEmptyNode: C },
        q,
        Br,
        Qr,
        kr
      ) {
        const Dr = Br.start.source === '{';
        const Nr = Dr ? 'flow map' : 'flow sequence';
        const Lr = kr?.nodeClass ?? (Dr ? Ue.YAMLMap : lt.YAMLSeq);
        const Fr = new Lr(q.schema);
        Fr.flow = true;
        const Mr = q.atRoot;
        if (Mr) q.atRoot = false;
        let Pr = Br.offset + Br.start.source.length;
        for (let lt = 0; lt < Br.items.length; ++lt) {
          const Pt = Br.items[lt];
          const { start: kr, key: Lr, sep: Mr, value: Or } = Pt;
          const xr = Wt.resolveProps(kr, {
            flow: Nr,
            indicator: 'explicit-key-ind',
            next: Lr ?? Mr?.[0],
            offset: Pr,
            onError: Qr,
            parentIndent: Br.indent,
            startOnNewline: false
          });
          if (!xr.found) {
            if (!xr.anchor && !xr.tag && !Mr && !Or) {
              if (lt === 0 && xr.comma)
                Qr(xr.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${Nr}`);
              else if (lt < Br.items.length - 1)
                Qr(
                  xr.start,
                  'UNEXPECTED_TOKEN',
                  `Unexpected empty item in ${Nr}`
                );
              if (xr.comment) {
                if (Fr.comment) Fr.comment += '\n' + xr.comment;
                else Fr.comment = xr.comment;
              }
              Pr = xr.end;
              continue;
            }
            if (!Dr && q.options.strict && Ar.containsNewline(Lr))
              Qr(
                Lr,
                'MULTILINE_IMPLICIT_KEY',
                'Implicit keys of flow sequence pairs need to be on a single line'
              );
          }
          if (lt === 0) {
            if (xr.comma)
              Qr(xr.comma, 'UNEXPECTED_TOKEN', `Unexpected , in ${Nr}`);
          } else {
            if (!xr.comma)
              Qr(xr.start, 'MISSING_CHAR', `Missing , between ${Nr} items`);
            if (xr.comment) {
              let a = '';
              e: for (const C of kr) {
                switch (C.type) {
                  case 'comma':
                  case 'space':
                    break;
                  case 'comment':
                    a = C.source.substring(1);
                    break e;
                  default:
                    break e;
                }
              }
              if (a) {
                let C = Fr.items[Fr.items.length - 1];
                if (re.isPair(C)) C = C.value ?? C.key;
                if (C.comment) C.comment += '\n' + a;
                else C.comment = a;
                xr.comment = xr.comment.substring(a.length + 1);
              }
            }
          }
          if (!Dr && !Mr && !xr.found) {
            const re = Or ? a(q, Or, xr, Qr) : C(q, xr.end, Mr, null, xr, Qr);
            Fr.items.push(re);
            Pr = re.range[2];
            if (isBlock(Or)) Qr(re.range, 'BLOCK_IN_FLOW', Ir);
          } else {
            const re = xr.end;
            const lt = Lr ? a(q, Lr, xr, Qr) : C(q, re, kr, null, xr, Qr);
            if (isBlock(Lr)) Qr(lt.range, 'BLOCK_IN_FLOW', Ir);
            const Ar = Wt.resolveProps(Mr ?? [], {
              flow: Nr,
              indicator: 'map-value-ind',
              next: Or,
              offset: lt.range[2],
              onError: Qr,
              parentIndent: Br.indent,
              startOnNewline: false
            });
            if (Ar.found) {
              if (!Dr && !xr.found && q.options.strict) {
                if (Mr)
                  for (const a of Mr) {
                    if (a === Ar.found) break;
                    if (a.type === 'newline') {
                      Qr(
                        a,
                        'MULTILINE_IMPLICIT_KEY',
                        'Implicit keys of flow sequence pairs need to be on a single line'
                      );
                      break;
                    }
                  }
                if (xr.start < Ar.found.offset - 1024)
                  Qr(
                    Ar.found,
                    'KEY_OVER_1024_CHARS',
                    'The : indicator must be at most 1024 chars after the start of an implicit flow sequence key'
                  );
              }
            } else if (Or) {
              if ('source' in Or && Or.source && Or.source[0] === ':')
                Qr(Or, 'MISSING_CHAR', `Missing space after : in ${Nr}`);
              else
                Qr(
                  Ar.start,
                  'MISSING_CHAR',
                  `Missing , or : between ${Nr} items`
                );
            }
            const Ur = Or
              ? a(q, Or, Ar, Qr)
              : Ar.found
                ? C(q, Ar.end, Mr, null, Ar, Qr)
                : null;
            if (Ur) {
              if (isBlock(Or)) Qr(Ur.range, 'BLOCK_IN_FLOW', Ir);
            } else if (Ar.comment) {
              if (lt.comment) lt.comment += '\n' + Ar.comment;
              else lt.comment = Ar.comment;
            }
            const Gr = new ae.Pair(lt, Ur);
            if (q.options.keepSourceTokens) Gr.srcToken = Pt;
            if (Dr) {
              const a = Fr;
              if (Er.mapIncludes(q, a.items, lt))
                Qr(re, 'DUPLICATE_KEY', 'Map keys must be unique');
              a.items.push(Gr);
            } else {
              const a = new Ue.YAMLMap(q.schema);
              a.flow = true;
              a.items.push(Gr);
              Fr.items.push(a);
            }
            Pr = Ur ? Ur.range[2] : Ar.end;
          }
        }
        const Or = Dr ? '}' : ']';
        const [xr, ...Ur] = Br.end;
        let Gr = Pr;
        if (xr && xr.source === Or) Gr = xr.offset + xr.source.length;
        else {
          const a = Nr[0].toUpperCase() + Nr.substring(1);
          const C = Mr
            ? `${a} must end with a ${Or}`
            : `${a} in block collection must be sufficiently indented and end with a ${Or}`;
          Qr(Pr, Mr ? 'MISSING_CHAR' : 'BAD_INDENT', C);
          if (xr && xr.source.length !== 1) Ur.unshift(xr);
        }
        if (Ur.length > 0) {
          const a = Pt.resolveEnd(Ur, Gr, q.options.strict, Qr);
          if (a.comment) {
            if (Fr.comment) Fr.comment += '\n' + a.comment;
            else Fr.comment = a.comment;
          }
          Fr.range = [Br.offset, Gr, a.offset];
        } else {
          Fr.range = [Br.offset, Gr, Gr];
        }
        return Fr;
      }
      C.resolveFlowCollection = resolveFlowCollection;
    },
    3405: (a, C, q) => {
      'use strict';
      var re = q(8524);
      var ae = q(16);
      function resolveFlowScalar(a, C, q) {
        const { offset: Ue, type: lt, source: Pt, end: Wt } = a;
        let Ar;
        let Er;
        const _onError = (a, C, re) => q(Ue + a, C, re);
        switch (lt) {
          case 'scalar':
            Ar = re.Scalar.PLAIN;
            Er = plainValue(Pt, _onError);
            break;
          case 'single-quoted-scalar':
            Ar = re.Scalar.QUOTE_SINGLE;
            Er = singleQuotedValue(Pt, _onError);
            break;
          case 'double-quoted-scalar':
            Ar = re.Scalar.QUOTE_DOUBLE;
            Er = doubleQuotedValue(Pt, _onError);
            break;
          default:
            q(
              a,
              'UNEXPECTED_TOKEN',
              `Expected a flow scalar value, but found: ${lt}`
            );
            return {
              value: '',
              type: null,
              comment: '',
              range: [Ue, Ue + Pt.length, Ue + Pt.length]
            };
        }
        const Ir = Ue + Pt.length;
        const Br = ae.resolveEnd(Wt, Ir, C, q);
        return {
          value: Er,
          type: Ar,
          comment: Br.comment,
          range: [Ue, Ir, Br.offset]
        };
      }
      function plainValue(a, C) {
        let q = '';
        switch (a[0]) {
          case '\t':
            q = 'a tab character';
            break;
          case ',':
            q = 'flow indicator character ,';
            break;
          case '%':
            q = 'directive indicator character %';
            break;
          case '|':
          case '>': {
            q = `block scalar indicator ${a[0]}`;
            break;
          }
          case '@':
          case '`': {
            q = `reserved character ${a[0]}`;
            break;
          }
        }
        if (q) C(0, 'BAD_SCALAR_START', `Plain value cannot start with ${q}`);
        return foldLines(a);
      }
      function singleQuotedValue(a, C) {
        if (a[a.length - 1] !== "'" || a.length === 1)
          C(a.length, 'MISSING_CHAR', "Missing closing 'quote");
        return foldLines(a.slice(1, -1)).replace(/''/g, "'");
      }
      function foldLines(a) {
        let C, q;
        try {
          C = new RegExp('(.*?)(?<![ \t])[ \t]*\r?\n', 'sy');
          q = new RegExp('[ \t]*(.*?)(?:(?<![ \t])[ \t]*)?\r?\n', 'sy');
        } catch (a) {
          C = /(.*?)[ \t]*\r?\n/sy;
          q = /[ \t]*(.*?)[ \t]*\r?\n/sy;
        }
        let re = C.exec(a);
        if (!re) return a;
        let ae = re[1];
        let Ue = ' ';
        let lt = C.lastIndex;
        q.lastIndex = lt;
        while ((re = q.exec(a))) {
          if (re[1] === '') {
            if (Ue === '\n') ae += Ue;
            else Ue = '\n';
          } else {
            ae += Ue + re[1];
            Ue = ' ';
          }
          lt = q.lastIndex;
        }
        const Pt = /[ \t]*(.*)/sy;
        Pt.lastIndex = lt;
        re = Pt.exec(a);
        return ae + Ue + (re?.[1] ?? '');
      }
      function doubleQuotedValue(a, C) {
        let q = '';
        for (let re = 1; re < a.length - 1; ++re) {
          const ae = a[re];
          if (ae === '\r' && a[re + 1] === '\n') continue;
          if (ae === '\n') {
            const { fold: C, offset: ae } = foldNewline(a, re);
            q += C;
            re = ae;
          } else if (ae === '\\') {
            let ae = a[++re];
            const lt = Ue[ae];
            if (lt) q += lt;
            else if (ae === '\n') {
              ae = a[re + 1];
              while (ae === ' ' || ae === '\t') ae = a[++re + 1];
            } else if (ae === '\r' && a[re + 1] === '\n') {
              ae = a[++re + 1];
              while (ae === ' ' || ae === '\t') ae = a[++re + 1];
            } else if (ae === 'x' || ae === 'u' || ae === 'U') {
              const Ue = { x: 2, u: 4, U: 8 }[ae];
              q += parseCharCode(a, re + 1, Ue, C);
              re += Ue;
            } else {
              const ae = a.substr(re - 1, 2);
              C(re - 1, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${ae}`);
              q += ae;
            }
          } else if (ae === ' ' || ae === '\t') {
            const C = re;
            let Ue = a[re + 1];
            while (Ue === ' ' || Ue === '\t') Ue = a[++re + 1];
            if (Ue !== '\n' && !(Ue === '\r' && a[re + 2] === '\n'))
              q += re > C ? a.slice(C, re + 1) : ae;
          } else {
            q += ae;
          }
        }
        if (a[a.length - 1] !== '"' || a.length === 1)
          C(a.length, 'MISSING_CHAR', 'Missing closing "quote');
        return q;
      }
      function foldNewline(a, C) {
        let q = '';
        let re = a[C + 1];
        while (re === ' ' || re === '\t' || re === '\n' || re === '\r') {
          if (re === '\r' && a[C + 2] !== '\n') break;
          if (re === '\n') q += '\n';
          C += 1;
          re = a[C + 1];
        }
        if (!q) q = ' ';
        return { fold: q, offset: C };
      }
      const Ue = {
        0: '\0',
        a: '',
        b: '\b',
        e: '',
        f: '\f',
        n: '\n',
        r: '\r',
        t: '\t',
        v: '\v',
        N: '',
        _: ' ',
        L: '\u2028',
        P: '\u2029',
        ' ': ' ',
        '"': '"',
        '/': '/',
        '\\': '\\',
        '\t': '\t'
      };
      function parseCharCode(a, C, q, re) {
        const ae = a.substr(C, q);
        const Ue = ae.length === q && /^[0-9a-fA-F]+$/.test(ae);
        const lt = Ue ? parseInt(ae, 16) : NaN;
        if (isNaN(lt)) {
          const ae = a.substr(C - 2, q + 2);
          re(C - 2, 'BAD_DQ_ESCAPE', `Invalid escape sequence ${ae}`);
          return ae;
        }
        return String.fromCodePoint(lt);
      }
      C.resolveFlowScalar = resolveFlowScalar;
    },
    6501: (a, C) => {
      'use strict';
      function resolveProps(
        a,
        {
          flow: C,
          indicator: q,
          next: re,
          offset: ae,
          onError: Ue,
          parentIndent: lt,
          startOnNewline: Pt
        }
      ) {
        let Wt = false;
        let Ar = Pt;
        let Er = Pt;
        let Ir = '';
        let Br = '';
        let Qr = false;
        let kr = false;
        let Dr = null;
        let Nr = null;
        let Lr = null;
        let Fr = null;
        let Mr = null;
        let Pr = null;
        let Or = null;
        for (const ae of a) {
          if (kr) {
            if (
              ae.type !== 'space' &&
              ae.type !== 'newline' &&
              ae.type !== 'comma'
            )
              Ue(
                ae.offset,
                'MISSING_CHAR',
                'Tags and anchors must be separated from the next token by white space'
              );
            kr = false;
          }
          if (Dr) {
            if (Ar && ae.type !== 'comment' && ae.type !== 'newline') {
              Ue(Dr, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');
            }
            Dr = null;
          }
          switch (ae.type) {
            case 'space':
              if (
                !C &&
                (q !== 'doc-start' || re?.type !== 'flow-collection') &&
                ae.source.includes('\t')
              ) {
                Dr = ae;
              }
              Er = true;
              break;
            case 'comment': {
              if (!Er)
                Ue(
                  ae,
                  'MISSING_CHAR',
                  'Comments must be separated from other tokens by white space characters'
                );
              const a = ae.source.substring(1) || ' ';
              if (!Ir) Ir = a;
              else Ir += Br + a;
              Br = '';
              Ar = false;
              break;
            }
            case 'newline':
              if (Ar) {
                if (Ir) Ir += ae.source;
                else Wt = true;
              } else Br += ae.source;
              Ar = true;
              Qr = true;
              if (Nr || Lr) Fr = ae;
              Er = true;
              break;
            case 'anchor':
              if (Nr)
                Ue(
                  ae,
                  'MULTIPLE_ANCHORS',
                  'A node can have at most one anchor'
                );
              if (ae.source.endsWith(':'))
                Ue(
                  ae.offset + ae.source.length - 1,
                  'BAD_ALIAS',
                  'Anchor ending in : is ambiguous',
                  true
                );
              Nr = ae;
              if (Or === null) Or = ae.offset;
              Ar = false;
              Er = false;
              kr = true;
              break;
            case 'tag': {
              if (Lr)
                Ue(ae, 'MULTIPLE_TAGS', 'A node can have at most one tag');
              Lr = ae;
              if (Or === null) Or = ae.offset;
              Ar = false;
              Er = false;
              kr = true;
              break;
            }
            case q:
              if (Nr || Lr)
                Ue(
                  ae,
                  'BAD_PROP_ORDER',
                  `Anchors and tags must be after the ${ae.source} indicator`
                );
              if (Pr)
                Ue(
                  ae,
                  'UNEXPECTED_TOKEN',
                  `Unexpected ${ae.source} in ${C ?? 'collection'}`
                );
              Pr = ae;
              Ar = q === 'seq-item-ind' || q === 'explicit-key-ind';
              Er = false;
              break;
            case 'comma':
              if (C) {
                if (Mr) Ue(ae, 'UNEXPECTED_TOKEN', `Unexpected , in ${C}`);
                Mr = ae;
                Ar = false;
                Er = false;
                break;
              }
            default:
              Ue(ae, 'UNEXPECTED_TOKEN', `Unexpected ${ae.type} token`);
              Ar = false;
              Er = false;
          }
        }
        const xr = a[a.length - 1];
        const Ur = xr ? xr.offset + xr.source.length : ae;
        if (
          kr &&
          re &&
          re.type !== 'space' &&
          re.type !== 'newline' &&
          re.type !== 'comma' &&
          (re.type !== 'scalar' || re.source !== '')
        ) {
          Ue(
            re.offset,
            'MISSING_CHAR',
            'Tags and anchors must be separated from the next token by white space'
          );
        }
        if (
          Dr &&
          ((Ar && Dr.indent <= lt) ||
            re?.type === 'block-map' ||
            re?.type === 'block-seq')
        )
          Ue(Dr, 'TAB_AS_INDENT', 'Tabs are not allowed as indentation');
        return {
          comma: Mr,
          found: Pr,
          spaceBefore: Wt,
          comment: Ir,
          hasNewline: Qr,
          anchor: Nr,
          tag: Lr,
          newlineAfterProp: Fr,
          end: Ur,
          start: Or ?? Ur
        };
      }
      C.resolveProps = resolveProps;
    },
    7494: (a, C) => {
      'use strict';
      function containsNewline(a) {
        if (!a) return null;
        switch (a.type) {
          case 'alias':
          case 'scalar':
          case 'double-quoted-scalar':
          case 'single-quoted-scalar':
            if (a.source.includes('\n')) return true;
            if (a.end)
              for (const C of a.end) if (C.type === 'newline') return true;
            return false;
          case 'flow-collection':
            for (const C of a.items) {
              for (const a of C.start) if (a.type === 'newline') return true;
              if (C.sep)
                for (const a of C.sep) if (a.type === 'newline') return true;
              if (containsNewline(C.key) || containsNewline(C.value))
                return true;
            }
            return false;
          default:
            return true;
        }
      }
      C.containsNewline = containsNewline;
    },
    6196: (a, C) => {
      'use strict';
      function emptyScalarPosition(a, C, q) {
        if (C) {
          if (q === null) q = C.length;
          for (let re = q - 1; re >= 0; --re) {
            let q = C[re];
            switch (q.type) {
              case 'space':
              case 'comment':
              case 'newline':
                a -= q.source.length;
                continue;
            }
            q = C[++re];
            while (q?.type === 'space') {
              a += q.source.length;
              q = C[++re];
            }
            break;
          }
        }
        return a;
      }
      C.emptyScalarPosition = emptyScalarPosition;
    },
    6615: (a, C, q) => {
      'use strict';
      var re = q(7494);
      function flowIndentCheck(a, C, q) {
        if (C?.type === 'flow-collection') {
          const ae = C.end[0];
          if (
            ae.indent === a &&
            (ae.source === ']' || ae.source === '}') &&
            re.containsNewline(C)
          ) {
            const a = 'Flow end indicator should be more indented than parent';
            q(ae, 'BAD_INDENT', a, true);
          }
        }
      }
      C.flowIndentCheck = flowIndentCheck;
    },
    4672: (a, C, q) => {
      'use strict';
      var re = q(175);
      function mapIncludes(a, C, q) {
        const { uniqueKeys: ae } = a.options;
        if (ae === false) return false;
        const Ue =
          typeof ae === 'function'
            ? ae
            : (C, q) =>
                C === q ||
                (re.isScalar(C) &&
                  re.isScalar(q) &&
                  C.value === q.value &&
                  !(C.value === '<<' && a.schema.merge));
        return C.some((a) => Ue(a.key, q));
      }
      C.mapIncludes = mapIncludes;
    },
    8637: (a, C, q) => {
      'use strict';
      var re = q(8248);
      var ae = q(5060);
      var Ue = q(175);
      var lt = q(764);
      var Pt = q(3669);
      var Wt = q(4415);
      var Ar = q(9997);
      var Er = q(7857);
      var Ir = q(2381);
      var Br = q(5612);
      var Qr = q(713);
      class Document {
        constructor(a, C, q) {
          this.commentBefore = null;
          this.comment = null;
          this.errors = [];
          this.warnings = [];
          Object.defineProperty(this, Ue.NODE_TYPE, { value: Ue.DOC });
          let re = null;
          if (typeof C === 'function' || Array.isArray(C)) {
            re = C;
          } else if (q === undefined && C) {
            q = C;
            C = undefined;
          }
          const ae = Object.assign(
            {
              intAsBigInt: false,
              keepSourceTokens: false,
              logLevel: 'warn',
              prettyErrors: true,
              strict: true,
              uniqueKeys: true,
              version: '1.2'
            },
            q
          );
          this.options = ae;
          let { version: lt } = ae;
          if (q?._directives) {
            this.directives = q._directives.atDocument();
            if (this.directives.yaml.explicit)
              lt = this.directives.yaml.version;
          } else this.directives = new Qr.Directives({ version: lt });
          this.setSchema(lt, q);
          this.contents = a === undefined ? null : this.createNode(a, re, q);
        }
        clone() {
          const a = Object.create(Document.prototype, {
            [Ue.NODE_TYPE]: { value: Ue.DOC }
          });
          a.commentBefore = this.commentBefore;
          a.comment = this.comment;
          a.errors = this.errors.slice();
          a.warnings = this.warnings.slice();
          a.options = Object.assign({}, this.options);
          if (this.directives) a.directives = this.directives.clone();
          a.schema = this.schema.clone();
          a.contents = Ue.isNode(this.contents)
            ? this.contents.clone(a.schema)
            : this.contents;
          if (this.range) a.range = this.range.slice();
          return a;
        }
        add(a) {
          if (assertCollection(this.contents)) this.contents.add(a);
        }
        addIn(a, C) {
          if (assertCollection(this.contents)) this.contents.addIn(a, C);
        }
        createAlias(a, C) {
          if (!a.anchor) {
            const q = Er.anchorNames(this);
            a.anchor = !C || q.has(C) ? Er.findNewAnchor(C || 'a', q) : C;
          }
          return new re.Alias(a.anchor);
        }
        createNode(a, C, q) {
          let re = undefined;
          if (typeof C === 'function') {
            a = C.call({ '': a }, '', a);
            re = C;
          } else if (Array.isArray(C)) {
            const keyToStr = (a) =>
              typeof a === 'number' ||
              a instanceof String ||
              a instanceof Number;
            const a = C.filter(keyToStr).map(String);
            if (a.length > 0) C = C.concat(a);
            re = C;
          } else if (q === undefined && C) {
            q = C;
            C = undefined;
          }
          const {
            aliasDuplicateObjects: ae,
            anchorPrefix: lt,
            flow: Pt,
            keepUndefined: Wt,
            onTagObj: Ar,
            tag: Ir
          } = q ?? {};
          const {
            onAnchor: Qr,
            setAnchors: kr,
            sourceObjects: Dr
          } = Er.createNodeAnchors(this, lt || 'a');
          const Nr = {
            aliasDuplicateObjects: ae ?? true,
            keepUndefined: Wt ?? false,
            onAnchor: Qr,
            onTagObj: Ar,
            replacer: re,
            schema: this.schema,
            sourceObjects: Dr
          };
          const Lr = Br.createNode(a, Ir, Nr);
          if (Pt && Ue.isCollection(Lr)) Lr.flow = true;
          kr();
          return Lr;
        }
        createPair(a, C, q = {}) {
          const re = this.createNode(a, null, q);
          const ae = this.createNode(C, null, q);
          return new lt.Pair(re, ae);
        }
        delete(a) {
          return assertCollection(this.contents)
            ? this.contents.delete(a)
            : false;
        }
        deleteIn(a) {
          if (ae.isEmptyPath(a)) {
            if (this.contents == null) return false;
            this.contents = null;
            return true;
          }
          return assertCollection(this.contents)
            ? this.contents.deleteIn(a)
            : false;
        }
        get(a, C) {
          return Ue.isCollection(this.contents)
            ? this.contents.get(a, C)
            : undefined;
        }
        getIn(a, C) {
          if (ae.isEmptyPath(a))
            return !C && Ue.isScalar(this.contents)
              ? this.contents.value
              : this.contents;
          return Ue.isCollection(this.contents)
            ? this.contents.getIn(a, C)
            : undefined;
        }
        has(a) {
          return Ue.isCollection(this.contents) ? this.contents.has(a) : false;
        }
        hasIn(a) {
          if (ae.isEmptyPath(a)) return this.contents !== undefined;
          return Ue.isCollection(this.contents)
            ? this.contents.hasIn(a)
            : false;
        }
        set(a, C) {
          if (this.contents == null) {
            this.contents = ae.collectionFromPath(this.schema, [a], C);
          } else if (assertCollection(this.contents)) {
            this.contents.set(a, C);
          }
        }
        setIn(a, C) {
          if (ae.isEmptyPath(a)) {
            this.contents = C;
          } else if (this.contents == null) {
            this.contents = ae.collectionFromPath(
              this.schema,
              Array.from(a),
              C
            );
          } else if (assertCollection(this.contents)) {
            this.contents.setIn(a, C);
          }
        }
        setSchema(a, C = {}) {
          if (typeof a === 'number') a = String(a);
          let q;
          switch (a) {
            case '1.1':
              if (this.directives) this.directives.yaml.version = '1.1';
              else this.directives = new Qr.Directives({ version: '1.1' });
              q = { merge: true, resolveKnownTags: false, schema: 'yaml-1.1' };
              break;
            case '1.2':
            case 'next':
              if (this.directives) this.directives.yaml.version = a;
              else this.directives = new Qr.Directives({ version: a });
              q = { merge: false, resolveKnownTags: true, schema: 'core' };
              break;
            case null:
              if (this.directives) delete this.directives;
              q = null;
              break;
            default: {
              const C = JSON.stringify(a);
              throw new Error(
                `Expected '1.1', '1.2' or null as first argument, but found: ${C}`
              );
            }
          }
          if (C.schema instanceof Object) this.schema = C.schema;
          else if (q) this.schema = new Wt.Schema(Object.assign(q, C));
          else
            throw new Error(
              `With a null YAML version, the { schema: Schema } option is required`
            );
        }
        toJS({
          json: a,
          jsonArg: C,
          mapAsMap: q,
          maxAliasCount: re,
          onAnchor: ae,
          reviver: Ue
        } = {}) {
          const lt = {
            anchors: new Map(),
            doc: this,
            keep: !a,
            mapAsMap: q === true,
            mapKeyWarned: false,
            maxAliasCount: typeof re === 'number' ? re : 100
          };
          const Wt = Pt.toJS(this.contents, C ?? '', lt);
          if (typeof ae === 'function')
            for (const { count: a, res: C } of lt.anchors.values()) ae(C, a);
          return typeof Ue === 'function'
            ? Ir.applyReviver(Ue, { '': Wt }, '', Wt)
            : Wt;
        }
        toJSON(a, C) {
          return this.toJS({
            json: true,
            jsonArg: a,
            mapAsMap: false,
            onAnchor: C
          });
        }
        toString(a = {}) {
          if (this.errors.length > 0)
            throw new Error('Document with errors cannot be stringified');
          if (
            'indent' in a &&
            (!Number.isInteger(a.indent) || Number(a.indent) <= 0)
          ) {
            const C = JSON.stringify(a.indent);
            throw new Error(
              `"indent" option must be a positive integer, not ${C}`
            );
          }
          return Ar.stringifyDocument(this, a);
        }
      }
      function assertCollection(a) {
        if (Ue.isCollection(a)) return true;
        throw new Error('Expected a YAML collection as document contents');
      }
      C.Document = Document;
    },
    7857: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(8706);
      function anchorIsValid(a) {
        if (/[\x00-\x19\s,[\]{}]/.test(a)) {
          const C = JSON.stringify(a);
          const q = `Anchor must not contain whitespace or control characters: ${C}`;
          throw new Error(q);
        }
        return true;
      }
      function anchorNames(a) {
        const C = new Set();
        ae.visit(a, {
          Value(a, q) {
            if (q.anchor) C.add(q.anchor);
          }
        });
        return C;
      }
      function findNewAnchor(a, C) {
        for (let q = 1; true; ++q) {
          const re = `${a}${q}`;
          if (!C.has(re)) return re;
        }
      }
      function createNodeAnchors(a, C) {
        const q = [];
        const ae = new Map();
        let Ue = null;
        return {
          onAnchor: (re) => {
            q.push(re);
            if (!Ue) Ue = anchorNames(a);
            const ae = findNewAnchor(C, Ue);
            Ue.add(ae);
            return ae;
          },
          setAnchors: () => {
            for (const a of q) {
              const C = ae.get(a);
              if (
                typeof C === 'object' &&
                C.anchor &&
                (re.isScalar(C.node) || re.isCollection(C.node))
              ) {
                C.node.anchor = C.anchor;
              } else {
                const C = new Error(
                  'Failed to resolve repeated object (this should not happen)'
                );
                C.source = a;
                throw C;
              }
            }
          },
          sourceObjects: ae
        };
      }
      C.anchorIsValid = anchorIsValid;
      C.anchorNames = anchorNames;
      C.createNodeAnchors = createNodeAnchors;
      C.findNewAnchor = findNewAnchor;
    },
    2381: (a, C) => {
      'use strict';
      function applyReviver(a, C, q, re) {
        if (re && typeof re === 'object') {
          if (Array.isArray(re)) {
            for (let C = 0, q = re.length; C < q; ++C) {
              const q = re[C];
              const ae = applyReviver(a, re, String(C), q);
              if (ae === undefined) delete re[C];
              else if (ae !== q) re[C] = ae;
            }
          } else if (re instanceof Map) {
            for (const C of Array.from(re.keys())) {
              const q = re.get(C);
              const ae = applyReviver(a, re, C, q);
              if (ae === undefined) re.delete(C);
              else if (ae !== q) re.set(C, ae);
            }
          } else if (re instanceof Set) {
            for (const C of Array.from(re)) {
              const q = applyReviver(a, re, C, C);
              if (q === undefined) re.delete(C);
              else if (q !== C) {
                re.delete(C);
                re.add(q);
              }
            }
          } else {
            for (const [C, q] of Object.entries(re)) {
              const ae = applyReviver(a, re, C, q);
              if (ae === undefined) delete re[C];
              else if (ae !== q) re[C] = ae;
            }
          }
        }
        return a.call(C, q, re);
      }
      C.applyReviver = applyReviver;
    },
    5612: (a, C, q) => {
      'use strict';
      var re = q(8248);
      var ae = q(175);
      var Ue = q(8524);
      const lt = 'tag:yaml.org,2002:';
      function findTagObject(a, C, q) {
        if (C) {
          const a = q.filter((a) => a.tag === C);
          const re = a.find((a) => !a.format) ?? a[0];
          if (!re) throw new Error(`Tag ${C} not found`);
          return re;
        }
        return q.find((C) => C.identify?.(a) && !C.format);
      }
      function createNode(a, C, q) {
        if (ae.isDocument(a)) a = a.contents;
        if (ae.isNode(a)) return a;
        if (ae.isPair(a)) {
          const C = q.schema[ae.MAP].createNode?.(q.schema, null, q);
          C.items.push(a);
          return C;
        }
        if (
          a instanceof String ||
          a instanceof Number ||
          a instanceof Boolean ||
          (typeof BigInt !== 'undefined' && a instanceof BigInt)
        ) {
          a = a.valueOf();
        }
        const {
          aliasDuplicateObjects: Pt,
          onAnchor: Wt,
          onTagObj: Ar,
          schema: Er,
          sourceObjects: Ir
        } = q;
        let Br = undefined;
        if (Pt && a && typeof a === 'object') {
          Br = Ir.get(a);
          if (Br) {
            if (!Br.anchor) Br.anchor = Wt(a);
            return new re.Alias(Br.anchor);
          } else {
            Br = { anchor: null, node: null };
            Ir.set(a, Br);
          }
        }
        if (C?.startsWith('!!')) C = lt + C.slice(2);
        let Qr = findTagObject(a, C, Er.tags);
        if (!Qr) {
          if (a && typeof a.toJSON === 'function') {
            a = a.toJSON();
          }
          if (!a || typeof a !== 'object') {
            const C = new Ue.Scalar(a);
            if (Br) Br.node = C;
            return C;
          }
          Qr =
            a instanceof Map
              ? Er[ae.MAP]
              : Symbol.iterator in Object(a)
                ? Er[ae.SEQ]
                : Er[ae.MAP];
        }
        if (Ar) {
          Ar(Qr);
          delete q.onTagObj;
        }
        const kr = Qr?.createNode
          ? Qr.createNode(q.schema, a, q)
          : typeof Qr?.nodeClass?.from === 'function'
            ? Qr.nodeClass.from(q.schema, a, q)
            : new Ue.Scalar(a);
        if (C) kr.tag = C;
        else if (!Qr.default) kr.tag = Qr.tag;
        if (Br) Br.node = kr;
        return kr;
      }
      C.createNode = createNode;
    },
    713: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(8706);
      const Ue = {
        '!': '%21',
        ',': '%2C',
        '[': '%5B',
        ']': '%5D',
        '{': '%7B',
        '}': '%7D'
      };
      const escapeTagName = (a) => a.replace(/[!,[\]{}]/g, (a) => Ue[a]);
      class Directives {
        constructor(a, C) {
          this.docStart = null;
          this.docEnd = false;
          this.yaml = Object.assign({}, Directives.defaultYaml, a);
          this.tags = Object.assign({}, Directives.defaultTags, C);
        }
        clone() {
          const a = new Directives(this.yaml, this.tags);
          a.docStart = this.docStart;
          return a;
        }
        atDocument() {
          const a = new Directives(this.yaml, this.tags);
          switch (this.yaml.version) {
            case '1.1':
              this.atNextDocument = true;
              break;
            case '1.2':
              this.atNextDocument = false;
              this.yaml = {
                explicit: Directives.defaultYaml.explicit,
                version: '1.2'
              };
              this.tags = Object.assign({}, Directives.defaultTags);
              break;
          }
          return a;
        }
        add(a, C) {
          if (this.atNextDocument) {
            this.yaml = {
              explicit: Directives.defaultYaml.explicit,
              version: '1.1'
            };
            this.tags = Object.assign({}, Directives.defaultTags);
            this.atNextDocument = false;
          }
          const q = a.trim().split(/[ \t]+/);
          const re = q.shift();
          switch (re) {
            case '%TAG': {
              if (q.length !== 2) {
                C(0, '%TAG directive should contain exactly two parts');
                if (q.length < 2) return false;
              }
              const [a, re] = q;
              this.tags[a] = re;
              return true;
            }
            case '%YAML': {
              this.yaml.explicit = true;
              if (q.length !== 1) {
                C(0, '%YAML directive should contain exactly one part');
                return false;
              }
              const [a] = q;
              if (a === '1.1' || a === '1.2') {
                this.yaml.version = a;
                return true;
              } else {
                const q = /^\d+\.\d+$/.test(a);
                C(6, `Unsupported YAML version ${a}`, q);
                return false;
              }
            }
            default:
              C(0, `Unknown directive ${re}`, true);
              return false;
          }
        }
        tagName(a, C) {
          if (a === '!') return '!';
          if (a[0] !== '!') {
            C(`Not a valid tag: ${a}`);
            return null;
          }
          if (a[1] === '<') {
            const q = a.slice(2, -1);
            if (q === '!' || q === '!!') {
              C(`Verbatim tags aren't resolved, so ${a} is invalid.`);
              return null;
            }
            if (a[a.length - 1] !== '>') C('Verbatim tags must end with a >');
            return q;
          }
          const [, q, re] = a.match(/^(.*!)([^!]*)$/s);
          if (!re) C(`The ${a} tag has no suffix`);
          const ae = this.tags[q];
          if (ae) {
            try {
              return ae + decodeURIComponent(re);
            } catch (a) {
              C(String(a));
              return null;
            }
          }
          if (q === '!') return a;
          C(`Could not resolve tag: ${a}`);
          return null;
        }
        tagString(a) {
          for (const [C, q] of Object.entries(this.tags)) {
            if (a.startsWith(q))
              return C + escapeTagName(a.substring(q.length));
          }
          return a[0] === '!' ? a : `!<${a}>`;
        }
        toString(a) {
          const C = this.yaml.explicit
            ? [`%YAML ${this.yaml.version || '1.2'}`]
            : [];
          const q = Object.entries(this.tags);
          let Ue;
          if (a && q.length > 0 && re.isNode(a.contents)) {
            const C = {};
            ae.visit(a.contents, (a, q) => {
              if (re.isNode(q) && q.tag) C[q.tag] = true;
            });
            Ue = Object.keys(C);
          } else Ue = [];
          for (const [re, ae] of q) {
            if (re === '!!' && ae === 'tag:yaml.org,2002:') continue;
            if (!a || Ue.some((a) => a.startsWith(ae)))
              C.push(`%TAG ${re} ${ae}`);
          }
          return C.join('\n');
        }
      }
      Directives.defaultYaml = { explicit: false, version: '1.2' };
      Directives.defaultTags = { '!!': 'tag:yaml.org,2002:' };
      C.Directives = Directives;
    },
    9896: (a, C) => {
      'use strict';
      class YAMLError extends Error {
        constructor(a, C, q, re) {
          super();
          this.name = a;
          this.code = q;
          this.message = re;
          this.pos = C;
        }
      }
      class YAMLParseError extends YAMLError {
        constructor(a, C, q) {
          super('YAMLParseError', a, C, q);
        }
      }
      class YAMLWarning extends YAMLError {
        constructor(a, C, q) {
          super('YAMLWarning', a, C, q);
        }
      }
      const prettifyError = (a, C) => (q) => {
        if (q.pos[0] === -1) return;
        q.linePos = q.pos.map((a) => C.linePos(a));
        const { line: re, col: ae } = q.linePos[0];
        q.message += ` at line ${re}, column ${ae}`;
        let Ue = ae - 1;
        let lt = a
          .substring(C.lineStarts[re - 1], C.lineStarts[re])
          .replace(/[\n\r]+$/, '');
        if (Ue >= 60 && lt.length > 80) {
          const a = Math.min(Ue - 39, lt.length - 79);
          lt = '…' + lt.substring(a);
          Ue -= a - 1;
        }
        if (lt.length > 80) lt = lt.substring(0, 79) + '…';
        if (re > 1 && /^ *$/.test(lt.substring(0, Ue))) {
          let q = a.substring(C.lineStarts[re - 2], C.lineStarts[re - 1]);
          if (q.length > 80) q = q.substring(0, 79) + '…\n';
          lt = q + lt;
        }
        if (/[^ ]/.test(lt)) {
          let a = 1;
          const C = q.linePos[1];
          if (C && C.line === re && C.col > ae) {
            a = Math.max(1, Math.min(C.col - ae, 80 - Ue));
          }
          const Pt = ' '.repeat(Ue) + '^'.repeat(a);
          q.message += `:\n\n${lt}\n${Pt}\n`;
        }
      };
      C.YAMLError = YAMLError;
      C.YAMLParseError = YAMLParseError;
      C.YAMLWarning = YAMLWarning;
      C.prettifyError = prettifyError;
    },
    1384: (a, C, q) => {
      'use strict';
      var re;
      var ae = q(2247);
      var Ue = q(8637);
      var lt = q(4415);
      var Pt = q(9896);
      var Wt = q(8248);
      var Ar = q(175);
      var Er = q(764);
      var Ir = q(8524);
      var Br = q(3198);
      var Qr = q(1498);
      var kr = q(3134);
      var Dr = q(8680);
      var Nr = q(7995);
      var Lr = q(1083);
      var Fr = q(684);
      var Mr = q(8706);
      re = ae.Composer;
      re = Ue.Document;
      re = lt.Schema;
      re = Pt.YAMLError;
      re = Pt.YAMLParseError;
      re = Pt.YAMLWarning;
      re = Wt.Alias;
      re = Ar.isAlias;
      re = Ar.isCollection;
      re = Ar.isDocument;
      re = Ar.isMap;
      re = Ar.isNode;
      re = Ar.isPair;
      re = Ar.isScalar;
      re = Ar.isSeq;
      re = Er.Pair;
      re = Ir.Scalar;
      re = Br.YAMLMap;
      re = Qr.YAMLSeq;
      re = kr;
      re = Dr.Lexer;
      re = Nr.LineCounter;
      re = Lr.Parser;
      re = Fr.parse;
      re = Fr.parseAllDocuments;
      re = Fr.parseDocument;
      C.Pz = Fr.stringify;
      re = Mr.visit;
      re = Mr.visitAsync;
    },
    8389: (a, C) => {
      'use strict';
      function debug(a, ...C) {
        if (a === 'debug') console.log(...C);
      }
      function warn(a, C) {
        if (a === 'debug' || a === 'warn') {
          if (typeof process !== 'undefined' && process.emitWarning)
            process.emitWarning(C);
          else console.warn(C);
        }
      }
      C.debug = debug;
      C.warn = warn;
    },
    8248: (a, C, q) => {
      'use strict';
      var re = q(7857);
      var ae = q(8706);
      var Ue = q(175);
      var lt = q(8569);
      var Pt = q(3669);
      class Alias extends lt.NodeBase {
        constructor(a) {
          super(Ue.ALIAS);
          this.source = a;
          Object.defineProperty(this, 'tag', {
            set() {
              throw new Error('Alias nodes cannot have tags');
            }
          });
        }
        resolve(a) {
          let C = undefined;
          ae.visit(a, {
            Node: (a, q) => {
              if (q === this) return ae.visit.BREAK;
              if (q.anchor === this.source) C = q;
            }
          });
          return C;
        }
        toJSON(a, C) {
          if (!C) return { source: this.source };
          const { anchors: q, doc: re, maxAliasCount: ae } = C;
          const Ue = this.resolve(re);
          if (!Ue) {
            const a = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
            throw new ReferenceError(a);
          }
          let lt = q.get(Ue);
          if (!lt) {
            Pt.toJS(Ue, null, C);
            lt = q.get(Ue);
          }
          if (!lt || lt.res === undefined) {
            const a = 'This should not happen: Alias anchor was not resolved?';
            throw new ReferenceError(a);
          }
          if (ae >= 0) {
            lt.count += 1;
            if (lt.aliasCount === 0) lt.aliasCount = getAliasCount(re, Ue, q);
            if (lt.count * lt.aliasCount > ae) {
              const a =
                'Excessive alias count indicates a resource exhaustion attack';
              throw new ReferenceError(a);
            }
          }
          return lt.res;
        }
        toString(a, C, q) {
          const ae = `*${this.source}`;
          if (a) {
            re.anchorIsValid(this.source);
            if (a.options.verifyAliasOrder && !a.anchors.has(this.source)) {
              const a = `Unresolved alias (the anchor must be set before the alias): ${this.source}`;
              throw new Error(a);
            }
            if (a.implicitKey) return `${ae} `;
          }
          return ae;
        }
      }
      function getAliasCount(a, C, q) {
        if (Ue.isAlias(C)) {
          const re = C.resolve(a);
          const ae = q && re && q.get(re);
          return ae ? ae.count * ae.aliasCount : 0;
        } else if (Ue.isCollection(C)) {
          let re = 0;
          for (const ae of C.items) {
            const C = getAliasCount(a, ae, q);
            if (C > re) re = C;
          }
          return re;
        } else if (Ue.isPair(C)) {
          const re = getAliasCount(a, C.key, q);
          const ae = getAliasCount(a, C.value, q);
          return Math.max(re, ae);
        }
        return 1;
      }
      C.Alias = Alias;
    },
    5060: (a, C, q) => {
      'use strict';
      var re = q(5612);
      var ae = q(175);
      var Ue = q(8569);
      function collectionFromPath(a, C, q) {
        let ae = q;
        for (let a = C.length - 1; a >= 0; --a) {
          const q = C[a];
          if (typeof q === 'number' && Number.isInteger(q) && q >= 0) {
            const a = [];
            a[q] = ae;
            ae = a;
          } else {
            ae = new Map([[q, ae]]);
          }
        }
        return re.createNode(ae, undefined, {
          aliasDuplicateObjects: false,
          keepUndefined: false,
          onAnchor: () => {
            throw new Error('This should not happen, please report a bug.');
          },
          schema: a,
          sourceObjects: new Map()
        });
      }
      const isEmptyPath = (a) =>
        a == null ||
        (typeof a === 'object' && !!a[Symbol.iterator]().next().done);
      class Collection extends Ue.NodeBase {
        constructor(a, C) {
          super(a);
          Object.defineProperty(this, 'schema', {
            value: C,
            configurable: true,
            enumerable: false,
            writable: true
          });
        }
        clone(a) {
          const C = Object.create(
            Object.getPrototypeOf(this),
            Object.getOwnPropertyDescriptors(this)
          );
          if (a) C.schema = a;
          C.items = C.items.map((C) =>
            ae.isNode(C) || ae.isPair(C) ? C.clone(a) : C
          );
          if (this.range) C.range = this.range.slice();
          return C;
        }
        addIn(a, C) {
          if (isEmptyPath(a)) this.add(C);
          else {
            const [q, ...re] = a;
            const Ue = this.get(q, true);
            if (ae.isCollection(Ue)) Ue.addIn(re, C);
            else if (Ue === undefined && this.schema)
              this.set(q, collectionFromPath(this.schema, re, C));
            else
              throw new Error(
                `Expected YAML collection at ${q}. Remaining path: ${re}`
              );
          }
        }
        deleteIn(a) {
          const [C, ...q] = a;
          if (q.length === 0) return this.delete(C);
          const re = this.get(C, true);
          if (ae.isCollection(re)) return re.deleteIn(q);
          else
            throw new Error(
              `Expected YAML collection at ${C}. Remaining path: ${q}`
            );
        }
        getIn(a, C) {
          const [q, ...re] = a;
          const Ue = this.get(q, true);
          if (re.length === 0) return !C && ae.isScalar(Ue) ? Ue.value : Ue;
          else return ae.isCollection(Ue) ? Ue.getIn(re, C) : undefined;
        }
        hasAllNullValues(a) {
          return this.items.every((C) => {
            if (!ae.isPair(C)) return false;
            const q = C.value;
            return (
              q == null ||
              (a &&
                ae.isScalar(q) &&
                q.value == null &&
                !q.commentBefore &&
                !q.comment &&
                !q.tag)
            );
          });
        }
        hasIn(a) {
          const [C, ...q] = a;
          if (q.length === 0) return this.has(C);
          const re = this.get(C, true);
          return ae.isCollection(re) ? re.hasIn(q) : false;
        }
        setIn(a, C) {
          const [q, ...re] = a;
          if (re.length === 0) {
            this.set(q, C);
          } else {
            const a = this.get(q, true);
            if (ae.isCollection(a)) a.setIn(re, C);
            else if (a === undefined && this.schema)
              this.set(q, collectionFromPath(this.schema, re, C));
            else
              throw new Error(
                `Expected YAML collection at ${q}. Remaining path: ${re}`
              );
          }
        }
      }
      C.Collection = Collection;
      C.collectionFromPath = collectionFromPath;
      C.isEmptyPath = isEmptyPath;
    },
    8569: (a, C, q) => {
      'use strict';
      var re = q(2381);
      var ae = q(175);
      var Ue = q(3669);
      class NodeBase {
        constructor(a) {
          Object.defineProperty(this, ae.NODE_TYPE, { value: a });
        }
        clone() {
          const a = Object.create(
            Object.getPrototypeOf(this),
            Object.getOwnPropertyDescriptors(this)
          );
          if (this.range) a.range = this.range.slice();
          return a;
        }
        toJS(
          a,
          { mapAsMap: C, maxAliasCount: q, onAnchor: lt, reviver: Pt } = {}
        ) {
          if (!ae.isDocument(a))
            throw new TypeError('A document argument is required');
          const Wt = {
            anchors: new Map(),
            doc: a,
            keep: true,
            mapAsMap: C === true,
            mapKeyWarned: false,
            maxAliasCount: typeof q === 'number' ? q : 100
          };
          const Ar = Ue.toJS(this, '', Wt);
          if (typeof lt === 'function')
            for (const { count: a, res: C } of Wt.anchors.values()) lt(C, a);
          return typeof Pt === 'function'
            ? re.applyReviver(Pt, { '': Ar }, '', Ar)
            : Ar;
        }
      }
      C.NodeBase = NodeBase;
    },
    764: (a, C, q) => {
      'use strict';
      var re = q(5612);
      var ae = q(7799);
      var Ue = q(9412);
      var lt = q(175);
      function createPair(a, C, q) {
        const ae = re.createNode(a, undefined, q);
        const Ue = re.createNode(C, undefined, q);
        return new Pair(ae, Ue);
      }
      class Pair {
        constructor(a, C = null) {
          Object.defineProperty(this, lt.NODE_TYPE, { value: lt.PAIR });
          this.key = a;
          this.value = C;
        }
        clone(a) {
          let { key: C, value: q } = this;
          if (lt.isNode(C)) C = C.clone(a);
          if (lt.isNode(q)) q = q.clone(a);
          return new Pair(C, q);
        }
        toJSON(a, C) {
          const q = C?.mapAsMap ? new Map() : {};
          return Ue.addPairToJSMap(C, q, this);
        }
        toString(a, C, q) {
          return a?.doc
            ? ae.stringifyPair(this, a, C, q)
            : JSON.stringify(this);
        }
      }
      C.Pair = Pair;
      C.createPair = createPair;
    },
    8524: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(8569);
      var Ue = q(3669);
      const isScalarValue = (a) =>
        !a || (typeof a !== 'function' && typeof a !== 'object');
      class Scalar extends ae.NodeBase {
        constructor(a) {
          super(re.SCALAR);
          this.value = a;
        }
        toJSON(a, C) {
          return C?.keep ? this.value : Ue.toJS(this.value, a, C);
        }
        toString() {
          return String(this.value);
        }
      }
      Scalar.BLOCK_FOLDED = 'BLOCK_FOLDED';
      Scalar.BLOCK_LITERAL = 'BLOCK_LITERAL';
      Scalar.PLAIN = 'PLAIN';
      Scalar.QUOTE_DOUBLE = 'QUOTE_DOUBLE';
      Scalar.QUOTE_SINGLE = 'QUOTE_SINGLE';
      C.Scalar = Scalar;
      C.isScalarValue = isScalarValue;
    },
    3198: (a, C, q) => {
      'use strict';
      var re = q(7247);
      var ae = q(9412);
      var Ue = q(5060);
      var lt = q(175);
      var Pt = q(764);
      var Wt = q(8524);
      function findPair(a, C) {
        const q = lt.isScalar(C) ? C.value : C;
        for (const re of a) {
          if (lt.isPair(re)) {
            if (re.key === C || re.key === q) return re;
            if (lt.isScalar(re.key) && re.key.value === q) return re;
          }
        }
        return undefined;
      }
      class YAMLMap extends Ue.Collection {
        static get tagName() {
          return 'tag:yaml.org,2002:map';
        }
        constructor(a) {
          super(lt.MAP, a);
          this.items = [];
        }
        static from(a, C, q) {
          const { keepUndefined: re, replacer: ae } = q;
          const Ue = new this(a);
          const add = (a, lt) => {
            if (typeof ae === 'function') lt = ae.call(C, a, lt);
            else if (Array.isArray(ae) && !ae.includes(a)) return;
            if (lt !== undefined || re) Ue.items.push(Pt.createPair(a, lt, q));
          };
          if (C instanceof Map) {
            for (const [a, q] of C) add(a, q);
          } else if (C && typeof C === 'object') {
            for (const a of Object.keys(C)) add(a, C[a]);
          }
          if (typeof a.sortMapEntries === 'function') {
            Ue.items.sort(a.sortMapEntries);
          }
          return Ue;
        }
        add(a, C) {
          let q;
          if (lt.isPair(a)) q = a;
          else if (!a || typeof a !== 'object' || !('key' in a)) {
            q = new Pt.Pair(a, a?.value);
          } else q = new Pt.Pair(a.key, a.value);
          const re = findPair(this.items, q.key);
          const ae = this.schema?.sortMapEntries;
          if (re) {
            if (!C) throw new Error(`Key ${q.key} already set`);
            if (lt.isScalar(re.value) && Wt.isScalarValue(q.value))
              re.value.value = q.value;
            else re.value = q.value;
          } else if (ae) {
            const a = this.items.findIndex((a) => ae(q, a) < 0);
            if (a === -1) this.items.push(q);
            else this.items.splice(a, 0, q);
          } else {
            this.items.push(q);
          }
        }
        delete(a) {
          const C = findPair(this.items, a);
          if (!C) return false;
          const q = this.items.splice(this.items.indexOf(C), 1);
          return q.length > 0;
        }
        get(a, C) {
          const q = findPair(this.items, a);
          const re = q?.value;
          return (!C && lt.isScalar(re) ? re.value : re) ?? undefined;
        }
        has(a) {
          return !!findPair(this.items, a);
        }
        set(a, C) {
          this.add(new Pt.Pair(a, C), true);
        }
        toJSON(a, C, q) {
          const re = q ? new q() : C?.mapAsMap ? new Map() : {};
          if (C?.onCreate) C.onCreate(re);
          for (const a of this.items) ae.addPairToJSMap(C, re, a);
          return re;
        }
        toString(a, C, q) {
          if (!a) return JSON.stringify(this);
          for (const a of this.items) {
            if (!lt.isPair(a))
              throw new Error(
                `Map items must all be pairs; found ${JSON.stringify(a)} instead`
              );
          }
          if (!a.allNullValues && this.hasAllNullValues(false))
            a = Object.assign({}, a, { allNullValues: true });
          return re.stringifyCollection(this, a, {
            blockItemPrefix: '',
            flowChars: { start: '{', end: '}' },
            itemIndent: a.indent || '',
            onChompKeep: q,
            onComment: C
          });
        }
      }
      C.YAMLMap = YAMLMap;
      C.findPair = findPair;
    },
    1498: (a, C, q) => {
      'use strict';
      var re = q(5612);
      var ae = q(7247);
      var Ue = q(5060);
      var lt = q(175);
      var Pt = q(8524);
      var Wt = q(3669);
      class YAMLSeq extends Ue.Collection {
        static get tagName() {
          return 'tag:yaml.org,2002:seq';
        }
        constructor(a) {
          super(lt.SEQ, a);
          this.items = [];
        }
        add(a) {
          this.items.push(a);
        }
        delete(a) {
          const C = asItemIndex(a);
          if (typeof C !== 'number') return false;
          const q = this.items.splice(C, 1);
          return q.length > 0;
        }
        get(a, C) {
          const q = asItemIndex(a);
          if (typeof q !== 'number') return undefined;
          const re = this.items[q];
          return !C && lt.isScalar(re) ? re.value : re;
        }
        has(a) {
          const C = asItemIndex(a);
          return typeof C === 'number' && C < this.items.length;
        }
        set(a, C) {
          const q = asItemIndex(a);
          if (typeof q !== 'number')
            throw new Error(`Expected a valid index, not ${a}.`);
          const re = this.items[q];
          if (lt.isScalar(re) && Pt.isScalarValue(C)) re.value = C;
          else this.items[q] = C;
        }
        toJSON(a, C) {
          const q = [];
          if (C?.onCreate) C.onCreate(q);
          let re = 0;
          for (const a of this.items) q.push(Wt.toJS(a, String(re++), C));
          return q;
        }
        toString(a, C, q) {
          if (!a) return JSON.stringify(this);
          return ae.stringifyCollection(this, a, {
            blockItemPrefix: '- ',
            flowChars: { start: '[', end: ']' },
            itemIndent: (a.indent || '') + '  ',
            onChompKeep: q,
            onComment: C
          });
        }
        static from(a, C, q) {
          const { replacer: ae } = q;
          const Ue = new this(a);
          if (C && Symbol.iterator in Object(C)) {
            let a = 0;
            for (let lt of C) {
              if (typeof ae === 'function') {
                const q = C instanceof Set ? lt : String(a++);
                lt = ae.call(C, q, lt);
              }
              Ue.items.push(re.createNode(lt, undefined, q));
            }
          }
          return Ue;
        }
      }
      function asItemIndex(a) {
        let C = lt.isScalar(a) ? a.value : a;
        if (C && typeof C === 'string') C = Number(C);
        return typeof C === 'number' && Number.isInteger(C) && C >= 0
          ? C
          : null;
      }
      C.YAMLSeq = YAMLSeq;
    },
    9412: (a, C, q) => {
      'use strict';
      var re = q(8389);
      var ae = q(4110);
      var Ue = q(175);
      var lt = q(8524);
      var Pt = q(3669);
      const Wt = '<<';
      function addPairToJSMap(a, C, { key: q, value: re }) {
        if (a?.doc.schema.merge && isMergeKey(q)) {
          re = Ue.isAlias(re) ? re.resolve(a.doc) : re;
          if (Ue.isSeq(re)) for (const q of re.items) mergeToJSMap(a, C, q);
          else if (Array.isArray(re)) for (const q of re) mergeToJSMap(a, C, q);
          else mergeToJSMap(a, C, re);
        } else {
          const ae = Pt.toJS(q, '', a);
          if (C instanceof Map) {
            C.set(ae, Pt.toJS(re, ae, a));
          } else if (C instanceof Set) {
            C.add(ae);
          } else {
            const Ue = stringifyKey(q, ae, a);
            const lt = Pt.toJS(re, Ue, a);
            if (Ue in C)
              Object.defineProperty(C, Ue, {
                value: lt,
                writable: true,
                enumerable: true,
                configurable: true
              });
            else C[Ue] = lt;
          }
        }
        return C;
      }
      const isMergeKey = (a) =>
        a === Wt ||
        (Ue.isScalar(a) &&
          a.value === Wt &&
          (!a.type || a.type === lt.Scalar.PLAIN));
      function mergeToJSMap(a, C, q) {
        const re = a && Ue.isAlias(q) ? q.resolve(a.doc) : q;
        if (!Ue.isMap(re))
          throw new Error('Merge sources must be maps or map aliases');
        const ae = re.toJSON(null, a, Map);
        for (const [a, q] of ae) {
          if (C instanceof Map) {
            if (!C.has(a)) C.set(a, q);
          } else if (C instanceof Set) {
            C.add(a);
          } else if (!Object.prototype.hasOwnProperty.call(C, a)) {
            Object.defineProperty(C, a, {
              value: q,
              writable: true,
              enumerable: true,
              configurable: true
            });
          }
        }
        return C;
      }
      function stringifyKey(a, C, q) {
        if (C === null) return '';
        if (typeof C !== 'object') return String(C);
        if (Ue.isNode(a) && q?.doc) {
          const C = ae.createStringifyContext(q.doc, {});
          C.anchors = new Set();
          for (const a of q.anchors.keys()) C.anchors.add(a.anchor);
          C.inFlow = true;
          C.inStringifyKey = true;
          const Ue = a.toString(C);
          if (!q.mapKeyWarned) {
            let a = JSON.stringify(Ue);
            if (a.length > 40) a = a.substring(0, 36) + '..."';
            re.warn(
              q.doc.options.logLevel,
              `Keys with collection values will be stringified due to JS Object restrictions: ${a}. Set mapAsMap: true to use object keys.`
            );
            q.mapKeyWarned = true;
          }
          return Ue;
        }
        return JSON.stringify(C);
      }
      C.addPairToJSMap = addPairToJSMap;
    },
    175: (a, C) => {
      'use strict';
      const q = Symbol.for('yaml.alias');
      const re = Symbol.for('yaml.document');
      const ae = Symbol.for('yaml.map');
      const Ue = Symbol.for('yaml.pair');
      const lt = Symbol.for('yaml.scalar');
      const Pt = Symbol.for('yaml.seq');
      const Wt = Symbol.for('yaml.node.type');
      const isAlias = (a) => !!a && typeof a === 'object' && a[Wt] === q;
      const isDocument = (a) => !!a && typeof a === 'object' && a[Wt] === re;
      const isMap = (a) => !!a && typeof a === 'object' && a[Wt] === ae;
      const isPair = (a) => !!a && typeof a === 'object' && a[Wt] === Ue;
      const isScalar = (a) => !!a && typeof a === 'object' && a[Wt] === lt;
      const isSeq = (a) => !!a && typeof a === 'object' && a[Wt] === Pt;
      function isCollection(a) {
        if (a && typeof a === 'object')
          switch (a[Wt]) {
            case ae:
            case Pt:
              return true;
          }
        return false;
      }
      function isNode(a) {
        if (a && typeof a === 'object')
          switch (a[Wt]) {
            case q:
            case ae:
            case lt:
            case Pt:
              return true;
          }
        return false;
      }
      const hasAnchor = (a) => (isScalar(a) || isCollection(a)) && !!a.anchor;
      C.ALIAS = q;
      C.DOC = re;
      C.MAP = ae;
      C.NODE_TYPE = Wt;
      C.PAIR = Ue;
      C.SCALAR = lt;
      C.SEQ = Pt;
      C.hasAnchor = hasAnchor;
      C.isAlias = isAlias;
      C.isCollection = isCollection;
      C.isDocument = isDocument;
      C.isMap = isMap;
      C.isNode = isNode;
      C.isPair = isPair;
      C.isScalar = isScalar;
      C.isSeq = isSeq;
    },
    3669: (a, C, q) => {
      'use strict';
      var re = q(175);
      function toJS(a, C, q) {
        if (Array.isArray(a)) return a.map((a, C) => toJS(a, String(C), q));
        if (a && typeof a.toJSON === 'function') {
          if (!q || !re.hasAnchor(a)) return a.toJSON(C, q);
          const ae = { aliasCount: 0, count: 1, res: undefined };
          q.anchors.set(a, ae);
          q.onCreate = (a) => {
            ae.res = a;
            delete q.onCreate;
          };
          const Ue = a.toJSON(C, q);
          if (q.onCreate) q.onCreate(Ue);
          return Ue;
        }
        if (typeof a === 'bigint' && !q?.keep) return Number(a);
        return a;
      }
      C.toJS = toJS;
    },
    6258: (a, C, q) => {
      'use strict';
      var re = q(2510);
      var ae = q(3405);
      var Ue = q(9896);
      var lt = q(7376);
      function resolveAsScalar(a, C = true, q) {
        if (a) {
          const _onError = (a, C, re) => {
            const ae =
              typeof a === 'number' ? a : Array.isArray(a) ? a[0] : a.offset;
            if (q) q(ae, C, re);
            else throw new Ue.YAMLParseError([ae, ae + 1], C, re);
          };
          switch (a.type) {
            case 'scalar':
            case 'single-quoted-scalar':
            case 'double-quoted-scalar':
              return ae.resolveFlowScalar(a, C, _onError);
            case 'block-scalar':
              return re.resolveBlockScalar(
                { options: { strict: C } },
                a,
                _onError
              );
          }
        }
        return null;
      }
      function createScalarToken(a, C) {
        const {
          implicitKey: q = false,
          indent: re,
          inFlow: ae = false,
          offset: Ue = -1,
          type: Pt = 'PLAIN'
        } = C;
        const Wt = lt.stringifyString(
          { type: Pt, value: a },
          {
            implicitKey: q,
            indent: re > 0 ? ' '.repeat(re) : '',
            inFlow: ae,
            options: { blockQuote: true, lineWidth: -1 }
          }
        );
        const Ar = C.end ?? [
          { type: 'newline', offset: -1, indent: re, source: '\n' }
        ];
        switch (Wt[0]) {
          case '|':
          case '>': {
            const a = Wt.indexOf('\n');
            const C = Wt.substring(0, a);
            const q = Wt.substring(a + 1) + '\n';
            const ae = [
              { type: 'block-scalar-header', offset: Ue, indent: re, source: C }
            ];
            if (!addEndtoBlockProps(ae, Ar))
              ae.push({
                type: 'newline',
                offset: -1,
                indent: re,
                source: '\n'
              });
            return {
              type: 'block-scalar',
              offset: Ue,
              indent: re,
              props: ae,
              source: q
            };
          }
          case '"':
            return {
              type: 'double-quoted-scalar',
              offset: Ue,
              indent: re,
              source: Wt,
              end: Ar
            };
          case "'":
            return {
              type: 'single-quoted-scalar',
              offset: Ue,
              indent: re,
              source: Wt,
              end: Ar
            };
          default:
            return {
              type: 'scalar',
              offset: Ue,
              indent: re,
              source: Wt,
              end: Ar
            };
        }
      }
      function setScalarValue(a, C, q = {}) {
        let {
          afterKey: re = false,
          implicitKey: ae = false,
          inFlow: Ue = false,
          type: Pt
        } = q;
        let Wt = 'indent' in a ? a.indent : null;
        if (re && typeof Wt === 'number') Wt += 2;
        if (!Pt)
          switch (a.type) {
            case 'single-quoted-scalar':
              Pt = 'QUOTE_SINGLE';
              break;
            case 'double-quoted-scalar':
              Pt = 'QUOTE_DOUBLE';
              break;
            case 'block-scalar': {
              const C = a.props[0];
              if (C.type !== 'block-scalar-header')
                throw new Error('Invalid block scalar header');
              Pt = C.source[0] === '>' ? 'BLOCK_FOLDED' : 'BLOCK_LITERAL';
              break;
            }
            default:
              Pt = 'PLAIN';
          }
        const Ar = lt.stringifyString(
          { type: Pt, value: C },
          {
            implicitKey: ae || Wt === null,
            indent: Wt !== null && Wt > 0 ? ' '.repeat(Wt) : '',
            inFlow: Ue,
            options: { blockQuote: true, lineWidth: -1 }
          }
        );
        switch (Ar[0]) {
          case '|':
          case '>':
            setBlockScalarValue(a, Ar);
            break;
          case '"':
            setFlowScalarValue(a, Ar, 'double-quoted-scalar');
            break;
          case "'":
            setFlowScalarValue(a, Ar, 'single-quoted-scalar');
            break;
          default:
            setFlowScalarValue(a, Ar, 'scalar');
        }
      }
      function setBlockScalarValue(a, C) {
        const q = C.indexOf('\n');
        const re = C.substring(0, q);
        const ae = C.substring(q + 1) + '\n';
        if (a.type === 'block-scalar') {
          const C = a.props[0];
          if (C.type !== 'block-scalar-header')
            throw new Error('Invalid block scalar header');
          C.source = re;
          a.source = ae;
        } else {
          const { offset: C } = a;
          const q = 'indent' in a ? a.indent : -1;
          const Ue = [
            { type: 'block-scalar-header', offset: C, indent: q, source: re }
          ];
          if (!addEndtoBlockProps(Ue, 'end' in a ? a.end : undefined))
            Ue.push({ type: 'newline', offset: -1, indent: q, source: '\n' });
          for (const C of Object.keys(a))
            if (C !== 'type' && C !== 'offset') delete a[C];
          Object.assign(a, {
            type: 'block-scalar',
            indent: q,
            props: Ue,
            source: ae
          });
        }
      }
      function addEndtoBlockProps(a, C) {
        if (C)
          for (const q of C)
            switch (q.type) {
              case 'space':
              case 'comment':
                a.push(q);
                break;
              case 'newline':
                a.push(q);
                return true;
            }
        return false;
      }
      function setFlowScalarValue(a, C, q) {
        switch (a.type) {
          case 'scalar':
          case 'double-quoted-scalar':
          case 'single-quoted-scalar':
            a.type = q;
            a.source = C;
            break;
          case 'block-scalar': {
            const re = a.props.slice(1);
            let ae = C.length;
            if (a.props[0].type === 'block-scalar-header')
              ae -= a.props[0].source.length;
            for (const a of re) a.offset += ae;
            delete a.props;
            Object.assign(a, { type: q, source: C, end: re });
            break;
          }
          case 'block-map':
          case 'block-seq': {
            const re = a.offset + C.length;
            const ae = {
              type: 'newline',
              offset: re,
              indent: a.indent,
              source: '\n'
            };
            delete a.items;
            Object.assign(a, { type: q, source: C, end: [ae] });
            break;
          }
          default: {
            const re = 'indent' in a ? a.indent : -1;
            const ae =
              'end' in a && Array.isArray(a.end)
                ? a.end.filter(
                    (a) =>
                      a.type === 'space' ||
                      a.type === 'comment' ||
                      a.type === 'newline'
                  )
                : [];
            for (const C of Object.keys(a))
              if (C !== 'type' && C !== 'offset') delete a[C];
            Object.assign(a, { type: q, indent: re, source: C, end: ae });
          }
        }
      }
      C.createScalarToken = createScalarToken;
      C.resolveAsScalar = resolveAsScalar;
      C.setScalarValue = setScalarValue;
    },
    6168: (a, C) => {
      'use strict';
      const stringify = (a) =>
        'type' in a ? stringifyToken(a) : stringifyItem(a);
      function stringifyToken(a) {
        switch (a.type) {
          case 'block-scalar': {
            let C = '';
            for (const q of a.props) C += stringifyToken(q);
            return C + a.source;
          }
          case 'block-map':
          case 'block-seq': {
            let C = '';
            for (const q of a.items) C += stringifyItem(q);
            return C;
          }
          case 'flow-collection': {
            let C = a.start.source;
            for (const q of a.items) C += stringifyItem(q);
            for (const q of a.end) C += q.source;
            return C;
          }
          case 'document': {
            let C = stringifyItem(a);
            if (a.end) for (const q of a.end) C += q.source;
            return C;
          }
          default: {
            let C = a.source;
            if ('end' in a && a.end) for (const q of a.end) C += q.source;
            return C;
          }
        }
      }
      function stringifyItem({ start: a, key: C, sep: q, value: re }) {
        let ae = '';
        for (const C of a) ae += C.source;
        if (C) ae += stringifyToken(C);
        if (q) for (const a of q) ae += a.source;
        if (re) ae += stringifyToken(re);
        return ae;
      }
      C.stringify = stringify;
    },
    1333: (a, C) => {
      'use strict';
      const q = Symbol('break visit');
      const re = Symbol('skip children');
      const ae = Symbol('remove item');
      function visit(a, C) {
        if ('type' in a && a.type === 'document')
          a = { start: a.start, value: a.value };
        _visit(Object.freeze([]), a, C);
      }
      visit.BREAK = q;
      visit.SKIP = re;
      visit.REMOVE = ae;
      visit.itemAtPath = (a, C) => {
        let q = a;
        for (const [a, re] of C) {
          const C = q?.[a];
          if (C && 'items' in C) {
            q = C.items[re];
          } else return undefined;
        }
        return q;
      };
      visit.parentCollection = (a, C) => {
        const q = visit.itemAtPath(a, C.slice(0, -1));
        const re = C[C.length - 1][0];
        const ae = q?.[re];
        if (ae && 'items' in ae) return ae;
        throw new Error('Parent collection not found');
      };
      function _visit(a, C, re) {
        let Ue = re(C, a);
        if (typeof Ue === 'symbol') return Ue;
        for (const lt of ['key', 'value']) {
          const Pt = C[lt];
          if (Pt && 'items' in Pt) {
            for (let C = 0; C < Pt.items.length; ++C) {
              const Ue = _visit(
                Object.freeze(a.concat([[lt, C]])),
                Pt.items[C],
                re
              );
              if (typeof Ue === 'number') C = Ue - 1;
              else if (Ue === q) return q;
              else if (Ue === ae) {
                Pt.items.splice(C, 1);
                C -= 1;
              }
            }
            if (typeof Ue === 'function' && lt === 'key') Ue = Ue(C, a);
          }
        }
        return typeof Ue === 'function' ? Ue(C, a) : Ue;
      }
      C.visit = visit;
    },
    3134: (a, C, q) => {
      'use strict';
      var re = q(6258);
      var ae = q(6168);
      var Ue = q(1333);
      const lt = '\ufeff';
      const Pt = '';
      const Wt = '';
      const Ar = '';
      const isCollection = (a) => !!a && 'items' in a;
      const isScalar = (a) =>
        !!a &&
        (a.type === 'scalar' ||
          a.type === 'single-quoted-scalar' ||
          a.type === 'double-quoted-scalar' ||
          a.type === 'block-scalar');
      function prettyToken(a) {
        switch (a) {
          case lt:
            return '<BOM>';
          case Pt:
            return '<DOC>';
          case Wt:
            return '<FLOW_END>';
          case Ar:
            return '<SCALAR>';
          default:
            return JSON.stringify(a);
        }
      }
      function tokenType(a) {
        switch (a) {
          case lt:
            return 'byte-order-mark';
          case Pt:
            return 'doc-mode';
          case Wt:
            return 'flow-error-end';
          case Ar:
            return 'scalar';
          case '---':
            return 'doc-start';
          case '...':
            return 'doc-end';
          case '':
          case '\n':
          case '\r\n':
            return 'newline';
          case '-':
            return 'seq-item-ind';
          case '?':
            return 'explicit-key-ind';
          case ':':
            return 'map-value-ind';
          case '{':
            return 'flow-map-start';
          case '}':
            return 'flow-map-end';
          case '[':
            return 'flow-seq-start';
          case ']':
            return 'flow-seq-end';
          case ',':
            return 'comma';
        }
        switch (a[0]) {
          case ' ':
          case '\t':
            return 'space';
          case '#':
            return 'comment';
          case '%':
            return 'directive-line';
          case '*':
            return 'alias';
          case '&':
            return 'anchor';
          case '!':
            return 'tag';
          case "'":
            return 'single-quoted-scalar';
          case '"':
            return 'double-quoted-scalar';
          case '|':
          case '>':
            return 'block-scalar-header';
        }
        return null;
      }
      C.createScalarToken = re.createScalarToken;
      C.resolveAsScalar = re.resolveAsScalar;
      C.setScalarValue = re.setScalarValue;
      C.stringify = ae.stringify;
      C.visit = Ue.visit;
      C.BOM = lt;
      C.DOCUMENT = Pt;
      C.FLOW_END = Wt;
      C.SCALAR = Ar;
      C.isCollection = isCollection;
      C.isScalar = isScalar;
      C.prettyToken = prettyToken;
      C.tokenType = tokenType;
    },
    8680: (a, C, q) => {
      'use strict';
      var re = q(3134);
      function isEmpty(a) {
        switch (a) {
          case undefined:
          case ' ':
          case '\n':
          case '\r':
          case '\t':
            return true;
          default:
            return false;
        }
      }
      const ae = new Set('0123456789ABCDEFabcdef');
      const Ue = new Set(
        "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-#;/?:@&=+$_.!~*'()"
      );
      const lt = new Set(',[]{}');
      const Pt = new Set(' ,[]{}\n\r\t');
      const isNotAnchorChar = (a) => !a || Pt.has(a);
      class Lexer {
        constructor() {
          this.atEnd = false;
          this.blockScalarIndent = -1;
          this.blockScalarKeep = false;
          this.buffer = '';
          this.flowKey = false;
          this.flowLevel = 0;
          this.indentNext = 0;
          this.indentValue = 0;
          this.lineEndPos = null;
          this.next = null;
          this.pos = 0;
        }
        *lex(a, C = false) {
          if (a) {
            if (typeof a !== 'string')
              throw TypeError('source is not a string');
            this.buffer = this.buffer ? this.buffer + a : a;
            this.lineEndPos = null;
          }
          this.atEnd = !C;
          let q = this.next ?? 'stream';
          while (q && (C || this.hasChars(1))) q = yield* this.parseNext(q);
        }
        atLineEnd() {
          let a = this.pos;
          let C = this.buffer[a];
          while (C === ' ' || C === '\t') C = this.buffer[++a];
          if (!C || C === '#' || C === '\n') return true;
          if (C === '\r') return this.buffer[a + 1] === '\n';
          return false;
        }
        charAt(a) {
          return this.buffer[this.pos + a];
        }
        continueScalar(a) {
          let C = this.buffer[a];
          if (this.indentNext > 0) {
            let q = 0;
            while (C === ' ') C = this.buffer[++q + a];
            if (C === '\r') {
              const C = this.buffer[q + a + 1];
              if (C === '\n' || (!C && !this.atEnd)) return a + q + 1;
            }
            return C === '\n' || q >= this.indentNext || (!C && !this.atEnd)
              ? a + q
              : -1;
          }
          if (C === '-' || C === '.') {
            const C = this.buffer.substr(a, 3);
            if ((C === '---' || C === '...') && isEmpty(this.buffer[a + 3]))
              return -1;
          }
          return a;
        }
        getLine() {
          let a = this.lineEndPos;
          if (typeof a !== 'number' || (a !== -1 && a < this.pos)) {
            a = this.buffer.indexOf('\n', this.pos);
            this.lineEndPos = a;
          }
          if (a === -1)
            return this.atEnd ? this.buffer.substring(this.pos) : null;
          if (this.buffer[a - 1] === '\r') a -= 1;
          return this.buffer.substring(this.pos, a);
        }
        hasChars(a) {
          return this.pos + a <= this.buffer.length;
        }
        setNext(a) {
          this.buffer = this.buffer.substring(this.pos);
          this.pos = 0;
          this.lineEndPos = null;
          this.next = a;
          return null;
        }
        peek(a) {
          return this.buffer.substr(this.pos, a);
        }
        *parseNext(a) {
          switch (a) {
            case 'stream':
              return yield* this.parseStream();
            case 'line-start':
              return yield* this.parseLineStart();
            case 'block-start':
              return yield* this.parseBlockStart();
            case 'doc':
              return yield* this.parseDocument();
            case 'flow':
              return yield* this.parseFlowCollection();
            case 'quoted-scalar':
              return yield* this.parseQuotedScalar();
            case 'block-scalar':
              return yield* this.parseBlockScalar();
            case 'plain-scalar':
              return yield* this.parsePlainScalar();
          }
        }
        *parseStream() {
          let a = this.getLine();
          if (a === null) return this.setNext('stream');
          if (a[0] === re.BOM) {
            yield* this.pushCount(1);
            a = a.substring(1);
          }
          if (a[0] === '%') {
            let C = a.length;
            let q = a.indexOf('#');
            while (q !== -1) {
              const re = a[q - 1];
              if (re === ' ' || re === '\t') {
                C = q - 1;
                break;
              } else {
                q = a.indexOf('#', q + 1);
              }
            }
            while (true) {
              const q = a[C - 1];
              if (q === ' ' || q === '\t') C -= 1;
              else break;
            }
            const re =
              (yield* this.pushCount(C)) + (yield* this.pushSpaces(true));
            yield* this.pushCount(a.length - re);
            this.pushNewline();
            return 'stream';
          }
          if (this.atLineEnd()) {
            const C = yield* this.pushSpaces(true);
            yield* this.pushCount(a.length - C);
            yield* this.pushNewline();
            return 'stream';
          }
          yield re.DOCUMENT;
          return yield* this.parseLineStart();
        }
        *parseLineStart() {
          const a = this.charAt(0);
          if (!a && !this.atEnd) return this.setNext('line-start');
          if (a === '-' || a === '.') {
            if (!this.atEnd && !this.hasChars(4))
              return this.setNext('line-start');
            const a = this.peek(3);
            if ((a === '---' || a === '...') && isEmpty(this.charAt(3))) {
              yield* this.pushCount(3);
              this.indentValue = 0;
              this.indentNext = 0;
              return a === '---' ? 'doc' : 'stream';
            }
          }
          this.indentValue = yield* this.pushSpaces(false);
          if (this.indentNext > this.indentValue && !isEmpty(this.charAt(1)))
            this.indentNext = this.indentValue;
          return yield* this.parseBlockStart();
        }
        *parseBlockStart() {
          const [a, C] = this.peek(2);
          if (!C && !this.atEnd) return this.setNext('block-start');
          if ((a === '-' || a === '?' || a === ':') && isEmpty(C)) {
            const a =
              (yield* this.pushCount(1)) + (yield* this.pushSpaces(true));
            this.indentNext = this.indentValue + 1;
            this.indentValue += a;
            return yield* this.parseBlockStart();
          }
          return 'doc';
        }
        *parseDocument() {
          yield* this.pushSpaces(true);
          const a = this.getLine();
          if (a === null) return this.setNext('doc');
          let C = yield* this.pushIndicators();
          switch (a[C]) {
            case '#':
              yield* this.pushCount(a.length - C);
            case undefined:
              yield* this.pushNewline();
              return yield* this.parseLineStart();
            case '{':
            case '[':
              yield* this.pushCount(1);
              this.flowKey = false;
              this.flowLevel = 1;
              return 'flow';
            case '}':
            case ']':
              yield* this.pushCount(1);
              return 'doc';
            case '*':
              yield* this.pushUntil(isNotAnchorChar);
              return 'doc';
            case '"':
            case "'":
              return yield* this.parseQuotedScalar();
            case '|':
            case '>':
              C += yield* this.parseBlockScalarHeader();
              C += yield* this.pushSpaces(true);
              yield* this.pushCount(a.length - C);
              yield* this.pushNewline();
              return yield* this.parseBlockScalar();
            default:
              return yield* this.parsePlainScalar();
          }
        }
        *parseFlowCollection() {
          let a, C;
          let q = -1;
          do {
            a = yield* this.pushNewline();
            if (a > 0) {
              C = yield* this.pushSpaces(false);
              this.indentValue = q = C;
            } else {
              C = 0;
            }
            C += yield* this.pushSpaces(true);
          } while (a + C > 0);
          const ae = this.getLine();
          if (ae === null) return this.setNext('flow');
          if (
            (q !== -1 && q < this.indentNext && ae[0] !== '#') ||
            (q === 0 &&
              (ae.startsWith('---') || ae.startsWith('...')) &&
              isEmpty(ae[3]))
          ) {
            const a =
              q === this.indentNext - 1 &&
              this.flowLevel === 1 &&
              (ae[0] === ']' || ae[0] === '}');
            if (!a) {
              this.flowLevel = 0;
              yield re.FLOW_END;
              return yield* this.parseLineStart();
            }
          }
          let Ue = 0;
          while (ae[Ue] === ',') {
            Ue += yield* this.pushCount(1);
            Ue += yield* this.pushSpaces(true);
            this.flowKey = false;
          }
          Ue += yield* this.pushIndicators();
          switch (ae[Ue]) {
            case undefined:
              return 'flow';
            case '#':
              yield* this.pushCount(ae.length - Ue);
              return 'flow';
            case '{':
            case '[':
              yield* this.pushCount(1);
              this.flowKey = false;
              this.flowLevel += 1;
              return 'flow';
            case '}':
            case ']':
              yield* this.pushCount(1);
              this.flowKey = true;
              this.flowLevel -= 1;
              return this.flowLevel ? 'flow' : 'doc';
            case '*':
              yield* this.pushUntil(isNotAnchorChar);
              return 'flow';
            case '"':
            case "'":
              this.flowKey = true;
              return yield* this.parseQuotedScalar();
            case ':': {
              const a = this.charAt(1);
              if (this.flowKey || isEmpty(a) || a === ',') {
                this.flowKey = false;
                yield* this.pushCount(1);
                yield* this.pushSpaces(true);
                return 'flow';
              }
            }
            default:
              this.flowKey = false;
              return yield* this.parsePlainScalar();
          }
        }
        *parseQuotedScalar() {
          const a = this.charAt(0);
          let C = this.buffer.indexOf(a, this.pos + 1);
          if (a === "'") {
            while (C !== -1 && this.buffer[C + 1] === "'")
              C = this.buffer.indexOf("'", C + 2);
          } else {
            while (C !== -1) {
              let a = 0;
              while (this.buffer[C - 1 - a] === '\\') a += 1;
              if (a % 2 === 0) break;
              C = this.buffer.indexOf('"', C + 1);
            }
          }
          const q = this.buffer.substring(0, C);
          let re = q.indexOf('\n', this.pos);
          if (re !== -1) {
            while (re !== -1) {
              const a = this.continueScalar(re + 1);
              if (a === -1) break;
              re = q.indexOf('\n', a);
            }
            if (re !== -1) {
              C = re - (q[re - 1] === '\r' ? 2 : 1);
            }
          }
          if (C === -1) {
            if (!this.atEnd) return this.setNext('quoted-scalar');
            C = this.buffer.length;
          }
          yield* this.pushToIndex(C + 1, false);
          return this.flowLevel ? 'flow' : 'doc';
        }
        *parseBlockScalarHeader() {
          this.blockScalarIndent = -1;
          this.blockScalarKeep = false;
          let a = this.pos;
          while (true) {
            const C = this.buffer[++a];
            if (C === '+') this.blockScalarKeep = true;
            else if (C > '0' && C <= '9')
              this.blockScalarIndent = Number(C) - 1;
            else if (C !== '-') break;
          }
          return yield* this.pushUntil((a) => isEmpty(a) || a === '#');
        }
        *parseBlockScalar() {
          let a = this.pos - 1;
          let C = 0;
          let q;
          e: for (let re = this.pos; (q = this.buffer[re]); ++re) {
            switch (q) {
              case ' ':
                C += 1;
                break;
              case '\n':
                a = re;
                C = 0;
                break;
              case '\r': {
                const a = this.buffer[re + 1];
                if (!a && !this.atEnd) return this.setNext('block-scalar');
                if (a === '\n') break;
              }
              default:
                break e;
            }
          }
          if (!q && !this.atEnd) return this.setNext('block-scalar');
          if (C >= this.indentNext) {
            if (this.blockScalarIndent === -1) this.indentNext = C;
            else {
              this.indentNext =
                this.blockScalarIndent +
                (this.indentNext === 0 ? 1 : this.indentNext);
            }
            do {
              const C = this.continueScalar(a + 1);
              if (C === -1) break;
              a = this.buffer.indexOf('\n', C);
            } while (a !== -1);
            if (a === -1) {
              if (!this.atEnd) return this.setNext('block-scalar');
              a = this.buffer.length;
            }
          }
          let ae = a + 1;
          q = this.buffer[ae];
          while (q === ' ') q = this.buffer[++ae];
          if (q === '\t') {
            while (q === '\t' || q === ' ' || q === '\r' || q === '\n')
              q = this.buffer[++ae];
            a = ae - 1;
          } else if (!this.blockScalarKeep) {
            do {
              let q = a - 1;
              let re = this.buffer[q];
              if (re === '\r') re = this.buffer[--q];
              const ae = q;
              while (re === ' ') re = this.buffer[--q];
              if (re === '\n' && q >= this.pos && q + 1 + C > ae) a = q;
              else break;
            } while (true);
          }
          yield re.SCALAR;
          yield* this.pushToIndex(a + 1, true);
          return yield* this.parseLineStart();
        }
        *parsePlainScalar() {
          const a = this.flowLevel > 0;
          let C = this.pos - 1;
          let q = this.pos - 1;
          let ae;
          while ((ae = this.buffer[++q])) {
            if (ae === ':') {
              const re = this.buffer[q + 1];
              if (isEmpty(re) || (a && lt.has(re))) break;
              C = q;
            } else if (isEmpty(ae)) {
              let re = this.buffer[q + 1];
              if (ae === '\r') {
                if (re === '\n') {
                  q += 1;
                  ae = '\n';
                  re = this.buffer[q + 1];
                } else C = q;
              }
              if (re === '#' || (a && lt.has(re))) break;
              if (ae === '\n') {
                const a = this.continueScalar(q + 1);
                if (a === -1) break;
                q = Math.max(q, a - 2);
              }
            } else {
              if (a && lt.has(ae)) break;
              C = q;
            }
          }
          if (!ae && !this.atEnd) return this.setNext('plain-scalar');
          yield re.SCALAR;
          yield* this.pushToIndex(C + 1, true);
          return a ? 'flow' : 'doc';
        }
        *pushCount(a) {
          if (a > 0) {
            yield this.buffer.substr(this.pos, a);
            this.pos += a;
            return a;
          }
          return 0;
        }
        *pushToIndex(a, C) {
          const q = this.buffer.slice(this.pos, a);
          if (q) {
            yield q;
            this.pos += q.length;
            return q.length;
          } else if (C) yield '';
          return 0;
        }
        *pushIndicators() {
          switch (this.charAt(0)) {
            case '!':
              return (
                (yield* this.pushTag()) +
                (yield* this.pushSpaces(true)) +
                (yield* this.pushIndicators())
              );
            case '&':
              return (
                (yield* this.pushUntil(isNotAnchorChar)) +
                (yield* this.pushSpaces(true)) +
                (yield* this.pushIndicators())
              );
            case '-':
            case '?':
            case ':': {
              const a = this.flowLevel > 0;
              const C = this.charAt(1);
              if (isEmpty(C) || (a && lt.has(C))) {
                if (!a) this.indentNext = this.indentValue + 1;
                else if (this.flowKey) this.flowKey = false;
                return (
                  (yield* this.pushCount(1)) +
                  (yield* this.pushSpaces(true)) +
                  (yield* this.pushIndicators())
                );
              }
            }
          }
          return 0;
        }
        *pushTag() {
          if (this.charAt(1) === '<') {
            let a = this.pos + 2;
            let C = this.buffer[a];
            while (!isEmpty(C) && C !== '>') C = this.buffer[++a];
            return yield* this.pushToIndex(C === '>' ? a + 1 : a, false);
          } else {
            let a = this.pos + 1;
            let C = this.buffer[a];
            while (C) {
              if (Ue.has(C)) C = this.buffer[++a];
              else if (
                C === '%' &&
                ae.has(this.buffer[a + 1]) &&
                ae.has(this.buffer[a + 2])
              ) {
                C = this.buffer[(a += 3)];
              } else break;
            }
            return yield* this.pushToIndex(a, false);
          }
        }
        *pushNewline() {
          const a = this.buffer[this.pos];
          if (a === '\n') return yield* this.pushCount(1);
          else if (a === '\r' && this.charAt(1) === '\n')
            return yield* this.pushCount(2);
          else return 0;
        }
        *pushSpaces(a) {
          let C = this.pos - 1;
          let q;
          do {
            q = this.buffer[++C];
          } while (q === ' ' || (a && q === '\t'));
          const re = C - this.pos;
          if (re > 0) {
            yield this.buffer.substr(this.pos, re);
            this.pos = C;
          }
          return re;
        }
        *pushUntil(a) {
          let C = this.pos;
          let q = this.buffer[C];
          while (!a(q)) q = this.buffer[++C];
          return yield* this.pushToIndex(C, false);
        }
      }
      C.Lexer = Lexer;
    },
    7995: (a, C) => {
      'use strict';
      class LineCounter {
        constructor() {
          this.lineStarts = [];
          this.addNewLine = (a) => this.lineStarts.push(a);
          this.linePos = (a) => {
            let C = 0;
            let q = this.lineStarts.length;
            while (C < q) {
              const re = (C + q) >> 1;
              if (this.lineStarts[re] < a) C = re + 1;
              else q = re;
            }
            if (this.lineStarts[C] === a) return { line: C + 1, col: 1 };
            if (C === 0) return { line: 0, col: a };
            const re = this.lineStarts[C - 1];
            return { line: C, col: a - re + 1 };
          };
        }
      }
      C.LineCounter = LineCounter;
    },
    1083: (a, C, q) => {
      'use strict';
      var re = q(3134);
      var ae = q(8680);
      function includesToken(a, C) {
        for (let q = 0; q < a.length; ++q) if (a[q].type === C) return true;
        return false;
      }
      function findNonEmptyIndex(a) {
        for (let C = 0; C < a.length; ++C) {
          switch (a[C].type) {
            case 'space':
            case 'comment':
            case 'newline':
              break;
            default:
              return C;
          }
        }
        return -1;
      }
      function isFlowToken(a) {
        switch (a?.type) {
          case 'alias':
          case 'scalar':
          case 'single-quoted-scalar':
          case 'double-quoted-scalar':
          case 'flow-collection':
            return true;
          default:
            return false;
        }
      }
      function getPrevProps(a) {
        switch (a.type) {
          case 'document':
            return a.start;
          case 'block-map': {
            const C = a.items[a.items.length - 1];
            return C.sep ?? C.start;
          }
          case 'block-seq':
            return a.items[a.items.length - 1].start;
          default:
            return [];
        }
      }
      function getFirstKeyStartProps(a) {
        if (a.length === 0) return [];
        let C = a.length;
        e: while (--C >= 0) {
          switch (a[C].type) {
            case 'doc-start':
            case 'explicit-key-ind':
            case 'map-value-ind':
            case 'seq-item-ind':
            case 'newline':
              break e;
          }
        }
        while (a[++C]?.type === 'space') {}
        return a.splice(C, a.length);
      }
      function fixFlowSeqItems(a) {
        if (a.start.type === 'flow-seq-start') {
          for (const C of a.items) {
            if (
              C.sep &&
              !C.value &&
              !includesToken(C.start, 'explicit-key-ind') &&
              !includesToken(C.sep, 'map-value-ind')
            ) {
              if (C.key) C.value = C.key;
              delete C.key;
              if (isFlowToken(C.value)) {
                if (C.value.end) Array.prototype.push.apply(C.value.end, C.sep);
                else C.value.end = C.sep;
              } else Array.prototype.push.apply(C.start, C.sep);
              delete C.sep;
            }
          }
        }
      }
      class Parser {
        constructor(a) {
          this.atNewLine = true;
          this.atScalar = false;
          this.indent = 0;
          this.offset = 0;
          this.onKeyLine = false;
          this.stack = [];
          this.source = '';
          this.type = '';
          this.lexer = new ae.Lexer();
          this.onNewLine = a;
        }
        *parse(a, C = false) {
          if (this.onNewLine && this.offset === 0) this.onNewLine(0);
          for (const q of this.lexer.lex(a, C)) yield* this.next(q);
          if (!C) yield* this.end();
        }
        *next(a) {
          this.source = a;
          if (process.env.LOG_TOKENS) console.log('|', re.prettyToken(a));
          if (this.atScalar) {
            this.atScalar = false;
            yield* this.step();
            this.offset += a.length;
            return;
          }
          const C = re.tokenType(a);
          if (!C) {
            const C = `Not a YAML token: ${a}`;
            yield* this.pop({
              type: 'error',
              offset: this.offset,
              message: C,
              source: a
            });
            this.offset += a.length;
          } else if (C === 'scalar') {
            this.atNewLine = false;
            this.atScalar = true;
            this.type = 'scalar';
          } else {
            this.type = C;
            yield* this.step();
            switch (C) {
              case 'newline':
                this.atNewLine = true;
                this.indent = 0;
                if (this.onNewLine) this.onNewLine(this.offset + a.length);
                break;
              case 'space':
                if (this.atNewLine && a[0] === ' ') this.indent += a.length;
                break;
              case 'explicit-key-ind':
              case 'map-value-ind':
              case 'seq-item-ind':
                if (this.atNewLine) this.indent += a.length;
                break;
              case 'doc-mode':
              case 'flow-error-end':
                return;
              default:
                this.atNewLine = false;
            }
            this.offset += a.length;
          }
        }
        *end() {
          while (this.stack.length > 0) yield* this.pop();
        }
        get sourceToken() {
          const a = {
            type: this.type,
            offset: this.offset,
            indent: this.indent,
            source: this.source
          };
          return a;
        }
        *step() {
          const a = this.peek(1);
          if (this.type === 'doc-end' && (!a || a.type !== 'doc-end')) {
            while (this.stack.length > 0) yield* this.pop();
            this.stack.push({
              type: 'doc-end',
              offset: this.offset,
              source: this.source
            });
            return;
          }
          if (!a) return yield* this.stream();
          switch (a.type) {
            case 'document':
              return yield* this.document(a);
            case 'alias':
            case 'scalar':
            case 'single-quoted-scalar':
            case 'double-quoted-scalar':
              return yield* this.scalar(a);
            case 'block-scalar':
              return yield* this.blockScalar(a);
            case 'block-map':
              return yield* this.blockMap(a);
            case 'block-seq':
              return yield* this.blockSequence(a);
            case 'flow-collection':
              return yield* this.flowCollection(a);
            case 'doc-end':
              return yield* this.documentEnd(a);
          }
          yield* this.pop();
        }
        peek(a) {
          return this.stack[this.stack.length - a];
        }
        *pop(a) {
          const C = a ?? this.stack.pop();
          if (!C) {
            const a = 'Tried to pop an empty stack';
            yield {
              type: 'error',
              offset: this.offset,
              source: '',
              message: a
            };
          } else if (this.stack.length === 0) {
            yield C;
          } else {
            const a = this.peek(1);
            if (C.type === 'block-scalar') {
              C.indent = 'indent' in a ? a.indent : 0;
            } else if (C.type === 'flow-collection' && a.type === 'document') {
              C.indent = 0;
            }
            if (C.type === 'flow-collection') fixFlowSeqItems(C);
            switch (a.type) {
              case 'document':
                a.value = C;
                break;
              case 'block-scalar':
                a.props.push(C);
                break;
              case 'block-map': {
                const q = a.items[a.items.length - 1];
                if (q.value) {
                  a.items.push({ start: [], key: C, sep: [] });
                  this.onKeyLine = true;
                  return;
                } else if (q.sep) {
                  q.value = C;
                } else {
                  Object.assign(q, { key: C, sep: [] });
                  this.onKeyLine = !q.explicitKey;
                  return;
                }
                break;
              }
              case 'block-seq': {
                const q = a.items[a.items.length - 1];
                if (q.value) a.items.push({ start: [], value: C });
                else q.value = C;
                break;
              }
              case 'flow-collection': {
                const q = a.items[a.items.length - 1];
                if (!q || q.value) a.items.push({ start: [], key: C, sep: [] });
                else if (q.sep) q.value = C;
                else Object.assign(q, { key: C, sep: [] });
                return;
              }
              default:
                yield* this.pop();
                yield* this.pop(C);
            }
            if (
              (a.type === 'document' ||
                a.type === 'block-map' ||
                a.type === 'block-seq') &&
              (C.type === 'block-map' || C.type === 'block-seq')
            ) {
              const q = C.items[C.items.length - 1];
              if (
                q &&
                !q.sep &&
                !q.value &&
                q.start.length > 0 &&
                findNonEmptyIndex(q.start) === -1 &&
                (C.indent === 0 ||
                  q.start.every(
                    (a) => a.type !== 'comment' || a.indent < C.indent
                  ))
              ) {
                if (a.type === 'document') a.end = q.start;
                else a.items.push({ start: q.start });
                C.items.splice(-1, 1);
              }
            }
          }
        }
        *stream() {
          switch (this.type) {
            case 'directive-line':
              yield {
                type: 'directive',
                offset: this.offset,
                source: this.source
              };
              return;
            case 'byte-order-mark':
            case 'space':
            case 'comment':
            case 'newline':
              yield this.sourceToken;
              return;
            case 'doc-mode':
            case 'doc-start': {
              const a = { type: 'document', offset: this.offset, start: [] };
              if (this.type === 'doc-start') a.start.push(this.sourceToken);
              this.stack.push(a);
              return;
            }
          }
          yield {
            type: 'error',
            offset: this.offset,
            message: `Unexpected ${this.type} token in YAML stream`,
            source: this.source
          };
        }
        *document(a) {
          if (a.value) return yield* this.lineEnd(a);
          switch (this.type) {
            case 'doc-start': {
              if (findNonEmptyIndex(a.start) !== -1) {
                yield* this.pop();
                yield* this.step();
              } else a.start.push(this.sourceToken);
              return;
            }
            case 'anchor':
            case 'tag':
            case 'space':
            case 'comment':
            case 'newline':
              a.start.push(this.sourceToken);
              return;
          }
          const C = this.startBlockValue(a);
          if (C) this.stack.push(C);
          else {
            yield {
              type: 'error',
              offset: this.offset,
              message: `Unexpected ${this.type} token in YAML document`,
              source: this.source
            };
          }
        }
        *scalar(a) {
          if (this.type === 'map-value-ind') {
            const C = getPrevProps(this.peek(2));
            const q = getFirstKeyStartProps(C);
            let re;
            if (a.end) {
              re = a.end;
              re.push(this.sourceToken);
              delete a.end;
            } else re = [this.sourceToken];
            const ae = {
              type: 'block-map',
              offset: a.offset,
              indent: a.indent,
              items: [{ start: q, key: a, sep: re }]
            };
            this.onKeyLine = true;
            this.stack[this.stack.length - 1] = ae;
          } else yield* this.lineEnd(a);
        }
        *blockScalar(a) {
          switch (this.type) {
            case 'space':
            case 'comment':
            case 'newline':
              a.props.push(this.sourceToken);
              return;
            case 'scalar':
              a.source = this.source;
              this.atNewLine = true;
              this.indent = 0;
              if (this.onNewLine) {
                let a = this.source.indexOf('\n') + 1;
                while (a !== 0) {
                  this.onNewLine(this.offset + a);
                  a = this.source.indexOf('\n', a) + 1;
                }
              }
              yield* this.pop();
              break;
            default:
              yield* this.pop();
              yield* this.step();
          }
        }
        *blockMap(a) {
          const C = a.items[a.items.length - 1];
          switch (this.type) {
            case 'newline':
              this.onKeyLine = false;
              if (C.value) {
                const q = 'end' in C.value ? C.value.end : undefined;
                const re = Array.isArray(q) ? q[q.length - 1] : undefined;
                if (re?.type === 'comment') q?.push(this.sourceToken);
                else a.items.push({ start: [this.sourceToken] });
              } else if (C.sep) {
                C.sep.push(this.sourceToken);
              } else {
                C.start.push(this.sourceToken);
              }
              return;
            case 'space':
            case 'comment':
              if (C.value) {
                a.items.push({ start: [this.sourceToken] });
              } else if (C.sep) {
                C.sep.push(this.sourceToken);
              } else {
                if (this.atIndentedComment(C.start, a.indent)) {
                  const q = a.items[a.items.length - 2];
                  const re = q?.value?.end;
                  if (Array.isArray(re)) {
                    Array.prototype.push.apply(re, C.start);
                    re.push(this.sourceToken);
                    a.items.pop();
                    return;
                  }
                }
                C.start.push(this.sourceToken);
              }
              return;
          }
          if (this.indent >= a.indent) {
            const q = !this.onKeyLine && this.indent === a.indent;
            const re =
              q && (C.sep || C.explicitKey) && this.type !== 'seq-item-ind';
            let ae = [];
            if (re && C.sep && !C.value) {
              const q = [];
              for (let re = 0; re < C.sep.length; ++re) {
                const ae = C.sep[re];
                switch (ae.type) {
                  case 'newline':
                    q.push(re);
                    break;
                  case 'space':
                    break;
                  case 'comment':
                    if (ae.indent > a.indent) q.length = 0;
                    break;
                  default:
                    q.length = 0;
                }
              }
              if (q.length >= 2) ae = C.sep.splice(q[1]);
            }
            switch (this.type) {
              case 'anchor':
              case 'tag':
                if (re || C.value) {
                  ae.push(this.sourceToken);
                  a.items.push({ start: ae });
                  this.onKeyLine = true;
                } else if (C.sep) {
                  C.sep.push(this.sourceToken);
                } else {
                  C.start.push(this.sourceToken);
                }
                return;
              case 'explicit-key-ind':
                if (!C.sep && !C.explicitKey) {
                  C.start.push(this.sourceToken);
                  C.explicitKey = true;
                } else if (re || C.value) {
                  ae.push(this.sourceToken);
                  a.items.push({ start: ae, explicitKey: true });
                } else {
                  this.stack.push({
                    type: 'block-map',
                    offset: this.offset,
                    indent: this.indent,
                    items: [{ start: [this.sourceToken], explicitKey: true }]
                  });
                }
                this.onKeyLine = true;
                return;
              case 'map-value-ind':
                if (C.explicitKey) {
                  if (!C.sep) {
                    if (includesToken(C.start, 'newline')) {
                      Object.assign(C, { key: null, sep: [this.sourceToken] });
                    } else {
                      const a = getFirstKeyStartProps(C.start);
                      this.stack.push({
                        type: 'block-map',
                        offset: this.offset,
                        indent: this.indent,
                        items: [
                          { start: a, key: null, sep: [this.sourceToken] }
                        ]
                      });
                    }
                  } else if (C.value) {
                    a.items.push({
                      start: [],
                      key: null,
                      sep: [this.sourceToken]
                    });
                  } else if (includesToken(C.sep, 'map-value-ind')) {
                    this.stack.push({
                      type: 'block-map',
                      offset: this.offset,
                      indent: this.indent,
                      items: [{ start: ae, key: null, sep: [this.sourceToken] }]
                    });
                  } else if (
                    isFlowToken(C.key) &&
                    !includesToken(C.sep, 'newline')
                  ) {
                    const a = getFirstKeyStartProps(C.start);
                    const q = C.key;
                    const re = C.sep;
                    re.push(this.sourceToken);
                    delete C.key, delete C.sep;
                    this.stack.push({
                      type: 'block-map',
                      offset: this.offset,
                      indent: this.indent,
                      items: [{ start: a, key: q, sep: re }]
                    });
                  } else if (ae.length > 0) {
                    C.sep = C.sep.concat(ae, this.sourceToken);
                  } else {
                    C.sep.push(this.sourceToken);
                  }
                } else {
                  if (!C.sep) {
                    Object.assign(C, { key: null, sep: [this.sourceToken] });
                  } else if (C.value || re) {
                    a.items.push({
                      start: ae,
                      key: null,
                      sep: [this.sourceToken]
                    });
                  } else if (includesToken(C.sep, 'map-value-ind')) {
                    this.stack.push({
                      type: 'block-map',
                      offset: this.offset,
                      indent: this.indent,
                      items: [{ start: [], key: null, sep: [this.sourceToken] }]
                    });
                  } else {
                    C.sep.push(this.sourceToken);
                  }
                }
                this.onKeyLine = true;
                return;
              case 'alias':
              case 'scalar':
              case 'single-quoted-scalar':
              case 'double-quoted-scalar': {
                const q = this.flowScalar(this.type);
                if (re || C.value) {
                  a.items.push({ start: ae, key: q, sep: [] });
                  this.onKeyLine = true;
                } else if (C.sep) {
                  this.stack.push(q);
                } else {
                  Object.assign(C, { key: q, sep: [] });
                  this.onKeyLine = true;
                }
                return;
              }
              default: {
                const C = this.startBlockValue(a);
                if (C) {
                  if (q && C.type !== 'block-seq') {
                    a.items.push({ start: ae });
                  }
                  this.stack.push(C);
                  return;
                }
              }
            }
          }
          yield* this.pop();
          yield* this.step();
        }
        *blockSequence(a) {
          const C = a.items[a.items.length - 1];
          switch (this.type) {
            case 'newline':
              if (C.value) {
                const q = 'end' in C.value ? C.value.end : undefined;
                const re = Array.isArray(q) ? q[q.length - 1] : undefined;
                if (re?.type === 'comment') q?.push(this.sourceToken);
                else a.items.push({ start: [this.sourceToken] });
              } else C.start.push(this.sourceToken);
              return;
            case 'space':
            case 'comment':
              if (C.value) a.items.push({ start: [this.sourceToken] });
              else {
                if (this.atIndentedComment(C.start, a.indent)) {
                  const q = a.items[a.items.length - 2];
                  const re = q?.value?.end;
                  if (Array.isArray(re)) {
                    Array.prototype.push.apply(re, C.start);
                    re.push(this.sourceToken);
                    a.items.pop();
                    return;
                  }
                }
                C.start.push(this.sourceToken);
              }
              return;
            case 'anchor':
            case 'tag':
              if (C.value || this.indent <= a.indent) break;
              C.start.push(this.sourceToken);
              return;
            case 'seq-item-ind':
              if (this.indent !== a.indent) break;
              if (C.value || includesToken(C.start, 'seq-item-ind'))
                a.items.push({ start: [this.sourceToken] });
              else C.start.push(this.sourceToken);
              return;
          }
          if (this.indent > a.indent) {
            const C = this.startBlockValue(a);
            if (C) {
              this.stack.push(C);
              return;
            }
          }
          yield* this.pop();
          yield* this.step();
        }
        *flowCollection(a) {
          const C = a.items[a.items.length - 1];
          if (this.type === 'flow-error-end') {
            let a;
            do {
              yield* this.pop();
              a = this.peek(1);
            } while (a && a.type === 'flow-collection');
          } else if (a.end.length === 0) {
            switch (this.type) {
              case 'comma':
              case 'explicit-key-ind':
                if (!C || C.sep) a.items.push({ start: [this.sourceToken] });
                else C.start.push(this.sourceToken);
                return;
              case 'map-value-ind':
                if (!C || C.value)
                  a.items.push({
                    start: [],
                    key: null,
                    sep: [this.sourceToken]
                  });
                else if (C.sep) C.sep.push(this.sourceToken);
                else Object.assign(C, { key: null, sep: [this.sourceToken] });
                return;
              case 'space':
              case 'comment':
              case 'newline':
              case 'anchor':
              case 'tag':
                if (!C || C.value) a.items.push({ start: [this.sourceToken] });
                else if (C.sep) C.sep.push(this.sourceToken);
                else C.start.push(this.sourceToken);
                return;
              case 'alias':
              case 'scalar':
              case 'single-quoted-scalar':
              case 'double-quoted-scalar': {
                const q = this.flowScalar(this.type);
                if (!C || C.value) a.items.push({ start: [], key: q, sep: [] });
                else if (C.sep) this.stack.push(q);
                else Object.assign(C, { key: q, sep: [] });
                return;
              }
              case 'flow-map-end':
              case 'flow-seq-end':
                a.end.push(this.sourceToken);
                return;
            }
            const q = this.startBlockValue(a);
            if (q) this.stack.push(q);
            else {
              yield* this.pop();
              yield* this.step();
            }
          } else {
            const C = this.peek(2);
            if (
              C.type === 'block-map' &&
              ((this.type === 'map-value-ind' && C.indent === a.indent) ||
                (this.type === 'newline' && !C.items[C.items.length - 1].sep))
            ) {
              yield* this.pop();
              yield* this.step();
            } else if (
              this.type === 'map-value-ind' &&
              C.type !== 'flow-collection'
            ) {
              const q = getPrevProps(C);
              const re = getFirstKeyStartProps(q);
              fixFlowSeqItems(a);
              const ae = a.end.splice(1, a.end.length);
              ae.push(this.sourceToken);
              const Ue = {
                type: 'block-map',
                offset: a.offset,
                indent: a.indent,
                items: [{ start: re, key: a, sep: ae }]
              };
              this.onKeyLine = true;
              this.stack[this.stack.length - 1] = Ue;
            } else {
              yield* this.lineEnd(a);
            }
          }
        }
        flowScalar(a) {
          if (this.onNewLine) {
            let a = this.source.indexOf('\n') + 1;
            while (a !== 0) {
              this.onNewLine(this.offset + a);
              a = this.source.indexOf('\n', a) + 1;
            }
          }
          return {
            type: a,
            offset: this.offset,
            indent: this.indent,
            source: this.source
          };
        }
        startBlockValue(a) {
          switch (this.type) {
            case 'alias':
            case 'scalar':
            case 'single-quoted-scalar':
            case 'double-quoted-scalar':
              return this.flowScalar(this.type);
            case 'block-scalar-header':
              return {
                type: 'block-scalar',
                offset: this.offset,
                indent: this.indent,
                props: [this.sourceToken],
                source: ''
              };
            case 'flow-map-start':
            case 'flow-seq-start':
              return {
                type: 'flow-collection',
                offset: this.offset,
                indent: this.indent,
                start: this.sourceToken,
                items: [],
                end: []
              };
            case 'seq-item-ind':
              return {
                type: 'block-seq',
                offset: this.offset,
                indent: this.indent,
                items: [{ start: [this.sourceToken] }]
              };
            case 'explicit-key-ind': {
              this.onKeyLine = true;
              const C = getPrevProps(a);
              const q = getFirstKeyStartProps(C);
              q.push(this.sourceToken);
              return {
                type: 'block-map',
                offset: this.offset,
                indent: this.indent,
                items: [{ start: q, explicitKey: true }]
              };
            }
            case 'map-value-ind': {
              this.onKeyLine = true;
              const C = getPrevProps(a);
              const q = getFirstKeyStartProps(C);
              return {
                type: 'block-map',
                offset: this.offset,
                indent: this.indent,
                items: [{ start: q, key: null, sep: [this.sourceToken] }]
              };
            }
          }
          return null;
        }
        atIndentedComment(a, C) {
          if (this.type !== 'comment') return false;
          if (this.indent <= C) return false;
          return a.every((a) => a.type === 'newline' || a.type === 'space');
        }
        *documentEnd(a) {
          if (this.type !== 'doc-mode') {
            if (a.end) a.end.push(this.sourceToken);
            else a.end = [this.sourceToken];
            if (this.type === 'newline') yield* this.pop();
          }
        }
        *lineEnd(a) {
          switch (this.type) {
            case 'comma':
            case 'doc-start':
            case 'doc-end':
            case 'flow-seq-end':
            case 'flow-map-end':
            case 'map-value-ind':
              yield* this.pop();
              yield* this.step();
              break;
            case 'newline':
              this.onKeyLine = false;
            case 'space':
            case 'comment':
            default:
              if (a.end) a.end.push(this.sourceToken);
              else a.end = [this.sourceToken];
              if (this.type === 'newline') yield* this.pop();
          }
        }
      }
      C.Parser = Parser;
    },
    684: (a, C, q) => {
      'use strict';
      var re = q(2247);
      var ae = q(8637);
      var Ue = q(9896);
      var lt = q(8389);
      var Pt = q(7995);
      var Wt = q(1083);
      function parseOptions(a) {
        const C = a.prettyErrors !== false;
        const q = a.lineCounter || (C && new Pt.LineCounter()) || null;
        return { lineCounter: q, prettyErrors: C };
      }
      function parseAllDocuments(a, C = {}) {
        const { lineCounter: q, prettyErrors: ae } = parseOptions(C);
        const lt = new Wt.Parser(q?.addNewLine);
        const Pt = new re.Composer(C);
        const Ar = Array.from(Pt.compose(lt.parse(a)));
        if (ae && q)
          for (const C of Ar) {
            C.errors.forEach(Ue.prettifyError(a, q));
            C.warnings.forEach(Ue.prettifyError(a, q));
          }
        if (Ar.length > 0) return Ar;
        return Object.assign([], { empty: true }, Pt.streamInfo());
      }
      function parseDocument(a, C = {}) {
        const { lineCounter: q, prettyErrors: ae } = parseOptions(C);
        const lt = new Wt.Parser(q?.addNewLine);
        const Pt = new re.Composer(C);
        let Ar = null;
        for (const C of Pt.compose(lt.parse(a), true, a.length)) {
          if (!Ar) Ar = C;
          else if (Ar.options.logLevel !== 'silent') {
            Ar.errors.push(
              new Ue.YAMLParseError(
                C.range.slice(0, 2),
                'MULTIPLE_DOCS',
                'Source contains multiple documents; please use YAML.parseAllDocuments()'
              )
            );
            break;
          }
        }
        if (ae && q) {
          Ar.errors.forEach(Ue.prettifyError(a, q));
          Ar.warnings.forEach(Ue.prettifyError(a, q));
        }
        return Ar;
      }
      function parse(a, C, q) {
        let re = undefined;
        if (typeof C === 'function') {
          re = C;
        } else if (q === undefined && C && typeof C === 'object') {
          q = C;
        }
        const ae = parseDocument(a, q);
        if (!ae) return null;
        ae.warnings.forEach((a) => lt.warn(ae.options.logLevel, a));
        if (ae.errors.length > 0) {
          if (ae.options.logLevel !== 'silent') throw ae.errors[0];
          else ae.errors = [];
        }
        return ae.toJS(Object.assign({ reviver: re }, q));
      }
      function stringify(a, C, q) {
        let re = null;
        if (typeof C === 'function' || Array.isArray(C)) {
          re = C;
        } else if (q === undefined && C) {
          q = C;
        }
        if (typeof q === 'string') q = q.length;
        if (typeof q === 'number') {
          const a = Math.round(q);
          q = a < 1 ? undefined : a > 8 ? { indent: 8 } : { indent: a };
        }
        if (a === undefined) {
          const { keepUndefined: a } = q ?? C ?? {};
          if (!a) return undefined;
        }
        return new ae.Document(a, re, q).toString(q);
      }
      C.parse = parse;
      C.parseAllDocuments = parseAllDocuments;
      C.parseDocument = parseDocument;
      C.stringify = stringify;
    },
    4415: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(5902);
      var Ue = q(4739);
      var lt = q(9337);
      var Pt = q(9228);
      const sortMapEntriesByKey = (a, C) =>
        a.key < C.key ? -1 : a.key > C.key ? 1 : 0;
      class Schema {
        constructor({
          compat: a,
          customTags: C,
          merge: q,
          resolveKnownTags: Wt,
          schema: Ar,
          sortMapEntries: Er,
          toStringDefaults: Ir
        }) {
          this.compat = Array.isArray(a)
            ? Pt.getTags(a, 'compat')
            : a
              ? Pt.getTags(null, a)
              : null;
          this.merge = !!q;
          this.name = (typeof Ar === 'string' && Ar) || 'core';
          this.knownTags = Wt ? Pt.coreKnownTags : {};
          this.tags = Pt.getTags(C, this.name);
          this.toStringOptions = Ir ?? null;
          Object.defineProperty(this, re.MAP, { value: ae.map });
          Object.defineProperty(this, re.SCALAR, { value: lt.string });
          Object.defineProperty(this, re.SEQ, { value: Ue.seq });
          this.sortMapEntries =
            typeof Er === 'function'
              ? Er
              : Er === true
                ? sortMapEntriesByKey
                : null;
        }
        clone() {
          const a = Object.create(
            Schema.prototype,
            Object.getOwnPropertyDescriptors(this)
          );
          a.tags = this.tags.slice();
          return a;
        }
      }
      C.Schema = Schema;
    },
    5902: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(3198);
      const Ue = {
        collection: 'map',
        default: true,
        nodeClass: ae.YAMLMap,
        tag: 'tag:yaml.org,2002:map',
        resolve(a, C) {
          if (!re.isMap(a)) C('Expected a mapping for this tag');
          return a;
        },
        createNode: (a, C, q) => ae.YAMLMap.from(a, C, q)
      };
      C.map = Ue;
    },
    4661: (a, C, q) => {
      'use strict';
      var re = q(8524);
      const ae = {
        identify: (a) => a == null,
        createNode: () => new re.Scalar(null),
        default: true,
        tag: 'tag:yaml.org,2002:null',
        test: /^(?:~|[Nn]ull|NULL)?$/,
        resolve: () => new re.Scalar(null),
        stringify: ({ source: a }, C) =>
          typeof a === 'string' && ae.test.test(a) ? a : C.options.nullStr
      };
      C.nullTag = ae;
    },
    4739: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(1498);
      const Ue = {
        collection: 'seq',
        default: true,
        nodeClass: ae.YAMLSeq,
        tag: 'tag:yaml.org,2002:seq',
        resolve(a, C) {
          if (!re.isSeq(a)) C('Expected a sequence for this tag');
          return a;
        },
        createNode: (a, C, q) => ae.YAMLSeq.from(a, C, q)
      };
      C.seq = Ue;
    },
    9337: (a, C, q) => {
      'use strict';
      var re = q(7376);
      const ae = {
        identify: (a) => typeof a === 'string',
        default: true,
        tag: 'tag:yaml.org,2002:str',
        resolve: (a) => a,
        stringify(a, C, q, ae) {
          C = Object.assign({ actualString: true }, C);
          return re.stringifyString(a, C, q, ae);
        }
      };
      C.string = ae;
    },
    5832: (a, C, q) => {
      'use strict';
      var re = q(8524);
      const ae = {
        identify: (a) => typeof a === 'boolean',
        default: true,
        tag: 'tag:yaml.org,2002:bool',
        test: /^(?:[Tt]rue|TRUE|[Ff]alse|FALSE)$/,
        resolve: (a) => new re.Scalar(a[0] === 't' || a[0] === 'T'),
        stringify({ source: a, value: C }, q) {
          if (a && ae.test.test(a)) {
            const q = a[0] === 't' || a[0] === 'T';
            if (C === q) return a;
          }
          return C ? q.options.trueStr : q.options.falseStr;
        }
      };
      C.boolTag = ae;
    },
    7945: (a, C, q) => {
      'use strict';
      var re = q(8524);
      var ae = q(8384);
      const Ue = {
        identify: (a) => typeof a === 'number',
        default: true,
        tag: 'tag:yaml.org,2002:float',
        test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,
        resolve: (a) =>
          a.slice(-3).toLowerCase() === 'nan'
            ? NaN
            : a[0] === '-'
              ? Number.NEGATIVE_INFINITY
              : Number.POSITIVE_INFINITY,
        stringify: ae.stringifyNumber
      };
      const lt = {
        identify: (a) => typeof a === 'number',
        default: true,
        tag: 'tag:yaml.org,2002:float',
        format: 'EXP',
        test: /^[-+]?(?:\.[0-9]+|[0-9]+(?:\.[0-9]*)?)[eE][-+]?[0-9]+$/,
        resolve: (a) => parseFloat(a),
        stringify(a) {
          const C = Number(a.value);
          return isFinite(C) ? C.toExponential() : ae.stringifyNumber(a);
        }
      };
      const Pt = {
        identify: (a) => typeof a === 'number',
        default: true,
        tag: 'tag:yaml.org,2002:float',
        test: /^[-+]?(?:\.[0-9]+|[0-9]+\.[0-9]*)$/,
        resolve(a) {
          const C = new re.Scalar(parseFloat(a));
          const q = a.indexOf('.');
          if (q !== -1 && a[a.length - 1] === '0')
            C.minFractionDigits = a.length - q - 1;
          return C;
        },
        stringify: ae.stringifyNumber
      };
      C.float = Pt;
      C.floatExp = lt;
      C.floatNaN = Ue;
    },
    2367: (a, C, q) => {
      'use strict';
      var re = q(8384);
      const intIdentify = (a) => typeof a === 'bigint' || Number.isInteger(a);
      const intResolve = (a, C, q, { intAsBigInt: re }) =>
        re ? BigInt(a) : parseInt(a.substring(C), q);
      function intStringify(a, C, q) {
        const { value: ae } = a;
        if (intIdentify(ae) && ae >= 0) return q + ae.toString(C);
        return re.stringifyNumber(a);
      }
      const ae = {
        identify: (a) => intIdentify(a) && a >= 0,
        default: true,
        tag: 'tag:yaml.org,2002:int',
        format: 'OCT',
        test: /^0o[0-7]+$/,
        resolve: (a, C, q) => intResolve(a, 2, 8, q),
        stringify: (a) => intStringify(a, 8, '0o')
      };
      const Ue = {
        identify: intIdentify,
        default: true,
        tag: 'tag:yaml.org,2002:int',
        test: /^[-+]?[0-9]+$/,
        resolve: (a, C, q) => intResolve(a, 0, 10, q),
        stringify: re.stringifyNumber
      };
      const lt = {
        identify: (a) => intIdentify(a) && a >= 0,
        default: true,
        tag: 'tag:yaml.org,2002:int',
        format: 'HEX',
        test: /^0x[0-9a-fA-F]+$/,
        resolve: (a, C, q) => intResolve(a, 2, 16, q),
        stringify: (a) => intStringify(a, 16, '0x')
      };
      C.int = Ue;
      C.intHex = lt;
      C.intOct = ae;
    },
    7699: (a, C, q) => {
      'use strict';
      var re = q(5902);
      var ae = q(4661);
      var Ue = q(4739);
      var lt = q(9337);
      var Pt = q(5832);
      var Wt = q(7945);
      var Ar = q(2367);
      const Er = [
        re.map,
        Ue.seq,
        lt.string,
        ae.nullTag,
        Pt.boolTag,
        Ar.intOct,
        Ar.int,
        Ar.intHex,
        Wt.floatNaN,
        Wt.floatExp,
        Wt.float
      ];
      C.schema = Er;
    },
    3914: (a, C, q) => {
      'use strict';
      var re = q(8524);
      var ae = q(5902);
      var Ue = q(4739);
      function intIdentify(a) {
        return typeof a === 'bigint' || Number.isInteger(a);
      }
      const stringifyJSON = ({ value: a }) => JSON.stringify(a);
      const lt = [
        {
          identify: (a) => typeof a === 'string',
          default: true,
          tag: 'tag:yaml.org,2002:str',
          resolve: (a) => a,
          stringify: stringifyJSON
        },
        {
          identify: (a) => a == null,
          createNode: () => new re.Scalar(null),
          default: true,
          tag: 'tag:yaml.org,2002:null',
          test: /^null$/,
          resolve: () => null,
          stringify: stringifyJSON
        },
        {
          identify: (a) => typeof a === 'boolean',
          default: true,
          tag: 'tag:yaml.org,2002:bool',
          test: /^true|false$/,
          resolve: (a) => a === 'true',
          stringify: stringifyJSON
        },
        {
          identify: intIdentify,
          default: true,
          tag: 'tag:yaml.org,2002:int',
          test: /^-?(?:0|[1-9][0-9]*)$/,
          resolve: (a, C, { intAsBigInt: q }) =>
            q ? BigInt(a) : parseInt(a, 10),
          stringify: ({ value: a }) =>
            intIdentify(a) ? a.toString() : JSON.stringify(a)
        },
        {
          identify: (a) => typeof a === 'number',
          default: true,
          tag: 'tag:yaml.org,2002:float',
          test: /^-?(?:0|[1-9][0-9]*)(?:\.[0-9]*)?(?:[eE][-+]?[0-9]+)?$/,
          resolve: (a) => parseFloat(a),
          stringify: stringifyJSON
        }
      ];
      const Pt = {
        default: true,
        tag: '',
        test: /^/,
        resolve(a, C) {
          C(`Unresolved plain scalar ${JSON.stringify(a)}`);
          return a;
        }
      };
      const Wt = [ae.map, Ue.seq].concat(lt, Pt);
      C.schema = Wt;
    },
    9228: (a, C, q) => {
      'use strict';
      var re = q(5902);
      var ae = q(4661);
      var Ue = q(4739);
      var lt = q(9337);
      var Pt = q(5832);
      var Wt = q(7945);
      var Ar = q(2367);
      var Er = q(7699);
      var Ir = q(3914);
      var Br = q(9288);
      var Qr = q(4974);
      var kr = q(3647);
      var Dr = q(8552);
      var Nr = q(4437);
      var Lr = q(3977);
      const Fr = new Map([
        ['core', Er.schema],
        ['failsafe', [re.map, Ue.seq, lt.string]],
        ['json', Ir.schema],
        ['yaml11', Dr.schema],
        ['yaml-1.1', Dr.schema]
      ]);
      const Mr = {
        binary: Br.binary,
        bool: Pt.boolTag,
        float: Wt.float,
        floatExp: Wt.floatExp,
        floatNaN: Wt.floatNaN,
        floatTime: Lr.floatTime,
        int: Ar.int,
        intHex: Ar.intHex,
        intOct: Ar.intOct,
        intTime: Lr.intTime,
        map: re.map,
        null: ae.nullTag,
        omap: Qr.omap,
        pairs: kr.pairs,
        seq: Ue.seq,
        set: Nr.set,
        timestamp: Lr.timestamp
      };
      const Pr = {
        'tag:yaml.org,2002:binary': Br.binary,
        'tag:yaml.org,2002:omap': Qr.omap,
        'tag:yaml.org,2002:pairs': kr.pairs,
        'tag:yaml.org,2002:set': Nr.set,
        'tag:yaml.org,2002:timestamp': Lr.timestamp
      };
      function getTags(a, C) {
        let q = Fr.get(C);
        if (!q) {
          if (Array.isArray(a)) q = [];
          else {
            const a = Array.from(Fr.keys())
              .filter((a) => a !== 'yaml11')
              .map((a) => JSON.stringify(a))
              .join(', ');
            throw new Error(
              `Unknown schema "${C}"; use one of ${a} or define customTags array`
            );
          }
        }
        if (Array.isArray(a)) {
          for (const C of a) q = q.concat(C);
        } else if (typeof a === 'function') {
          q = a(q.slice());
        }
        return q.map((a) => {
          if (typeof a !== 'string') return a;
          const C = Mr[a];
          if (C) return C;
          const q = Object.keys(Mr)
            .map((a) => JSON.stringify(a))
            .join(', ');
          throw new Error(`Unknown custom tag "${a}"; use one of ${q}`);
        });
      }
      C.coreKnownTags = Pr;
      C.getTags = getTags;
    },
    9288: (a, C, q) => {
      'use strict';
      var re = q(8524);
      var ae = q(7376);
      const Ue = {
        identify: (a) => a instanceof Uint8Array,
        default: false,
        tag: 'tag:yaml.org,2002:binary',
        resolve(a, C) {
          if (typeof Buffer === 'function') {
            return Buffer.from(a, 'base64');
          } else if (typeof atob === 'function') {
            const C = atob(a.replace(/[\n\r]/g, ''));
            const q = new Uint8Array(C.length);
            for (let a = 0; a < C.length; ++a) q[a] = C.charCodeAt(a);
            return q;
          } else {
            C(
              'This environment does not support reading binary tags; either Buffer or atob is required'
            );
            return a;
          }
        },
        stringify({ comment: a, type: C, value: q }, Ue, lt, Pt) {
          const Wt = q;
          let Ar;
          if (typeof Buffer === 'function') {
            Ar =
              Wt instanceof Buffer
                ? Wt.toString('base64')
                : Buffer.from(Wt.buffer).toString('base64');
          } else if (typeof btoa === 'function') {
            let a = '';
            for (let C = 0; C < Wt.length; ++C) a += String.fromCharCode(Wt[C]);
            Ar = btoa(a);
          } else {
            throw new Error(
              'This environment does not support writing binary tags; either Buffer or btoa is required'
            );
          }
          if (!C) C = re.Scalar.BLOCK_LITERAL;
          if (C !== re.Scalar.QUOTE_DOUBLE) {
            const a = Math.max(
              Ue.options.lineWidth - Ue.indent.length,
              Ue.options.minContentWidth
            );
            const q = Math.ceil(Ar.length / a);
            const ae = new Array(q);
            for (let C = 0, re = 0; C < q; ++C, re += a) {
              ae[C] = Ar.substr(re, a);
            }
            Ar = ae.join(C === re.Scalar.BLOCK_LITERAL ? '\n' : ' ');
          }
          return ae.stringifyString(
            { comment: a, type: C, value: Ar },
            Ue,
            lt,
            Pt
          );
        }
      };
      C.binary = Ue;
    },
    2731: (a, C, q) => {
      'use strict';
      var re = q(8524);
      function boolStringify({ value: a, source: C }, q) {
        const re = a ? ae : Ue;
        if (C && re.test.test(C)) return C;
        return a ? q.options.trueStr : q.options.falseStr;
      }
      const ae = {
        identify: (a) => a === true,
        default: true,
        tag: 'tag:yaml.org,2002:bool',
        test: /^(?:Y|y|[Yy]es|YES|[Tt]rue|TRUE|[Oo]n|ON)$/,
        resolve: () => new re.Scalar(true),
        stringify: boolStringify
      };
      const Ue = {
        identify: (a) => a === false,
        default: true,
        tag: 'tag:yaml.org,2002:bool',
        test: /^(?:N|n|[Nn]o|NO|[Ff]alse|FALSE|[Oo]ff|OFF)$/,
        resolve: () => new re.Scalar(false),
        stringify: boolStringify
      };
      C.falseTag = Ue;
      C.trueTag = ae;
    },
    8953: (a, C, q) => {
      'use strict';
      var re = q(8524);
      var ae = q(8384);
      const Ue = {
        identify: (a) => typeof a === 'number',
        default: true,
        tag: 'tag:yaml.org,2002:float',
        test: /^(?:[-+]?\.(?:inf|Inf|INF)|\.nan|\.NaN|\.NAN)$/,
        resolve: (a) =>
          a.slice(-3).toLowerCase() === 'nan'
            ? NaN
            : a[0] === '-'
              ? Number.NEGATIVE_INFINITY
              : Number.POSITIVE_INFINITY,
        stringify: ae.stringifyNumber
      };
      const lt = {
        identify: (a) => typeof a === 'number',
        default: true,
        tag: 'tag:yaml.org,2002:float',
        format: 'EXP',
        test: /^[-+]?(?:[0-9][0-9_]*)?(?:\.[0-9_]*)?[eE][-+]?[0-9]+$/,
        resolve: (a) => parseFloat(a.replace(/_/g, '')),
        stringify(a) {
          const C = Number(a.value);
          return isFinite(C) ? C.toExponential() : ae.stringifyNumber(a);
        }
      };
      const Pt = {
        identify: (a) => typeof a === 'number',
        default: true,
        tag: 'tag:yaml.org,2002:float',
        test: /^[-+]?(?:[0-9][0-9_]*)?\.[0-9_]*$/,
        resolve(a) {
          const C = new re.Scalar(parseFloat(a.replace(/_/g, '')));
          const q = a.indexOf('.');
          if (q !== -1) {
            const re = a.substring(q + 1).replace(/_/g, '');
            if (re[re.length - 1] === '0') C.minFractionDigits = re.length;
          }
          return C;
        },
        stringify: ae.stringifyNumber
      };
      C.float = Pt;
      C.floatExp = lt;
      C.floatNaN = Ue;
    },
    2975: (a, C, q) => {
      'use strict';
      var re = q(8384);
      const intIdentify = (a) => typeof a === 'bigint' || Number.isInteger(a);
      function intResolve(a, C, q, { intAsBigInt: re }) {
        const ae = a[0];
        if (ae === '-' || ae === '+') C += 1;
        a = a.substring(C).replace(/_/g, '');
        if (re) {
          switch (q) {
            case 2:
              a = `0b${a}`;
              break;
            case 8:
              a = `0o${a}`;
              break;
            case 16:
              a = `0x${a}`;
              break;
          }
          const C = BigInt(a);
          return ae === '-' ? BigInt(-1) * C : C;
        }
        const Ue = parseInt(a, q);
        return ae === '-' ? -1 * Ue : Ue;
      }
      function intStringify(a, C, q) {
        const { value: ae } = a;
        if (intIdentify(ae)) {
          const a = ae.toString(C);
          return ae < 0 ? '-' + q + a.substr(1) : q + a;
        }
        return re.stringifyNumber(a);
      }
      const ae = {
        identify: intIdentify,
        default: true,
        tag: 'tag:yaml.org,2002:int',
        format: 'BIN',
        test: /^[-+]?0b[0-1_]+$/,
        resolve: (a, C, q) => intResolve(a, 2, 2, q),
        stringify: (a) => intStringify(a, 2, '0b')
      };
      const Ue = {
        identify: intIdentify,
        default: true,
        tag: 'tag:yaml.org,2002:int',
        format: 'OCT',
        test: /^[-+]?0[0-7_]+$/,
        resolve: (a, C, q) => intResolve(a, 1, 8, q),
        stringify: (a) => intStringify(a, 8, '0')
      };
      const lt = {
        identify: intIdentify,
        default: true,
        tag: 'tag:yaml.org,2002:int',
        test: /^[-+]?[0-9][0-9_]*$/,
        resolve: (a, C, q) => intResolve(a, 0, 10, q),
        stringify: re.stringifyNumber
      };
      const Pt = {
        identify: intIdentify,
        default: true,
        tag: 'tag:yaml.org,2002:int',
        format: 'HEX',
        test: /^[-+]?0x[0-9a-fA-F_]+$/,
        resolve: (a, C, q) => intResolve(a, 2, 16, q),
        stringify: (a) => intStringify(a, 16, '0x')
      };
      C.int = lt;
      C.intBin = ae;
      C.intHex = Pt;
      C.intOct = Ue;
    },
    4974: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(3669);
      var Ue = q(3198);
      var lt = q(1498);
      var Pt = q(3647);
      class YAMLOMap extends lt.YAMLSeq {
        constructor() {
          super();
          this.add = Ue.YAMLMap.prototype.add.bind(this);
          this.delete = Ue.YAMLMap.prototype.delete.bind(this);
          this.get = Ue.YAMLMap.prototype.get.bind(this);
          this.has = Ue.YAMLMap.prototype.has.bind(this);
          this.set = Ue.YAMLMap.prototype.set.bind(this);
          this.tag = YAMLOMap.tag;
        }
        toJSON(a, C) {
          if (!C) return super.toJSON(a);
          const q = new Map();
          if (C?.onCreate) C.onCreate(q);
          for (const a of this.items) {
            let Ue, lt;
            if (re.isPair(a)) {
              Ue = ae.toJS(a.key, '', C);
              lt = ae.toJS(a.value, Ue, C);
            } else {
              Ue = ae.toJS(a, '', C);
            }
            if (q.has(Ue))
              throw new Error('Ordered maps must not include duplicate keys');
            q.set(Ue, lt);
          }
          return q;
        }
        static from(a, C, q) {
          const re = Pt.createPairs(a, C, q);
          const ae = new this();
          ae.items = re.items;
          return ae;
        }
      }
      YAMLOMap.tag = 'tag:yaml.org,2002:omap';
      const Wt = {
        collection: 'seq',
        identify: (a) => a instanceof Map,
        nodeClass: YAMLOMap,
        default: false,
        tag: 'tag:yaml.org,2002:omap',
        resolve(a, C) {
          const q = Pt.resolvePairs(a, C);
          const ae = [];
          for (const { key: a } of q.items) {
            if (re.isScalar(a)) {
              if (ae.includes(a.value)) {
                C(`Ordered maps must not include duplicate keys: ${a.value}`);
              } else {
                ae.push(a.value);
              }
            }
          }
          return Object.assign(new YAMLOMap(), q);
        },
        createNode: (a, C, q) => YAMLOMap.from(a, C, q)
      };
      C.YAMLOMap = YAMLOMap;
      C.omap = Wt;
    },
    3647: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(764);
      var Ue = q(8524);
      var lt = q(1498);
      function resolvePairs(a, C) {
        if (re.isSeq(a)) {
          for (let q = 0; q < a.items.length; ++q) {
            let lt = a.items[q];
            if (re.isPair(lt)) continue;
            else if (re.isMap(lt)) {
              if (lt.items.length > 1)
                C('Each pair must have its own sequence indicator');
              const a = lt.items[0] || new ae.Pair(new Ue.Scalar(null));
              if (lt.commentBefore)
                a.key.commentBefore = a.key.commentBefore
                  ? `${lt.commentBefore}\n${a.key.commentBefore}`
                  : lt.commentBefore;
              if (lt.comment) {
                const C = a.value ?? a.key;
                C.comment = C.comment
                  ? `${lt.comment}\n${C.comment}`
                  : lt.comment;
              }
              lt = a;
            }
            a.items[q] = re.isPair(lt) ? lt : new ae.Pair(lt);
          }
        } else C('Expected a sequence for this tag');
        return a;
      }
      function createPairs(a, C, q) {
        const { replacer: re } = q;
        const Ue = new lt.YAMLSeq(a);
        Ue.tag = 'tag:yaml.org,2002:pairs';
        let Pt = 0;
        if (C && Symbol.iterator in Object(C))
          for (let a of C) {
            if (typeof re === 'function') a = re.call(C, String(Pt++), a);
            let lt, Wt;
            if (Array.isArray(a)) {
              if (a.length === 2) {
                lt = a[0];
                Wt = a[1];
              } else throw new TypeError(`Expected [key, value] tuple: ${a}`);
            } else if (a && a instanceof Object) {
              const C = Object.keys(a);
              if (C.length === 1) {
                lt = C[0];
                Wt = a[lt];
              } else {
                throw new TypeError(
                  `Expected tuple with one key, not ${C.length} keys`
                );
              }
            } else {
              lt = a;
            }
            Ue.items.push(ae.createPair(lt, Wt, q));
          }
        return Ue;
      }
      const Pt = {
        collection: 'seq',
        default: false,
        tag: 'tag:yaml.org,2002:pairs',
        resolve: resolvePairs,
        createNode: createPairs
      };
      C.createPairs = createPairs;
      C.pairs = Pt;
      C.resolvePairs = resolvePairs;
    },
    8552: (a, C, q) => {
      'use strict';
      var re = q(5902);
      var ae = q(4661);
      var Ue = q(4739);
      var lt = q(9337);
      var Pt = q(9288);
      var Wt = q(2731);
      var Ar = q(8953);
      var Er = q(2975);
      var Ir = q(4974);
      var Br = q(3647);
      var Qr = q(4437);
      var kr = q(3977);
      const Dr = [
        re.map,
        Ue.seq,
        lt.string,
        ae.nullTag,
        Wt.trueTag,
        Wt.falseTag,
        Er.intBin,
        Er.intOct,
        Er.int,
        Er.intHex,
        Ar.floatNaN,
        Ar.floatExp,
        Ar.float,
        Pt.binary,
        Ir.omap,
        Br.pairs,
        Qr.set,
        kr.intTime,
        kr.floatTime,
        kr.timestamp
      ];
      C.schema = Dr;
    },
    4437: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(764);
      var Ue = q(3198);
      class YAMLSet extends Ue.YAMLMap {
        constructor(a) {
          super(a);
          this.tag = YAMLSet.tag;
        }
        add(a) {
          let C;
          if (re.isPair(a)) C = a;
          else if (
            a &&
            typeof a === 'object' &&
            'key' in a &&
            'value' in a &&
            a.value === null
          )
            C = new ae.Pair(a.key, null);
          else C = new ae.Pair(a, null);
          const q = Ue.findPair(this.items, C.key);
          if (!q) this.items.push(C);
        }
        get(a, C) {
          const q = Ue.findPair(this.items, a);
          return !C && re.isPair(q)
            ? re.isScalar(q.key)
              ? q.key.value
              : q.key
            : q;
        }
        set(a, C) {
          if (typeof C !== 'boolean')
            throw new Error(
              `Expected boolean value for set(key, value) in a YAML set, not ${typeof C}`
            );
          const q = Ue.findPair(this.items, a);
          if (q && !C) {
            this.items.splice(this.items.indexOf(q), 1);
          } else if (!q && C) {
            this.items.push(new ae.Pair(a));
          }
        }
        toJSON(a, C) {
          return super.toJSON(a, C, Set);
        }
        toString(a, C, q) {
          if (!a) return JSON.stringify(this);
          if (this.hasAllNullValues(true))
            return super.toString(
              Object.assign({}, a, { allNullValues: true }),
              C,
              q
            );
          else throw new Error('Set items must all have null values');
        }
        static from(a, C, q) {
          const { replacer: re } = q;
          const Ue = new this(a);
          if (C && Symbol.iterator in Object(C))
            for (let a of C) {
              if (typeof re === 'function') a = re.call(C, a, a);
              Ue.items.push(ae.createPair(a, null, q));
            }
          return Ue;
        }
      }
      YAMLSet.tag = 'tag:yaml.org,2002:set';
      const lt = {
        collection: 'map',
        identify: (a) => a instanceof Set,
        nodeClass: YAMLSet,
        default: false,
        tag: 'tag:yaml.org,2002:set',
        createNode: (a, C, q) => YAMLSet.from(a, C, q),
        resolve(a, C) {
          if (re.isMap(a)) {
            if (a.hasAllNullValues(true))
              return Object.assign(new YAMLSet(), a);
            else C('Set items must all have null values');
          } else C('Expected a mapping for this tag');
          return a;
        }
      };
      C.YAMLSet = YAMLSet;
      C.set = lt;
    },
    3977: (a, C, q) => {
      'use strict';
      var re = q(8384);
      function parseSexagesimal(a, C) {
        const q = a[0];
        const re = q === '-' || q === '+' ? a.substring(1) : a;
        const num = (a) => (C ? BigInt(a) : Number(a));
        const ae = re
          .replace(/_/g, '')
          .split(':')
          .reduce((a, C) => a * num(60) + num(C), num(0));
        return q === '-' ? num(-1) * ae : ae;
      }
      function stringifySexagesimal(a) {
        let { value: C } = a;
        let num = (a) => a;
        if (typeof C === 'bigint') num = (a) => BigInt(a);
        else if (isNaN(C) || !isFinite(C)) return re.stringifyNumber(a);
        let q = '';
        if (C < 0) {
          q = '-';
          C *= num(-1);
        }
        const ae = num(60);
        const Ue = [C % ae];
        if (C < 60) {
          Ue.unshift(0);
        } else {
          C = (C - Ue[0]) / ae;
          Ue.unshift(C % ae);
          if (C >= 60) {
            C = (C - Ue[0]) / ae;
            Ue.unshift(C);
          }
        }
        return (
          q +
          Ue.map((a) => String(a).padStart(2, '0'))
            .join(':')
            .replace(/000000\d*$/, '')
        );
      }
      const ae = {
        identify: (a) => typeof a === 'bigint' || Number.isInteger(a),
        default: true,
        tag: 'tag:yaml.org,2002:int',
        format: 'TIME',
        test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+$/,
        resolve: (a, C, { intAsBigInt: q }) => parseSexagesimal(a, q),
        stringify: stringifySexagesimal
      };
      const Ue = {
        identify: (a) => typeof a === 'number',
        default: true,
        tag: 'tag:yaml.org,2002:float',
        format: 'TIME',
        test: /^[-+]?[0-9][0-9_]*(?::[0-5]?[0-9])+\.[0-9_]*$/,
        resolve: (a) => parseSexagesimal(a, false),
        stringify: stringifySexagesimal
      };
      const lt = {
        identify: (a) => a instanceof Date,
        default: true,
        tag: 'tag:yaml.org,2002:timestamp',
        test: RegExp(
          '^([0-9]{4})-([0-9]{1,2})-([0-9]{1,2})' +
            '(?:' +
            '(?:t|T|[ \\t]+)' +
            '([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2}(\\.[0-9]+)?)' +
            '(?:[ \\t]*(Z|[-+][012]?[0-9](?::[0-9]{2})?))?' +
            ')?$'
        ),
        resolve(a) {
          const C = a.match(lt.test);
          if (!C)
            throw new Error(
              '!!timestamp expects a date, starting with yyyy-mm-dd'
            );
          const [, q, re, ae, Ue, Pt, Wt] = C.map(Number);
          const Ar = C[7] ? Number((C[7] + '00').substr(1, 3)) : 0;
          let Er = Date.UTC(q, re - 1, ae, Ue || 0, Pt || 0, Wt || 0, Ar);
          const Ir = C[8];
          if (Ir && Ir !== 'Z') {
            let a = parseSexagesimal(Ir, false);
            if (Math.abs(a) < 30) a *= 60;
            Er -= 6e4 * a;
          }
          return new Date(Er);
        },
        stringify: ({ value: a }) =>
          a.toISOString().replace(/((T00:00)?:00)?\.000Z$/, '')
      };
      C.floatTime = Ue;
      C.intTime = ae;
      C.timestamp = lt;
    },
    9151: (a, C) => {
      'use strict';
      const q = 'flow';
      const re = 'block';
      const ae = 'quoted';
      function foldFlowLines(
        a,
        C,
        q = 'flow',
        {
          indentAtStart: Ue,
          lineWidth: lt = 80,
          minContentWidth: Pt = 20,
          onFold: Wt,
          onOverflow: Ar
        } = {}
      ) {
        if (!lt || lt < 0) return a;
        if (lt < Pt) Pt = 0;
        const Er = Math.max(1 + Pt, 1 + lt - C.length);
        if (a.length <= Er) return a;
        const Ir = [];
        const Br = {};
        let Qr = lt - C.length;
        if (typeof Ue === 'number') {
          if (Ue > lt - Math.max(2, Pt)) Ir.push(0);
          else Qr = lt - Ue;
        }
        let kr = undefined;
        let Dr = undefined;
        let Nr = false;
        let Lr = -1;
        let Fr = -1;
        let Mr = -1;
        if (q === re) {
          Lr = consumeMoreIndentedLines(a, Lr, C.length);
          if (Lr !== -1) Qr = Lr + Er;
        }
        for (let Ue; (Ue = a[(Lr += 1)]); ) {
          if (q === ae && Ue === '\\') {
            Fr = Lr;
            switch (a[Lr + 1]) {
              case 'x':
                Lr += 3;
                break;
              case 'u':
                Lr += 5;
                break;
              case 'U':
                Lr += 9;
                break;
              default:
                Lr += 1;
            }
            Mr = Lr;
          }
          if (Ue === '\n') {
            if (q === re) Lr = consumeMoreIndentedLines(a, Lr, C.length);
            Qr = Lr + C.length + Er;
            kr = undefined;
          } else {
            if (Ue === ' ' && Dr && Dr !== ' ' && Dr !== '\n' && Dr !== '\t') {
              const C = a[Lr + 1];
              if (C && C !== ' ' && C !== '\n' && C !== '\t') kr = Lr;
            }
            if (Lr >= Qr) {
              if (kr) {
                Ir.push(kr);
                Qr = kr + Er;
                kr = undefined;
              } else if (q === ae) {
                while (Dr === ' ' || Dr === '\t') {
                  Dr = Ue;
                  Ue = a[(Lr += 1)];
                  Nr = true;
                }
                const C = Lr > Mr + 1 ? Lr - 2 : Fr - 1;
                if (Br[C]) return a;
                Ir.push(C);
                Br[C] = true;
                Qr = C + Er;
                kr = undefined;
              } else {
                Nr = true;
              }
            }
          }
          Dr = Ue;
        }
        if (Nr && Ar) Ar();
        if (Ir.length === 0) return a;
        if (Wt) Wt();
        let Pr = a.slice(0, Ir[0]);
        for (let re = 0; re < Ir.length; ++re) {
          const Ue = Ir[re];
          const lt = Ir[re + 1] || a.length;
          if (Ue === 0) Pr = `\n${C}${a.slice(0, lt)}`;
          else {
            if (q === ae && Br[Ue]) Pr += `${a[Ue]}\\`;
            Pr += `\n${C}${a.slice(Ue + 1, lt)}`;
          }
        }
        return Pr;
      }
      function consumeMoreIndentedLines(a, C, q) {
        let re = C;
        let ae = C + 1;
        let Ue = a[ae];
        while (Ue === ' ' || Ue === '\t') {
          if (C < ae + q) {
            Ue = a[++C];
          } else {
            do {
              Ue = a[++C];
            } while (Ue && Ue !== '\n');
            re = C;
            ae = C + 1;
            Ue = a[ae];
          }
        }
        return re;
      }
      C.FOLD_BLOCK = re;
      C.FOLD_FLOW = q;
      C.FOLD_QUOTED = ae;
      C.foldFlowLines = foldFlowLines;
    },
    4110: (a, C, q) => {
      'use strict';
      var re = q(7857);
      var ae = q(175);
      var Ue = q(2926);
      var lt = q(7376);
      function createStringifyContext(a, C) {
        const q = Object.assign(
          {
            blockQuote: true,
            commentString: Ue.stringifyComment,
            defaultKeyType: null,
            defaultStringType: 'PLAIN',
            directives: null,
            doubleQuotedAsJSON: false,
            doubleQuotedMinMultiLineLength: 40,
            falseStr: 'false',
            flowCollectionPadding: true,
            indentSeq: true,
            lineWidth: 80,
            minContentWidth: 20,
            nullStr: 'null',
            simpleKeys: false,
            singleQuote: null,
            trueStr: 'true',
            verifyAliasOrder: true
          },
          a.schema.toStringOptions,
          C
        );
        let re;
        switch (q.collectionStyle) {
          case 'block':
            re = false;
            break;
          case 'flow':
            re = true;
            break;
          default:
            re = null;
        }
        return {
          anchors: new Set(),
          doc: a,
          flowCollectionPadding: q.flowCollectionPadding ? ' ' : '',
          indent: '',
          indentStep:
            typeof q.indent === 'number' ? ' '.repeat(q.indent) : '  ',
          inFlow: re,
          options: q
        };
      }
      function getTagObject(a, C) {
        if (C.tag) {
          const q = a.filter((a) => a.tag === C.tag);
          if (q.length > 0) return q.find((a) => a.format === C.format) ?? q[0];
        }
        let q = undefined;
        let re;
        if (ae.isScalar(C)) {
          re = C.value;
          const ae = a.filter((a) => a.identify?.(re));
          q =
            ae.find((a) => a.format === C.format) ?? ae.find((a) => !a.format);
        } else {
          re = C;
          q = a.find((a) => a.nodeClass && re instanceof a.nodeClass);
        }
        if (!q) {
          const a = re?.constructor?.name ?? typeof re;
          throw new Error(`Tag not resolved for ${a} value`);
        }
        return q;
      }
      function stringifyProps(a, C, { anchors: q, doc: Ue }) {
        if (!Ue.directives) return '';
        const lt = [];
        const Pt = (ae.isScalar(a) || ae.isCollection(a)) && a.anchor;
        if (Pt && re.anchorIsValid(Pt)) {
          q.add(Pt);
          lt.push(`&${Pt}`);
        }
        const Wt = a.tag ? a.tag : C.default ? null : C.tag;
        if (Wt) lt.push(Ue.directives.tagString(Wt));
        return lt.join(' ');
      }
      function stringify(a, C, q, re) {
        if (ae.isPair(a)) return a.toString(C, q, re);
        if (ae.isAlias(a)) {
          if (C.doc.directives) return a.toString(C);
          if (C.resolvedAliases?.has(a)) {
            throw new TypeError(
              `Cannot stringify circular structure without alias nodes`
            );
          } else {
            if (C.resolvedAliases) C.resolvedAliases.add(a);
            else C.resolvedAliases = new Set([a]);
            a = a.resolve(C.doc);
          }
        }
        let Ue = undefined;
        const Pt = ae.isNode(a)
          ? a
          : C.doc.createNode(a, { onTagObj: (a) => (Ue = a) });
        if (!Ue) Ue = getTagObject(C.doc.schema.tags, Pt);
        const Wt = stringifyProps(Pt, Ue, C);
        if (Wt.length > 0)
          C.indentAtStart = (C.indentAtStart ?? 0) + Wt.length + 1;
        const Ar =
          typeof Ue.stringify === 'function'
            ? Ue.stringify(Pt, C, q, re)
            : ae.isScalar(Pt)
              ? lt.stringifyString(Pt, C, q, re)
              : Pt.toString(C, q, re);
        if (!Wt) return Ar;
        return ae.isScalar(Pt) || Ar[0] === '{' || Ar[0] === '['
          ? `${Wt} ${Ar}`
          : `${Wt}\n${C.indent}${Ar}`;
      }
      C.createStringifyContext = createStringifyContext;
      C.stringify = stringify;
    },
    7247: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(4110);
      var Ue = q(2926);
      function stringifyCollection(a, C, q) {
        const re = C.inFlow ?? a.flow;
        const ae = re ? stringifyFlowCollection : stringifyBlockCollection;
        return ae(a, C, q);
      }
      function stringifyBlockCollection(
        { comment: a, items: C },
        q,
        {
          blockItemPrefix: lt,
          flowChars: Pt,
          itemIndent: Wt,
          onChompKeep: Ar,
          onComment: Er
        }
      ) {
        const {
          indent: Ir,
          options: { commentString: Br }
        } = q;
        const Qr = Object.assign({}, q, { indent: Wt, type: null });
        let kr = false;
        const Dr = [];
        for (let a = 0; a < C.length; ++a) {
          const Pt = C[a];
          let Ar = null;
          if (re.isNode(Pt)) {
            if (!kr && Pt.spaceBefore) Dr.push('');
            addCommentBefore(q, Dr, Pt.commentBefore, kr);
            if (Pt.comment) Ar = Pt.comment;
          } else if (re.isPair(Pt)) {
            const a = re.isNode(Pt.key) ? Pt.key : null;
            if (a) {
              if (!kr && a.spaceBefore) Dr.push('');
              addCommentBefore(q, Dr, a.commentBefore, kr);
            }
          }
          kr = false;
          let Er = ae.stringify(
            Pt,
            Qr,
            () => (Ar = null),
            () => (kr = true)
          );
          if (Ar) Er += Ue.lineComment(Er, Wt, Br(Ar));
          if (kr && Ar) kr = false;
          Dr.push(lt + Er);
        }
        let Nr;
        if (Dr.length === 0) {
          Nr = Pt.start + Pt.end;
        } else {
          Nr = Dr[0];
          for (let a = 1; a < Dr.length; ++a) {
            const C = Dr[a];
            Nr += C ? `\n${Ir}${C}` : '\n';
          }
        }
        if (a) {
          Nr += '\n' + Ue.indentComment(Br(a), Ir);
          if (Er) Er();
        } else if (kr && Ar) Ar();
        return Nr;
      }
      function stringifyFlowCollection(
        { items: a },
        C,
        { flowChars: q, itemIndent: lt }
      ) {
        const {
          indent: Pt,
          indentStep: Wt,
          flowCollectionPadding: Ar,
          options: { commentString: Er }
        } = C;
        lt += Wt;
        const Ir = Object.assign({}, C, {
          indent: lt,
          inFlow: true,
          type: null
        });
        let Br = false;
        let Qr = 0;
        const kr = [];
        for (let q = 0; q < a.length; ++q) {
          const Pt = a[q];
          let Wt = null;
          if (re.isNode(Pt)) {
            if (Pt.spaceBefore) kr.push('');
            addCommentBefore(C, kr, Pt.commentBefore, false);
            if (Pt.comment) Wt = Pt.comment;
          } else if (re.isPair(Pt)) {
            const a = re.isNode(Pt.key) ? Pt.key : null;
            if (a) {
              if (a.spaceBefore) kr.push('');
              addCommentBefore(C, kr, a.commentBefore, false);
              if (a.comment) Br = true;
            }
            const q = re.isNode(Pt.value) ? Pt.value : null;
            if (q) {
              if (q.comment) Wt = q.comment;
              if (q.commentBefore) Br = true;
            } else if (Pt.value == null && a?.comment) {
              Wt = a.comment;
            }
          }
          if (Wt) Br = true;
          let Ar = ae.stringify(Pt, Ir, () => (Wt = null));
          if (q < a.length - 1) Ar += ',';
          if (Wt) Ar += Ue.lineComment(Ar, lt, Er(Wt));
          if (!Br && (kr.length > Qr || Ar.includes('\n'))) Br = true;
          kr.push(Ar);
          Qr = kr.length;
        }
        const { start: Dr, end: Nr } = q;
        if (kr.length === 0) {
          return Dr + Nr;
        } else {
          if (!Br) {
            const a = kr.reduce((a, C) => a + C.length + 2, 2);
            Br = C.options.lineWidth > 0 && a > C.options.lineWidth;
          }
          if (Br) {
            let a = Dr;
            for (const C of kr) a += C ? `\n${Wt}${Pt}${C}` : '\n';
            return `${a}\n${Pt}${Nr}`;
          } else {
            return `${Dr}${Ar}${kr.join(' ')}${Ar}${Nr}`;
          }
        }
      }
      function addCommentBefore(
        { indent: a, options: { commentString: C } },
        q,
        re,
        ae
      ) {
        if (re && ae) re = re.replace(/^\n+/, '');
        if (re) {
          const ae = Ue.indentComment(C(re), a);
          q.push(ae.trimStart());
        }
      }
      C.stringifyCollection = stringifyCollection;
    },
    2926: (a, C) => {
      'use strict';
      const stringifyComment = (a) => a.replace(/^(?!$)(?: $)?/gm, '#');
      function indentComment(a, C) {
        if (/^\n+$/.test(a)) return a.substring(1);
        return C ? a.replace(/^(?! *$)/gm, C) : a;
      }
      const lineComment = (a, C, q) =>
        a.endsWith('\n')
          ? indentComment(q, C)
          : q.includes('\n')
            ? '\n' + indentComment(q, C)
            : (a.endsWith(' ') ? '' : ' ') + q;
      C.indentComment = indentComment;
      C.lineComment = lineComment;
      C.stringifyComment = stringifyComment;
    },
    9997: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(4110);
      var Ue = q(2926);
      function stringifyDocument(a, C) {
        const q = [];
        let lt = C.directives === true;
        if (C.directives !== false && a.directives) {
          const C = a.directives.toString(a);
          if (C) {
            q.push(C);
            lt = true;
          } else if (a.directives.docStart) lt = true;
        }
        if (lt) q.push('---');
        const Pt = ae.createStringifyContext(a, C);
        const { commentString: Wt } = Pt.options;
        if (a.commentBefore) {
          if (q.length !== 1) q.unshift('');
          const C = Wt(a.commentBefore);
          q.unshift(Ue.indentComment(C, ''));
        }
        let Ar = false;
        let Er = null;
        if (a.contents) {
          if (re.isNode(a.contents)) {
            if (a.contents.spaceBefore && lt) q.push('');
            if (a.contents.commentBefore) {
              const C = Wt(a.contents.commentBefore);
              q.push(Ue.indentComment(C, ''));
            }
            Pt.forceBlockIndent = !!a.comment;
            Er = a.contents.comment;
          }
          const C = Er ? undefined : () => (Ar = true);
          let Ir = ae.stringify(a.contents, Pt, () => (Er = null), C);
          if (Er) Ir += Ue.lineComment(Ir, '', Wt(Er));
          if ((Ir[0] === '|' || Ir[0] === '>') && q[q.length - 1] === '---') {
            q[q.length - 1] = `--- ${Ir}`;
          } else q.push(Ir);
        } else {
          q.push(ae.stringify(a.contents, Pt));
        }
        if (a.directives?.docEnd) {
          if (a.comment) {
            const C = Wt(a.comment);
            if (C.includes('\n')) {
              q.push('...');
              q.push(Ue.indentComment(C, ''));
            } else {
              q.push(`... ${C}`);
            }
          } else {
            q.push('...');
          }
        } else {
          let C = a.comment;
          if (C && Ar) C = C.replace(/^\n+/, '');
          if (C) {
            if ((!Ar || Er) && q[q.length - 1] !== '') q.push('');
            q.push(Ue.indentComment(Wt(C), ''));
          }
        }
        return q.join('\n') + '\n';
      }
      C.stringifyDocument = stringifyDocument;
    },
    8384: (a, C) => {
      'use strict';
      function stringifyNumber({
        format: a,
        minFractionDigits: C,
        tag: q,
        value: re
      }) {
        if (typeof re === 'bigint') return String(re);
        const ae = typeof re === 'number' ? re : Number(re);
        if (!isFinite(ae))
          return isNaN(ae) ? '.nan' : ae < 0 ? '-.inf' : '.inf';
        let Ue = JSON.stringify(re);
        if (
          !a &&
          C &&
          (!q || q === 'tag:yaml.org,2002:float') &&
          /^\d/.test(Ue)
        ) {
          let a = Ue.indexOf('.');
          if (a < 0) {
            a = Ue.length;
            Ue += '.';
          }
          let q = C - (Ue.length - a - 1);
          while (q-- > 0) Ue += '0';
        }
        return Ue;
      }
      C.stringifyNumber = stringifyNumber;
    },
    7799: (a, C, q) => {
      'use strict';
      var re = q(175);
      var ae = q(8524);
      var Ue = q(4110);
      var lt = q(2926);
      function stringifyPair({ key: a, value: C }, q, Pt, Wt) {
        const {
          allNullValues: Ar,
          doc: Er,
          indent: Ir,
          indentStep: Br,
          options: { commentString: Qr, indentSeq: kr, simpleKeys: Dr }
        } = q;
        let Nr = (re.isNode(a) && a.comment) || null;
        if (Dr) {
          if (Nr) {
            throw new Error('With simple keys, key nodes cannot have comments');
          }
          if (re.isCollection(a) || (!re.isNode(a) && typeof a === 'object')) {
            const a =
              'With simple keys, collection cannot be used as a key value';
            throw new Error(a);
          }
        }
        let Lr =
          !Dr &&
          (!a ||
            (Nr && C == null && !q.inFlow) ||
            re.isCollection(a) ||
            (re.isScalar(a)
              ? a.type === ae.Scalar.BLOCK_FOLDED ||
                a.type === ae.Scalar.BLOCK_LITERAL
              : typeof a === 'object'));
        q = Object.assign({}, q, {
          allNullValues: false,
          implicitKey: !Lr && (Dr || !Ar),
          indent: Ir + Br
        });
        let Fr = false;
        let Mr = false;
        let Pr = Ue.stringify(
          a,
          q,
          () => (Fr = true),
          () => (Mr = true)
        );
        if (!Lr && !q.inFlow && Pr.length > 1024) {
          if (Dr)
            throw new Error(
              'With simple keys, single line scalar must not span more than 1024 characters'
            );
          Lr = true;
        }
        if (q.inFlow) {
          if (Ar || C == null) {
            if (Fr && Pt) Pt();
            return Pr === '' ? '?' : Lr ? `? ${Pr}` : Pr;
          }
        } else if ((Ar && !Dr) || (C == null && Lr)) {
          Pr = `? ${Pr}`;
          if (Nr && !Fr) {
            Pr += lt.lineComment(Pr, q.indent, Qr(Nr));
          } else if (Mr && Wt) Wt();
          return Pr;
        }
        if (Fr) Nr = null;
        if (Lr) {
          if (Nr) Pr += lt.lineComment(Pr, q.indent, Qr(Nr));
          Pr = `? ${Pr}\n${Ir}:`;
        } else {
          Pr = `${Pr}:`;
          if (Nr) Pr += lt.lineComment(Pr, q.indent, Qr(Nr));
        }
        let Or, xr, Ur;
        if (re.isNode(C)) {
          Or = !!C.spaceBefore;
          xr = C.commentBefore;
          Ur = C.comment;
        } else {
          Or = false;
          xr = null;
          Ur = null;
          if (C && typeof C === 'object') C = Er.createNode(C);
        }
        q.implicitKey = false;
        if (!Lr && !Nr && re.isScalar(C)) q.indentAtStart = Pr.length + 1;
        Mr = false;
        if (
          !kr &&
          Br.length >= 2 &&
          !q.inFlow &&
          !Lr &&
          re.isSeq(C) &&
          !C.flow &&
          !C.tag &&
          !C.anchor
        ) {
          q.indent = q.indent.substring(2);
        }
        let Gr = false;
        const Hr = Ue.stringify(
          C,
          q,
          () => (Gr = true),
          () => (Mr = true)
        );
        let Vr = ' ';
        if (Nr || Or || xr) {
          Vr = Or ? '\n' : '';
          if (xr) {
            const a = Qr(xr);
            Vr += `\n${lt.indentComment(a, q.indent)}`;
          }
          if (Hr === '' && !q.inFlow) {
            if (Vr === '\n') Vr = '\n\n';
          } else {
            Vr += `\n${q.indent}`;
          }
        } else if (!Lr && re.isCollection(C)) {
          const a = Hr[0];
          const re = Hr.indexOf('\n');
          const ae = re !== -1;
          const Ue = q.inFlow ?? C.flow ?? C.items.length === 0;
          if (ae || !Ue) {
            let C = false;
            if (ae && (a === '&' || a === '!')) {
              let q = Hr.indexOf(' ');
              if (a === '&' && q !== -1 && q < re && Hr[q + 1] === '!') {
                q = Hr.indexOf(' ', q + 1);
              }
              if (q === -1 || re < q) C = true;
            }
            if (!C) Vr = `\n${q.indent}`;
          }
        } else if (Hr === '' || Hr[0] === '\n') {
          Vr = '';
        }
        Pr += Vr + Hr;
        if (q.inFlow) {
          if (Gr && Pt) Pt();
        } else if (Ur && !Gr) {
          Pr += lt.lineComment(Pr, q.indent, Qr(Ur));
        } else if (Mr && Wt) {
          Wt();
        }
        return Pr;
      }
      C.stringifyPair = stringifyPair;
    },
    7376: (a, C, q) => {
      'use strict';
      var re = q(8524);
      var ae = q(9151);
      const getFoldOptions = (a, C) => ({
        indentAtStart: C ? a.indent.length : a.indentAtStart,
        lineWidth: a.options.lineWidth,
        minContentWidth: a.options.minContentWidth
      });
      const containsDocumentMarker = (a) => /^(%|---|\.\.\.)/m.test(a);
      function lineLengthOverLimit(a, C, q) {
        if (!C || C < 0) return false;
        const re = C - q;
        const ae = a.length;
        if (ae <= re) return false;
        for (let C = 0, q = 0; C < ae; ++C) {
          if (a[C] === '\n') {
            if (C - q > re) return true;
            q = C + 1;
            if (ae - q <= re) return false;
          }
        }
        return true;
      }
      function doubleQuotedString(a, C) {
        const q = JSON.stringify(a);
        if (C.options.doubleQuotedAsJSON) return q;
        const { implicitKey: re } = C;
        const Ue = C.options.doubleQuotedMinMultiLineLength;
        const lt = C.indent || (containsDocumentMarker(a) ? '  ' : '');
        let Pt = '';
        let Wt = 0;
        for (let a = 0, C = q[a]; C; C = q[++a]) {
          if (C === ' ' && q[a + 1] === '\\' && q[a + 2] === 'n') {
            Pt += q.slice(Wt, a) + '\\ ';
            a += 1;
            Wt = a;
            C = '\\';
          }
          if (C === '\\')
            switch (q[a + 1]) {
              case 'u':
                {
                  Pt += q.slice(Wt, a);
                  const C = q.substr(a + 2, 4);
                  switch (C) {
                    case '0000':
                      Pt += '\\0';
                      break;
                    case '0007':
                      Pt += '\\a';
                      break;
                    case '000b':
                      Pt += '\\v';
                      break;
                    case '001b':
                      Pt += '\\e';
                      break;
                    case '0085':
                      Pt += '\\N';
                      break;
                    case '00a0':
                      Pt += '\\_';
                      break;
                    case '2028':
                      Pt += '\\L';
                      break;
                    case '2029':
                      Pt += '\\P';
                      break;
                    default:
                      if (C.substr(0, 2) === '00') Pt += '\\x' + C.substr(2);
                      else Pt += q.substr(a, 6);
                  }
                  a += 5;
                  Wt = a + 1;
                }
                break;
              case 'n':
                if (re || q[a + 2] === '"' || q.length < Ue) {
                  a += 1;
                } else {
                  Pt += q.slice(Wt, a) + '\n\n';
                  while (
                    q[a + 2] === '\\' &&
                    q[a + 3] === 'n' &&
                    q[a + 4] !== '"'
                  ) {
                    Pt += '\n';
                    a += 2;
                  }
                  Pt += lt;
                  if (q[a + 2] === ' ') Pt += '\\';
                  a += 1;
                  Wt = a + 1;
                }
                break;
              default:
                a += 1;
            }
        }
        Pt = Wt ? Pt + q.slice(Wt) : q;
        return re
          ? Pt
          : ae.foldFlowLines(Pt, lt, ae.FOLD_QUOTED, getFoldOptions(C, false));
      }
      function singleQuotedString(a, C) {
        if (
          C.options.singleQuote === false ||
          (C.implicitKey && a.includes('\n')) ||
          /[ \t]\n|\n[ \t]/.test(a)
        )
          return doubleQuotedString(a, C);
        const q = C.indent || (containsDocumentMarker(a) ? '  ' : '');
        const re =
          "'" + a.replace(/'/g, "''").replace(/\n+/g, `$&\n${q}`) + "'";
        return C.implicitKey
          ? re
          : ae.foldFlowLines(re, q, ae.FOLD_FLOW, getFoldOptions(C, false));
      }
      function quotedString(a, C) {
        const { singleQuote: q } = C.options;
        let re;
        if (q === false) re = doubleQuotedString;
        else {
          const C = a.includes('"');
          const ae = a.includes("'");
          if (C && !ae) re = singleQuotedString;
          else if (ae && !C) re = doubleQuotedString;
          else re = q ? singleQuotedString : doubleQuotedString;
        }
        return re(a, C);
      }
      let Ue;
      try {
        Ue = new RegExp('(^|(?<!\n))\n+(?!\n|$)', 'g');
      } catch {
        Ue = /\n+(?!\n|$)/g;
      }
      function blockString({ comment: a, type: C, value: q }, lt, Pt, Wt) {
        const { blockQuote: Ar, commentString: Er, lineWidth: Ir } = lt.options;
        if (!Ar || /\n[\t ]+$/.test(q) || /^\s*$/.test(q)) {
          return quotedString(q, lt);
        }
        const Br =
          lt.indent ||
          (lt.forceBlockIndent || containsDocumentMarker(q) ? '  ' : '');
        const Qr =
          Ar === 'literal'
            ? true
            : Ar === 'folded' || C === re.Scalar.BLOCK_FOLDED
              ? false
              : C === re.Scalar.BLOCK_LITERAL
                ? true
                : !lineLengthOverLimit(q, Ir, Br.length);
        if (!q) return Qr ? '|\n' : '>\n';
        let kr;
        let Dr;
        for (Dr = q.length; Dr > 0; --Dr) {
          const a = q[Dr - 1];
          if (a !== '\n' && a !== '\t' && a !== ' ') break;
        }
        let Nr = q.substring(Dr);
        const Lr = Nr.indexOf('\n');
        if (Lr === -1) {
          kr = '-';
        } else if (q === Nr || Lr !== Nr.length - 1) {
          kr = '+';
          if (Wt) Wt();
        } else {
          kr = '';
        }
        if (Nr) {
          q = q.slice(0, -Nr.length);
          if (Nr[Nr.length - 1] === '\n') Nr = Nr.slice(0, -1);
          Nr = Nr.replace(Ue, `$&${Br}`);
        }
        let Fr = false;
        let Mr;
        let Pr = -1;
        for (Mr = 0; Mr < q.length; ++Mr) {
          const a = q[Mr];
          if (a === ' ') Fr = true;
          else if (a === '\n') Pr = Mr;
          else break;
        }
        let Or = q.substring(0, Pr < Mr ? Pr + 1 : Mr);
        if (Or) {
          q = q.substring(Or.length);
          Or = Or.replace(/\n+/g, `$&${Br}`);
        }
        const xr = Br ? '2' : '1';
        let Ur = (Qr ? '|' : '>') + (Fr ? xr : '') + kr;
        if (a) {
          Ur += ' ' + Er(a.replace(/ ?[\r\n]+/g, ' '));
          if (Pt) Pt();
        }
        if (Qr) {
          q = q.replace(/\n+/g, `$&${Br}`);
          return `${Ur}\n${Br}${Or}${q}${Nr}`;
        }
        q = q
          .replace(/\n+/g, '\n$&')
          .replace(/(?:^|\n)([\t ].*)(?:([\n\t ]*)\n(?![\n\t ]))?/g, '$1$2')
          .replace(/\n+/g, `$&${Br}`);
        const Gr = ae.foldFlowLines(
          `${Or}${q}${Nr}`,
          Br,
          ae.FOLD_BLOCK,
          getFoldOptions(lt, true)
        );
        return `${Ur}\n${Br}${Gr}`;
      }
      function plainString(a, C, q, Ue) {
        const { type: lt, value: Pt } = a;
        const {
          actualString: Wt,
          implicitKey: Ar,
          indent: Er,
          indentStep: Ir,
          inFlow: Br
        } = C;
        if ((Ar && Pt.includes('\n')) || (Br && /[[\]{},]/.test(Pt))) {
          return quotedString(Pt, C);
        }
        if (
          !Pt ||
          /^[\n\t ,[\]{}#&*!|>'"%@`]|^[?-]$|^[?-][ \t]|[\n:][ \t]|[ \t]\n|[\n\t ]#|[\n\t :]$/.test(
            Pt
          )
        ) {
          return Ar || Br || !Pt.includes('\n')
            ? quotedString(Pt, C)
            : blockString(a, C, q, Ue);
        }
        if (!Ar && !Br && lt !== re.Scalar.PLAIN && Pt.includes('\n')) {
          return blockString(a, C, q, Ue);
        }
        if (containsDocumentMarker(Pt)) {
          if (Er === '') {
            C.forceBlockIndent = true;
            return blockString(a, C, q, Ue);
          } else if (Ar && Er === Ir) {
            return quotedString(Pt, C);
          }
        }
        const Qr = Pt.replace(/\n+/g, `$&\n${Er}`);
        if (Wt) {
          const test = (a) =>
            a.default && a.tag !== 'tag:yaml.org,2002:str' && a.test?.test(Qr);
          const { compat: a, tags: q } = C.doc.schema;
          if (q.some(test) || a?.some(test)) return quotedString(Pt, C);
        }
        return Ar
          ? Qr
          : ae.foldFlowLines(Qr, Er, ae.FOLD_FLOW, getFoldOptions(C, false));
      }
      function stringifyString(a, C, q, ae) {
        const { implicitKey: Ue, inFlow: lt } = C;
        const Pt =
          typeof a.value === 'string'
            ? a
            : Object.assign({}, a, { value: String(a.value) });
        let { type: Wt } = a;
        if (Wt !== re.Scalar.QUOTE_DOUBLE) {
          if (/[\x00-\x08\x0b-\x1f\x7f-\x9f\u{D800}-\u{DFFF}]/u.test(Pt.value))
            Wt = re.Scalar.QUOTE_DOUBLE;
        }
        const _stringify = (a) => {
          switch (a) {
            case re.Scalar.BLOCK_FOLDED:
            case re.Scalar.BLOCK_LITERAL:
              return Ue || lt
                ? quotedString(Pt.value, C)
                : blockString(Pt, C, q, ae);
            case re.Scalar.QUOTE_DOUBLE:
              return doubleQuotedString(Pt.value, C);
            case re.Scalar.QUOTE_SINGLE:
              return singleQuotedString(Pt.value, C);
            case re.Scalar.PLAIN:
              return plainString(Pt, C, q, ae);
            default:
              return null;
          }
        };
        let Ar = _stringify(Wt);
        if (Ar === null) {
          const { defaultKeyType: a, defaultStringType: q } = C.options;
          const re = (Ue && a) || q;
          Ar = _stringify(re);
          if (Ar === null)
            throw new Error(`Unsupported default string type ${re}`);
        }
        return Ar;
      }
      C.stringifyString = stringifyString;
    },
    8706: (a, C, q) => {
      'use strict';
      var re = q(175);
      const ae = Symbol('break visit');
      const Ue = Symbol('skip children');
      const lt = Symbol('remove node');
      function visit(a, C) {
        const q = initVisitor(C);
        if (re.isDocument(a)) {
          const C = visit_(null, a.contents, q, Object.freeze([a]));
          if (C === lt) a.contents = null;
        } else visit_(null, a, q, Object.freeze([]));
      }
      visit.BREAK = ae;
      visit.SKIP = Ue;
      visit.REMOVE = lt;
      function visit_(a, C, q, Ue) {
        const Pt = callVisitor(a, C, q, Ue);
        if (re.isNode(Pt) || re.isPair(Pt)) {
          replaceNode(a, Ue, Pt);
          return visit_(a, Pt, q, Ue);
        }
        if (typeof Pt !== 'symbol') {
          if (re.isCollection(C)) {
            Ue = Object.freeze(Ue.concat(C));
            for (let a = 0; a < C.items.length; ++a) {
              const re = visit_(a, C.items[a], q, Ue);
              if (typeof re === 'number') a = re - 1;
              else if (re === ae) return ae;
              else if (re === lt) {
                C.items.splice(a, 1);
                a -= 1;
              }
            }
          } else if (re.isPair(C)) {
            Ue = Object.freeze(Ue.concat(C));
            const a = visit_('key', C.key, q, Ue);
            if (a === ae) return ae;
            else if (a === lt) C.key = null;
            const re = visit_('value', C.value, q, Ue);
            if (re === ae) return ae;
            else if (re === lt) C.value = null;
          }
        }
        return Pt;
      }
      async function visitAsync(a, C) {
        const q = initVisitor(C);
        if (re.isDocument(a)) {
          const C = await visitAsync_(null, a.contents, q, Object.freeze([a]));
          if (C === lt) a.contents = null;
        } else await visitAsync_(null, a, q, Object.freeze([]));
      }
      visitAsync.BREAK = ae;
      visitAsync.SKIP = Ue;
      visitAsync.REMOVE = lt;
      async function visitAsync_(a, C, q, Ue) {
        const Pt = await callVisitor(a, C, q, Ue);
        if (re.isNode(Pt) || re.isPair(Pt)) {
          replaceNode(a, Ue, Pt);
          return visitAsync_(a, Pt, q, Ue);
        }
        if (typeof Pt !== 'symbol') {
          if (re.isCollection(C)) {
            Ue = Object.freeze(Ue.concat(C));
            for (let a = 0; a < C.items.length; ++a) {
              const re = await visitAsync_(a, C.items[a], q, Ue);
              if (typeof re === 'number') a = re - 1;
              else if (re === ae) return ae;
              else if (re === lt) {
                C.items.splice(a, 1);
                a -= 1;
              }
            }
          } else if (re.isPair(C)) {
            Ue = Object.freeze(Ue.concat(C));
            const a = await visitAsync_('key', C.key, q, Ue);
            if (a === ae) return ae;
            else if (a === lt) C.key = null;
            const re = await visitAsync_('value', C.value, q, Ue);
            if (re === ae) return ae;
            else if (re === lt) C.value = null;
          }
        }
        return Pt;
      }
      function initVisitor(a) {
        if (typeof a === 'object' && (a.Collection || a.Node || a.Value)) {
          return Object.assign(
            { Alias: a.Node, Map: a.Node, Scalar: a.Node, Seq: a.Node },
            a.Value && { Map: a.Value, Scalar: a.Value, Seq: a.Value },
            a.Collection && { Map: a.Collection, Seq: a.Collection },
            a
          );
        }
        return a;
      }
      function callVisitor(a, C, q, ae) {
        if (typeof q === 'function') return q(a, C, ae);
        if (re.isMap(C)) return q.Map?.(a, C, ae);
        if (re.isSeq(C)) return q.Seq?.(a, C, ae);
        if (re.isPair(C)) return q.Pair?.(a, C, ae);
        if (re.isScalar(C)) return q.Scalar?.(a, C, ae);
        if (re.isAlias(C)) return q.Alias?.(a, C, ae);
        return undefined;
      }
      function replaceNode(a, C, q) {
        const ae = C[C.length - 1];
        if (re.isCollection(ae)) {
          ae.items[a] = q;
        } else if (re.isPair(ae)) {
          if (a === 'key') ae.key = q;
          else ae.value = q;
        } else if (re.isDocument(ae)) {
          ae.contents = q;
        } else {
          const a = re.isAlias(ae) ? 'alias' : 'scalar';
          throw new Error(`Cannot replace node with ${a} parent`);
        }
      }
      C.visit = visit;
      C.visitAsync = visitAsync;
    },
    7770: (a) => {
      class Canvas {
        constructor(a, C) {
          this.width = a;
          this.height = C;
        }
        getContext() {
          return null;
        }
        toDataURL() {
          return '';
        }
      }
      a.exports = { createCanvas: (a, C) => new Canvas(a, C) };
    },
    8653: (a, C, q) => {
      try {
        a.exports = q(3026);
      } catch (C) {
        a.exports = q(7770);
      }
    },
    551: (a, C, q) => {
      try {
        const { performance: a } = q(4074);
        C.S = a;
      } catch (a) {
        C.S = {
          now() {
            return +new Date();
          }
        };
      }
    },
    12: (a, C, q) => {
      'use strict';
      q.d(C, { t: () => Blob });
      /**
       * @license
       * web-streams-polyfill v4.0.0-beta.3
       * Copyright 2021 Mattias Buelens, Diwank Singh Tomer and other contributors.
       * This code is released under the MIT license.
       * SPDX-License-Identifier: MIT
       */
      const re =
        'function' == typeof Symbol && 'symbol' == typeof Symbol.iterator
          ? Symbol
          : (a) => `Symbol(${a})`;
      function t() {}
      function r(a) {
        return ('object' == typeof a && null !== a) || 'function' == typeof a;
      }
      const ae = t;
      function n(a, C) {
        try {
          Object.defineProperty(a, 'name', { value: C, configurable: !0 });
        } catch (a) {}
      }
      const Ue = Promise,
        lt = Promise.prototype.then,
        Pt = Promise.resolve.bind(Ue),
        Wt = Promise.reject.bind(Ue);
      function u(a) {
        return new Ue(a);
      }
      function c(a) {
        return Pt(a);
      }
      function d(a) {
        return Wt(a);
      }
      function f(a, C, q) {
        return lt.call(a, C, q);
      }
      function b(a, C, q) {
        f(f(a, C, q), void 0, ae);
      }
      function h(a, C) {
        b(a, C);
      }
      function _(a, C) {
        b(a, void 0, C);
      }
      function p(a, C, q) {
        return f(a, C, q);
      }
      function m(a) {
        f(a, void 0, ae);
      }
      let y = (a) => {
        if ('function' == typeof queueMicrotask) y = queueMicrotask;
        else {
          const a = c(void 0);
          y = (C) => f(a, C);
        }
        return y(a);
      };
      function g(a, C, q) {
        if ('function' != typeof a)
          throw new TypeError('Argument is not a function');
        return Function.prototype.apply.call(a, C, q);
      }
      function w(a, C, q) {
        try {
          return c(g(a, C, q));
        } catch (a) {
          return d(a);
        }
      }
      class S {
        constructor() {
          (this._cursor = 0),
            (this._size = 0),
            (this._front = { _elements: [], _next: void 0 }),
            (this._back = this._front),
            (this._cursor = 0),
            (this._size = 0);
        }
        get length() {
          return this._size;
        }
        push(a) {
          const C = this._back;
          let q = C;
          16383 === C._elements.length &&
            (q = { _elements: [], _next: void 0 }),
            C._elements.push(a),
            q !== C && ((this._back = q), (C._next = q)),
            ++this._size;
        }
        shift() {
          const a = this._front;
          let C = a;
          const q = this._cursor;
          let re = q + 1;
          const ae = a._elements,
            Ue = ae[q];
          return (
            16384 === re && ((C = a._next), (re = 0)),
            --this._size,
            (this._cursor = re),
            a !== C && (this._front = C),
            (ae[q] = void 0),
            Ue
          );
        }
        forEach(a) {
          let C = this._cursor,
            q = this._front,
            re = q._elements;
          for (
            ;
            !(
              (C === re.length && void 0 === q._next) ||
              (C === re.length &&
                ((q = q._next), (re = q._elements), (C = 0), 0 === re.length))
            );

          )
            a(re[C]), ++C;
        }
        peek() {
          const a = this._front,
            C = this._cursor;
          return a._elements[C];
        }
      }
      const Ar = re('[[AbortSteps]]'),
        Er = re('[[ErrorSteps]]'),
        Ir = re('[[CancelSteps]]'),
        Br = re('[[PullSteps]]'),
        Qr = re('[[ReleaseSteps]]');
      function E(a, C) {
        (a._ownerReadableStream = C),
          (C._reader = a),
          'readable' === C._state
            ? O(a)
            : 'closed' === C._state
              ? (function (a) {
                  O(a), j(a);
                })(a)
              : B(a, C._storedError);
      }
      function P(a, C) {
        return Gt(a._ownerReadableStream, C);
      }
      function W(a) {
        const C = a._ownerReadableStream;
        'readable' === C._state
          ? A(
              a,
              new TypeError(
                "Reader was released and can no longer be used to monitor the stream's closedness"
              )
            )
          : (function (a, C) {
              B(a, C);
            })(
              a,
              new TypeError(
                "Reader was released and can no longer be used to monitor the stream's closedness"
              )
            ),
          C._readableStreamController[Qr](),
          (C._reader = void 0),
          (a._ownerReadableStream = void 0);
      }
      function k(a) {
        return new TypeError(
          'Cannot ' + a + ' a stream using a released reader'
        );
      }
      function O(a) {
        a._closedPromise = u((C, q) => {
          (a._closedPromise_resolve = C), (a._closedPromise_reject = q);
        });
      }
      function B(a, C) {
        O(a), A(a, C);
      }
      function A(a, C) {
        void 0 !== a._closedPromise_reject &&
          (m(a._closedPromise),
          a._closedPromise_reject(C),
          (a._closedPromise_resolve = void 0),
          (a._closedPromise_reject = void 0));
      }
      function j(a) {
        void 0 !== a._closedPromise_resolve &&
          (a._closedPromise_resolve(void 0),
          (a._closedPromise_resolve = void 0),
          (a._closedPromise_reject = void 0));
      }
      const kr =
          Number.isFinite ||
          function (a) {
            return 'number' == typeof a && isFinite(a);
          },
        Dr =
          Math.trunc ||
          function (a) {
            return a < 0 ? Math.ceil(a) : Math.floor(a);
          };
      function F(a, C) {
        if (
          void 0 !== a &&
          'object' != typeof (q = a) &&
          'function' != typeof q
        )
          throw new TypeError(`${C} is not an object.`);
        var q;
      }
      function I(a, C) {
        if ('function' != typeof a)
          throw new TypeError(`${C} is not a function.`);
      }
      function D(a, C) {
        if (
          !(function (a) {
            return (
              ('object' == typeof a && null !== a) || 'function' == typeof a
            );
          })(a)
        )
          throw new TypeError(`${C} is not an object.`);
      }
      function $(a, C, q) {
        if (void 0 === a)
          throw new TypeError(`Parameter ${C} is required in '${q}'.`);
      }
      function M(a, C, q) {
        if (void 0 === a) throw new TypeError(`${C} is required in '${q}'.`);
      }
      function Y(a) {
        return Number(a);
      }
      function Q(a) {
        return 0 === a ? 0 : a;
      }
      function N(a, C) {
        const q = Number.MAX_SAFE_INTEGER;
        let re = Number(a);
        if (((re = Q(re)), !kr(re)))
          throw new TypeError(`${C} is not a finite number`);
        if (
          ((re = (function (a) {
            return Q(Dr(a));
          })(re)),
          re < 0 || re > q)
        )
          throw new TypeError(
            `${C} is outside the accepted range of 0 to ${q}, inclusive`
          );
        return kr(re) && 0 !== re ? re : 0;
      }
      function H(a) {
        if (!r(a)) return !1;
        if ('function' != typeof a.getReader) return !1;
        try {
          return 'boolean' == typeof a.locked;
        } catch (a) {
          return !1;
        }
      }
      function x(a) {
        if (!r(a)) return !1;
        if ('function' != typeof a.getWriter) return !1;
        try {
          return 'boolean' == typeof a.locked;
        } catch (a) {
          return !1;
        }
      }
      function V(a, C) {
        if (!Vt(a)) throw new TypeError(`${C} is not a ReadableStream.`);
      }
      function U(a, C) {
        a._reader._readRequests.push(C);
      }
      function G(a, C, q) {
        const re = a._reader._readRequests.shift();
        q ? re._closeSteps() : re._chunkSteps(C);
      }
      function X(a) {
        return a._reader._readRequests.length;
      }
      function J(a) {
        const C = a._reader;
        return void 0 !== C && !!K(C);
      }
      class ReadableStreamDefaultReader {
        constructor(a) {
          if (
            ($(a, 1, 'ReadableStreamDefaultReader'),
            V(a, 'First parameter'),
            Ut(a))
          )
            throw new TypeError(
              'This stream has already been locked for exclusive reading by another reader'
            );
          E(this, a), (this._readRequests = new S());
        }
        get closed() {
          return K(this) ? this._closedPromise : d(ee('closed'));
        }
        cancel(a) {
          return K(this)
            ? void 0 === this._ownerReadableStream
              ? d(k('cancel'))
              : P(this, a)
            : d(ee('cancel'));
        }
        read() {
          if (!K(this)) return d(ee('read'));
          if (void 0 === this._ownerReadableStream) return d(k('read from'));
          let a, C;
          const q = u((q, re) => {
            (a = q), (C = re);
          });
          return (
            (function (a, C) {
              const q = a._ownerReadableStream;
              (q._disturbed = !0),
                'closed' === q._state
                  ? C._closeSteps()
                  : 'errored' === q._state
                    ? C._errorSteps(q._storedError)
                    : q._readableStreamController[Br](C);
            })(this, {
              _chunkSteps: (C) => a({ value: C, done: !1 }),
              _closeSteps: () => a({ value: void 0, done: !0 }),
              _errorSteps: (a) => C(a)
            }),
            q
          );
        }
        releaseLock() {
          if (!K(this)) throw ee('releaseLock');
          void 0 !== this._ownerReadableStream &&
            (function (a) {
              W(a);
              const C = new TypeError('Reader was released');
              Z(a, C);
            })(this);
        }
      }
      function K(a) {
        return (
          !!r(a) &&
          !!Object.prototype.hasOwnProperty.call(a, '_readRequests') &&
          a instanceof ReadableStreamDefaultReader
        );
      }
      function Z(a, C) {
        const q = a._readRequests;
        (a._readRequests = new S()),
          q.forEach((a) => {
            a._errorSteps(C);
          });
      }
      function ee(a) {
        return new TypeError(
          `ReadableStreamDefaultReader.prototype.${a} can only be used on a ReadableStreamDefaultReader`
        );
      }
      Object.defineProperties(ReadableStreamDefaultReader.prototype, {
        cancel: { enumerable: !0 },
        read: { enumerable: !0 },
        releaseLock: { enumerable: !0 },
        closed: { enumerable: !0 }
      }),
        n(ReadableStreamDefaultReader.prototype.cancel, 'cancel'),
        n(ReadableStreamDefaultReader.prototype.read, 'read'),
        n(ReadableStreamDefaultReader.prototype.releaseLock, 'releaseLock'),
        'symbol' == typeof re.toStringTag &&
          Object.defineProperty(
            ReadableStreamDefaultReader.prototype,
            re.toStringTag,
            { value: 'ReadableStreamDefaultReader', configurable: !0 }
          );
      class te {
        constructor(a, C) {
          (this._ongoingPromise = void 0),
            (this._isFinished = !1),
            (this._reader = a),
            (this._preventCancel = C);
        }
        next() {
          const e = () => this._nextSteps();
          return (
            (this._ongoingPromise = this._ongoingPromise
              ? p(this._ongoingPromise, e, e)
              : e()),
            this._ongoingPromise
          );
        }
        return(a) {
          const t = () => this._returnSteps(a);
          return this._ongoingPromise ? p(this._ongoingPromise, t, t) : t();
        }
        _nextSteps() {
          if (this._isFinished)
            return Promise.resolve({ value: void 0, done: !0 });
          const a = this._reader;
          return void 0 === a
            ? d(k('iterate'))
            : f(
                a.read(),
                (a) => {
                  var C;
                  return (
                    (this._ongoingPromise = void 0),
                    a.done &&
                      ((this._isFinished = !0),
                      null === (C = this._reader) ||
                        void 0 === C ||
                        C.releaseLock(),
                      (this._reader = void 0)),
                    a
                  );
                },
                (a) => {
                  var C;
                  throw (
                    ((this._ongoingPromise = void 0),
                    (this._isFinished = !0),
                    null === (C = this._reader) ||
                      void 0 === C ||
                      C.releaseLock(),
                    (this._reader = void 0),
                    a)
                  );
                }
              );
        }
        _returnSteps(a) {
          if (this._isFinished) return Promise.resolve({ value: a, done: !0 });
          this._isFinished = !0;
          const C = this._reader;
          if (void 0 === C) return d(k('finish iterating'));
          if (((this._reader = void 0), !this._preventCancel)) {
            const q = C.cancel(a);
            return C.releaseLock(), p(q, () => ({ value: a, done: !0 }));
          }
          return C.releaseLock(), c({ value: a, done: !0 });
        }
      }
      const Nr = {
        next() {
          return oe(this) ? this._asyncIteratorImpl.next() : d(ne('next'));
        },
        return(a) {
          return oe(this) ? this._asyncIteratorImpl.return(a) : d(ne('return'));
        }
      };
      function oe(a) {
        if (!r(a)) return !1;
        if (!Object.prototype.hasOwnProperty.call(a, '_asyncIteratorImpl'))
          return !1;
        try {
          return a._asyncIteratorImpl instanceof te;
        } catch (a) {
          return !1;
        }
      }
      function ne(a) {
        return new TypeError(
          `ReadableStreamAsyncIterator.${a} can only be used on a ReadableSteamAsyncIterator`
        );
      }
      'symbol' == typeof re.asyncIterator &&
        Object.defineProperty(Nr, re.asyncIterator, {
          value() {
            return this;
          },
          writable: !0,
          configurable: !0
        });
      const Lr =
        Number.isNaN ||
        function (a) {
          return a != a;
        };
      function ie(a, C, q, re, ae) {
        new Uint8Array(a).set(new Uint8Array(q, re, ae), C);
      }
      function le(a) {
        const C = (function (a, C, q) {
          if (a.slice) return a.slice(C, q);
          const re = q - C,
            ae = new ArrayBuffer(re);
          return ie(ae, 0, a, C, re), ae;
        })(a.buffer, a.byteOffset, a.byteOffset + a.byteLength);
        return new Uint8Array(C);
      }
      function se(a) {
        const C = a._queue.shift();
        return (
          (a._queueTotalSize -= C.size),
          a._queueTotalSize < 0 && (a._queueTotalSize = 0),
          C.value
        );
      }
      function ue(a, C, q) {
        if ('number' != typeof (re = q) || Lr(re) || re < 0 || q === 1 / 0)
          throw new RangeError(
            'Size must be a finite, non-NaN, non-negative number.'
          );
        var re;
        a._queue.push({ value: C, size: q }), (a._queueTotalSize += q);
      }
      function ce(a) {
        (a._queue = new S()), (a._queueTotalSize = 0);
      }
      class ReadableStreamBYOBRequest {
        constructor() {
          throw new TypeError('Illegal constructor');
        }
        get view() {
          if (!fe(this)) throw Be('view');
          return this._view;
        }
        respond(a) {
          if (!fe(this)) throw Be('respond');
          if (
            ($(a, 1, 'respond'),
            (a = N(a, 'First parameter')),
            void 0 === this._associatedReadableByteStreamController)
          )
            throw new TypeError('This BYOB request has been invalidated');
          this._view.buffer,
            (function (a, C) {
              const q = a._pendingPullIntos.peek();
              if ('closed' === a._controlledReadableByteStream._state) {
                if (0 !== C)
                  throw new TypeError(
                    'bytesWritten must be 0 when calling respond() on a closed stream'
                  );
              } else {
                if (0 === C)
                  throw new TypeError(
                    'bytesWritten must be greater than 0 when calling respond() on a readable stream'
                  );
                if (q.bytesFilled + C > q.byteLength)
                  throw new RangeError('bytesWritten out of range');
              }
              (q.buffer = q.buffer), qe(a, C);
            })(this._associatedReadableByteStreamController, a);
        }
        respondWithNewView(a) {
          if (!fe(this)) throw Be('respondWithNewView');
          if (($(a, 1, 'respondWithNewView'), !ArrayBuffer.isView(a)))
            throw new TypeError('You can only respond with array buffer views');
          if (void 0 === this._associatedReadableByteStreamController)
            throw new TypeError('This BYOB request has been invalidated');
          a.buffer,
            (function (a, C) {
              const q = a._pendingPullIntos.peek();
              if ('closed' === a._controlledReadableByteStream._state) {
                if (0 !== C.byteLength)
                  throw new TypeError(
                    "The view's length must be 0 when calling respondWithNewView() on a closed stream"
                  );
              } else if (0 === C.byteLength)
                throw new TypeError(
                  "The view's length must be greater than 0 when calling respondWithNewView() on a readable stream"
                );
              if (q.byteOffset + q.bytesFilled !== C.byteOffset)
                throw new RangeError(
                  'The region specified by view does not match byobRequest'
                );
              if (q.bufferByteLength !== C.buffer.byteLength)
                throw new RangeError(
                  'The buffer of view has different capacity than byobRequest'
                );
              if (q.bytesFilled + C.byteLength > q.byteLength)
                throw new RangeError(
                  'The region specified by view is larger than byobRequest'
                );
              const re = C.byteLength;
              (q.buffer = C.buffer), qe(a, re);
            })(this._associatedReadableByteStreamController, a);
        }
      }
      Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
        respond: { enumerable: !0 },
        respondWithNewView: { enumerable: !0 },
        view: { enumerable: !0 }
      }),
        n(ReadableStreamBYOBRequest.prototype.respond, 'respond'),
        n(
          ReadableStreamBYOBRequest.prototype.respondWithNewView,
          'respondWithNewView'
        ),
        'symbol' == typeof re.toStringTag &&
          Object.defineProperty(
            ReadableStreamBYOBRequest.prototype,
            re.toStringTag,
            { value: 'ReadableStreamBYOBRequest', configurable: !0 }
          );
      class ReadableByteStreamController {
        constructor() {
          throw new TypeError('Illegal constructor');
        }
        get byobRequest() {
          if (!de(this)) throw Ae('byobRequest');
          return (function (a) {
            if (null === a._byobRequest && a._pendingPullIntos.length > 0) {
              const C = a._pendingPullIntos.peek(),
                q = new Uint8Array(
                  C.buffer,
                  C.byteOffset + C.bytesFilled,
                  C.byteLength - C.bytesFilled
                ),
                re = Object.create(ReadableStreamBYOBRequest.prototype);
              !(function (a, C, q) {
                (a._associatedReadableByteStreamController = C), (a._view = q);
              })(re, a, q),
                (a._byobRequest = re);
            }
            return a._byobRequest;
          })(this);
        }
        get desiredSize() {
          if (!de(this)) throw Ae('desiredSize');
          return ke(this);
        }
        close() {
          if (!de(this)) throw Ae('close');
          if (this._closeRequested)
            throw new TypeError(
              'The stream has already been closed; do not close it again!'
            );
          const a = this._controlledReadableByteStream._state;
          if ('readable' !== a)
            throw new TypeError(
              `The stream (in ${a} state) is not in the readable state and cannot be closed`
            );
          !(function (a) {
            const C = a._controlledReadableByteStream;
            if (a._closeRequested || 'readable' !== C._state) return;
            if (a._queueTotalSize > 0) return void (a._closeRequested = !0);
            if (a._pendingPullIntos.length > 0) {
              if (a._pendingPullIntos.peek().bytesFilled > 0) {
                const C = new TypeError(
                  'Insufficient bytes to fill elements in the given buffer'
                );
                throw (Pe(a, C), C);
              }
            }
            Ee(a), Xt(C);
          })(this);
        }
        enqueue(a) {
          if (!de(this)) throw Ae('enqueue');
          if (($(a, 1, 'enqueue'), !ArrayBuffer.isView(a)))
            throw new TypeError('chunk must be an array buffer view');
          if (0 === a.byteLength)
            throw new TypeError('chunk must have non-zero byteLength');
          if (0 === a.buffer.byteLength)
            throw new TypeError("chunk's buffer must have non-zero byteLength");
          if (this._closeRequested)
            throw new TypeError('stream is closed or draining');
          const C = this._controlledReadableByteStream._state;
          if ('readable' !== C)
            throw new TypeError(
              `The stream (in ${C} state) is not in the readable state and cannot be enqueued to`
            );
          !(function (a, C) {
            const q = a._controlledReadableByteStream;
            if (a._closeRequested || 'readable' !== q._state) return;
            const re = C.buffer,
              ae = C.byteOffset,
              Ue = C.byteLength,
              lt = re;
            if (a._pendingPullIntos.length > 0) {
              const C = a._pendingPullIntos.peek();
              C.buffer,
                0,
                Re(a),
                (C.buffer = C.buffer),
                'none' === C.readerType && ge(a, C);
            }
            if (J(q))
              if (
                ((function (a) {
                  const C = a._controlledReadableByteStream._reader;
                  for (; C._readRequests.length > 0; ) {
                    if (0 === a._queueTotalSize) return;
                    We(a, C._readRequests.shift());
                  }
                })(a),
                0 === X(q))
              )
                me(a, lt, ae, Ue);
              else {
                a._pendingPullIntos.length > 0 && Ce(a);
                G(q, new Uint8Array(lt, ae, Ue), !1);
              }
            else Le(q) ? (me(a, lt, ae, Ue), Te(a)) : me(a, lt, ae, Ue);
            be(a);
          })(this, a);
        }
        error(a) {
          if (!de(this)) throw Ae('error');
          Pe(this, a);
        }
        [Ir](a) {
          he(this), ce(this);
          const C = this._cancelAlgorithm(a);
          return Ee(this), C;
        }
        [Br](a) {
          const C = this._controlledReadableByteStream;
          if (this._queueTotalSize > 0) return void We(this, a);
          const q = this._autoAllocateChunkSize;
          if (void 0 !== q) {
            let re;
            try {
              re = new ArrayBuffer(q);
            } catch (C) {
              return void a._errorSteps(C);
            }
            const ae = {
              buffer: re,
              bufferByteLength: q,
              byteOffset: 0,
              byteLength: q,
              bytesFilled: 0,
              elementSize: 1,
              viewConstructor: Uint8Array,
              readerType: 'default'
            };
            this._pendingPullIntos.push(ae);
          }
          U(C, a), be(this);
        }
        [Qr]() {
          if (this._pendingPullIntos.length > 0) {
            const a = this._pendingPullIntos.peek();
            (a.readerType = 'none'),
              (this._pendingPullIntos = new S()),
              this._pendingPullIntos.push(a);
          }
        }
      }
      function de(a) {
        return (
          !!r(a) &&
          !!Object.prototype.hasOwnProperty.call(
            a,
            '_controlledReadableByteStream'
          ) &&
          a instanceof ReadableByteStreamController
        );
      }
      function fe(a) {
        return (
          !!r(a) &&
          !!Object.prototype.hasOwnProperty.call(
            a,
            '_associatedReadableByteStreamController'
          ) &&
          a instanceof ReadableStreamBYOBRequest
        );
      }
      function be(a) {
        const C = (function (a) {
          const C = a._controlledReadableByteStream;
          if ('readable' !== C._state) return !1;
          if (a._closeRequested) return !1;
          if (!a._started) return !1;
          if (J(C) && X(C) > 0) return !0;
          if (Le(C) && ze(C) > 0) return !0;
          if (ke(a) > 0) return !0;
          return !1;
        })(a);
        if (!C) return;
        if (a._pulling) return void (a._pullAgain = !0);
        a._pulling = !0;
        b(
          a._pullAlgorithm(),
          () => (
            (a._pulling = !1),
            a._pullAgain && ((a._pullAgain = !1), be(a)),
            null
          ),
          (C) => (Pe(a, C), null)
        );
      }
      function he(a) {
        Re(a), (a._pendingPullIntos = new S());
      }
      function _e(a, C) {
        let q = !1;
        'closed' === a._state && (q = !0);
        const re = pe(C);
        'default' === C.readerType
          ? G(a, re, q)
          : (function (a, C, q) {
              const re = a._reader._readIntoRequests.shift();
              q ? re._closeSteps(C) : re._chunkSteps(C);
            })(a, re, q);
      }
      function pe(a) {
        const C = a.bytesFilled,
          q = a.elementSize;
        return new a.viewConstructor(a.buffer, a.byteOffset, C / q);
      }
      function me(a, C, q, re) {
        a._queue.push({ buffer: C, byteOffset: q, byteLength: re }),
          (a._queueTotalSize += re);
      }
      function ye(a, C, q, re) {
        let ae;
        try {
          ae = C.slice(q, q + re);
        } catch (C) {
          throw (Pe(a, C), C);
        }
        me(a, ae, 0, re);
      }
      function ge(a, C) {
        C.bytesFilled > 0 && ye(a, C.buffer, C.byteOffset, C.bytesFilled),
          Ce(a);
      }
      function we(a, C) {
        const q = C.elementSize,
          re = C.bytesFilled - (C.bytesFilled % q),
          ae = Math.min(a._queueTotalSize, C.byteLength - C.bytesFilled),
          Ue = C.bytesFilled + ae,
          lt = Ue - (Ue % q);
        let Pt = ae,
          Wt = !1;
        lt > re && ((Pt = lt - C.bytesFilled), (Wt = !0));
        const Ar = a._queue;
        for (; Pt > 0; ) {
          const q = Ar.peek(),
            re = Math.min(Pt, q.byteLength),
            ae = C.byteOffset + C.bytesFilled;
          ie(C.buffer, ae, q.buffer, q.byteOffset, re),
            q.byteLength === re
              ? Ar.shift()
              : ((q.byteOffset += re), (q.byteLength -= re)),
            (a._queueTotalSize -= re),
            Se(a, re, C),
            (Pt -= re);
        }
        return Wt;
      }
      function Se(a, C, q) {
        q.bytesFilled += C;
      }
      function ve(a) {
        0 === a._queueTotalSize && a._closeRequested
          ? (Ee(a), Xt(a._controlledReadableByteStream))
          : be(a);
      }
      function Re(a) {
        null !== a._byobRequest &&
          ((a._byobRequest._associatedReadableByteStreamController = void 0),
          (a._byobRequest._view = null),
          (a._byobRequest = null));
      }
      function Te(a) {
        for (; a._pendingPullIntos.length > 0; ) {
          if (0 === a._queueTotalSize) return;
          const C = a._pendingPullIntos.peek();
          we(a, C) && (Ce(a), _e(a._controlledReadableByteStream, C));
        }
      }
      function qe(a, C) {
        const q = a._pendingPullIntos.peek();
        Re(a);
        'closed' === a._controlledReadableByteStream._state
          ? (function (a, C) {
              'none' === C.readerType && Ce(a);
              const q = a._controlledReadableByteStream;
              if (Le(q)) for (; ze(q) > 0; ) _e(q, Ce(a));
            })(a, q)
          : (function (a, C, q) {
              if ((Se(0, C, q), 'none' === q.readerType))
                return ge(a, q), void Te(a);
              if (q.bytesFilled < q.elementSize) return;
              Ce(a);
              const re = q.bytesFilled % q.elementSize;
              if (re > 0) {
                const C = q.byteOffset + q.bytesFilled;
                ye(a, q.buffer, C - re, re);
              }
              (q.bytesFilled -= re),
                _e(a._controlledReadableByteStream, q),
                Te(a);
            })(a, C, q),
          be(a);
      }
      function Ce(a) {
        return a._pendingPullIntos.shift();
      }
      function Ee(a) {
        (a._pullAlgorithm = void 0), (a._cancelAlgorithm = void 0);
      }
      function Pe(a, C) {
        const q = a._controlledReadableByteStream;
        'readable' === q._state && (he(a), ce(a), Ee(a), Jt(q, C));
      }
      function We(a, C) {
        const q = a._queue.shift();
        (a._queueTotalSize -= q.byteLength), ve(a);
        const re = new Uint8Array(q.buffer, q.byteOffset, q.byteLength);
        C._chunkSteps(re);
      }
      function ke(a) {
        const C = a._controlledReadableByteStream._state;
        return 'errored' === C
          ? null
          : 'closed' === C
            ? 0
            : a._strategyHWM - a._queueTotalSize;
      }
      function Oe(a, C, q) {
        const re = Object.create(ReadableByteStreamController.prototype);
        let ae, Ue, lt;
        (ae = void 0 !== C.start ? () => C.start(re) : () => {}),
          (Ue = void 0 !== C.pull ? () => C.pull(re) : () => c(void 0)),
          (lt = void 0 !== C.cancel ? (a) => C.cancel(a) : () => c(void 0));
        const Pt = C.autoAllocateChunkSize;
        if (0 === Pt)
          throw new TypeError('autoAllocateChunkSize must be greater than 0');
        !(function (a, C, q, re, ae, Ue, lt) {
          (C._controlledReadableByteStream = a),
            (C._pullAgain = !1),
            (C._pulling = !1),
            (C._byobRequest = null),
            (C._queue = C._queueTotalSize = void 0),
            ce(C),
            (C._closeRequested = !1),
            (C._started = !1),
            (C._strategyHWM = Ue),
            (C._pullAlgorithm = re),
            (C._cancelAlgorithm = ae),
            (C._autoAllocateChunkSize = lt),
            (C._pendingPullIntos = new S()),
            (a._readableStreamController = C),
            b(
              c(q()),
              () => ((C._started = !0), be(C), null),
              (a) => (Pe(C, a), null)
            );
        })(a, re, ae, Ue, lt, q, Pt);
      }
      function Be(a) {
        return new TypeError(
          `ReadableStreamBYOBRequest.prototype.${a} can only be used on a ReadableStreamBYOBRequest`
        );
      }
      function Ae(a) {
        return new TypeError(
          `ReadableByteStreamController.prototype.${a} can only be used on a ReadableByteStreamController`
        );
      }
      function je(a, C) {
        a._reader._readIntoRequests.push(C);
      }
      function ze(a) {
        return a._reader._readIntoRequests.length;
      }
      function Le(a) {
        const C = a._reader;
        return void 0 !== C && !!Fe(C);
      }
      Object.defineProperties(ReadableByteStreamController.prototype, {
        close: { enumerable: !0 },
        enqueue: { enumerable: !0 },
        error: { enumerable: !0 },
        byobRequest: { enumerable: !0 },
        desiredSize: { enumerable: !0 }
      }),
        n(ReadableByteStreamController.prototype.close, 'close'),
        n(ReadableByteStreamController.prototype.enqueue, 'enqueue'),
        n(ReadableByteStreamController.prototype.error, 'error'),
        'symbol' == typeof re.toStringTag &&
          Object.defineProperty(
            ReadableByteStreamController.prototype,
            re.toStringTag,
            { value: 'ReadableByteStreamController', configurable: !0 }
          );
      class ReadableStreamBYOBReader {
        constructor(a) {
          if (
            ($(a, 1, 'ReadableStreamBYOBReader'),
            V(a, 'First parameter'),
            Ut(a))
          )
            throw new TypeError(
              'This stream has already been locked for exclusive reading by another reader'
            );
          if (!de(a._readableStreamController))
            throw new TypeError(
              'Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte source'
            );
          E(this, a), (this._readIntoRequests = new S());
        }
        get closed() {
          return Fe(this) ? this._closedPromise : d(De('closed'));
        }
        cancel(a) {
          return Fe(this)
            ? void 0 === this._ownerReadableStream
              ? d(k('cancel'))
              : P(this, a)
            : d(De('cancel'));
        }
        read(a) {
          if (!Fe(this)) return d(De('read'));
          if (!ArrayBuffer.isView(a))
            return d(new TypeError('view must be an array buffer view'));
          if (0 === a.byteLength)
            return d(new TypeError('view must have non-zero byteLength'));
          if (0 === a.buffer.byteLength)
            return d(
              new TypeError("view's buffer must have non-zero byteLength")
            );
          if ((a.buffer, void 0 === this._ownerReadableStream))
            return d(k('read from'));
          let C, q;
          const re = u((a, re) => {
            (C = a), (q = re);
          });
          return (
            (function (a, C, q) {
              const re = a._ownerReadableStream;
              (re._disturbed = !0),
                'errored' === re._state
                  ? q._errorSteps(re._storedError)
                  : (function (a, C, q) {
                      const re = a._controlledReadableByteStream;
                      let ae = 1;
                      C.constructor !== DataView &&
                        (ae = C.constructor.BYTES_PER_ELEMENT);
                      const Ue = C.constructor,
                        lt = C.buffer,
                        Pt = {
                          buffer: lt,
                          bufferByteLength: lt.byteLength,
                          byteOffset: C.byteOffset,
                          byteLength: C.byteLength,
                          bytesFilled: 0,
                          elementSize: ae,
                          viewConstructor: Ue,
                          readerType: 'byob'
                        };
                      if (a._pendingPullIntos.length > 0)
                        return a._pendingPullIntos.push(Pt), void je(re, q);
                      if ('closed' !== re._state) {
                        if (a._queueTotalSize > 0) {
                          if (we(a, Pt)) {
                            const C = pe(Pt);
                            return ve(a), void q._chunkSteps(C);
                          }
                          if (a._closeRequested) {
                            const C = new TypeError(
                              'Insufficient bytes to fill elements in the given buffer'
                            );
                            return Pe(a, C), void q._errorSteps(C);
                          }
                        }
                        a._pendingPullIntos.push(Pt), je(re, q), be(a);
                      } else {
                        const a = new Ue(Pt.buffer, Pt.byteOffset, 0);
                        q._closeSteps(a);
                      }
                    })(re._readableStreamController, C, q);
            })(this, a, {
              _chunkSteps: (a) => C({ value: a, done: !1 }),
              _closeSteps: (a) => C({ value: a, done: !0 }),
              _errorSteps: (a) => q(a)
            }),
            re
          );
        }
        releaseLock() {
          if (!Fe(this)) throw De('releaseLock');
          void 0 !== this._ownerReadableStream &&
            (function (a) {
              W(a);
              const C = new TypeError('Reader was released');
              Ie(a, C);
            })(this);
        }
      }
      function Fe(a) {
        return (
          !!r(a) &&
          !!Object.prototype.hasOwnProperty.call(a, '_readIntoRequests') &&
          a instanceof ReadableStreamBYOBReader
        );
      }
      function Ie(a, C) {
        const q = a._readIntoRequests;
        (a._readIntoRequests = new S()),
          q.forEach((a) => {
            a._errorSteps(C);
          });
      }
      function De(a) {
        return new TypeError(
          `ReadableStreamBYOBReader.prototype.${a} can only be used on a ReadableStreamBYOBReader`
        );
      }
      function $e(a, C) {
        const { highWaterMark: q } = a;
        if (void 0 === q) return C;
        if (Lr(q) || q < 0) throw new RangeError('Invalid highWaterMark');
        return q;
      }
      function Me(a) {
        const { size: C } = a;
        return C || (() => 1);
      }
      function Ye(a, C) {
        F(a, C);
        const q = null == a ? void 0 : a.highWaterMark,
          re = null == a ? void 0 : a.size;
        return {
          highWaterMark: void 0 === q ? void 0 : Y(q),
          size: void 0 === re ? void 0 : Qe(re, `${C} has member 'size' that`)
        };
      }
      function Qe(a, C) {
        return I(a, C), (C) => Y(a(C));
      }
      function Ne(a, C, q) {
        return I(a, q), (q) => w(a, C, [q]);
      }
      function He(a, C, q) {
        return I(a, q), () => w(a, C, []);
      }
      function xe(a, C, q) {
        return I(a, q), (q) => g(a, C, [q]);
      }
      function Ve(a, C, q) {
        return I(a, q), (q, re) => w(a, C, [q, re]);
      }
      Object.defineProperties(ReadableStreamBYOBReader.prototype, {
        cancel: { enumerable: !0 },
        read: { enumerable: !0 },
        releaseLock: { enumerable: !0 },
        closed: { enumerable: !0 }
      }),
        n(ReadableStreamBYOBReader.prototype.cancel, 'cancel'),
        n(ReadableStreamBYOBReader.prototype.read, 'read'),
        n(ReadableStreamBYOBReader.prototype.releaseLock, 'releaseLock'),
        'symbol' == typeof re.toStringTag &&
          Object.defineProperty(
            ReadableStreamBYOBReader.prototype,
            re.toStringTag,
            { value: 'ReadableStreamBYOBReader', configurable: !0 }
          );
      const Fr = 'function' == typeof AbortController;
      class WritableStream {
        constructor(a = {}, C = {}) {
          void 0 === a ? (a = null) : D(a, 'First parameter');
          const q = Ye(C, 'Second parameter'),
            re = (function (a, C) {
              F(a, C);
              const q = null == a ? void 0 : a.abort,
                re = null == a ? void 0 : a.close,
                ae = null == a ? void 0 : a.start,
                Ue = null == a ? void 0 : a.type,
                lt = null == a ? void 0 : a.write;
              return {
                abort:
                  void 0 === q
                    ? void 0
                    : Ne(q, a, `${C} has member 'abort' that`),
                close:
                  void 0 === re
                    ? void 0
                    : He(re, a, `${C} has member 'close' that`),
                start:
                  void 0 === ae
                    ? void 0
                    : xe(ae, a, `${C} has member 'start' that`),
                write:
                  void 0 === lt
                    ? void 0
                    : Ve(lt, a, `${C} has member 'write' that`),
                type: Ue
              };
            })(a, 'First parameter');
          var ae;
          ((ae = this)._state = 'writable'),
            (ae._storedError = void 0),
            (ae._writer = void 0),
            (ae._writableStreamController = void 0),
            (ae._writeRequests = new S()),
            (ae._inFlightWriteRequest = void 0),
            (ae._closeRequest = void 0),
            (ae._inFlightCloseRequest = void 0),
            (ae._pendingAbortRequest = void 0),
            (ae._backpressure = !1);
          if (void 0 !== re.type)
            throw new RangeError('Invalid type is specified');
          const Ue = Me(q);
          !(function (a, C, q, re) {
            const ae = Object.create(WritableStreamDefaultController.prototype);
            let Ue, lt, Pt, Wt;
            Ue = void 0 !== C.start ? () => C.start(ae) : () => {};
            lt = void 0 !== C.write ? (a) => C.write(a, ae) : () => c(void 0);
            Pt = void 0 !== C.close ? () => C.close() : () => c(void 0);
            Wt = void 0 !== C.abort ? (a) => C.abort(a) : () => c(void 0);
            !(function (a, C, q, re, ae, Ue, lt, Pt) {
              (C._controlledWritableStream = a),
                (a._writableStreamController = C),
                (C._queue = void 0),
                (C._queueTotalSize = void 0),
                ce(C),
                (C._abortReason = void 0),
                (C._abortController = (function () {
                  if (Fr) return new AbortController();
                })()),
                (C._started = !1),
                (C._strategySizeAlgorithm = Pt),
                (C._strategyHWM = lt),
                (C._writeAlgorithm = re),
                (C._closeAlgorithm = ae),
                (C._abortAlgorithm = Ue);
              const Wt = bt(C);
              nt(a, Wt);
              const Ar = q();
              b(
                c(Ar),
                () => ((C._started = !0), dt(C), null),
                (q) => ((C._started = !0), Ze(a, q), null)
              );
            })(a, ae, Ue, lt, Pt, Wt, q, re);
          })(this, re, $e(q, 1), Ue);
        }
        get locked() {
          if (!Ge(this)) throw _t('locked');
          return Xe(this);
        }
        abort(a) {
          return Ge(this)
            ? Xe(this)
              ? d(
                  new TypeError(
                    'Cannot abort a stream that already has a writer'
                  )
                )
              : Je(this, a)
            : d(_t('abort'));
        }
        close() {
          return Ge(this)
            ? Xe(this)
              ? d(
                  new TypeError(
                    'Cannot close a stream that already has a writer'
                  )
                )
              : rt(this)
                ? d(new TypeError('Cannot close an already-closing stream'))
                : Ke(this)
            : d(_t('close'));
        }
        getWriter() {
          if (!Ge(this)) throw _t('getWriter');
          return new WritableStreamDefaultWriter(this);
        }
      }
      function Ge(a) {
        return (
          !!r(a) &&
          !!Object.prototype.hasOwnProperty.call(
            a,
            '_writableStreamController'
          ) &&
          a instanceof WritableStream
        );
      }
      function Xe(a) {
        return void 0 !== a._writer;
      }
      function Je(a, C) {
        var q;
        if ('closed' === a._state || 'errored' === a._state) return c(void 0);
        (a._writableStreamController._abortReason = C),
          null === (q = a._writableStreamController._abortController) ||
            void 0 === q ||
            q.abort(C);
        const re = a._state;
        if ('closed' === re || 'errored' === re) return c(void 0);
        if (void 0 !== a._pendingAbortRequest)
          return a._pendingAbortRequest._promise;
        let ae = !1;
        'erroring' === re && ((ae = !0), (C = void 0));
        const Ue = u((q, re) => {
          a._pendingAbortRequest = {
            _promise: void 0,
            _resolve: q,
            _reject: re,
            _reason: C,
            _wasAlreadyErroring: ae
          };
        });
        return (a._pendingAbortRequest._promise = Ue), ae || et(a, C), Ue;
      }
      function Ke(a) {
        const C = a._state;
        if ('closed' === C || 'errored' === C)
          return d(
            new TypeError(
              `The stream (in ${C} state) is not in the writable state and cannot be closed`
            )
          );
        const q = u((C, q) => {
            const re = { _resolve: C, _reject: q };
            a._closeRequest = re;
          }),
          re = a._writer;
        var ae;
        return (
          void 0 !== re && a._backpressure && 'writable' === C && Et(re),
          ue((ae = a._writableStreamController), Mr, 0),
          dt(ae),
          q
        );
      }
      function Ze(a, C) {
        'writable' !== a._state ? tt(a) : et(a, C);
      }
      function et(a, C) {
        const q = a._writableStreamController;
        (a._state = 'erroring'), (a._storedError = C);
        const re = a._writer;
        void 0 !== re && it(re, C),
          !(function (a) {
            if (
              void 0 === a._inFlightWriteRequest &&
              void 0 === a._inFlightCloseRequest
            )
              return !1;
            return !0;
          })(a) &&
            q._started &&
            tt(a);
      }
      function tt(a) {
        (a._state = 'errored'), a._writableStreamController[Er]();
        const C = a._storedError;
        if (
          (a._writeRequests.forEach((a) => {
            a._reject(C);
          }),
          (a._writeRequests = new S()),
          void 0 === a._pendingAbortRequest)
        )
          return void ot(a);
        const q = a._pendingAbortRequest;
        if (((a._pendingAbortRequest = void 0), q._wasAlreadyErroring))
          return q._reject(C), void ot(a);
        b(
          a._writableStreamController[Ar](q._reason),
          () => (q._resolve(), ot(a), null),
          (C) => (q._reject(C), ot(a), null)
        );
      }
      function rt(a) {
        return void 0 !== a._closeRequest || void 0 !== a._inFlightCloseRequest;
      }
      function ot(a) {
        void 0 !== a._closeRequest &&
          (a._closeRequest._reject(a._storedError), (a._closeRequest = void 0));
        const C = a._writer;
        void 0 !== C && St(C, a._storedError);
      }
      function nt(a, C) {
        const q = a._writer;
        void 0 !== q &&
          C !== a._backpressure &&
          (C
            ? (function (a) {
                Rt(a);
              })(q)
            : Et(q)),
          (a._backpressure = C);
      }
      Object.defineProperties(WritableStream.prototype, {
        abort: { enumerable: !0 },
        close: { enumerable: !0 },
        getWriter: { enumerable: !0 },
        locked: { enumerable: !0 }
      }),
        n(WritableStream.prototype.abort, 'abort'),
        n(WritableStream.prototype.close, 'close'),
        n(WritableStream.prototype.getWriter, 'getWriter'),
        'symbol' == typeof re.toStringTag &&
          Object.defineProperty(WritableStream.prototype, re.toStringTag, {
            value: 'WritableStream',
            configurable: !0
          });
      class WritableStreamDefaultWriter {
        constructor(a) {
          if (
            ($(a, 1, 'WritableStreamDefaultWriter'),
            (function (a, C) {
              if (!Ge(a)) throw new TypeError(`${C} is not a WritableStream.`);
            })(a, 'First parameter'),
            Xe(a))
          )
            throw new TypeError(
              'This stream has already been locked for exclusive writing by another writer'
            );
          (this._ownerWritableStream = a), (a._writer = this);
          const C = a._state;
          if ('writable' === C)
            !rt(a) && a._backpressure ? Rt(this) : qt(this), gt(this);
          else if ('erroring' === C) Tt(this, a._storedError), gt(this);
          else if ('closed' === C) qt(this), gt((q = this)), vt(q);
          else {
            const C = a._storedError;
            Tt(this, C), wt(this, C);
          }
          var q;
        }
        get closed() {
          return at(this) ? this._closedPromise : d(mt('closed'));
        }
        get desiredSize() {
          if (!at(this)) throw mt('desiredSize');
          if (void 0 === this._ownerWritableStream) throw yt('desiredSize');
          return (function (a) {
            const C = a._ownerWritableStream,
              q = C._state;
            if ('errored' === q || 'erroring' === q) return null;
            if ('closed' === q) return 0;
            return ct(C._writableStreamController);
          })(this);
        }
        get ready() {
          return at(this) ? this._readyPromise : d(mt('ready'));
        }
        abort(a) {
          return at(this)
            ? void 0 === this._ownerWritableStream
              ? d(yt('abort'))
              : (function (a, C) {
                  return Je(a._ownerWritableStream, C);
                })(this, a)
            : d(mt('abort'));
        }
        close() {
          if (!at(this)) return d(mt('close'));
          const a = this._ownerWritableStream;
          return void 0 === a
            ? d(yt('close'))
            : rt(a)
              ? d(new TypeError('Cannot close an already-closing stream'))
              : Ke(this._ownerWritableStream);
        }
        releaseLock() {
          if (!at(this)) throw mt('releaseLock');
          void 0 !== this._ownerWritableStream &&
            (function (a) {
              const C = a._ownerWritableStream,
                q = new TypeError(
                  "Writer was released and can no longer be used to monitor the stream's closedness"
                );
              it(a, q),
                (function (a, C) {
                  'pending' === a._closedPromiseState
                    ? St(a, C)
                    : (function (a, C) {
                        wt(a, C);
                      })(a, C);
                })(a, q),
                (C._writer = void 0),
                (a._ownerWritableStream = void 0);
            })(this);
        }
        write(a) {
          return at(this)
            ? void 0 === this._ownerWritableStream
              ? d(yt('write to'))
              : (function (a, C) {
                  const q = a._ownerWritableStream,
                    re = q._writableStreamController,
                    ae = (function (a, C) {
                      try {
                        return a._strategySizeAlgorithm(C);
                      } catch (C) {
                        return ft(a, C), 1;
                      }
                    })(re, C);
                  if (q !== a._ownerWritableStream) return d(yt('write to'));
                  const Ue = q._state;
                  if ('errored' === Ue) return d(q._storedError);
                  if (rt(q) || 'closed' === Ue)
                    return d(
                      new TypeError(
                        'The stream is closing or closed and cannot be written to'
                      )
                    );
                  if ('erroring' === Ue) return d(q._storedError);
                  const lt = (function (a) {
                    return u((C, q) => {
                      const re = { _resolve: C, _reject: q };
                      a._writeRequests.push(re);
                    });
                  })(q);
                  return (
                    (function (a, C, q) {
                      try {
                        ue(a, C, q);
                      } catch (C) {
                        return void ft(a, C);
                      }
                      const re = a._controlledWritableStream;
                      if (!rt(re) && 'writable' === re._state) {
                        nt(re, bt(a));
                      }
                      dt(a);
                    })(re, C, ae),
                    lt
                  );
                })(this, a)
            : d(mt('write'));
        }
      }
      function at(a) {
        return (
          !!r(a) &&
          !!Object.prototype.hasOwnProperty.call(a, '_ownerWritableStream') &&
          a instanceof WritableStreamDefaultWriter
        );
      }
      function it(a, C) {
        'pending' === a._readyPromiseState
          ? Ct(a, C)
          : (function (a, C) {
              Tt(a, C);
            })(a, C);
      }
      Object.defineProperties(WritableStreamDefaultWriter.prototype, {
        abort: { enumerable: !0 },
        close: { enumerable: !0 },
        releaseLock: { enumerable: !0 },
        write: { enumerable: !0 },
        closed: { enumerable: !0 },
        desiredSize: { enumerable: !0 },
        ready: { enumerable: !0 }
      }),
        n(WritableStreamDefaultWriter.prototype.abort, 'abort'),
        n(WritableStreamDefaultWriter.prototype.close, 'close'),
        n(WritableStreamDefaultWriter.prototype.releaseLock, 'releaseLock'),
        n(WritableStreamDefaultWriter.prototype.write, 'write'),
        'symbol' == typeof re.toStringTag &&
          Object.defineProperty(
            WritableStreamDefaultWriter.prototype,
            re.toStringTag,
            { value: 'WritableStreamDefaultWriter', configurable: !0 }
          );
      const Mr = {};
      class WritableStreamDefaultController {
        constructor() {
          throw new TypeError('Illegal constructor');
        }
        get abortReason() {
          if (!st(this)) throw pt('abortReason');
          return this._abortReason;
        }
        get signal() {
          if (!st(this)) throw pt('signal');
          if (void 0 === this._abortController)
            throw new TypeError(
              'WritableStreamDefaultController.prototype.signal is not supported'
            );
          return this._abortController.signal;
        }
        error(a) {
          if (!st(this)) throw pt('error');
          'writable' === this._controlledWritableStream._state && ht(this, a);
        }
        [Ar](a) {
          const C = this._abortAlgorithm(a);
          return ut(this), C;
        }
        [Er]() {
          ce(this);
        }
      }
      function st(a) {
        return (
          !!r(a) &&
          !!Object.prototype.hasOwnProperty.call(
            a,
            '_controlledWritableStream'
          ) &&
          a instanceof WritableStreamDefaultController
        );
      }
      function ut(a) {
        (a._writeAlgorithm = void 0),
          (a._closeAlgorithm = void 0),
          (a._abortAlgorithm = void 0),
          (a._strategySizeAlgorithm = void 0);
      }
      function ct(a) {
        return a._strategyHWM - a._queueTotalSize;
      }
      function dt(a) {
        const C = a._controlledWritableStream;
        if (!a._started) return;
        if (void 0 !== C._inFlightWriteRequest) return;
        if ('erroring' === C._state) return void tt(C);
        if (0 === a._queue.length) return;
        const q = a._queue.peek().value;
        q === Mr
          ? (function (a) {
              const C = a._controlledWritableStream;
              (function (a) {
                (a._inFlightCloseRequest = a._closeRequest),
                  (a._closeRequest = void 0);
              })(C),
                se(a);
              const q = a._closeAlgorithm();
              ut(a),
                b(
                  q,
                  () => (
                    (function (a) {
                      a._inFlightCloseRequest._resolve(void 0),
                        (a._inFlightCloseRequest = void 0),
                        'erroring' === a._state &&
                          ((a._storedError = void 0),
                          void 0 !== a._pendingAbortRequest &&
                            (a._pendingAbortRequest._resolve(),
                            (a._pendingAbortRequest = void 0))),
                        (a._state = 'closed');
                      const C = a._writer;
                      void 0 !== C && vt(C);
                    })(C),
                    null
                  ),
                  (a) => (
                    (function (a, C) {
                      a._inFlightCloseRequest._reject(C),
                        (a._inFlightCloseRequest = void 0),
                        void 0 !== a._pendingAbortRequest &&
                          (a._pendingAbortRequest._reject(C),
                          (a._pendingAbortRequest = void 0)),
                        Ze(a, C);
                    })(C, a),
                    null
                  )
                );
            })(a)
          : (function (a, C) {
              const q = a._controlledWritableStream;
              !(function (a) {
                a._inFlightWriteRequest = a._writeRequests.shift();
              })(q);
              b(
                a._writeAlgorithm(C),
                () => {
                  !(function (a) {
                    a._inFlightWriteRequest._resolve(void 0),
                      (a._inFlightWriteRequest = void 0);
                  })(q);
                  const C = q._state;
                  if ((se(a), !rt(q) && 'writable' === C)) {
                    const C = bt(a);
                    nt(q, C);
                  }
                  return dt(a), null;
                },
                (C) => (
                  'writable' === q._state && ut(a),
                  (function (a, C) {
                    a._inFlightWriteRequest._reject(C),
                      (a._inFlightWriteRequest = void 0),
                      Ze(a, C);
                  })(q, C),
                  null
                )
              );
            })(a, q);
      }
      function ft(a, C) {
        'writable' === a._controlledWritableStream._state && ht(a, C);
      }
      function bt(a) {
        return ct(a) <= 0;
      }
      function ht(a, C) {
        const q = a._controlledWritableStream;
        ut(a), et(q, C);
      }
      function _t(a) {
        return new TypeError(
          `WritableStream.prototype.${a} can only be used on a WritableStream`
        );
      }
      function pt(a) {
        return new TypeError(
          `WritableStreamDefaultController.prototype.${a} can only be used on a WritableStreamDefaultController`
        );
      }
      function mt(a) {
        return new TypeError(
          `WritableStreamDefaultWriter.prototype.${a} can only be used on a WritableStreamDefaultWriter`
        );
      }
      function yt(a) {
        return new TypeError(
          'Cannot ' + a + ' a stream using a released writer'
        );
      }
      function gt(a) {
        a._closedPromise = u((C, q) => {
          (a._closedPromise_resolve = C),
            (a._closedPromise_reject = q),
            (a._closedPromiseState = 'pending');
        });
      }
      function wt(a, C) {
        gt(a), St(a, C);
      }
      function St(a, C) {
        void 0 !== a._closedPromise_reject &&
          (m(a._closedPromise),
          a._closedPromise_reject(C),
          (a._closedPromise_resolve = void 0),
          (a._closedPromise_reject = void 0),
          (a._closedPromiseState = 'rejected'));
      }
      function vt(a) {
        void 0 !== a._closedPromise_resolve &&
          (a._closedPromise_resolve(void 0),
          (a._closedPromise_resolve = void 0),
          (a._closedPromise_reject = void 0),
          (a._closedPromiseState = 'resolved'));
      }
      function Rt(a) {
        (a._readyPromise = u((C, q) => {
          (a._readyPromise_resolve = C), (a._readyPromise_reject = q);
        })),
          (a._readyPromiseState = 'pending');
      }
      function Tt(a, C) {
        Rt(a), Ct(a, C);
      }
      function qt(a) {
        Rt(a), Et(a);
      }
      function Ct(a, C) {
        void 0 !== a._readyPromise_reject &&
          (m(a._readyPromise),
          a._readyPromise_reject(C),
          (a._readyPromise_resolve = void 0),
          (a._readyPromise_reject = void 0),
          (a._readyPromiseState = 'rejected'));
      }
      function Et(a) {
        void 0 !== a._readyPromise_resolve &&
          (a._readyPromise_resolve(void 0),
          (a._readyPromise_resolve = void 0),
          (a._readyPromise_reject = void 0),
          (a._readyPromiseState = 'fulfilled'));
      }
      Object.defineProperties(WritableStreamDefaultController.prototype, {
        abortReason: { enumerable: !0 },
        signal: { enumerable: !0 },
        error: { enumerable: !0 }
      }),
        'symbol' == typeof re.toStringTag &&
          Object.defineProperty(
            WritableStreamDefaultController.prototype,
            re.toStringTag,
            { value: 'WritableStreamDefaultController', configurable: !0 }
          );
      const Pr = 'undefined' != typeof DOMException ? DOMException : void 0;
      const Or = (function (a) {
        if ('function' != typeof a && 'object' != typeof a) return !1;
        try {
          return new a(), !0;
        } catch (a) {
          return !1;
        }
      })(Pr)
        ? Pr
        : (function () {
            const e = function (a, C) {
              (this.message = a || ''),
                (this.name = C || 'Error'),
                Error.captureStackTrace &&
                  Error.captureStackTrace(this, this.constructor);
            };
            return (
              (e.prototype = Object.create(Error.prototype)),
              Object.defineProperty(e.prototype, 'constructor', {
                value: e,
                writable: !0,
                configurable: !0
              }),
              e
            );
          })();
      function kt(a, C, q, re, ae, Ue) {
        const lt = a.getReader(),
          Pt = C.getWriter();
        Vt(a) && (a._disturbed = !0);
        let Wt,
          Ar,
          Er,
          Ir = !1,
          Br = !1,
          Qr = 'readable',
          kr = 'writable',
          Dr = !1,
          Nr = !1;
        const Lr = u((a) => {
          Er = a;
        });
        let Fr = Promise.resolve(void 0);
        return u((Mr, Pr) => {
          let xr;
          function O() {
            if (Ir) return;
            const a = u((a, C) => {
              !(function r(q) {
                q
                  ? a()
                  : f(
                      (function () {
                        if (Ir) return c(!0);
                        return f(Pt.ready, () =>
                          f(
                            lt.read(),
                            (a) =>
                              !!a.done || ((Fr = Pt.write(a.value)), m(Fr), !1)
                          )
                        );
                      })(),
                      r,
                      C
                    );
              })(!1);
            });
            m(a);
          }
          function B() {
            return (
              (Qr = 'closed'),
              q
                ? L()
                : z(
                    () => (
                      Ge(C) && ((Dr = rt(C)), (kr = C._state)),
                      Dr || 'closed' === kr
                        ? c(void 0)
                        : 'erroring' === kr || 'errored' === kr
                          ? d(Ar)
                          : ((Dr = !0), Pt.close())
                    ),
                    !1,
                    void 0
                  ),
              null
            );
          }
          function A(a) {
            return (
              Ir ||
                ((Qr = 'errored'),
                (Wt = a),
                re ? L(!0, a) : z(() => Pt.abort(a), !0, a)),
              null
            );
          }
          function j(a) {
            return (
              Br ||
                ((kr = 'errored'),
                (Ar = a),
                ae ? L(!0, a) : z(() => lt.cancel(a), !0, a)),
              null
            );
          }
          if (
            (void 0 !== Ue &&
              ((xr = () => {
                const a =
                    void 0 !== Ue.reason
                      ? Ue.reason
                      : new Or('Aborted', 'AbortError'),
                  C = [];
                re ||
                  C.push(() => ('writable' === kr ? Pt.abort(a) : c(void 0))),
                  ae ||
                    C.push(() =>
                      'readable' === Qr ? lt.cancel(a) : c(void 0)
                    ),
                  z(() => Promise.all(C.map((a) => a())), !0, a);
              }),
              Ue.aborted ? xr() : Ue.addEventListener('abort', xr)),
            Vt(a) && ((Qr = a._state), (Wt = a._storedError)),
            Ge(C) && ((kr = C._state), (Ar = C._storedError), (Dr = rt(C))),
            Vt(a) && Ge(C) && ((Nr = !0), Er()),
            'errored' === Qr)
          )
            A(Wt);
          else if ('erroring' === kr || 'errored' === kr) j(Ar);
          else if ('closed' === Qr) B();
          else if (Dr || 'closed' === kr) {
            const a = new TypeError(
              'the destination writable stream closed before all data could be piped to it'
            );
            ae ? L(!0, a) : z(() => lt.cancel(a), !0, a);
          }
          function z(a, C, q) {
            function o() {
              return (
                'writable' !== kr || Dr
                  ? n()
                  : h(
                      (function () {
                        let a;
                        return c(
                          (function t() {
                            if (a !== Fr) return (a = Fr), p(Fr, t, t);
                          })()
                        );
                      })(),
                      n
                    ),
                null
              );
            }
            function n() {
              return (
                a
                  ? b(
                      a(),
                      () => F(C, q),
                      (a) => F(!0, a)
                    )
                  : F(C, q),
                null
              );
            }
            Ir || ((Ir = !0), Nr ? o() : h(Lr, o));
          }
          function L(a, C) {
            z(void 0, a, C);
          }
          function F(a, C) {
            return (
              (Br = !0),
              Pt.releaseLock(),
              lt.releaseLock(),
              void 0 !== Ue && Ue.removeEventListener('abort', xr),
              a ? Pr(C) : Mr(void 0),
              null
            );
          }
          Ir ||
            (b(lt.closed, B, A),
            b(
              Pt.closed,
              function () {
                return Br || (kr = 'closed'), null;
              },
              j
            )),
            Nr
              ? O()
              : y(() => {
                  (Nr = !0), Er(), O();
                });
        });
      }
      function Ot(a, C) {
        return (function (a) {
          try {
            return a.getReader({ mode: 'byob' }).releaseLock(), !0;
          } catch (a) {
            return !1;
          }
        })(a)
          ? (function (a) {
              let C,
                q,
                re,
                ae,
                Ue,
                lt = a.getReader(),
                Pt = !1,
                Wt = !1,
                Ar = !1,
                Er = !1,
                Ir = !1,
                Br = !1;
              const Qr = u((a) => {
                Ue = a;
              });
              function y(a) {
                _(
                  a.closed,
                  (C) => (
                    a !== lt ||
                      (re.error(C), ae.error(C), (Ir && Br) || Ue(void 0)),
                    null
                  )
                );
              }
              function g() {
                Pt &&
                  (lt.releaseLock(), (lt = a.getReader()), y(lt), (Pt = !1)),
                  b(
                    lt.read(),
                    (a) => {
                      var C, q;
                      if (((Ar = !1), (Er = !1), a.done))
                        return (
                          Ir || re.close(),
                          Br || ae.close(),
                          null === (C = re.byobRequest) ||
                            void 0 === C ||
                            C.respond(0),
                          null === (q = ae.byobRequest) ||
                            void 0 === q ||
                            q.respond(0),
                          (Ir && Br) || Ue(void 0),
                          null
                        );
                      const Pt = a.value,
                        Qr = Pt;
                      let kr = Pt;
                      if (!Ir && !Br)
                        try {
                          kr = le(Pt);
                        } catch (a) {
                          return (
                            re.error(a), ae.error(a), Ue(lt.cancel(a)), null
                          );
                        }
                      return (
                        Ir || re.enqueue(Qr),
                        Br || ae.enqueue(kr),
                        (Wt = !1),
                        Ar ? S() : Er && v(),
                        null
                      );
                    },
                    () => ((Wt = !1), null)
                  );
              }
              function w(C, q) {
                Pt ||
                  (lt.releaseLock(),
                  (lt = a.getReader({ mode: 'byob' })),
                  y(lt),
                  (Pt = !0));
                const Qr = q ? ae : re,
                  kr = q ? re : ae;
                b(
                  lt.read(C),
                  (a) => {
                    var C;
                    (Ar = !1), (Er = !1);
                    const re = q ? Br : Ir,
                      ae = q ? Ir : Br;
                    if (a.done) {
                      re || Qr.close(), ae || kr.close();
                      const q = a.value;
                      return (
                        void 0 !== q &&
                          (re || Qr.byobRequest.respondWithNewView(q),
                          ae ||
                            null === (C = kr.byobRequest) ||
                            void 0 === C ||
                            C.respond(0)),
                        (re && ae) || Ue(void 0),
                        null
                      );
                    }
                    const Pt = a.value;
                    if (ae) re || Qr.byobRequest.respondWithNewView(Pt);
                    else {
                      let C;
                      try {
                        C = le(Pt);
                      } catch (a) {
                        return Qr.error(a), kr.error(a), Ue(lt.cancel(a)), null;
                      }
                      re || Qr.byobRequest.respondWithNewView(Pt),
                        kr.enqueue(C);
                    }
                    return (Wt = !1), Ar ? S() : Er && v(), null;
                  },
                  () => ((Wt = !1), null)
                );
              }
              function S() {
                if (Wt) return (Ar = !0), c(void 0);
                Wt = !0;
                const a = re.byobRequest;
                return null === a ? g() : w(a.view, !1), c(void 0);
              }
              function v() {
                if (Wt) return (Er = !0), c(void 0);
                Wt = !0;
                const a = ae.byobRequest;
                return null === a ? g() : w(a.view, !0), c(void 0);
              }
              function R(a) {
                if (((Ir = !0), (C = a), Br)) {
                  const a = [C, q],
                    re = lt.cancel(a);
                  Ue(re);
                }
                return Qr;
              }
              function T(a) {
                if (((Br = !0), (q = a), Ir)) {
                  const a = [C, q],
                    re = lt.cancel(a);
                  Ue(re);
                }
                return Qr;
              }
              const kr = new ReadableStream({
                  type: 'bytes',
                  start(a) {
                    re = a;
                  },
                  pull: S,
                  cancel: R
                }),
                Dr = new ReadableStream({
                  type: 'bytes',
                  start(a) {
                    ae = a;
                  },
                  pull: v,
                  cancel: T
                });
              return y(lt), [kr, Dr];
            })(a)
          : (function (a, C) {
              const q = a.getReader();
              let re,
                ae,
                Ue,
                lt,
                Pt,
                Wt = !1,
                Ar = !1,
                Er = !1,
                Ir = !1;
              const Br = u((a) => {
                Pt = a;
              });
              function m() {
                return Wt
                  ? ((Ar = !0), c(void 0))
                  : ((Wt = !0),
                    b(
                      q.read(),
                      (a) => {
                        if (((Ar = !1), a.done))
                          return (
                            Er || Ue.close(),
                            Ir || lt.close(),
                            (Er && Ir) || Pt(void 0),
                            null
                          );
                        const C = a.value,
                          q = C,
                          re = C;
                        return (
                          Er || Ue.enqueue(q),
                          Ir || lt.enqueue(re),
                          (Wt = !1),
                          Ar && m(),
                          null
                        );
                      },
                      () => ((Wt = !1), null)
                    ),
                    c(void 0));
              }
              function y(a) {
                if (((Er = !0), (re = a), Ir)) {
                  const a = [re, ae],
                    C = q.cancel(a);
                  Pt(C);
                }
                return Br;
              }
              function g(a) {
                if (((Ir = !0), (ae = a), Er)) {
                  const a = [re, ae],
                    C = q.cancel(a);
                  Pt(C);
                }
                return Br;
              }
              const Qr = new ReadableStream({
                  start(a) {
                    Ue = a;
                  },
                  pull: m,
                  cancel: y
                }),
                kr = new ReadableStream({
                  start(a) {
                    lt = a;
                  },
                  pull: m,
                  cancel: g
                });
              return (
                _(
                  q.closed,
                  (a) => (
                    Ue.error(a), lt.error(a), (Er && Ir) || Pt(void 0), null
                  )
                ),
                [Qr, kr]
              );
            })(a);
      }
      class ReadableStreamDefaultController {
        constructor() {
          throw new TypeError('Illegal constructor');
        }
        get desiredSize() {
          if (!Bt(this)) throw Dt('desiredSize');
          return Lt(this);
        }
        close() {
          if (!Bt(this)) throw Dt('close');
          if (!Ft(this))
            throw new TypeError(
              'The stream is not in a state that permits close'
            );
          !(function (a) {
            if (!Ft(a)) return;
            const C = a._controlledReadableStream;
            (a._closeRequested = !0), 0 === a._queue.length && (jt(a), Xt(C));
          })(this);
        }
        enqueue(a) {
          if (!Bt(this)) throw Dt('enqueue');
          if (!Ft(this))
            throw new TypeError(
              'The stream is not in a state that permits enqueue'
            );
          return (function (a, C) {
            if (!Ft(a)) return;
            const q = a._controlledReadableStream;
            if (Ut(q) && X(q) > 0) G(q, C, !1);
            else {
              let q;
              try {
                q = a._strategySizeAlgorithm(C);
              } catch (C) {
                throw (zt(a, C), C);
              }
              try {
                ue(a, C, q);
              } catch (C) {
                throw (zt(a, C), C);
              }
            }
            At(a);
          })(this, a);
        }
        error(a) {
          if (!Bt(this)) throw Dt('error');
          zt(this, a);
        }
        [Ir](a) {
          ce(this);
          const C = this._cancelAlgorithm(a);
          return jt(this), C;
        }
        [Br](a) {
          const C = this._controlledReadableStream;
          if (this._queue.length > 0) {
            const q = se(this);
            this._closeRequested && 0 === this._queue.length
              ? (jt(this), Xt(C))
              : At(this),
              a._chunkSteps(q);
          } else U(C, a), At(this);
        }
        [Qr]() {}
      }
      function Bt(a) {
        return (
          !!r(a) &&
          !!Object.prototype.hasOwnProperty.call(
            a,
            '_controlledReadableStream'
          ) &&
          a instanceof ReadableStreamDefaultController
        );
      }
      function At(a) {
        const C = (function (a) {
          const C = a._controlledReadableStream;
          if (!Ft(a)) return !1;
          if (!a._started) return !1;
          if (Ut(C) && X(C) > 0) return !0;
          if (Lt(a) > 0) return !0;
          return !1;
        })(a);
        if (!C) return;
        if (a._pulling) return void (a._pullAgain = !0);
        a._pulling = !0;
        b(
          a._pullAlgorithm(),
          () => (
            (a._pulling = !1),
            a._pullAgain && ((a._pullAgain = !1), At(a)),
            null
          ),
          (C) => (zt(a, C), null)
        );
      }
      function jt(a) {
        (a._pullAlgorithm = void 0),
          (a._cancelAlgorithm = void 0),
          (a._strategySizeAlgorithm = void 0);
      }
      function zt(a, C) {
        const q = a._controlledReadableStream;
        'readable' === q._state && (ce(a), jt(a), Jt(q, C));
      }
      function Lt(a) {
        const C = a._controlledReadableStream._state;
        return 'errored' === C
          ? null
          : 'closed' === C
            ? 0
            : a._strategyHWM - a._queueTotalSize;
      }
      function Ft(a) {
        return (
          !a._closeRequested &&
          'readable' === a._controlledReadableStream._state
        );
      }
      function It(a, C, q, re) {
        const ae = Object.create(ReadableStreamDefaultController.prototype);
        let Ue, lt, Pt;
        (Ue = void 0 !== C.start ? () => C.start(ae) : () => {}),
          (lt = void 0 !== C.pull ? () => C.pull(ae) : () => c(void 0)),
          (Pt = void 0 !== C.cancel ? (a) => C.cancel(a) : () => c(void 0)),
          (function (a, C, q, re, ae, Ue, lt) {
            (C._controlledReadableStream = a),
              (C._queue = void 0),
              (C._queueTotalSize = void 0),
              ce(C),
              (C._started = !1),
              (C._closeRequested = !1),
              (C._pullAgain = !1),
              (C._pulling = !1),
              (C._strategySizeAlgorithm = lt),
              (C._strategyHWM = Ue),
              (C._pullAlgorithm = re),
              (C._cancelAlgorithm = ae),
              (a._readableStreamController = C),
              b(
                c(q()),
                () => ((C._started = !0), At(C), null),
                (a) => (zt(C, a), null)
              );
          })(a, ae, Ue, lt, Pt, q, re);
      }
      function Dt(a) {
        return new TypeError(
          `ReadableStreamDefaultController.prototype.${a} can only be used on a ReadableStreamDefaultController`
        );
      }
      function $t(a, C, q) {
        return I(a, q), (q) => w(a, C, [q]);
      }
      function Mt(a, C, q) {
        return I(a, q), (q) => w(a, C, [q]);
      }
      function Yt(a, C, q) {
        return I(a, q), (q) => g(a, C, [q]);
      }
      function Qt(a, C) {
        if ('bytes' !== (a = `${a}`))
          throw new TypeError(
            `${C} '${a}' is not a valid enumeration value for ReadableStreamType`
          );
        return a;
      }
      function Nt(a, C) {
        if ('byob' !== (a = `${a}`))
          throw new TypeError(
            `${C} '${a}' is not a valid enumeration value for ReadableStreamReaderMode`
          );
        return a;
      }
      function Ht(a, C) {
        F(a, C);
        const q = null == a ? void 0 : a.preventAbort,
          re = null == a ? void 0 : a.preventCancel,
          ae = null == a ? void 0 : a.preventClose,
          Ue = null == a ? void 0 : a.signal;
        return (
          void 0 !== Ue &&
            (function (a, C) {
              if (
                !(function (a) {
                  if ('object' != typeof a || null === a) return !1;
                  try {
                    return 'boolean' == typeof a.aborted;
                  } catch (a) {
                    return !1;
                  }
                })(a)
              )
                throw new TypeError(`${C} is not an AbortSignal.`);
            })(Ue, `${C} has member 'signal' that`),
          {
            preventAbort: Boolean(q),
            preventCancel: Boolean(re),
            preventClose: Boolean(ae),
            signal: Ue
          }
        );
      }
      function xt(a, C) {
        F(a, C);
        const q = null == a ? void 0 : a.readable;
        M(q, 'readable', 'ReadableWritablePair'),
          (function (a, C) {
            if (!H(a)) throw new TypeError(`${C} is not a ReadableStream.`);
          })(q, `${C} has member 'readable' that`);
        const re = null == a ? void 0 : a.writable;
        return (
          M(re, 'writable', 'ReadableWritablePair'),
          (function (a, C) {
            if (!x(a)) throw new TypeError(`${C} is not a WritableStream.`);
          })(re, `${C} has member 'writable' that`),
          { readable: q, writable: re }
        );
      }
      Object.defineProperties(ReadableStreamDefaultController.prototype, {
        close: { enumerable: !0 },
        enqueue: { enumerable: !0 },
        error: { enumerable: !0 },
        desiredSize: { enumerable: !0 }
      }),
        n(ReadableStreamDefaultController.prototype.close, 'close'),
        n(ReadableStreamDefaultController.prototype.enqueue, 'enqueue'),
        n(ReadableStreamDefaultController.prototype.error, 'error'),
        'symbol' == typeof re.toStringTag &&
          Object.defineProperty(
            ReadableStreamDefaultController.prototype,
            re.toStringTag,
            { value: 'ReadableStreamDefaultController', configurable: !0 }
          );
      class ReadableStream {
        constructor(a = {}, C = {}) {
          void 0 === a ? (a = null) : D(a, 'First parameter');
          const q = Ye(C, 'Second parameter'),
            re = (function (a, C) {
              F(a, C);
              const q = a,
                re = null == q ? void 0 : q.autoAllocateChunkSize,
                ae = null == q ? void 0 : q.cancel,
                Ue = null == q ? void 0 : q.pull,
                lt = null == q ? void 0 : q.start,
                Pt = null == q ? void 0 : q.type;
              return {
                autoAllocateChunkSize:
                  void 0 === re
                    ? void 0
                    : N(re, `${C} has member 'autoAllocateChunkSize' that`),
                cancel:
                  void 0 === ae
                    ? void 0
                    : $t(ae, q, `${C} has member 'cancel' that`),
                pull:
                  void 0 === Ue
                    ? void 0
                    : Mt(Ue, q, `${C} has member 'pull' that`),
                start:
                  void 0 === lt
                    ? void 0
                    : Yt(lt, q, `${C} has member 'start' that`),
                type:
                  void 0 === Pt ? void 0 : Qt(Pt, `${C} has member 'type' that`)
              };
            })(a, 'First parameter');
          var ae;
          if (
            (((ae = this)._state = 'readable'),
            (ae._reader = void 0),
            (ae._storedError = void 0),
            (ae._disturbed = !1),
            'bytes' === re.type)
          ) {
            if (void 0 !== q.size)
              throw new RangeError(
                'The strategy for a byte stream cannot have a size function'
              );
            Oe(this, re, $e(q, 0));
          } else {
            const a = Me(q);
            It(this, re, $e(q, 1), a);
          }
        }
        get locked() {
          if (!Vt(this)) throw Kt('locked');
          return Ut(this);
        }
        cancel(a) {
          return Vt(this)
            ? Ut(this)
              ? d(
                  new TypeError(
                    'Cannot cancel a stream that already has a reader'
                  )
                )
              : Gt(this, a)
            : d(Kt('cancel'));
        }
        getReader(a) {
          if (!Vt(this)) throw Kt('getReader');
          return void 0 ===
            (function (a, C) {
              F(a, C);
              const q = null == a ? void 0 : a.mode;
              return {
                mode:
                  void 0 === q ? void 0 : Nt(q, `${C} has member 'mode' that`)
              };
            })(a, 'First parameter').mode
            ? new ReadableStreamDefaultReader(this)
            : (function (a) {
                return new ReadableStreamBYOBReader(a);
              })(this);
        }
        pipeThrough(a, C = {}) {
          if (!H(this)) throw Kt('pipeThrough');
          $(a, 1, 'pipeThrough');
          const q = xt(a, 'First parameter'),
            re = Ht(C, 'Second parameter');
          if (this.locked)
            throw new TypeError(
              'ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream'
            );
          if (q.writable.locked)
            throw new TypeError(
              'ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream'
            );
          return (
            m(
              kt(
                this,
                q.writable,
                re.preventClose,
                re.preventAbort,
                re.preventCancel,
                re.signal
              )
            ),
            q.readable
          );
        }
        pipeTo(a, C = {}) {
          if (!H(this)) return d(Kt('pipeTo'));
          if (void 0 === a) return d("Parameter 1 is required in 'pipeTo'.");
          if (!x(a))
            return d(
              new TypeError(
                "ReadableStream.prototype.pipeTo's first argument must be a WritableStream"
              )
            );
          let q;
          try {
            q = Ht(C, 'Second parameter');
          } catch (a) {
            return d(a);
          }
          return this.locked
            ? d(
                new TypeError(
                  'ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'
                )
              )
            : a.locked
              ? d(
                  new TypeError(
                    'ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'
                  )
                )
              : kt(
                  this,
                  a,
                  q.preventClose,
                  q.preventAbort,
                  q.preventCancel,
                  q.signal
                );
        }
        tee() {
          if (!H(this)) throw Kt('tee');
          if (this.locked)
            throw new TypeError(
              'Cannot tee a stream that already has a reader'
            );
          return Ot(this);
        }
        values(a) {
          if (!H(this)) throw Kt('values');
          return (function (a, C) {
            const q = a.getReader(),
              re = new te(q, C),
              ae = Object.create(Nr);
            return (ae._asyncIteratorImpl = re), ae;
          })(
            this,
            (function (a, C) {
              F(a, C);
              const q = null == a ? void 0 : a.preventCancel;
              return { preventCancel: Boolean(q) };
            })(a, 'First parameter').preventCancel
          );
        }
      }
      function Vt(a) {
        return (
          !!r(a) &&
          !!Object.prototype.hasOwnProperty.call(
            a,
            '_readableStreamController'
          ) &&
          a instanceof ReadableStream
        );
      }
      function Ut(a) {
        return void 0 !== a._reader;
      }
      function Gt(a, C) {
        if (((a._disturbed = !0), 'closed' === a._state)) return c(void 0);
        if ('errored' === a._state) return d(a._storedError);
        Xt(a);
        const q = a._reader;
        if (void 0 !== q && Fe(q)) {
          const a = q._readIntoRequests;
          (q._readIntoRequests = new S()),
            a.forEach((a) => {
              a._closeSteps(void 0);
            });
        }
        return p(a._readableStreamController[Ir](C), t);
      }
      function Xt(a) {
        a._state = 'closed';
        const C = a._reader;
        if (void 0 !== C && (j(C), K(C))) {
          const a = C._readRequests;
          (C._readRequests = new S()),
            a.forEach((a) => {
              a._closeSteps();
            });
        }
      }
      function Jt(a, C) {
        (a._state = 'errored'), (a._storedError = C);
        const q = a._reader;
        void 0 !== q && (A(q, C), K(q) ? Z(q, C) : Ie(q, C));
      }
      function Kt(a) {
        return new TypeError(
          `ReadableStream.prototype.${a} can only be used on a ReadableStream`
        );
      }
      function Zt(a, C) {
        F(a, C);
        const q = null == a ? void 0 : a.highWaterMark;
        return (
          M(q, 'highWaterMark', 'QueuingStrategyInit'), { highWaterMark: Y(q) }
        );
      }
      Object.defineProperties(ReadableStream.prototype, {
        cancel: { enumerable: !0 },
        getReader: { enumerable: !0 },
        pipeThrough: { enumerable: !0 },
        pipeTo: { enumerable: !0 },
        tee: { enumerable: !0 },
        values: { enumerable: !0 },
        locked: { enumerable: !0 }
      }),
        n(ReadableStream.prototype.cancel, 'cancel'),
        n(ReadableStream.prototype.getReader, 'getReader'),
        n(ReadableStream.prototype.pipeThrough, 'pipeThrough'),
        n(ReadableStream.prototype.pipeTo, 'pipeTo'),
        n(ReadableStream.prototype.tee, 'tee'),
        n(ReadableStream.prototype.values, 'values'),
        'symbol' == typeof re.toStringTag &&
          Object.defineProperty(ReadableStream.prototype, re.toStringTag, {
            value: 'ReadableStream',
            configurable: !0
          }),
        'symbol' == typeof re.asyncIterator &&
          Object.defineProperty(ReadableStream.prototype, re.asyncIterator, {
            value: ReadableStream.prototype.values,
            writable: !0,
            configurable: !0
          });
      const er = (a) => a.byteLength;
      n(er, 'size');
      class ByteLengthQueuingStrategy {
        constructor(a) {
          $(a, 1, 'ByteLengthQueuingStrategy'),
            (a = Zt(a, 'First parameter')),
            (this._byteLengthQueuingStrategyHighWaterMark = a.highWaterMark);
        }
        get highWaterMark() {
          if (!rr(this)) throw tr('highWaterMark');
          return this._byteLengthQueuingStrategyHighWaterMark;
        }
        get size() {
          if (!rr(this)) throw tr('size');
          return er;
        }
      }
      function tr(a) {
        return new TypeError(
          `ByteLengthQueuingStrategy.prototype.${a} can only be used on a ByteLengthQueuingStrategy`
        );
      }
      function rr(a) {
        return (
          !!r(a) &&
          !!Object.prototype.hasOwnProperty.call(
            a,
            '_byteLengthQueuingStrategyHighWaterMark'
          ) &&
          a instanceof ByteLengthQueuingStrategy
        );
      }
      Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
        highWaterMark: { enumerable: !0 },
        size: { enumerable: !0 }
      }),
        'symbol' == typeof re.toStringTag &&
          Object.defineProperty(
            ByteLengthQueuingStrategy.prototype,
            re.toStringTag,
            { value: 'ByteLengthQueuingStrategy', configurable: !0 }
          );
      const or = () => 1;
      n(or, 'size');
      class CountQueuingStrategy {
        constructor(a) {
          $(a, 1, 'CountQueuingStrategy'),
            (a = Zt(a, 'First parameter')),
            (this._countQueuingStrategyHighWaterMark = a.highWaterMark);
        }
        get highWaterMark() {
          if (!ar(this)) throw nr('highWaterMark');
          return this._countQueuingStrategyHighWaterMark;
        }
        get size() {
          if (!ar(this)) throw nr('size');
          return or;
        }
      }
      function nr(a) {
        return new TypeError(
          `CountQueuingStrategy.prototype.${a} can only be used on a CountQueuingStrategy`
        );
      }
      function ar(a) {
        return (
          !!r(a) &&
          !!Object.prototype.hasOwnProperty.call(
            a,
            '_countQueuingStrategyHighWaterMark'
          ) &&
          a instanceof CountQueuingStrategy
        );
      }
      function ir(a, C, q) {
        return I(a, q), (q) => w(a, C, [q]);
      }
      function lr(a, C, q) {
        return I(a, q), (q) => g(a, C, [q]);
      }
      function sr(a, C, q) {
        return I(a, q), (q, re) => w(a, C, [q, re]);
      }
      Object.defineProperties(CountQueuingStrategy.prototype, {
        highWaterMark: { enumerable: !0 },
        size: { enumerable: !0 }
      }),
        'symbol' == typeof re.toStringTag &&
          Object.defineProperty(
            CountQueuingStrategy.prototype,
            re.toStringTag,
            { value: 'CountQueuingStrategy', configurable: !0 }
          );
      class TransformStream {
        constructor(a = {}, C = {}, q = {}) {
          void 0 === a && (a = null);
          const re = Ye(C, 'Second parameter'),
            ae = Ye(q, 'Third parameter'),
            Ue = (function (a, C) {
              F(a, C);
              const q = null == a ? void 0 : a.flush,
                re = null == a ? void 0 : a.readableType,
                ae = null == a ? void 0 : a.start,
                Ue = null == a ? void 0 : a.transform,
                lt = null == a ? void 0 : a.writableType;
              return {
                flush:
                  void 0 === q
                    ? void 0
                    : ir(q, a, `${C} has member 'flush' that`),
                readableType: re,
                start:
                  void 0 === ae
                    ? void 0
                    : lr(ae, a, `${C} has member 'start' that`),
                transform:
                  void 0 === Ue
                    ? void 0
                    : sr(Ue, a, `${C} has member 'transform' that`),
                writableType: lt
              };
            })(a, 'First parameter');
          if (void 0 !== Ue.readableType)
            throw new RangeError('Invalid readableType specified');
          if (void 0 !== Ue.writableType)
            throw new RangeError('Invalid writableType specified');
          const lt = $e(ae, 0),
            Pt = Me(ae),
            Wt = $e(re, 1),
            Ar = Me(re);
          let Er;
          !(function (a, C, q, re, ae, Ue) {
            function i() {
              return C;
            }
            function l(C) {
              return (function (a, C) {
                const q = a._transformStreamController;
                if (a._backpressure) {
                  return p(a._backpressureChangePromise, () => {
                    if (
                      'erroring' ===
                      (Ge(a._writable) ? a._writable._state : a._writableState)
                    )
                      throw Ge(a._writable)
                        ? a._writable._storedError
                        : a._writableStoredError;
                    return pr(q, C);
                  });
                }
                return pr(q, C);
              })(a, C);
            }
            function s(C) {
              return (function (a, C) {
                return cr(a, C), c(void 0);
              })(a, C);
            }
            function u() {
              return (function (a) {
                const C = a._transformStreamController,
                  q = C._flushAlgorithm();
                return (
                  hr(C),
                  p(
                    q,
                    () => {
                      if ('errored' === a._readableState)
                        throw a._readableStoredError;
                      gr(a) && wr(a);
                    },
                    (C) => {
                      throw (cr(a, C), a._readableStoredError);
                    }
                  )
                );
              })(a);
            }
            function d() {
              return (function (a) {
                return fr(a, !1), a._backpressureChangePromise;
              })(a);
            }
            function f(C) {
              return dr(a, C), c(void 0);
            }
            (a._writableState = 'writable'),
              (a._writableStoredError = void 0),
              (a._writableHasInFlightOperation = !1),
              (a._writableStarted = !1),
              (a._writable = (function (a, C, q, re, ae, Ue, lt) {
                return new WritableStream(
                  {
                    start(q) {
                      a._writableController = q;
                      try {
                        const C = q.signal;
                        void 0 !== C &&
                          C.addEventListener('abort', () => {
                            'writable' === a._writableState &&
                              ((a._writableState = 'erroring'),
                              C.reason && (a._writableStoredError = C.reason));
                          });
                      } catch (a) {}
                      return p(
                        C(),
                        () => ((a._writableStarted = !0), Cr(a), null),
                        (C) => {
                          throw ((a._writableStarted = !0), Rr(a, C), C);
                        }
                      );
                    },
                    write: (C) => (
                      (function (a) {
                        a._writableHasInFlightOperation = !0;
                      })(a),
                      p(
                        q(C),
                        () => (
                          (function (a) {
                            a._writableHasInFlightOperation = !1;
                          })(a),
                          Cr(a),
                          null
                        ),
                        (C) => {
                          throw (
                            ((function (a, C) {
                              (a._writableHasInFlightOperation = !1), Rr(a, C);
                            })(a, C),
                            C)
                          );
                        }
                      )
                    ),
                    close: () => (
                      (function (a) {
                        a._writableHasInFlightOperation = !0;
                      })(a),
                      p(
                        re(),
                        () => (
                          (function (a) {
                            a._writableHasInFlightOperation = !1;
                            'erroring' === a._writableState &&
                              (a._writableStoredError = void 0);
                            a._writableState = 'closed';
                          })(a),
                          null
                        ),
                        (C) => {
                          throw (
                            ((function (a, C) {
                              (a._writableHasInFlightOperation = !1),
                                a._writableState,
                                Rr(a, C);
                            })(a, C),
                            C)
                          );
                        }
                      )
                    ),
                    abort: (C) => (
                      (a._writableState = 'errored'),
                      (a._writableStoredError = C),
                      ae(C)
                    )
                  },
                  { highWaterMark: Ue, size: lt }
                );
              })(a, i, l, u, s, q, re)),
              (a._readableState = 'readable'),
              (a._readableStoredError = void 0),
              (a._readableCloseRequested = !1),
              (a._readablePulling = !1),
              (a._readable = (function (a, C, q, re, ae, Ue) {
                return new ReadableStream(
                  {
                    start: (q) => (
                      (a._readableController = q),
                      C().catch((C) => {
                        Sr(a, C);
                      })
                    ),
                    pull: () => (
                      (a._readablePulling = !0),
                      q().catch((C) => {
                        Sr(a, C);
                      })
                    ),
                    cancel: (C) => ((a._readableState = 'closed'), re(C))
                  },
                  { highWaterMark: ae, size: Ue }
                );
              })(a, i, d, f, ae, Ue)),
              (a._backpressure = void 0),
              (a._backpressureChangePromise = void 0),
              (a._backpressureChangePromise_resolve = void 0),
              fr(a, !0),
              (a._transformStreamController = void 0);
          })(
            this,
            u((a) => {
              Er = a;
            }),
            Wt,
            Ar,
            lt,
            Pt
          ),
            (function (a, C) {
              const q = Object.create(
                TransformStreamDefaultController.prototype
              );
              let re, ae;
              re =
                void 0 !== C.transform
                  ? (a) => C.transform(a, q)
                  : (a) => {
                      try {
                        return _r(q, a), c(void 0);
                      } catch (a) {
                        return d(a);
                      }
                    };
              ae = void 0 !== C.flush ? () => C.flush(q) : () => c(void 0);
              !(function (a, C, q, re) {
                (C._controlledTransformStream = a),
                  (a._transformStreamController = C),
                  (C._transformAlgorithm = q),
                  (C._flushAlgorithm = re);
              })(a, q, re, ae);
            })(this, Ue),
            void 0 !== Ue.start
              ? Er(Ue.start(this._transformStreamController))
              : Er(void 0);
        }
        get readable() {
          if (!ur(this)) throw yr('readable');
          return this._readable;
        }
        get writable() {
          if (!ur(this)) throw yr('writable');
          return this._writable;
        }
      }
      function ur(a) {
        return (
          !!r(a) &&
          !!Object.prototype.hasOwnProperty.call(
            a,
            '_transformStreamController'
          ) &&
          a instanceof TransformStream
        );
      }
      function cr(a, C) {
        Sr(a, C), dr(a, C);
      }
      function dr(a, C) {
        hr(a._transformStreamController),
          (function (a, C) {
            a._writableController.error(C);
            'writable' === a._writableState && Tr(a, C);
          })(a, C),
          a._backpressure && fr(a, !1);
      }
      function fr(a, C) {
        void 0 !== a._backpressureChangePromise &&
          a._backpressureChangePromise_resolve(),
          (a._backpressureChangePromise = u((C) => {
            a._backpressureChangePromise_resolve = C;
          })),
          (a._backpressure = C);
      }
      Object.defineProperties(TransformStream.prototype, {
        readable: { enumerable: !0 },
        writable: { enumerable: !0 }
      }),
        'symbol' == typeof re.toStringTag &&
          Object.defineProperty(TransformStream.prototype, re.toStringTag, {
            value: 'TransformStream',
            configurable: !0
          });
      class TransformStreamDefaultController {
        constructor() {
          throw new TypeError('Illegal constructor');
        }
        get desiredSize() {
          if (!br(this)) throw mr('desiredSize');
          return vr(this._controlledTransformStream);
        }
        enqueue(a) {
          if (!br(this)) throw mr('enqueue');
          _r(this, a);
        }
        error(a) {
          if (!br(this)) throw mr('error');
          var C;
          (C = a), cr(this._controlledTransformStream, C);
        }
        terminate() {
          if (!br(this)) throw mr('terminate');
          !(function (a) {
            const C = a._controlledTransformStream;
            gr(C) && wr(C);
            const q = new TypeError('TransformStream terminated');
            dr(C, q);
          })(this);
        }
      }
      function br(a) {
        return (
          !!r(a) &&
          !!Object.prototype.hasOwnProperty.call(
            a,
            '_controlledTransformStream'
          ) &&
          a instanceof TransformStreamDefaultController
        );
      }
      function hr(a) {
        (a._transformAlgorithm = void 0), (a._flushAlgorithm = void 0);
      }
      function _r(a, C) {
        const q = a._controlledTransformStream;
        if (!gr(q))
          throw new TypeError(
            'Readable side is not in a state that permits enqueue'
          );
        try {
          !(function (a, C) {
            a._readablePulling = !1;
            try {
              a._readableController.enqueue(C);
            } catch (C) {
              throw (Sr(a, C), C);
            }
          })(q, C);
        } catch (a) {
          throw (dr(q, a), q._readableStoredError);
        }
        const re = (function (a) {
          return !(function (a) {
            if (!gr(a)) return !1;
            if (a._readablePulling) return !0;
            if (vr(a) > 0) return !0;
            return !1;
          })(a);
        })(q);
        re !== q._backpressure && fr(q, !0);
      }
      function pr(a, C) {
        return p(a._transformAlgorithm(C), void 0, (C) => {
          throw (cr(a._controlledTransformStream, C), C);
        });
      }
      function mr(a) {
        return new TypeError(
          `TransformStreamDefaultController.prototype.${a} can only be used on a TransformStreamDefaultController`
        );
      }
      function yr(a) {
        return new TypeError(
          `TransformStream.prototype.${a} can only be used on a TransformStream`
        );
      }
      function gr(a) {
        return !a._readableCloseRequested && 'readable' === a._readableState;
      }
      function wr(a) {
        (a._readableState = 'closed'),
          (a._readableCloseRequested = !0),
          a._readableController.close();
      }
      function Sr(a, C) {
        'readable' === a._readableState &&
          ((a._readableState = 'errored'), (a._readableStoredError = C)),
          a._readableController.error(C);
      }
      function vr(a) {
        return a._readableController.desiredSize;
      }
      function Rr(a, C) {
        'writable' !== a._writableState ? qr(a) : Tr(a, C);
      }
      function Tr(a, C) {
        (a._writableState = 'erroring'),
          (a._writableStoredError = C),
          !(function (a) {
            return a._writableHasInFlightOperation;
          })(a) &&
            a._writableStarted &&
            qr(a);
      }
      function qr(a) {
        a._writableState = 'errored';
      }
      function Cr(a) {
        'erroring' === a._writableState && qr(a);
      }
      Object.defineProperties(TransformStreamDefaultController.prototype, {
        enqueue: { enumerable: !0 },
        error: { enumerable: !0 },
        terminate: { enumerable: !0 },
        desiredSize: { enumerable: !0 }
      }),
        n(TransformStreamDefaultController.prototype.enqueue, 'enqueue'),
        n(TransformStreamDefaultController.prototype.error, 'error'),
        n(TransformStreamDefaultController.prototype.terminate, 'terminate'),
        'symbol' == typeof re.toStringTag &&
          Object.defineProperty(
            TransformStreamDefaultController.prototype,
            re.toStringTag,
            { value: 'TransformStreamDefaultController', configurable: !0 }
          );
      var xr = q(5648);
      /*! Based on fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> & David Frank */
      const Ur = 65536;
      async function* clonePart(a) {
        const C = a.byteOffset + a.byteLength;
        let q = a.byteOffset;
        while (q !== C) {
          const re = Math.min(C - q, Ur);
          const ae = a.buffer.slice(q, q + re);
          q += ae.byteLength;
          yield new Uint8Array(ae);
        }
      }
      async function* consumeNodeBlob(a) {
        let C = 0;
        while (C !== a.size) {
          const q = a.slice(C, Math.min(a.size, C + Ur));
          const re = await q.arrayBuffer();
          C += re.byteLength;
          yield new Uint8Array(re);
        }
      }
      async function* consumeBlobParts(a, C = false) {
        for (const q of a) {
          if (ArrayBuffer.isView(q)) {
            if (C) {
              yield* clonePart(q);
            } else {
              yield q;
            }
          } else if ((0, xr.m)(q.stream)) {
            yield* q.stream();
          } else {
            yield* consumeNodeBlob(q);
          }
        }
      }
      function* sliceBlob(a, C, q = 0, re) {
        re !== null && re !== void 0 ? re : (re = C);
        let ae = q < 0 ? Math.max(C + q, 0) : Math.min(q, C);
        let Ue = re < 0 ? Math.max(C + re, 0) : Math.min(re, C);
        const lt = Math.max(Ue - ae, 0);
        let Pt = 0;
        for (const C of a) {
          if (Pt >= lt) {
            break;
          }
          const a = ArrayBuffer.isView(C) ? C.byteLength : C.size;
          if (ae && a <= ae) {
            ae -= a;
            Ue -= a;
          } else {
            let q;
            if (ArrayBuffer.isView(C)) {
              q = C.subarray(ae, Math.min(a, Ue));
              Pt += q.byteLength;
            } else {
              q = C.slice(ae, Math.min(a, Ue));
              Pt += q.size;
            }
            Ue -= a;
            ae = 0;
            yield q;
          }
        }
      }
      /*! Based on fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> & David Frank */
      var Gr =
        (undefined && undefined.__classPrivateFieldGet) ||
        function (a, C, q, re) {
          if (q === 'a' && !re)
            throw new TypeError(
              'Private accessor was defined without a getter'
            );
          if (typeof C === 'function' ? a !== C || !re : !C.has(a))
            throw new TypeError(
              'Cannot read private member from an object whose class did not declare it'
            );
          return q === 'm'
            ? re
            : q === 'a'
              ? re.call(a)
              : re
                ? re.value
                : C.get(a);
        };
      var Hr =
        (undefined && undefined.__classPrivateFieldSet) ||
        function (a, C, q, re, ae) {
          if (re === 'm') throw new TypeError('Private method is not writable');
          if (re === 'a' && !ae)
            throw new TypeError(
              'Private accessor was defined without a setter'
            );
          if (typeof C === 'function' ? a !== C || !ae : !C.has(a))
            throw new TypeError(
              'Cannot write private member to an object whose class did not declare it'
            );
          return (
            re === 'a' ? ae.call(a, q) : ae ? (ae.value = q) : C.set(a, q), q
          );
        };
      var Vr, Wr, Yr;
      class Blob {
        constructor(a = [], C = {}) {
          Vr.set(this, []);
          Wr.set(this, '');
          Yr.set(this, 0);
          C !== null && C !== void 0 ? C : (C = {});
          if (typeof a !== 'object' || a === null) {
            throw new TypeError(
              "Failed to construct 'Blob': " +
                'The provided value cannot be converted to a sequence.'
            );
          }
          if (!(0, xr.m)(a[Symbol.iterator])) {
            throw new TypeError(
              "Failed to construct 'Blob': " +
                'The object must have a callable @@iterator property.'
            );
          }
          if (typeof C !== 'object' && !(0, xr.m)(C)) {
            throw new TypeError(
              "Failed to construct 'Blob': parameter 2 cannot convert to dictionary."
            );
          }
          const q = new TextEncoder();
          for (const C of a) {
            let a;
            if (ArrayBuffer.isView(C)) {
              a = new Uint8Array(
                C.buffer.slice(C.byteOffset, C.byteOffset + C.byteLength)
              );
            } else if (C instanceof ArrayBuffer) {
              a = new Uint8Array(C.slice(0));
            } else if (C instanceof Blob) {
              a = C;
            } else {
              a = q.encode(String(C));
            }
            Hr(
              this,
              Yr,
              Gr(this, Yr, 'f') +
                (ArrayBuffer.isView(a) ? a.byteLength : a.size),
              'f'
            );
            Gr(this, Vr, 'f').push(a);
          }
          const re = C.type === undefined ? '' : String(C.type);
          Hr(this, Wr, /^[\x20-\x7E]*$/.test(re) ? re : '', 'f');
        }
        static [((Vr = new WeakMap()),
        (Wr = new WeakMap()),
        (Yr = new WeakMap()),
        Symbol.hasInstance)](a) {
          return Boolean(
            a &&
              typeof a === 'object' &&
              (0, xr.m)(a.constructor) &&
              ((0, xr.m)(a.stream) || (0, xr.m)(a.arrayBuffer)) &&
              /^(Blob|File)$/.test(a[Symbol.toStringTag])
          );
        }
        get type() {
          return Gr(this, Wr, 'f');
        }
        get size() {
          return Gr(this, Yr, 'f');
        }
        slice(a, C, q) {
          return new Blob(sliceBlob(Gr(this, Vr, 'f'), this.size, a, C), {
            type: q
          });
        }
        async text() {
          const a = new TextDecoder();
          let C = '';
          for await (const q of consumeBlobParts(Gr(this, Vr, 'f'))) {
            C += a.decode(q, { stream: true });
          }
          C += a.decode();
          return C;
        }
        async arrayBuffer() {
          const a = new Uint8Array(this.size);
          let C = 0;
          for await (const q of consumeBlobParts(Gr(this, Vr, 'f'))) {
            a.set(q, C);
            C += q.length;
          }
          return a.buffer;
        }
        stream() {
          const a = consumeBlobParts(Gr(this, Vr, 'f'), true);
          return new ReadableStream({
            async pull(C) {
              const { value: q, done: re } = await a.next();
              if (re) {
                return queueMicrotask(() => C.close());
              }
              C.enqueue(q);
            },
            async cancel() {
              await a.return();
            }
          });
        }
        get [Symbol.toStringTag]() {
          return 'Blob';
        }
      }
      Object.defineProperties(Blob.prototype, {
        type: { enumerable: true },
        size: { enumerable: true },
        slice: { enumerable: true },
        stream: { enumerable: true },
        text: { enumerable: true },
        arrayBuffer: { enumerable: true }
      });
    },
    4471: (a, C, q) => {
      'use strict';
      q.d(C, { $: () => File });
      var re = q(12);
      var ae =
        (undefined && undefined.__classPrivateFieldSet) ||
        function (a, C, q, re, ae) {
          if (re === 'm') throw new TypeError('Private method is not writable');
          if (re === 'a' && !ae)
            throw new TypeError(
              'Private accessor was defined without a setter'
            );
          if (typeof C === 'function' ? a !== C || !ae : !C.has(a))
            throw new TypeError(
              'Cannot write private member to an object whose class did not declare it'
            );
          return (
            re === 'a' ? ae.call(a, q) : ae ? (ae.value = q) : C.set(a, q), q
          );
        };
      var Ue =
        (undefined && undefined.__classPrivateFieldGet) ||
        function (a, C, q, re) {
          if (q === 'a' && !re)
            throw new TypeError(
              'Private accessor was defined without a getter'
            );
          if (typeof C === 'function' ? a !== C || !re : !C.has(a))
            throw new TypeError(
              'Cannot read private member from an object whose class did not declare it'
            );
          return q === 'm'
            ? re
            : q === 'a'
              ? re.call(a)
              : re
                ? re.value
                : C.get(a);
        };
      var lt, Pt;
      class File extends re.t {
        constructor(a, C, q = {}) {
          super(a, q);
          lt.set(this, void 0);
          Pt.set(this, 0);
          if (arguments.length < 2) {
            throw new TypeError(
              "Failed to construct 'File': 2 arguments required, " +
                `but only ${arguments.length} present.`
            );
          }
          ae(this, lt, String(C), 'f');
          const re =
            q.lastModified === undefined ? Date.now() : Number(q.lastModified);
          if (!Number.isNaN(re)) {
            ae(this, Pt, re, 'f');
          }
        }
        static [((lt = new WeakMap()),
        (Pt = new WeakMap()),
        Symbol.hasInstance)](a) {
          return (
            a instanceof re.t &&
            a[Symbol.toStringTag] === 'File' &&
            typeof a.name === 'string'
          );
        }
        get name() {
          return Ue(this, lt, 'f');
        }
        get lastModified() {
          return Ue(this, Pt, 'f');
        }
        get webkitRelativePath() {
          return '';
        }
        get [Symbol.toStringTag]() {
          return 'File';
        }
      }
    },
    2131: (a, C, q) => {
      'use strict';
      q.d(C, { z: () => isFile });
      var re = q(4471);
      const isFile = (a) => a instanceof re.$;
    },
    5648: (a, C, q) => {
      'use strict';
      q.d(C, { m: () => isFunction });
      const isFunction = (a) => typeof a === 'function';
    },
    1229: (a) => {
      'use strict';
      a.exports = JSON.parse(
        '[[[0,44],"disallowed_STD3_valid"],[[45,46],"valid"],[[47,47],"disallowed_STD3_valid"],[[48,57],"valid"],[[58,64],"disallowed_STD3_valid"],[[65,65],"mapped",[97]],[[66,66],"mapped",[98]],[[67,67],"mapped",[99]],[[68,68],"mapped",[100]],[[69,69],"mapped",[101]],[[70,70],"mapped",[102]],[[71,71],"mapped",[103]],[[72,72],"mapped",[104]],[[73,73],"mapped",[105]],[[74,74],"mapped",[106]],[[75,75],"mapped",[107]],[[76,76],"mapped",[108]],[[77,77],"mapped",[109]],[[78,78],"mapped",[110]],[[79,79],"mapped",[111]],[[80,80],"mapped",[112]],[[81,81],"mapped",[113]],[[82,82],"mapped",[114]],[[83,83],"mapped",[115]],[[84,84],"mapped",[116]],[[85,85],"mapped",[117]],[[86,86],"mapped",[118]],[[87,87],"mapped",[119]],[[88,88],"mapped",[120]],[[89,89],"mapped",[121]],[[90,90],"mapped",[122]],[[91,96],"disallowed_STD3_valid"],[[97,122],"valid"],[[123,127],"disallowed_STD3_valid"],[[128,159],"disallowed"],[[160,160],"disallowed_STD3_mapped",[32]],[[161,167],"valid",[],"NV8"],[[168,168],"disallowed_STD3_mapped",[32,776]],[[169,169],"valid",[],"NV8"],[[170,170],"mapped",[97]],[[171,172],"valid",[],"NV8"],[[173,173],"ignored"],[[174,174],"valid",[],"NV8"],[[175,175],"disallowed_STD3_mapped",[32,772]],[[176,177],"valid",[],"NV8"],[[178,178],"mapped",[50]],[[179,179],"mapped",[51]],[[180,180],"disallowed_STD3_mapped",[32,769]],[[181,181],"mapped",[956]],[[182,182],"valid",[],"NV8"],[[183,183],"valid"],[[184,184],"disallowed_STD3_mapped",[32,807]],[[185,185],"mapped",[49]],[[186,186],"mapped",[111]],[[187,187],"valid",[],"NV8"],[[188,188],"mapped",[49,8260,52]],[[189,189],"mapped",[49,8260,50]],[[190,190],"mapped",[51,8260,52]],[[191,191],"valid",[],"NV8"],[[192,192],"mapped",[224]],[[193,193],"mapped",[225]],[[194,194],"mapped",[226]],[[195,195],"mapped",[227]],[[196,196],"mapped",[228]],[[197,197],"mapped",[229]],[[198,198],"mapped",[230]],[[199,199],"mapped",[231]],[[200,200],"mapped",[232]],[[201,201],"mapped",[233]],[[202,202],"mapped",[234]],[[203,203],"mapped",[235]],[[204,204],"mapped",[236]],[[205,205],"mapped",[237]],[[206,206],"mapped",[238]],[[207,207],"mapped",[239]],[[208,208],"mapped",[240]],[[209,209],"mapped",[241]],[[210,210],"mapped",[242]],[[211,211],"mapped",[243]],[[212,212],"mapped",[244]],[[213,213],"mapped",[245]],[[214,214],"mapped",[246]],[[215,215],"valid",[],"NV8"],[[216,216],"mapped",[248]],[[217,217],"mapped",[249]],[[218,218],"mapped",[250]],[[219,219],"mapped",[251]],[[220,220],"mapped",[252]],[[221,221],"mapped",[253]],[[222,222],"mapped",[254]],[[223,223],"deviation",[115,115]],[[224,246],"valid"],[[247,247],"valid",[],"NV8"],[[248,255],"valid"],[[256,256],"mapped",[257]],[[257,257],"valid"],[[258,258],"mapped",[259]],[[259,259],"valid"],[[260,260],"mapped",[261]],[[261,261],"valid"],[[262,262],"mapped",[263]],[[263,263],"valid"],[[264,264],"mapped",[265]],[[265,265],"valid"],[[266,266],"mapped",[267]],[[267,267],"valid"],[[268,268],"mapped",[269]],[[269,269],"valid"],[[270,270],"mapped",[271]],[[271,271],"valid"],[[272,272],"mapped",[273]],[[273,273],"valid"],[[274,274],"mapped",[275]],[[275,275],"valid"],[[276,276],"mapped",[277]],[[277,277],"valid"],[[278,278],"mapped",[279]],[[279,279],"valid"],[[280,280],"mapped",[281]],[[281,281],"valid"],[[282,282],"mapped",[283]],[[283,283],"valid"],[[284,284],"mapped",[285]],[[285,285],"valid"],[[286,286],"mapped",[287]],[[287,287],"valid"],[[288,288],"mapped",[289]],[[289,289],"valid"],[[290,290],"mapped",[291]],[[291,291],"valid"],[[292,292],"mapped",[293]],[[293,293],"valid"],[[294,294],"mapped",[295]],[[295,295],"valid"],[[296,296],"mapped",[297]],[[297,297],"valid"],[[298,298],"mapped",[299]],[[299,299],"valid"],[[300,300],"mapped",[301]],[[301,301],"valid"],[[302,302],"mapped",[303]],[[303,303],"valid"],[[304,304],"mapped",[105,775]],[[305,305],"valid"],[[306,307],"mapped",[105,106]],[[308,308],"mapped",[309]],[[309,309],"valid"],[[310,310],"mapped",[311]],[[311,312],"valid"],[[313,313],"mapped",[314]],[[314,314],"valid"],[[315,315],"mapped",[316]],[[316,316],"valid"],[[317,317],"mapped",[318]],[[318,318],"valid"],[[319,320],"mapped",[108,183]],[[321,321],"mapped",[322]],[[322,322],"valid"],[[323,323],"mapped",[324]],[[324,324],"valid"],[[325,325],"mapped",[326]],[[326,326],"valid"],[[327,327],"mapped",[328]],[[328,328],"valid"],[[329,329],"mapped",[700,110]],[[330,330],"mapped",[331]],[[331,331],"valid"],[[332,332],"mapped",[333]],[[333,333],"valid"],[[334,334],"mapped",[335]],[[335,335],"valid"],[[336,336],"mapped",[337]],[[337,337],"valid"],[[338,338],"mapped",[339]],[[339,339],"valid"],[[340,340],"mapped",[341]],[[341,341],"valid"],[[342,342],"mapped",[343]],[[343,343],"valid"],[[344,344],"mapped",[345]],[[345,345],"valid"],[[346,346],"mapped",[347]],[[347,347],"valid"],[[348,348],"mapped",[349]],[[349,349],"valid"],[[350,350],"mapped",[351]],[[351,351],"valid"],[[352,352],"mapped",[353]],[[353,353],"valid"],[[354,354],"mapped",[355]],[[355,355],"valid"],[[356,356],"mapped",[357]],[[357,357],"valid"],[[358,358],"mapped",[359]],[[359,359],"valid"],[[360,360],"mapped",[361]],[[361,361],"valid"],[[362,362],"mapped",[363]],[[363,363],"valid"],[[364,364],"mapped",[365]],[[365,365],"valid"],[[366,366],"mapped",[367]],[[367,367],"valid"],[[368,368],"mapped",[369]],[[369,369],"valid"],[[370,370],"mapped",[371]],[[371,371],"valid"],[[372,372],"mapped",[373]],[[373,373],"valid"],[[374,374],"mapped",[375]],[[375,375],"valid"],[[376,376],"mapped",[255]],[[377,377],"mapped",[378]],[[378,378],"valid"],[[379,379],"mapped",[380]],[[380,380],"valid"],[[381,381],"mapped",[382]],[[382,382],"valid"],[[383,383],"mapped",[115]],[[384,384],"valid"],[[385,385],"mapped",[595]],[[386,386],"mapped",[387]],[[387,387],"valid"],[[388,388],"mapped",[389]],[[389,389],"valid"],[[390,390],"mapped",[596]],[[391,391],"mapped",[392]],[[392,392],"valid"],[[393,393],"mapped",[598]],[[394,394],"mapped",[599]],[[395,395],"mapped",[396]],[[396,397],"valid"],[[398,398],"mapped",[477]],[[399,399],"mapped",[601]],[[400,400],"mapped",[603]],[[401,401],"mapped",[402]],[[402,402],"valid"],[[403,403],"mapped",[608]],[[404,404],"mapped",[611]],[[405,405],"valid"],[[406,406],"mapped",[617]],[[407,407],"mapped",[616]],[[408,408],"mapped",[409]],[[409,411],"valid"],[[412,412],"mapped",[623]],[[413,413],"mapped",[626]],[[414,414],"valid"],[[415,415],"mapped",[629]],[[416,416],"mapped",[417]],[[417,417],"valid"],[[418,418],"mapped",[419]],[[419,419],"valid"],[[420,420],"mapped",[421]],[[421,421],"valid"],[[422,422],"mapped",[640]],[[423,423],"mapped",[424]],[[424,424],"valid"],[[425,425],"mapped",[643]],[[426,427],"valid"],[[428,428],"mapped",[429]],[[429,429],"valid"],[[430,430],"mapped",[648]],[[431,431],"mapped",[432]],[[432,432],"valid"],[[433,433],"mapped",[650]],[[434,434],"mapped",[651]],[[435,435],"mapped",[436]],[[436,436],"valid"],[[437,437],"mapped",[438]],[[438,438],"valid"],[[439,439],"mapped",[658]],[[440,440],"mapped",[441]],[[441,443],"valid"],[[444,444],"mapped",[445]],[[445,451],"valid"],[[452,454],"mapped",[100,382]],[[455,457],"mapped",[108,106]],[[458,460],"mapped",[110,106]],[[461,461],"mapped",[462]],[[462,462],"valid"],[[463,463],"mapped",[464]],[[464,464],"valid"],[[465,465],"mapped",[466]],[[466,466],"valid"],[[467,467],"mapped",[468]],[[468,468],"valid"],[[469,469],"mapped",[470]],[[470,470],"valid"],[[471,471],"mapped",[472]],[[472,472],"valid"],[[473,473],"mapped",[474]],[[474,474],"valid"],[[475,475],"mapped",[476]],[[476,477],"valid"],[[478,478],"mapped",[479]],[[479,479],"valid"],[[480,480],"mapped",[481]],[[481,481],"valid"],[[482,482],"mapped",[483]],[[483,483],"valid"],[[484,484],"mapped",[485]],[[485,485],"valid"],[[486,486],"mapped",[487]],[[487,487],"valid"],[[488,488],"mapped",[489]],[[489,489],"valid"],[[490,490],"mapped",[491]],[[491,491],"valid"],[[492,492],"mapped",[493]],[[493,493],"valid"],[[494,494],"mapped",[495]],[[495,496],"valid"],[[497,499],"mapped",[100,122]],[[500,500],"mapped",[501]],[[501,501],"valid"],[[502,502],"mapped",[405]],[[503,503],"mapped",[447]],[[504,504],"mapped",[505]],[[505,505],"valid"],[[506,506],"mapped",[507]],[[507,507],"valid"],[[508,508],"mapped",[509]],[[509,509],"valid"],[[510,510],"mapped",[511]],[[511,511],"valid"],[[512,512],"mapped",[513]],[[513,513],"valid"],[[514,514],"mapped",[515]],[[515,515],"valid"],[[516,516],"mapped",[517]],[[517,517],"valid"],[[518,518],"mapped",[519]],[[519,519],"valid"],[[520,520],"mapped",[521]],[[521,521],"valid"],[[522,522],"mapped",[523]],[[523,523],"valid"],[[524,524],"mapped",[525]],[[525,525],"valid"],[[526,526],"mapped",[527]],[[527,527],"valid"],[[528,528],"mapped",[529]],[[529,529],"valid"],[[530,530],"mapped",[531]],[[531,531],"valid"],[[532,532],"mapped",[533]],[[533,533],"valid"],[[534,534],"mapped",[535]],[[535,535],"valid"],[[536,536],"mapped",[537]],[[537,537],"valid"],[[538,538],"mapped",[539]],[[539,539],"valid"],[[540,540],"mapped",[541]],[[541,541],"valid"],[[542,542],"mapped",[543]],[[543,543],"valid"],[[544,544],"mapped",[414]],[[545,545],"valid"],[[546,546],"mapped",[547]],[[547,547],"valid"],[[548,548],"mapped",[549]],[[549,549],"valid"],[[550,550],"mapped",[551]],[[551,551],"valid"],[[552,552],"mapped",[553]],[[553,553],"valid"],[[554,554],"mapped",[555]],[[555,555],"valid"],[[556,556],"mapped",[557]],[[557,557],"valid"],[[558,558],"mapped",[559]],[[559,559],"valid"],[[560,560],"mapped",[561]],[[561,561],"valid"],[[562,562],"mapped",[563]],[[563,563],"valid"],[[564,566],"valid"],[[567,569],"valid"],[[570,570],"mapped",[11365]],[[571,571],"mapped",[572]],[[572,572],"valid"],[[573,573],"mapped",[410]],[[574,574],"mapped",[11366]],[[575,576],"valid"],[[577,577],"mapped",[578]],[[578,578],"valid"],[[579,579],"mapped",[384]],[[580,580],"mapped",[649]],[[581,581],"mapped",[652]],[[582,582],"mapped",[583]],[[583,583],"valid"],[[584,584],"mapped",[585]],[[585,585],"valid"],[[586,586],"mapped",[587]],[[587,587],"valid"],[[588,588],"mapped",[589]],[[589,589],"valid"],[[590,590],"mapped",[591]],[[591,591],"valid"],[[592,680],"valid"],[[681,685],"valid"],[[686,687],"valid"],[[688,688],"mapped",[104]],[[689,689],"mapped",[614]],[[690,690],"mapped",[106]],[[691,691],"mapped",[114]],[[692,692],"mapped",[633]],[[693,693],"mapped",[635]],[[694,694],"mapped",[641]],[[695,695],"mapped",[119]],[[696,696],"mapped",[121]],[[697,705],"valid"],[[706,709],"valid",[],"NV8"],[[710,721],"valid"],[[722,727],"valid",[],"NV8"],[[728,728],"disallowed_STD3_mapped",[32,774]],[[729,729],"disallowed_STD3_mapped",[32,775]],[[730,730],"disallowed_STD3_mapped",[32,778]],[[731,731],"disallowed_STD3_mapped",[32,808]],[[732,732],"disallowed_STD3_mapped",[32,771]],[[733,733],"disallowed_STD3_mapped",[32,779]],[[734,734],"valid",[],"NV8"],[[735,735],"valid",[],"NV8"],[[736,736],"mapped",[611]],[[737,737],"mapped",[108]],[[738,738],"mapped",[115]],[[739,739],"mapped",[120]],[[740,740],"mapped",[661]],[[741,745],"valid",[],"NV8"],[[746,747],"valid",[],"NV8"],[[748,748],"valid"],[[749,749],"valid",[],"NV8"],[[750,750],"valid"],[[751,767],"valid",[],"NV8"],[[768,831],"valid"],[[832,832],"mapped",[768]],[[833,833],"mapped",[769]],[[834,834],"valid"],[[835,835],"mapped",[787]],[[836,836],"mapped",[776,769]],[[837,837],"mapped",[953]],[[838,846],"valid"],[[847,847],"ignored"],[[848,855],"valid"],[[856,860],"valid"],[[861,863],"valid"],[[864,865],"valid"],[[866,866],"valid"],[[867,879],"valid"],[[880,880],"mapped",[881]],[[881,881],"valid"],[[882,882],"mapped",[883]],[[883,883],"valid"],[[884,884],"mapped",[697]],[[885,885],"valid"],[[886,886],"mapped",[887]],[[887,887],"valid"],[[888,889],"disallowed"],[[890,890],"disallowed_STD3_mapped",[32,953]],[[891,893],"valid"],[[894,894],"disallowed_STD3_mapped",[59]],[[895,895],"mapped",[1011]],[[896,899],"disallowed"],[[900,900],"disallowed_STD3_mapped",[32,769]],[[901,901],"disallowed_STD3_mapped",[32,776,769]],[[902,902],"mapped",[940]],[[903,903],"mapped",[183]],[[904,904],"mapped",[941]],[[905,905],"mapped",[942]],[[906,906],"mapped",[943]],[[907,907],"disallowed"],[[908,908],"mapped",[972]],[[909,909],"disallowed"],[[910,910],"mapped",[973]],[[911,911],"mapped",[974]],[[912,912],"valid"],[[913,913],"mapped",[945]],[[914,914],"mapped",[946]],[[915,915],"mapped",[947]],[[916,916],"mapped",[948]],[[917,917],"mapped",[949]],[[918,918],"mapped",[950]],[[919,919],"mapped",[951]],[[920,920],"mapped",[952]],[[921,921],"mapped",[953]],[[922,922],"mapped",[954]],[[923,923],"mapped",[955]],[[924,924],"mapped",[956]],[[925,925],"mapped",[957]],[[926,926],"mapped",[958]],[[927,927],"mapped",[959]],[[928,928],"mapped",[960]],[[929,929],"mapped",[961]],[[930,930],"disallowed"],[[931,931],"mapped",[963]],[[932,932],"mapped",[964]],[[933,933],"mapped",[965]],[[934,934],"mapped",[966]],[[935,935],"mapped",[967]],[[936,936],"mapped",[968]],[[937,937],"mapped",[969]],[[938,938],"mapped",[970]],[[939,939],"mapped",[971]],[[940,961],"valid"],[[962,962],"deviation",[963]],[[963,974],"valid"],[[975,975],"mapped",[983]],[[976,976],"mapped",[946]],[[977,977],"mapped",[952]],[[978,978],"mapped",[965]],[[979,979],"mapped",[973]],[[980,980],"mapped",[971]],[[981,981],"mapped",[966]],[[982,982],"mapped",[960]],[[983,983],"valid"],[[984,984],"mapped",[985]],[[985,985],"valid"],[[986,986],"mapped",[987]],[[987,987],"valid"],[[988,988],"mapped",[989]],[[989,989],"valid"],[[990,990],"mapped",[991]],[[991,991],"valid"],[[992,992],"mapped",[993]],[[993,993],"valid"],[[994,994],"mapped",[995]],[[995,995],"valid"],[[996,996],"mapped",[997]],[[997,997],"valid"],[[998,998],"mapped",[999]],[[999,999],"valid"],[[1000,1000],"mapped",[1001]],[[1001,1001],"valid"],[[1002,1002],"mapped",[1003]],[[1003,1003],"valid"],[[1004,1004],"mapped",[1005]],[[1005,1005],"valid"],[[1006,1006],"mapped",[1007]],[[1007,1007],"valid"],[[1008,1008],"mapped",[954]],[[1009,1009],"mapped",[961]],[[1010,1010],"mapped",[963]],[[1011,1011],"valid"],[[1012,1012],"mapped",[952]],[[1013,1013],"mapped",[949]],[[1014,1014],"valid",[],"NV8"],[[1015,1015],"mapped",[1016]],[[1016,1016],"valid"],[[1017,1017],"mapped",[963]],[[1018,1018],"mapped",[1019]],[[1019,1019],"valid"],[[1020,1020],"valid"],[[1021,1021],"mapped",[891]],[[1022,1022],"mapped",[892]],[[1023,1023],"mapped",[893]],[[1024,1024],"mapped",[1104]],[[1025,1025],"mapped",[1105]],[[1026,1026],"mapped",[1106]],[[1027,1027],"mapped",[1107]],[[1028,1028],"mapped",[1108]],[[1029,1029],"mapped",[1109]],[[1030,1030],"mapped",[1110]],[[1031,1031],"mapped",[1111]],[[1032,1032],"mapped",[1112]],[[1033,1033],"mapped",[1113]],[[1034,1034],"mapped",[1114]],[[1035,1035],"mapped",[1115]],[[1036,1036],"mapped",[1116]],[[1037,1037],"mapped",[1117]],[[1038,1038],"mapped",[1118]],[[1039,1039],"mapped",[1119]],[[1040,1040],"mapped",[1072]],[[1041,1041],"mapped",[1073]],[[1042,1042],"mapped",[1074]],[[1043,1043],"mapped",[1075]],[[1044,1044],"mapped",[1076]],[[1045,1045],"mapped",[1077]],[[1046,1046],"mapped",[1078]],[[1047,1047],"mapped",[1079]],[[1048,1048],"mapped",[1080]],[[1049,1049],"mapped",[1081]],[[1050,1050],"mapped",[1082]],[[1051,1051],"mapped",[1083]],[[1052,1052],"mapped",[1084]],[[1053,1053],"mapped",[1085]],[[1054,1054],"mapped",[1086]],[[1055,1055],"mapped",[1087]],[[1056,1056],"mapped",[1088]],[[1057,1057],"mapped",[1089]],[[1058,1058],"mapped",[1090]],[[1059,1059],"mapped",[1091]],[[1060,1060],"mapped",[1092]],[[1061,1061],"mapped",[1093]],[[1062,1062],"mapped",[1094]],[[1063,1063],"mapped",[1095]],[[1064,1064],"mapped",[1096]],[[1065,1065],"mapped",[1097]],[[1066,1066],"mapped",[1098]],[[1067,1067],"mapped",[1099]],[[1068,1068],"mapped",[1100]],[[1069,1069],"mapped",[1101]],[[1070,1070],"mapped",[1102]],[[1071,1071],"mapped",[1103]],[[1072,1103],"valid"],[[1104,1104],"valid"],[[1105,1116],"valid"],[[1117,1117],"valid"],[[1118,1119],"valid"],[[1120,1120],"mapped",[1121]],[[1121,1121],"valid"],[[1122,1122],"mapped",[1123]],[[1123,1123],"valid"],[[1124,1124],"mapped",[1125]],[[1125,1125],"valid"],[[1126,1126],"mapped",[1127]],[[1127,1127],"valid"],[[1128,1128],"mapped",[1129]],[[1129,1129],"valid"],[[1130,1130],"mapped",[1131]],[[1131,1131],"valid"],[[1132,1132],"mapped",[1133]],[[1133,1133],"valid"],[[1134,1134],"mapped",[1135]],[[1135,1135],"valid"],[[1136,1136],"mapped",[1137]],[[1137,1137],"valid"],[[1138,1138],"mapped",[1139]],[[1139,1139],"valid"],[[1140,1140],"mapped",[1141]],[[1141,1141],"valid"],[[1142,1142],"mapped",[1143]],[[1143,1143],"valid"],[[1144,1144],"mapped",[1145]],[[1145,1145],"valid"],[[1146,1146],"mapped",[1147]],[[1147,1147],"valid"],[[1148,1148],"mapped",[1149]],[[1149,1149],"valid"],[[1150,1150],"mapped",[1151]],[[1151,1151],"valid"],[[1152,1152],"mapped",[1153]],[[1153,1153],"valid"],[[1154,1154],"valid",[],"NV8"],[[1155,1158],"valid"],[[1159,1159],"valid"],[[1160,1161],"valid",[],"NV8"],[[1162,1162],"mapped",[1163]],[[1163,1163],"valid"],[[1164,1164],"mapped",[1165]],[[1165,1165],"valid"],[[1166,1166],"mapped",[1167]],[[1167,1167],"valid"],[[1168,1168],"mapped",[1169]],[[1169,1169],"valid"],[[1170,1170],"mapped",[1171]],[[1171,1171],"valid"],[[1172,1172],"mapped",[1173]],[[1173,1173],"valid"],[[1174,1174],"mapped",[1175]],[[1175,1175],"valid"],[[1176,1176],"mapped",[1177]],[[1177,1177],"valid"],[[1178,1178],"mapped",[1179]],[[1179,1179],"valid"],[[1180,1180],"mapped",[1181]],[[1181,1181],"valid"],[[1182,1182],"mapped",[1183]],[[1183,1183],"valid"],[[1184,1184],"mapped",[1185]],[[1185,1185],"valid"],[[1186,1186],"mapped",[1187]],[[1187,1187],"valid"],[[1188,1188],"mapped",[1189]],[[1189,1189],"valid"],[[1190,1190],"mapped",[1191]],[[1191,1191],"valid"],[[1192,1192],"mapped",[1193]],[[1193,1193],"valid"],[[1194,1194],"mapped",[1195]],[[1195,1195],"valid"],[[1196,1196],"mapped",[1197]],[[1197,1197],"valid"],[[1198,1198],"mapped",[1199]],[[1199,1199],"valid"],[[1200,1200],"mapped",[1201]],[[1201,1201],"valid"],[[1202,1202],"mapped",[1203]],[[1203,1203],"valid"],[[1204,1204],"mapped",[1205]],[[1205,1205],"valid"],[[1206,1206],"mapped",[1207]],[[1207,1207],"valid"],[[1208,1208],"mapped",[1209]],[[1209,1209],"valid"],[[1210,1210],"mapped",[1211]],[[1211,1211],"valid"],[[1212,1212],"mapped",[1213]],[[1213,1213],"valid"],[[1214,1214],"mapped",[1215]],[[1215,1215],"valid"],[[1216,1216],"disallowed"],[[1217,1217],"mapped",[1218]],[[1218,1218],"valid"],[[1219,1219],"mapped",[1220]],[[1220,1220],"valid"],[[1221,1221],"mapped",[1222]],[[1222,1222],"valid"],[[1223,1223],"mapped",[1224]],[[1224,1224],"valid"],[[1225,1225],"mapped",[1226]],[[1226,1226],"valid"],[[1227,1227],"mapped",[1228]],[[1228,1228],"valid"],[[1229,1229],"mapped",[1230]],[[1230,1230],"valid"],[[1231,1231],"valid"],[[1232,1232],"mapped",[1233]],[[1233,1233],"valid"],[[1234,1234],"mapped",[1235]],[[1235,1235],"valid"],[[1236,1236],"mapped",[1237]],[[1237,1237],"valid"],[[1238,1238],"mapped",[1239]],[[1239,1239],"valid"],[[1240,1240],"mapped",[1241]],[[1241,1241],"valid"],[[1242,1242],"mapped",[1243]],[[1243,1243],"valid"],[[1244,1244],"mapped",[1245]],[[1245,1245],"valid"],[[1246,1246],"mapped",[1247]],[[1247,1247],"valid"],[[1248,1248],"mapped",[1249]],[[1249,1249],"valid"],[[1250,1250],"mapped",[1251]],[[1251,1251],"valid"],[[1252,1252],"mapped",[1253]],[[1253,1253],"valid"],[[1254,1254],"mapped",[1255]],[[1255,1255],"valid"],[[1256,1256],"mapped",[1257]],[[1257,1257],"valid"],[[1258,1258],"mapped",[1259]],[[1259,1259],"valid"],[[1260,1260],"mapped",[1261]],[[1261,1261],"valid"],[[1262,1262],"mapped",[1263]],[[1263,1263],"valid"],[[1264,1264],"mapped",[1265]],[[1265,1265],"valid"],[[1266,1266],"mapped",[1267]],[[1267,1267],"valid"],[[1268,1268],"mapped",[1269]],[[1269,1269],"valid"],[[1270,1270],"mapped",[1271]],[[1271,1271],"valid"],[[1272,1272],"mapped",[1273]],[[1273,1273],"valid"],[[1274,1274],"mapped",[1275]],[[1275,1275],"valid"],[[1276,1276],"mapped",[1277]],[[1277,1277],"valid"],[[1278,1278],"mapped",[1279]],[[1279,1279],"valid"],[[1280,1280],"mapped",[1281]],[[1281,1281],"valid"],[[1282,1282],"mapped",[1283]],[[1283,1283],"valid"],[[1284,1284],"mapped",[1285]],[[1285,1285],"valid"],[[1286,1286],"mapped",[1287]],[[1287,1287],"valid"],[[1288,1288],"mapped",[1289]],[[1289,1289],"valid"],[[1290,1290],"mapped",[1291]],[[1291,1291],"valid"],[[1292,1292],"mapped",[1293]],[[1293,1293],"valid"],[[1294,1294],"mapped",[1295]],[[1295,1295],"valid"],[[1296,1296],"mapped",[1297]],[[1297,1297],"valid"],[[1298,1298],"mapped",[1299]],[[1299,1299],"valid"],[[1300,1300],"mapped",[1301]],[[1301,1301],"valid"],[[1302,1302],"mapped",[1303]],[[1303,1303],"valid"],[[1304,1304],"mapped",[1305]],[[1305,1305],"valid"],[[1306,1306],"mapped",[1307]],[[1307,1307],"valid"],[[1308,1308],"mapped",[1309]],[[1309,1309],"valid"],[[1310,1310],"mapped",[1311]],[[1311,1311],"valid"],[[1312,1312],"mapped",[1313]],[[1313,1313],"valid"],[[1314,1314],"mapped",[1315]],[[1315,1315],"valid"],[[1316,1316],"mapped",[1317]],[[1317,1317],"valid"],[[1318,1318],"mapped",[1319]],[[1319,1319],"valid"],[[1320,1320],"mapped",[1321]],[[1321,1321],"valid"],[[1322,1322],"mapped",[1323]],[[1323,1323],"valid"],[[1324,1324],"mapped",[1325]],[[1325,1325],"valid"],[[1326,1326],"mapped",[1327]],[[1327,1327],"valid"],[[1328,1328],"disallowed"],[[1329,1329],"mapped",[1377]],[[1330,1330],"mapped",[1378]],[[1331,1331],"mapped",[1379]],[[1332,1332],"mapped",[1380]],[[1333,1333],"mapped",[1381]],[[1334,1334],"mapped",[1382]],[[1335,1335],"mapped",[1383]],[[1336,1336],"mapped",[1384]],[[1337,1337],"mapped",[1385]],[[1338,1338],"mapped",[1386]],[[1339,1339],"mapped",[1387]],[[1340,1340],"mapped",[1388]],[[1341,1341],"mapped",[1389]],[[1342,1342],"mapped",[1390]],[[1343,1343],"mapped",[1391]],[[1344,1344],"mapped",[1392]],[[1345,1345],"mapped",[1393]],[[1346,1346],"mapped",[1394]],[[1347,1347],"mapped",[1395]],[[1348,1348],"mapped",[1396]],[[1349,1349],"mapped",[1397]],[[1350,1350],"mapped",[1398]],[[1351,1351],"mapped",[1399]],[[1352,1352],"mapped",[1400]],[[1353,1353],"mapped",[1401]],[[1354,1354],"mapped",[1402]],[[1355,1355],"mapped",[1403]],[[1356,1356],"mapped",[1404]],[[1357,1357],"mapped",[1405]],[[1358,1358],"mapped",[1406]],[[1359,1359],"mapped",[1407]],[[1360,1360],"mapped",[1408]],[[1361,1361],"mapped",[1409]],[[1362,1362],"mapped",[1410]],[[1363,1363],"mapped",[1411]],[[1364,1364],"mapped",[1412]],[[1365,1365],"mapped",[1413]],[[1366,1366],"mapped",[1414]],[[1367,1368],"disallowed"],[[1369,1369],"valid"],[[1370,1375],"valid",[],"NV8"],[[1376,1376],"disallowed"],[[1377,1414],"valid"],[[1415,1415],"mapped",[1381,1410]],[[1416,1416],"disallowed"],[[1417,1417],"valid",[],"NV8"],[[1418,1418],"valid",[],"NV8"],[[1419,1420],"disallowed"],[[1421,1422],"valid",[],"NV8"],[[1423,1423],"valid",[],"NV8"],[[1424,1424],"disallowed"],[[1425,1441],"valid"],[[1442,1442],"valid"],[[1443,1455],"valid"],[[1456,1465],"valid"],[[1466,1466],"valid"],[[1467,1469],"valid"],[[1470,1470],"valid",[],"NV8"],[[1471,1471],"valid"],[[1472,1472],"valid",[],"NV8"],[[1473,1474],"valid"],[[1475,1475],"valid",[],"NV8"],[[1476,1476],"valid"],[[1477,1477],"valid"],[[1478,1478],"valid",[],"NV8"],[[1479,1479],"valid"],[[1480,1487],"disallowed"],[[1488,1514],"valid"],[[1515,1519],"disallowed"],[[1520,1524],"valid"],[[1525,1535],"disallowed"],[[1536,1539],"disallowed"],[[1540,1540],"disallowed"],[[1541,1541],"disallowed"],[[1542,1546],"valid",[],"NV8"],[[1547,1547],"valid",[],"NV8"],[[1548,1548],"valid",[],"NV8"],[[1549,1551],"valid",[],"NV8"],[[1552,1557],"valid"],[[1558,1562],"valid"],[[1563,1563],"valid",[],"NV8"],[[1564,1564],"disallowed"],[[1565,1565],"disallowed"],[[1566,1566],"valid",[],"NV8"],[[1567,1567],"valid",[],"NV8"],[[1568,1568],"valid"],[[1569,1594],"valid"],[[1595,1599],"valid"],[[1600,1600],"valid",[],"NV8"],[[1601,1618],"valid"],[[1619,1621],"valid"],[[1622,1624],"valid"],[[1625,1630],"valid"],[[1631,1631],"valid"],[[1632,1641],"valid"],[[1642,1645],"valid",[],"NV8"],[[1646,1647],"valid"],[[1648,1652],"valid"],[[1653,1653],"mapped",[1575,1652]],[[1654,1654],"mapped",[1608,1652]],[[1655,1655],"mapped",[1735,1652]],[[1656,1656],"mapped",[1610,1652]],[[1657,1719],"valid"],[[1720,1721],"valid"],[[1722,1726],"valid"],[[1727,1727],"valid"],[[1728,1742],"valid"],[[1743,1743],"valid"],[[1744,1747],"valid"],[[1748,1748],"valid",[],"NV8"],[[1749,1756],"valid"],[[1757,1757],"disallowed"],[[1758,1758],"valid",[],"NV8"],[[1759,1768],"valid"],[[1769,1769],"valid",[],"NV8"],[[1770,1773],"valid"],[[1774,1775],"valid"],[[1776,1785],"valid"],[[1786,1790],"valid"],[[1791,1791],"valid"],[[1792,1805],"valid",[],"NV8"],[[1806,1806],"disallowed"],[[1807,1807],"disallowed"],[[1808,1836],"valid"],[[1837,1839],"valid"],[[1840,1866],"valid"],[[1867,1868],"disallowed"],[[1869,1871],"valid"],[[1872,1901],"valid"],[[1902,1919],"valid"],[[1920,1968],"valid"],[[1969,1969],"valid"],[[1970,1983],"disallowed"],[[1984,2037],"valid"],[[2038,2042],"valid",[],"NV8"],[[2043,2047],"disallowed"],[[2048,2093],"valid"],[[2094,2095],"disallowed"],[[2096,2110],"valid",[],"NV8"],[[2111,2111],"disallowed"],[[2112,2139],"valid"],[[2140,2141],"disallowed"],[[2142,2142],"valid",[],"NV8"],[[2143,2207],"disallowed"],[[2208,2208],"valid"],[[2209,2209],"valid"],[[2210,2220],"valid"],[[2221,2226],"valid"],[[2227,2228],"valid"],[[2229,2274],"disallowed"],[[2275,2275],"valid"],[[2276,2302],"valid"],[[2303,2303],"valid"],[[2304,2304],"valid"],[[2305,2307],"valid"],[[2308,2308],"valid"],[[2309,2361],"valid"],[[2362,2363],"valid"],[[2364,2381],"valid"],[[2382,2382],"valid"],[[2383,2383],"valid"],[[2384,2388],"valid"],[[2389,2389],"valid"],[[2390,2391],"valid"],[[2392,2392],"mapped",[2325,2364]],[[2393,2393],"mapped",[2326,2364]],[[2394,2394],"mapped",[2327,2364]],[[2395,2395],"mapped",[2332,2364]],[[2396,2396],"mapped",[2337,2364]],[[2397,2397],"mapped",[2338,2364]],[[2398,2398],"mapped",[2347,2364]],[[2399,2399],"mapped",[2351,2364]],[[2400,2403],"valid"],[[2404,2405],"valid",[],"NV8"],[[2406,2415],"valid"],[[2416,2416],"valid",[],"NV8"],[[2417,2418],"valid"],[[2419,2423],"valid"],[[2424,2424],"valid"],[[2425,2426],"valid"],[[2427,2428],"valid"],[[2429,2429],"valid"],[[2430,2431],"valid"],[[2432,2432],"valid"],[[2433,2435],"valid"],[[2436,2436],"disallowed"],[[2437,2444],"valid"],[[2445,2446],"disallowed"],[[2447,2448],"valid"],[[2449,2450],"disallowed"],[[2451,2472],"valid"],[[2473,2473],"disallowed"],[[2474,2480],"valid"],[[2481,2481],"disallowed"],[[2482,2482],"valid"],[[2483,2485],"disallowed"],[[2486,2489],"valid"],[[2490,2491],"disallowed"],[[2492,2492],"valid"],[[2493,2493],"valid"],[[2494,2500],"valid"],[[2501,2502],"disallowed"],[[2503,2504],"valid"],[[2505,2506],"disallowed"],[[2507,2509],"valid"],[[2510,2510],"valid"],[[2511,2518],"disallowed"],[[2519,2519],"valid"],[[2520,2523],"disallowed"],[[2524,2524],"mapped",[2465,2492]],[[2525,2525],"mapped",[2466,2492]],[[2526,2526],"disallowed"],[[2527,2527],"mapped",[2479,2492]],[[2528,2531],"valid"],[[2532,2533],"disallowed"],[[2534,2545],"valid"],[[2546,2554],"valid",[],"NV8"],[[2555,2555],"valid",[],"NV8"],[[2556,2560],"disallowed"],[[2561,2561],"valid"],[[2562,2562],"valid"],[[2563,2563],"valid"],[[2564,2564],"disallowed"],[[2565,2570],"valid"],[[2571,2574],"disallowed"],[[2575,2576],"valid"],[[2577,2578],"disallowed"],[[2579,2600],"valid"],[[2601,2601],"disallowed"],[[2602,2608],"valid"],[[2609,2609],"disallowed"],[[2610,2610],"valid"],[[2611,2611],"mapped",[2610,2620]],[[2612,2612],"disallowed"],[[2613,2613],"valid"],[[2614,2614],"mapped",[2616,2620]],[[2615,2615],"disallowed"],[[2616,2617],"valid"],[[2618,2619],"disallowed"],[[2620,2620],"valid"],[[2621,2621],"disallowed"],[[2622,2626],"valid"],[[2627,2630],"disallowed"],[[2631,2632],"valid"],[[2633,2634],"disallowed"],[[2635,2637],"valid"],[[2638,2640],"disallowed"],[[2641,2641],"valid"],[[2642,2648],"disallowed"],[[2649,2649],"mapped",[2582,2620]],[[2650,2650],"mapped",[2583,2620]],[[2651,2651],"mapped",[2588,2620]],[[2652,2652],"valid"],[[2653,2653],"disallowed"],[[2654,2654],"mapped",[2603,2620]],[[2655,2661],"disallowed"],[[2662,2676],"valid"],[[2677,2677],"valid"],[[2678,2688],"disallowed"],[[2689,2691],"valid"],[[2692,2692],"disallowed"],[[2693,2699],"valid"],[[2700,2700],"valid"],[[2701,2701],"valid"],[[2702,2702],"disallowed"],[[2703,2705],"valid"],[[2706,2706],"disallowed"],[[2707,2728],"valid"],[[2729,2729],"disallowed"],[[2730,2736],"valid"],[[2737,2737],"disallowed"],[[2738,2739],"valid"],[[2740,2740],"disallowed"],[[2741,2745],"valid"],[[2746,2747],"disallowed"],[[2748,2757],"valid"],[[2758,2758],"disallowed"],[[2759,2761],"valid"],[[2762,2762],"disallowed"],[[2763,2765],"valid"],[[2766,2767],"disallowed"],[[2768,2768],"valid"],[[2769,2783],"disallowed"],[[2784,2784],"valid"],[[2785,2787],"valid"],[[2788,2789],"disallowed"],[[2790,2799],"valid"],[[2800,2800],"valid",[],"NV8"],[[2801,2801],"valid",[],"NV8"],[[2802,2808],"disallowed"],[[2809,2809],"valid"],[[2810,2816],"disallowed"],[[2817,2819],"valid"],[[2820,2820],"disallowed"],[[2821,2828],"valid"],[[2829,2830],"disallowed"],[[2831,2832],"valid"],[[2833,2834],"disallowed"],[[2835,2856],"valid"],[[2857,2857],"disallowed"],[[2858,2864],"valid"],[[2865,2865],"disallowed"],[[2866,2867],"valid"],[[2868,2868],"disallowed"],[[2869,2869],"valid"],[[2870,2873],"valid"],[[2874,2875],"disallowed"],[[2876,2883],"valid"],[[2884,2884],"valid"],[[2885,2886],"disallowed"],[[2887,2888],"valid"],[[2889,2890],"disallowed"],[[2891,2893],"valid"],[[2894,2901],"disallowed"],[[2902,2903],"valid"],[[2904,2907],"disallowed"],[[2908,2908],"mapped",[2849,2876]],[[2909,2909],"mapped",[2850,2876]],[[2910,2910],"disallowed"],[[2911,2913],"valid"],[[2914,2915],"valid"],[[2916,2917],"disallowed"],[[2918,2927],"valid"],[[2928,2928],"valid",[],"NV8"],[[2929,2929],"valid"],[[2930,2935],"valid",[],"NV8"],[[2936,2945],"disallowed"],[[2946,2947],"valid"],[[2948,2948],"disallowed"],[[2949,2954],"valid"],[[2955,2957],"disallowed"],[[2958,2960],"valid"],[[2961,2961],"disallowed"],[[2962,2965],"valid"],[[2966,2968],"disallowed"],[[2969,2970],"valid"],[[2971,2971],"disallowed"],[[2972,2972],"valid"],[[2973,2973],"disallowed"],[[2974,2975],"valid"],[[2976,2978],"disallowed"],[[2979,2980],"valid"],[[2981,2983],"disallowed"],[[2984,2986],"valid"],[[2987,2989],"disallowed"],[[2990,2997],"valid"],[[2998,2998],"valid"],[[2999,3001],"valid"],[[3002,3005],"disallowed"],[[3006,3010],"valid"],[[3011,3013],"disallowed"],[[3014,3016],"valid"],[[3017,3017],"disallowed"],[[3018,3021],"valid"],[[3022,3023],"disallowed"],[[3024,3024],"valid"],[[3025,3030],"disallowed"],[[3031,3031],"valid"],[[3032,3045],"disallowed"],[[3046,3046],"valid"],[[3047,3055],"valid"],[[3056,3058],"valid",[],"NV8"],[[3059,3066],"valid",[],"NV8"],[[3067,3071],"disallowed"],[[3072,3072],"valid"],[[3073,3075],"valid"],[[3076,3076],"disallowed"],[[3077,3084],"valid"],[[3085,3085],"disallowed"],[[3086,3088],"valid"],[[3089,3089],"disallowed"],[[3090,3112],"valid"],[[3113,3113],"disallowed"],[[3114,3123],"valid"],[[3124,3124],"valid"],[[3125,3129],"valid"],[[3130,3132],"disallowed"],[[3133,3133],"valid"],[[3134,3140],"valid"],[[3141,3141],"disallowed"],[[3142,3144],"valid"],[[3145,3145],"disallowed"],[[3146,3149],"valid"],[[3150,3156],"disallowed"],[[3157,3158],"valid"],[[3159,3159],"disallowed"],[[3160,3161],"valid"],[[3162,3162],"valid"],[[3163,3167],"disallowed"],[[3168,3169],"valid"],[[3170,3171],"valid"],[[3172,3173],"disallowed"],[[3174,3183],"valid"],[[3184,3191],"disallowed"],[[3192,3199],"valid",[],"NV8"],[[3200,3200],"disallowed"],[[3201,3201],"valid"],[[3202,3203],"valid"],[[3204,3204],"disallowed"],[[3205,3212],"valid"],[[3213,3213],"disallowed"],[[3214,3216],"valid"],[[3217,3217],"disallowed"],[[3218,3240],"valid"],[[3241,3241],"disallowed"],[[3242,3251],"valid"],[[3252,3252],"disallowed"],[[3253,3257],"valid"],[[3258,3259],"disallowed"],[[3260,3261],"valid"],[[3262,3268],"valid"],[[3269,3269],"disallowed"],[[3270,3272],"valid"],[[3273,3273],"disallowed"],[[3274,3277],"valid"],[[3278,3284],"disallowed"],[[3285,3286],"valid"],[[3287,3293],"disallowed"],[[3294,3294],"valid"],[[3295,3295],"disallowed"],[[3296,3297],"valid"],[[3298,3299],"valid"],[[3300,3301],"disallowed"],[[3302,3311],"valid"],[[3312,3312],"disallowed"],[[3313,3314],"valid"],[[3315,3328],"disallowed"],[[3329,3329],"valid"],[[3330,3331],"valid"],[[3332,3332],"disallowed"],[[3333,3340],"valid"],[[3341,3341],"disallowed"],[[3342,3344],"valid"],[[3345,3345],"disallowed"],[[3346,3368],"valid"],[[3369,3369],"valid"],[[3370,3385],"valid"],[[3386,3386],"valid"],[[3387,3388],"disallowed"],[[3389,3389],"valid"],[[3390,3395],"valid"],[[3396,3396],"valid"],[[3397,3397],"disallowed"],[[3398,3400],"valid"],[[3401,3401],"disallowed"],[[3402,3405],"valid"],[[3406,3406],"valid"],[[3407,3414],"disallowed"],[[3415,3415],"valid"],[[3416,3422],"disallowed"],[[3423,3423],"valid"],[[3424,3425],"valid"],[[3426,3427],"valid"],[[3428,3429],"disallowed"],[[3430,3439],"valid"],[[3440,3445],"valid",[],"NV8"],[[3446,3448],"disallowed"],[[3449,3449],"valid",[],"NV8"],[[3450,3455],"valid"],[[3456,3457],"disallowed"],[[3458,3459],"valid"],[[3460,3460],"disallowed"],[[3461,3478],"valid"],[[3479,3481],"disallowed"],[[3482,3505],"valid"],[[3506,3506],"disallowed"],[[3507,3515],"valid"],[[3516,3516],"disallowed"],[[3517,3517],"valid"],[[3518,3519],"disallowed"],[[3520,3526],"valid"],[[3527,3529],"disallowed"],[[3530,3530],"valid"],[[3531,3534],"disallowed"],[[3535,3540],"valid"],[[3541,3541],"disallowed"],[[3542,3542],"valid"],[[3543,3543],"disallowed"],[[3544,3551],"valid"],[[3552,3557],"disallowed"],[[3558,3567],"valid"],[[3568,3569],"disallowed"],[[3570,3571],"valid"],[[3572,3572],"valid",[],"NV8"],[[3573,3584],"disallowed"],[[3585,3634],"valid"],[[3635,3635],"mapped",[3661,3634]],[[3636,3642],"valid"],[[3643,3646],"disallowed"],[[3647,3647],"valid",[],"NV8"],[[3648,3662],"valid"],[[3663,3663],"valid",[],"NV8"],[[3664,3673],"valid"],[[3674,3675],"valid",[],"NV8"],[[3676,3712],"disallowed"],[[3713,3714],"valid"],[[3715,3715],"disallowed"],[[3716,3716],"valid"],[[3717,3718],"disallowed"],[[3719,3720],"valid"],[[3721,3721],"disallowed"],[[3722,3722],"valid"],[[3723,3724],"disallowed"],[[3725,3725],"valid"],[[3726,3731],"disallowed"],[[3732,3735],"valid"],[[3736,3736],"disallowed"],[[3737,3743],"valid"],[[3744,3744],"disallowed"],[[3745,3747],"valid"],[[3748,3748],"disallowed"],[[3749,3749],"valid"],[[3750,3750],"disallowed"],[[3751,3751],"valid"],[[3752,3753],"disallowed"],[[3754,3755],"valid"],[[3756,3756],"disallowed"],[[3757,3762],"valid"],[[3763,3763],"mapped",[3789,3762]],[[3764,3769],"valid"],[[3770,3770],"disallowed"],[[3771,3773],"valid"],[[3774,3775],"disallowed"],[[3776,3780],"valid"],[[3781,3781],"disallowed"],[[3782,3782],"valid"],[[3783,3783],"disallowed"],[[3784,3789],"valid"],[[3790,3791],"disallowed"],[[3792,3801],"valid"],[[3802,3803],"disallowed"],[[3804,3804],"mapped",[3755,3737]],[[3805,3805],"mapped",[3755,3745]],[[3806,3807],"valid"],[[3808,3839],"disallowed"],[[3840,3840],"valid"],[[3841,3850],"valid",[],"NV8"],[[3851,3851],"valid"],[[3852,3852],"mapped",[3851]],[[3853,3863],"valid",[],"NV8"],[[3864,3865],"valid"],[[3866,3871],"valid",[],"NV8"],[[3872,3881],"valid"],[[3882,3892],"valid",[],"NV8"],[[3893,3893],"valid"],[[3894,3894],"valid",[],"NV8"],[[3895,3895],"valid"],[[3896,3896],"valid",[],"NV8"],[[3897,3897],"valid"],[[3898,3901],"valid",[],"NV8"],[[3902,3906],"valid"],[[3907,3907],"mapped",[3906,4023]],[[3908,3911],"valid"],[[3912,3912],"disallowed"],[[3913,3916],"valid"],[[3917,3917],"mapped",[3916,4023]],[[3918,3921],"valid"],[[3922,3922],"mapped",[3921,4023]],[[3923,3926],"valid"],[[3927,3927],"mapped",[3926,4023]],[[3928,3931],"valid"],[[3932,3932],"mapped",[3931,4023]],[[3933,3944],"valid"],[[3945,3945],"mapped",[3904,4021]],[[3946,3946],"valid"],[[3947,3948],"valid"],[[3949,3952],"disallowed"],[[3953,3954],"valid"],[[3955,3955],"mapped",[3953,3954]],[[3956,3956],"valid"],[[3957,3957],"mapped",[3953,3956]],[[3958,3958],"mapped",[4018,3968]],[[3959,3959],"mapped",[4018,3953,3968]],[[3960,3960],"mapped",[4019,3968]],[[3961,3961],"mapped",[4019,3953,3968]],[[3962,3968],"valid"],[[3969,3969],"mapped",[3953,3968]],[[3970,3972],"valid"],[[3973,3973],"valid",[],"NV8"],[[3974,3979],"valid"],[[3980,3983],"valid"],[[3984,3986],"valid"],[[3987,3987],"mapped",[3986,4023]],[[3988,3989],"valid"],[[3990,3990],"valid"],[[3991,3991],"valid"],[[3992,3992],"disallowed"],[[3993,3996],"valid"],[[3997,3997],"mapped",[3996,4023]],[[3998,4001],"valid"],[[4002,4002],"mapped",[4001,4023]],[[4003,4006],"valid"],[[4007,4007],"mapped",[4006,4023]],[[4008,4011],"valid"],[[4012,4012],"mapped",[4011,4023]],[[4013,4013],"valid"],[[4014,4016],"valid"],[[4017,4023],"valid"],[[4024,4024],"valid"],[[4025,4025],"mapped",[3984,4021]],[[4026,4028],"valid"],[[4029,4029],"disallowed"],[[4030,4037],"valid",[],"NV8"],[[4038,4038],"valid"],[[4039,4044],"valid",[],"NV8"],[[4045,4045],"disallowed"],[[4046,4046],"valid",[],"NV8"],[[4047,4047],"valid",[],"NV8"],[[4048,4049],"valid",[],"NV8"],[[4050,4052],"valid",[],"NV8"],[[4053,4056],"valid",[],"NV8"],[[4057,4058],"valid",[],"NV8"],[[4059,4095],"disallowed"],[[4096,4129],"valid"],[[4130,4130],"valid"],[[4131,4135],"valid"],[[4136,4136],"valid"],[[4137,4138],"valid"],[[4139,4139],"valid"],[[4140,4146],"valid"],[[4147,4149],"valid"],[[4150,4153],"valid"],[[4154,4159],"valid"],[[4160,4169],"valid"],[[4170,4175],"valid",[],"NV8"],[[4176,4185],"valid"],[[4186,4249],"valid"],[[4250,4253],"valid"],[[4254,4255],"valid",[],"NV8"],[[4256,4293],"disallowed"],[[4294,4294],"disallowed"],[[4295,4295],"mapped",[11559]],[[4296,4300],"disallowed"],[[4301,4301],"mapped",[11565]],[[4302,4303],"disallowed"],[[4304,4342],"valid"],[[4343,4344],"valid"],[[4345,4346],"valid"],[[4347,4347],"valid",[],"NV8"],[[4348,4348],"mapped",[4316]],[[4349,4351],"valid"],[[4352,4441],"valid",[],"NV8"],[[4442,4446],"valid",[],"NV8"],[[4447,4448],"disallowed"],[[4449,4514],"valid",[],"NV8"],[[4515,4519],"valid",[],"NV8"],[[4520,4601],"valid",[],"NV8"],[[4602,4607],"valid",[],"NV8"],[[4608,4614],"valid"],[[4615,4615],"valid"],[[4616,4678],"valid"],[[4679,4679],"valid"],[[4680,4680],"valid"],[[4681,4681],"disallowed"],[[4682,4685],"valid"],[[4686,4687],"disallowed"],[[4688,4694],"valid"],[[4695,4695],"disallowed"],[[4696,4696],"valid"],[[4697,4697],"disallowed"],[[4698,4701],"valid"],[[4702,4703],"disallowed"],[[4704,4742],"valid"],[[4743,4743],"valid"],[[4744,4744],"valid"],[[4745,4745],"disallowed"],[[4746,4749],"valid"],[[4750,4751],"disallowed"],[[4752,4782],"valid"],[[4783,4783],"valid"],[[4784,4784],"valid"],[[4785,4785],"disallowed"],[[4786,4789],"valid"],[[4790,4791],"disallowed"],[[4792,4798],"valid"],[[4799,4799],"disallowed"],[[4800,4800],"valid"],[[4801,4801],"disallowed"],[[4802,4805],"valid"],[[4806,4807],"disallowed"],[[4808,4814],"valid"],[[4815,4815],"valid"],[[4816,4822],"valid"],[[4823,4823],"disallowed"],[[4824,4846],"valid"],[[4847,4847],"valid"],[[4848,4878],"valid"],[[4879,4879],"valid"],[[4880,4880],"valid"],[[4881,4881],"disallowed"],[[4882,4885],"valid"],[[4886,4887],"disallowed"],[[4888,4894],"valid"],[[4895,4895],"valid"],[[4896,4934],"valid"],[[4935,4935],"valid"],[[4936,4954],"valid"],[[4955,4956],"disallowed"],[[4957,4958],"valid"],[[4959,4959],"valid"],[[4960,4960],"valid",[],"NV8"],[[4961,4988],"valid",[],"NV8"],[[4989,4991],"disallowed"],[[4992,5007],"valid"],[[5008,5017],"valid",[],"NV8"],[[5018,5023],"disallowed"],[[5024,5108],"valid"],[[5109,5109],"valid"],[[5110,5111],"disallowed"],[[5112,5112],"mapped",[5104]],[[5113,5113],"mapped",[5105]],[[5114,5114],"mapped",[5106]],[[5115,5115],"mapped",[5107]],[[5116,5116],"mapped",[5108]],[[5117,5117],"mapped",[5109]],[[5118,5119],"disallowed"],[[5120,5120],"valid",[],"NV8"],[[5121,5740],"valid"],[[5741,5742],"valid",[],"NV8"],[[5743,5750],"valid"],[[5751,5759],"valid"],[[5760,5760],"disallowed"],[[5761,5786],"valid"],[[5787,5788],"valid",[],"NV8"],[[5789,5791],"disallowed"],[[5792,5866],"valid"],[[5867,5872],"valid",[],"NV8"],[[5873,5880],"valid"],[[5881,5887],"disallowed"],[[5888,5900],"valid"],[[5901,5901],"disallowed"],[[5902,5908],"valid"],[[5909,5919],"disallowed"],[[5920,5940],"valid"],[[5941,5942],"valid",[],"NV8"],[[5943,5951],"disallowed"],[[5952,5971],"valid"],[[5972,5983],"disallowed"],[[5984,5996],"valid"],[[5997,5997],"disallowed"],[[5998,6000],"valid"],[[6001,6001],"disallowed"],[[6002,6003],"valid"],[[6004,6015],"disallowed"],[[6016,6067],"valid"],[[6068,6069],"disallowed"],[[6070,6099],"valid"],[[6100,6102],"valid",[],"NV8"],[[6103,6103],"valid"],[[6104,6107],"valid",[],"NV8"],[[6108,6108],"valid"],[[6109,6109],"valid"],[[6110,6111],"disallowed"],[[6112,6121],"valid"],[[6122,6127],"disallowed"],[[6128,6137],"valid",[],"NV8"],[[6138,6143],"disallowed"],[[6144,6149],"valid",[],"NV8"],[[6150,6150],"disallowed"],[[6151,6154],"valid",[],"NV8"],[[6155,6157],"ignored"],[[6158,6158],"disallowed"],[[6159,6159],"disallowed"],[[6160,6169],"valid"],[[6170,6175],"disallowed"],[[6176,6263],"valid"],[[6264,6271],"disallowed"],[[6272,6313],"valid"],[[6314,6314],"valid"],[[6315,6319],"disallowed"],[[6320,6389],"valid"],[[6390,6399],"disallowed"],[[6400,6428],"valid"],[[6429,6430],"valid"],[[6431,6431],"disallowed"],[[6432,6443],"valid"],[[6444,6447],"disallowed"],[[6448,6459],"valid"],[[6460,6463],"disallowed"],[[6464,6464],"valid",[],"NV8"],[[6465,6467],"disallowed"],[[6468,6469],"valid",[],"NV8"],[[6470,6509],"valid"],[[6510,6511],"disallowed"],[[6512,6516],"valid"],[[6517,6527],"disallowed"],[[6528,6569],"valid"],[[6570,6571],"valid"],[[6572,6575],"disallowed"],[[6576,6601],"valid"],[[6602,6607],"disallowed"],[[6608,6617],"valid"],[[6618,6618],"valid",[],"XV8"],[[6619,6621],"disallowed"],[[6622,6623],"valid",[],"NV8"],[[6624,6655],"valid",[],"NV8"],[[6656,6683],"valid"],[[6684,6685],"disallowed"],[[6686,6687],"valid",[],"NV8"],[[6688,6750],"valid"],[[6751,6751],"disallowed"],[[6752,6780],"valid"],[[6781,6782],"disallowed"],[[6783,6793],"valid"],[[6794,6799],"disallowed"],[[6800,6809],"valid"],[[6810,6815],"disallowed"],[[6816,6822],"valid",[],"NV8"],[[6823,6823],"valid"],[[6824,6829],"valid",[],"NV8"],[[6830,6831],"disallowed"],[[6832,6845],"valid"],[[6846,6846],"valid",[],"NV8"],[[6847,6911],"disallowed"],[[6912,6987],"valid"],[[6988,6991],"disallowed"],[[6992,7001],"valid"],[[7002,7018],"valid",[],"NV8"],[[7019,7027],"valid"],[[7028,7036],"valid",[],"NV8"],[[7037,7039],"disallowed"],[[7040,7082],"valid"],[[7083,7085],"valid"],[[7086,7097],"valid"],[[7098,7103],"valid"],[[7104,7155],"valid"],[[7156,7163],"disallowed"],[[7164,7167],"valid",[],"NV8"],[[7168,7223],"valid"],[[7224,7226],"disallowed"],[[7227,7231],"valid",[],"NV8"],[[7232,7241],"valid"],[[7242,7244],"disallowed"],[[7245,7293],"valid"],[[7294,7295],"valid",[],"NV8"],[[7296,7359],"disallowed"],[[7360,7367],"valid",[],"NV8"],[[7368,7375],"disallowed"],[[7376,7378],"valid"],[[7379,7379],"valid",[],"NV8"],[[7380,7410],"valid"],[[7411,7414],"valid"],[[7415,7415],"disallowed"],[[7416,7417],"valid"],[[7418,7423],"disallowed"],[[7424,7467],"valid"],[[7468,7468],"mapped",[97]],[[7469,7469],"mapped",[230]],[[7470,7470],"mapped",[98]],[[7471,7471],"valid"],[[7472,7472],"mapped",[100]],[[7473,7473],"mapped",[101]],[[7474,7474],"mapped",[477]],[[7475,7475],"mapped",[103]],[[7476,7476],"mapped",[104]],[[7477,7477],"mapped",[105]],[[7478,7478],"mapped",[106]],[[7479,7479],"mapped",[107]],[[7480,7480],"mapped",[108]],[[7481,7481],"mapped",[109]],[[7482,7482],"mapped",[110]],[[7483,7483],"valid"],[[7484,7484],"mapped",[111]],[[7485,7485],"mapped",[547]],[[7486,7486],"mapped",[112]],[[7487,7487],"mapped",[114]],[[7488,7488],"mapped",[116]],[[7489,7489],"mapped",[117]],[[7490,7490],"mapped",[119]],[[7491,7491],"mapped",[97]],[[7492,7492],"mapped",[592]],[[7493,7493],"mapped",[593]],[[7494,7494],"mapped",[7426]],[[7495,7495],"mapped",[98]],[[7496,7496],"mapped",[100]],[[7497,7497],"mapped",[101]],[[7498,7498],"mapped",[601]],[[7499,7499],"mapped",[603]],[[7500,7500],"mapped",[604]],[[7501,7501],"mapped",[103]],[[7502,7502],"valid"],[[7503,7503],"mapped",[107]],[[7504,7504],"mapped",[109]],[[7505,7505],"mapped",[331]],[[7506,7506],"mapped",[111]],[[7507,7507],"mapped",[596]],[[7508,7508],"mapped",[7446]],[[7509,7509],"mapped",[7447]],[[7510,7510],"mapped",[112]],[[7511,7511],"mapped",[116]],[[7512,7512],"mapped",[117]],[[7513,7513],"mapped",[7453]],[[7514,7514],"mapped",[623]],[[7515,7515],"mapped",[118]],[[7516,7516],"mapped",[7461]],[[7517,7517],"mapped",[946]],[[7518,7518],"mapped",[947]],[[7519,7519],"mapped",[948]],[[7520,7520],"mapped",[966]],[[7521,7521],"mapped",[967]],[[7522,7522],"mapped",[105]],[[7523,7523],"mapped",[114]],[[7524,7524],"mapped",[117]],[[7525,7525],"mapped",[118]],[[7526,7526],"mapped",[946]],[[7527,7527],"mapped",[947]],[[7528,7528],"mapped",[961]],[[7529,7529],"mapped",[966]],[[7530,7530],"mapped",[967]],[[7531,7531],"valid"],[[7532,7543],"valid"],[[7544,7544],"mapped",[1085]],[[7545,7578],"valid"],[[7579,7579],"mapped",[594]],[[7580,7580],"mapped",[99]],[[7581,7581],"mapped",[597]],[[7582,7582],"mapped",[240]],[[7583,7583],"mapped",[604]],[[7584,7584],"mapped",[102]],[[7585,7585],"mapped",[607]],[[7586,7586],"mapped",[609]],[[7587,7587],"mapped",[613]],[[7588,7588],"mapped",[616]],[[7589,7589],"mapped",[617]],[[7590,7590],"mapped",[618]],[[7591,7591],"mapped",[7547]],[[7592,7592],"mapped",[669]],[[7593,7593],"mapped",[621]],[[7594,7594],"mapped",[7557]],[[7595,7595],"mapped",[671]],[[7596,7596],"mapped",[625]],[[7597,7597],"mapped",[624]],[[7598,7598],"mapped",[626]],[[7599,7599],"mapped",[627]],[[7600,7600],"mapped",[628]],[[7601,7601],"mapped",[629]],[[7602,7602],"mapped",[632]],[[7603,7603],"mapped",[642]],[[7604,7604],"mapped",[643]],[[7605,7605],"mapped",[427]],[[7606,7606],"mapped",[649]],[[7607,7607],"mapped",[650]],[[7608,7608],"mapped",[7452]],[[7609,7609],"mapped",[651]],[[7610,7610],"mapped",[652]],[[7611,7611],"mapped",[122]],[[7612,7612],"mapped",[656]],[[7613,7613],"mapped",[657]],[[7614,7614],"mapped",[658]],[[7615,7615],"mapped",[952]],[[7616,7619],"valid"],[[7620,7626],"valid"],[[7627,7654],"valid"],[[7655,7669],"valid"],[[7670,7675],"disallowed"],[[7676,7676],"valid"],[[7677,7677],"valid"],[[7678,7679],"valid"],[[7680,7680],"mapped",[7681]],[[7681,7681],"valid"],[[7682,7682],"mapped",[7683]],[[7683,7683],"valid"],[[7684,7684],"mapped",[7685]],[[7685,7685],"valid"],[[7686,7686],"mapped",[7687]],[[7687,7687],"valid"],[[7688,7688],"mapped",[7689]],[[7689,7689],"valid"],[[7690,7690],"mapped",[7691]],[[7691,7691],"valid"],[[7692,7692],"mapped",[7693]],[[7693,7693],"valid"],[[7694,7694],"mapped",[7695]],[[7695,7695],"valid"],[[7696,7696],"mapped",[7697]],[[7697,7697],"valid"],[[7698,7698],"mapped",[7699]],[[7699,7699],"valid"],[[7700,7700],"mapped",[7701]],[[7701,7701],"valid"],[[7702,7702],"mapped",[7703]],[[7703,7703],"valid"],[[7704,7704],"mapped",[7705]],[[7705,7705],"valid"],[[7706,7706],"mapped",[7707]],[[7707,7707],"valid"],[[7708,7708],"mapped",[7709]],[[7709,7709],"valid"],[[7710,7710],"mapped",[7711]],[[7711,7711],"valid"],[[7712,7712],"mapped",[7713]],[[7713,7713],"valid"],[[7714,7714],"mapped",[7715]],[[7715,7715],"valid"],[[7716,7716],"mapped",[7717]],[[7717,7717],"valid"],[[7718,7718],"mapped",[7719]],[[7719,7719],"valid"],[[7720,7720],"mapped",[7721]],[[7721,7721],"valid"],[[7722,7722],"mapped",[7723]],[[7723,7723],"valid"],[[7724,7724],"mapped",[7725]],[[7725,7725],"valid"],[[7726,7726],"mapped",[7727]],[[7727,7727],"valid"],[[7728,7728],"mapped",[7729]],[[7729,7729],"valid"],[[7730,7730],"mapped",[7731]],[[7731,7731],"valid"],[[7732,7732],"mapped",[7733]],[[7733,7733],"valid"],[[7734,7734],"mapped",[7735]],[[7735,7735],"valid"],[[7736,7736],"mapped",[7737]],[[7737,7737],"valid"],[[7738,7738],"mapped",[7739]],[[7739,7739],"valid"],[[7740,7740],"mapped",[7741]],[[7741,7741],"valid"],[[7742,7742],"mapped",[7743]],[[7743,7743],"valid"],[[7744,7744],"mapped",[7745]],[[7745,7745],"valid"],[[7746,7746],"mapped",[7747]],[[7747,7747],"valid"],[[7748,7748],"mapped",[7749]],[[7749,7749],"valid"],[[7750,7750],"mapped",[7751]],[[7751,7751],"valid"],[[7752,7752],"mapped",[7753]],[[7753,7753],"valid"],[[7754,7754],"mapped",[7755]],[[7755,7755],"valid"],[[7756,7756],"mapped",[7757]],[[7757,7757],"valid"],[[7758,7758],"mapped",[7759]],[[7759,7759],"valid"],[[7760,7760],"mapped",[7761]],[[7761,7761],"valid"],[[7762,7762],"mapped",[7763]],[[7763,7763],"valid"],[[7764,7764],"mapped",[7765]],[[7765,7765],"valid"],[[7766,7766],"mapped",[7767]],[[7767,7767],"valid"],[[7768,7768],"mapped",[7769]],[[7769,7769],"valid"],[[7770,7770],"mapped",[7771]],[[7771,7771],"valid"],[[7772,7772],"mapped",[7773]],[[7773,7773],"valid"],[[7774,7774],"mapped",[7775]],[[7775,7775],"valid"],[[7776,7776],"mapped",[7777]],[[7777,7777],"valid"],[[7778,7778],"mapped",[7779]],[[7779,7779],"valid"],[[7780,7780],"mapped",[7781]],[[7781,7781],"valid"],[[7782,7782],"mapped",[7783]],[[7783,7783],"valid"],[[7784,7784],"mapped",[7785]],[[7785,7785],"valid"],[[7786,7786],"mapped",[7787]],[[7787,7787],"valid"],[[7788,7788],"mapped",[7789]],[[7789,7789],"valid"],[[7790,7790],"mapped",[7791]],[[7791,7791],"valid"],[[7792,7792],"mapped",[7793]],[[7793,7793],"valid"],[[7794,7794],"mapped",[7795]],[[7795,7795],"valid"],[[7796,7796],"mapped",[7797]],[[7797,7797],"valid"],[[7798,7798],"mapped",[7799]],[[7799,7799],"valid"],[[7800,7800],"mapped",[7801]],[[7801,7801],"valid"],[[7802,7802],"mapped",[7803]],[[7803,7803],"valid"],[[7804,7804],"mapped",[7805]],[[7805,7805],"valid"],[[7806,7806],"mapped",[7807]],[[7807,7807],"valid"],[[7808,7808],"mapped",[7809]],[[7809,7809],"valid"],[[7810,7810],"mapped",[7811]],[[7811,7811],"valid"],[[7812,7812],"mapped",[7813]],[[7813,7813],"valid"],[[7814,7814],"mapped",[7815]],[[7815,7815],"valid"],[[7816,7816],"mapped",[7817]],[[7817,7817],"valid"],[[7818,7818],"mapped",[7819]],[[7819,7819],"valid"],[[7820,7820],"mapped",[7821]],[[7821,7821],"valid"],[[7822,7822],"mapped",[7823]],[[7823,7823],"valid"],[[7824,7824],"mapped",[7825]],[[7825,7825],"valid"],[[7826,7826],"mapped",[7827]],[[7827,7827],"valid"],[[7828,7828],"mapped",[7829]],[[7829,7833],"valid"],[[7834,7834],"mapped",[97,702]],[[7835,7835],"mapped",[7777]],[[7836,7837],"valid"],[[7838,7838],"mapped",[115,115]],[[7839,7839],"valid"],[[7840,7840],"mapped",[7841]],[[7841,7841],"valid"],[[7842,7842],"mapped",[7843]],[[7843,7843],"valid"],[[7844,7844],"mapped",[7845]],[[7845,7845],"valid"],[[7846,7846],"mapped",[7847]],[[7847,7847],"valid"],[[7848,7848],"mapped",[7849]],[[7849,7849],"valid"],[[7850,7850],"mapped",[7851]],[[7851,7851],"valid"],[[7852,7852],"mapped",[7853]],[[7853,7853],"valid"],[[7854,7854],"mapped",[7855]],[[7855,7855],"valid"],[[7856,7856],"mapped",[7857]],[[7857,7857],"valid"],[[7858,7858],"mapped",[7859]],[[7859,7859],"valid"],[[7860,7860],"mapped",[7861]],[[7861,7861],"valid"],[[7862,7862],"mapped",[7863]],[[7863,7863],"valid"],[[7864,7864],"mapped",[7865]],[[7865,7865],"valid"],[[7866,7866],"mapped",[7867]],[[7867,7867],"valid"],[[7868,7868],"mapped",[7869]],[[7869,7869],"valid"],[[7870,7870],"mapped",[7871]],[[7871,7871],"valid"],[[7872,7872],"mapped",[7873]],[[7873,7873],"valid"],[[7874,7874],"mapped",[7875]],[[7875,7875],"valid"],[[7876,7876],"mapped",[7877]],[[7877,7877],"valid"],[[7878,7878],"mapped",[7879]],[[7879,7879],"valid"],[[7880,7880],"mapped",[7881]],[[7881,7881],"valid"],[[7882,7882],"mapped",[7883]],[[7883,7883],"valid"],[[7884,7884],"mapped",[7885]],[[7885,7885],"valid"],[[7886,7886],"mapped",[7887]],[[7887,7887],"valid"],[[7888,7888],"mapped",[7889]],[[7889,7889],"valid"],[[7890,7890],"mapped",[7891]],[[7891,7891],"valid"],[[7892,7892],"mapped",[7893]],[[7893,7893],"valid"],[[7894,7894],"mapped",[7895]],[[7895,7895],"valid"],[[7896,7896],"mapped",[7897]],[[7897,7897],"valid"],[[7898,7898],"mapped",[7899]],[[7899,7899],"valid"],[[7900,7900],"mapped",[7901]],[[7901,7901],"valid"],[[7902,7902],"mapped",[7903]],[[7903,7903],"valid"],[[7904,7904],"mapped",[7905]],[[7905,7905],"valid"],[[7906,7906],"mapped",[7907]],[[7907,7907],"valid"],[[7908,7908],"mapped",[7909]],[[7909,7909],"valid"],[[7910,7910],"mapped",[7911]],[[7911,7911],"valid"],[[7912,7912],"mapped",[7913]],[[7913,7913],"valid"],[[7914,7914],"mapped",[7915]],[[7915,7915],"valid"],[[7916,7916],"mapped",[7917]],[[7917,7917],"valid"],[[7918,7918],"mapped",[7919]],[[7919,7919],"valid"],[[7920,7920],"mapped",[7921]],[[7921,7921],"valid"],[[7922,7922],"mapped",[7923]],[[7923,7923],"valid"],[[7924,7924],"mapped",[7925]],[[7925,7925],"valid"],[[7926,7926],"mapped",[7927]],[[7927,7927],"valid"],[[7928,7928],"mapped",[7929]],[[7929,7929],"valid"],[[7930,7930],"mapped",[7931]],[[7931,7931],"valid"],[[7932,7932],"mapped",[7933]],[[7933,7933],"valid"],[[7934,7934],"mapped",[7935]],[[7935,7935],"valid"],[[7936,7943],"valid"],[[7944,7944],"mapped",[7936]],[[7945,7945],"mapped",[7937]],[[7946,7946],"mapped",[7938]],[[7947,7947],"mapped",[7939]],[[7948,7948],"mapped",[7940]],[[7949,7949],"mapped",[7941]],[[7950,7950],"mapped",[7942]],[[7951,7951],"mapped",[7943]],[[7952,7957],"valid"],[[7958,7959],"disallowed"],[[7960,7960],"mapped",[7952]],[[7961,7961],"mapped",[7953]],[[7962,7962],"mapped",[7954]],[[7963,7963],"mapped",[7955]],[[7964,7964],"mapped",[7956]],[[7965,7965],"mapped",[7957]],[[7966,7967],"disallowed"],[[7968,7975],"valid"],[[7976,7976],"mapped",[7968]],[[7977,7977],"mapped",[7969]],[[7978,7978],"mapped",[7970]],[[7979,7979],"mapped",[7971]],[[7980,7980],"mapped",[7972]],[[7981,7981],"mapped",[7973]],[[7982,7982],"mapped",[7974]],[[7983,7983],"mapped",[7975]],[[7984,7991],"valid"],[[7992,7992],"mapped",[7984]],[[7993,7993],"mapped",[7985]],[[7994,7994],"mapped",[7986]],[[7995,7995],"mapped",[7987]],[[7996,7996],"mapped",[7988]],[[7997,7997],"mapped",[7989]],[[7998,7998],"mapped",[7990]],[[7999,7999],"mapped",[7991]],[[8000,8005],"valid"],[[8006,8007],"disallowed"],[[8008,8008],"mapped",[8000]],[[8009,8009],"mapped",[8001]],[[8010,8010],"mapped",[8002]],[[8011,8011],"mapped",[8003]],[[8012,8012],"mapped",[8004]],[[8013,8013],"mapped",[8005]],[[8014,8015],"disallowed"],[[8016,8023],"valid"],[[8024,8024],"disallowed"],[[8025,8025],"mapped",[8017]],[[8026,8026],"disallowed"],[[8027,8027],"mapped",[8019]],[[8028,8028],"disallowed"],[[8029,8029],"mapped",[8021]],[[8030,8030],"disallowed"],[[8031,8031],"mapped",[8023]],[[8032,8039],"valid"],[[8040,8040],"mapped",[8032]],[[8041,8041],"mapped",[8033]],[[8042,8042],"mapped",[8034]],[[8043,8043],"mapped",[8035]],[[8044,8044],"mapped",[8036]],[[8045,8045],"mapped",[8037]],[[8046,8046],"mapped",[8038]],[[8047,8047],"mapped",[8039]],[[8048,8048],"valid"],[[8049,8049],"mapped",[940]],[[8050,8050],"valid"],[[8051,8051],"mapped",[941]],[[8052,8052],"valid"],[[8053,8053],"mapped",[942]],[[8054,8054],"valid"],[[8055,8055],"mapped",[943]],[[8056,8056],"valid"],[[8057,8057],"mapped",[972]],[[8058,8058],"valid"],[[8059,8059],"mapped",[973]],[[8060,8060],"valid"],[[8061,8061],"mapped",[974]],[[8062,8063],"disallowed"],[[8064,8064],"mapped",[7936,953]],[[8065,8065],"mapped",[7937,953]],[[8066,8066],"mapped",[7938,953]],[[8067,8067],"mapped",[7939,953]],[[8068,8068],"mapped",[7940,953]],[[8069,8069],"mapped",[7941,953]],[[8070,8070],"mapped",[7942,953]],[[8071,8071],"mapped",[7943,953]],[[8072,8072],"mapped",[7936,953]],[[8073,8073],"mapped",[7937,953]],[[8074,8074],"mapped",[7938,953]],[[8075,8075],"mapped",[7939,953]],[[8076,8076],"mapped",[7940,953]],[[8077,8077],"mapped",[7941,953]],[[8078,8078],"mapped",[7942,953]],[[8079,8079],"mapped",[7943,953]],[[8080,8080],"mapped",[7968,953]],[[8081,8081],"mapped",[7969,953]],[[8082,8082],"mapped",[7970,953]],[[8083,8083],"mapped",[7971,953]],[[8084,8084],"mapped",[7972,953]],[[8085,8085],"mapped",[7973,953]],[[8086,8086],"mapped",[7974,953]],[[8087,8087],"mapped",[7975,953]],[[8088,8088],"mapped",[7968,953]],[[8089,8089],"mapped",[7969,953]],[[8090,8090],"mapped",[7970,953]],[[8091,8091],"mapped",[7971,953]],[[8092,8092],"mapped",[7972,953]],[[8093,8093],"mapped",[7973,953]],[[8094,8094],"mapped",[7974,953]],[[8095,8095],"mapped",[7975,953]],[[8096,8096],"mapped",[8032,953]],[[8097,8097],"mapped",[8033,953]],[[8098,8098],"mapped",[8034,953]],[[8099,8099],"mapped",[8035,953]],[[8100,8100],"mapped",[8036,953]],[[8101,8101],"mapped",[8037,953]],[[8102,8102],"mapped",[8038,953]],[[8103,8103],"mapped",[8039,953]],[[8104,8104],"mapped",[8032,953]],[[8105,8105],"mapped",[8033,953]],[[8106,8106],"mapped",[8034,953]],[[8107,8107],"mapped",[8035,953]],[[8108,8108],"mapped",[8036,953]],[[8109,8109],"mapped",[8037,953]],[[8110,8110],"mapped",[8038,953]],[[8111,8111],"mapped",[8039,953]],[[8112,8113],"valid"],[[8114,8114],"mapped",[8048,953]],[[8115,8115],"mapped",[945,953]],[[8116,8116],"mapped",[940,953]],[[8117,8117],"disallowed"],[[8118,8118],"valid"],[[8119,8119],"mapped",[8118,953]],[[8120,8120],"mapped",[8112]],[[8121,8121],"mapped",[8113]],[[8122,8122],"mapped",[8048]],[[8123,8123],"mapped",[940]],[[8124,8124],"mapped",[945,953]],[[8125,8125],"disallowed_STD3_mapped",[32,787]],[[8126,8126],"mapped",[953]],[[8127,8127],"disallowed_STD3_mapped",[32,787]],[[8128,8128],"disallowed_STD3_mapped",[32,834]],[[8129,8129],"disallowed_STD3_mapped",[32,776,834]],[[8130,8130],"mapped",[8052,953]],[[8131,8131],"mapped",[951,953]],[[8132,8132],"mapped",[942,953]],[[8133,8133],"disallowed"],[[8134,8134],"valid"],[[8135,8135],"mapped",[8134,953]],[[8136,8136],"mapped",[8050]],[[8137,8137],"mapped",[941]],[[8138,8138],"mapped",[8052]],[[8139,8139],"mapped",[942]],[[8140,8140],"mapped",[951,953]],[[8141,8141],"disallowed_STD3_mapped",[32,787,768]],[[8142,8142],"disallowed_STD3_mapped",[32,787,769]],[[8143,8143],"disallowed_STD3_mapped",[32,787,834]],[[8144,8146],"valid"],[[8147,8147],"mapped",[912]],[[8148,8149],"disallowed"],[[8150,8151],"valid"],[[8152,8152],"mapped",[8144]],[[8153,8153],"mapped",[8145]],[[8154,8154],"mapped",[8054]],[[8155,8155],"mapped",[943]],[[8156,8156],"disallowed"],[[8157,8157],"disallowed_STD3_mapped",[32,788,768]],[[8158,8158],"disallowed_STD3_mapped",[32,788,769]],[[8159,8159],"disallowed_STD3_mapped",[32,788,834]],[[8160,8162],"valid"],[[8163,8163],"mapped",[944]],[[8164,8167],"valid"],[[8168,8168],"mapped",[8160]],[[8169,8169],"mapped",[8161]],[[8170,8170],"mapped",[8058]],[[8171,8171],"mapped",[973]],[[8172,8172],"mapped",[8165]],[[8173,8173],"disallowed_STD3_mapped",[32,776,768]],[[8174,8174],"disallowed_STD3_mapped",[32,776,769]],[[8175,8175],"disallowed_STD3_mapped",[96]],[[8176,8177],"disallowed"],[[8178,8178],"mapped",[8060,953]],[[8179,8179],"mapped",[969,953]],[[8180,8180],"mapped",[974,953]],[[8181,8181],"disallowed"],[[8182,8182],"valid"],[[8183,8183],"mapped",[8182,953]],[[8184,8184],"mapped",[8056]],[[8185,8185],"mapped",[972]],[[8186,8186],"mapped",[8060]],[[8187,8187],"mapped",[974]],[[8188,8188],"mapped",[969,953]],[[8189,8189],"disallowed_STD3_mapped",[32,769]],[[8190,8190],"disallowed_STD3_mapped",[32,788]],[[8191,8191],"disallowed"],[[8192,8202],"disallowed_STD3_mapped",[32]],[[8203,8203],"ignored"],[[8204,8205],"deviation",[]],[[8206,8207],"disallowed"],[[8208,8208],"valid",[],"NV8"],[[8209,8209],"mapped",[8208]],[[8210,8214],"valid",[],"NV8"],[[8215,8215],"disallowed_STD3_mapped",[32,819]],[[8216,8227],"valid",[],"NV8"],[[8228,8230],"disallowed"],[[8231,8231],"valid",[],"NV8"],[[8232,8238],"disallowed"],[[8239,8239],"disallowed_STD3_mapped",[32]],[[8240,8242],"valid",[],"NV8"],[[8243,8243],"mapped",[8242,8242]],[[8244,8244],"mapped",[8242,8242,8242]],[[8245,8245],"valid",[],"NV8"],[[8246,8246],"mapped",[8245,8245]],[[8247,8247],"mapped",[8245,8245,8245]],[[8248,8251],"valid",[],"NV8"],[[8252,8252],"disallowed_STD3_mapped",[33,33]],[[8253,8253],"valid",[],"NV8"],[[8254,8254],"disallowed_STD3_mapped",[32,773]],[[8255,8262],"valid",[],"NV8"],[[8263,8263],"disallowed_STD3_mapped",[63,63]],[[8264,8264],"disallowed_STD3_mapped",[63,33]],[[8265,8265],"disallowed_STD3_mapped",[33,63]],[[8266,8269],"valid",[],"NV8"],[[8270,8274],"valid",[],"NV8"],[[8275,8276],"valid",[],"NV8"],[[8277,8278],"valid",[],"NV8"],[[8279,8279],"mapped",[8242,8242,8242,8242]],[[8280,8286],"valid",[],"NV8"],[[8287,8287],"disallowed_STD3_mapped",[32]],[[8288,8288],"ignored"],[[8289,8291],"disallowed"],[[8292,8292],"ignored"],[[8293,8293],"disallowed"],[[8294,8297],"disallowed"],[[8298,8303],"disallowed"],[[8304,8304],"mapped",[48]],[[8305,8305],"mapped",[105]],[[8306,8307],"disallowed"],[[8308,8308],"mapped",[52]],[[8309,8309],"mapped",[53]],[[8310,8310],"mapped",[54]],[[8311,8311],"mapped",[55]],[[8312,8312],"mapped",[56]],[[8313,8313],"mapped",[57]],[[8314,8314],"disallowed_STD3_mapped",[43]],[[8315,8315],"mapped",[8722]],[[8316,8316],"disallowed_STD3_mapped",[61]],[[8317,8317],"disallowed_STD3_mapped",[40]],[[8318,8318],"disallowed_STD3_mapped",[41]],[[8319,8319],"mapped",[110]],[[8320,8320],"mapped",[48]],[[8321,8321],"mapped",[49]],[[8322,8322],"mapped",[50]],[[8323,8323],"mapped",[51]],[[8324,8324],"mapped",[52]],[[8325,8325],"mapped",[53]],[[8326,8326],"mapped",[54]],[[8327,8327],"mapped",[55]],[[8328,8328],"mapped",[56]],[[8329,8329],"mapped",[57]],[[8330,8330],"disallowed_STD3_mapped",[43]],[[8331,8331],"mapped",[8722]],[[8332,8332],"disallowed_STD3_mapped",[61]],[[8333,8333],"disallowed_STD3_mapped",[40]],[[8334,8334],"disallowed_STD3_mapped",[41]],[[8335,8335],"disallowed"],[[8336,8336],"mapped",[97]],[[8337,8337],"mapped",[101]],[[8338,8338],"mapped",[111]],[[8339,8339],"mapped",[120]],[[8340,8340],"mapped",[601]],[[8341,8341],"mapped",[104]],[[8342,8342],"mapped",[107]],[[8343,8343],"mapped",[108]],[[8344,8344],"mapped",[109]],[[8345,8345],"mapped",[110]],[[8346,8346],"mapped",[112]],[[8347,8347],"mapped",[115]],[[8348,8348],"mapped",[116]],[[8349,8351],"disallowed"],[[8352,8359],"valid",[],"NV8"],[[8360,8360],"mapped",[114,115]],[[8361,8362],"valid",[],"NV8"],[[8363,8363],"valid",[],"NV8"],[[8364,8364],"valid",[],"NV8"],[[8365,8367],"valid",[],"NV8"],[[8368,8369],"valid",[],"NV8"],[[8370,8373],"valid",[],"NV8"],[[8374,8376],"valid",[],"NV8"],[[8377,8377],"valid",[],"NV8"],[[8378,8378],"valid",[],"NV8"],[[8379,8381],"valid",[],"NV8"],[[8382,8382],"valid",[],"NV8"],[[8383,8399],"disallowed"],[[8400,8417],"valid",[],"NV8"],[[8418,8419],"valid",[],"NV8"],[[8420,8426],"valid",[],"NV8"],[[8427,8427],"valid",[],"NV8"],[[8428,8431],"valid",[],"NV8"],[[8432,8432],"valid",[],"NV8"],[[8433,8447],"disallowed"],[[8448,8448],"disallowed_STD3_mapped",[97,47,99]],[[8449,8449],"disallowed_STD3_mapped",[97,47,115]],[[8450,8450],"mapped",[99]],[[8451,8451],"mapped",[176,99]],[[8452,8452],"valid",[],"NV8"],[[8453,8453],"disallowed_STD3_mapped",[99,47,111]],[[8454,8454],"disallowed_STD3_mapped",[99,47,117]],[[8455,8455],"mapped",[603]],[[8456,8456],"valid",[],"NV8"],[[8457,8457],"mapped",[176,102]],[[8458,8458],"mapped",[103]],[[8459,8462],"mapped",[104]],[[8463,8463],"mapped",[295]],[[8464,8465],"mapped",[105]],[[8466,8467],"mapped",[108]],[[8468,8468],"valid",[],"NV8"],[[8469,8469],"mapped",[110]],[[8470,8470],"mapped",[110,111]],[[8471,8472],"valid",[],"NV8"],[[8473,8473],"mapped",[112]],[[8474,8474],"mapped",[113]],[[8475,8477],"mapped",[114]],[[8478,8479],"valid",[],"NV8"],[[8480,8480],"mapped",[115,109]],[[8481,8481],"mapped",[116,101,108]],[[8482,8482],"mapped",[116,109]],[[8483,8483],"valid",[],"NV8"],[[8484,8484],"mapped",[122]],[[8485,8485],"valid",[],"NV8"],[[8486,8486],"mapped",[969]],[[8487,8487],"valid",[],"NV8"],[[8488,8488],"mapped",[122]],[[8489,8489],"valid",[],"NV8"],[[8490,8490],"mapped",[107]],[[8491,8491],"mapped",[229]],[[8492,8492],"mapped",[98]],[[8493,8493],"mapped",[99]],[[8494,8494],"valid",[],"NV8"],[[8495,8496],"mapped",[101]],[[8497,8497],"mapped",[102]],[[8498,8498],"disallowed"],[[8499,8499],"mapped",[109]],[[8500,8500],"mapped",[111]],[[8501,8501],"mapped",[1488]],[[8502,8502],"mapped",[1489]],[[8503,8503],"mapped",[1490]],[[8504,8504],"mapped",[1491]],[[8505,8505],"mapped",[105]],[[8506,8506],"valid",[],"NV8"],[[8507,8507],"mapped",[102,97,120]],[[8508,8508],"mapped",[960]],[[8509,8510],"mapped",[947]],[[8511,8511],"mapped",[960]],[[8512,8512],"mapped",[8721]],[[8513,8516],"valid",[],"NV8"],[[8517,8518],"mapped",[100]],[[8519,8519],"mapped",[101]],[[8520,8520],"mapped",[105]],[[8521,8521],"mapped",[106]],[[8522,8523],"valid",[],"NV8"],[[8524,8524],"valid",[],"NV8"],[[8525,8525],"valid",[],"NV8"],[[8526,8526],"valid"],[[8527,8527],"valid",[],"NV8"],[[8528,8528],"mapped",[49,8260,55]],[[8529,8529],"mapped",[49,8260,57]],[[8530,8530],"mapped",[49,8260,49,48]],[[8531,8531],"mapped",[49,8260,51]],[[8532,8532],"mapped",[50,8260,51]],[[8533,8533],"mapped",[49,8260,53]],[[8534,8534],"mapped",[50,8260,53]],[[8535,8535],"mapped",[51,8260,53]],[[8536,8536],"mapped",[52,8260,53]],[[8537,8537],"mapped",[49,8260,54]],[[8538,8538],"mapped",[53,8260,54]],[[8539,8539],"mapped",[49,8260,56]],[[8540,8540],"mapped",[51,8260,56]],[[8541,8541],"mapped",[53,8260,56]],[[8542,8542],"mapped",[55,8260,56]],[[8543,8543],"mapped",[49,8260]],[[8544,8544],"mapped",[105]],[[8545,8545],"mapped",[105,105]],[[8546,8546],"mapped",[105,105,105]],[[8547,8547],"mapped",[105,118]],[[8548,8548],"mapped",[118]],[[8549,8549],"mapped",[118,105]],[[8550,8550],"mapped",[118,105,105]],[[8551,8551],"mapped",[118,105,105,105]],[[8552,8552],"mapped",[105,120]],[[8553,8553],"mapped",[120]],[[8554,8554],"mapped",[120,105]],[[8555,8555],"mapped",[120,105,105]],[[8556,8556],"mapped",[108]],[[8557,8557],"mapped",[99]],[[8558,8558],"mapped",[100]],[[8559,8559],"mapped",[109]],[[8560,8560],"mapped",[105]],[[8561,8561],"mapped",[105,105]],[[8562,8562],"mapped",[105,105,105]],[[8563,8563],"mapped",[105,118]],[[8564,8564],"mapped",[118]],[[8565,8565],"mapped",[118,105]],[[8566,8566],"mapped",[118,105,105]],[[8567,8567],"mapped",[118,105,105,105]],[[8568,8568],"mapped",[105,120]],[[8569,8569],"mapped",[120]],[[8570,8570],"mapped",[120,105]],[[8571,8571],"mapped",[120,105,105]],[[8572,8572],"mapped",[108]],[[8573,8573],"mapped",[99]],[[8574,8574],"mapped",[100]],[[8575,8575],"mapped",[109]],[[8576,8578],"valid",[],"NV8"],[[8579,8579],"disallowed"],[[8580,8580],"valid"],[[8581,8584],"valid",[],"NV8"],[[8585,8585],"mapped",[48,8260,51]],[[8586,8587],"valid",[],"NV8"],[[8588,8591],"disallowed"],[[8592,8682],"valid",[],"NV8"],[[8683,8691],"valid",[],"NV8"],[[8692,8703],"valid",[],"NV8"],[[8704,8747],"valid",[],"NV8"],[[8748,8748],"mapped",[8747,8747]],[[8749,8749],"mapped",[8747,8747,8747]],[[8750,8750],"valid",[],"NV8"],[[8751,8751],"mapped",[8750,8750]],[[8752,8752],"mapped",[8750,8750,8750]],[[8753,8799],"valid",[],"NV8"],[[8800,8800],"disallowed_STD3_valid"],[[8801,8813],"valid",[],"NV8"],[[8814,8815],"disallowed_STD3_valid"],[[8816,8945],"valid",[],"NV8"],[[8946,8959],"valid",[],"NV8"],[[8960,8960],"valid",[],"NV8"],[[8961,8961],"valid",[],"NV8"],[[8962,9000],"valid",[],"NV8"],[[9001,9001],"mapped",[12296]],[[9002,9002],"mapped",[12297]],[[9003,9082],"valid",[],"NV8"],[[9083,9083],"valid",[],"NV8"],[[9084,9084],"valid",[],"NV8"],[[9085,9114],"valid",[],"NV8"],[[9115,9166],"valid",[],"NV8"],[[9167,9168],"valid",[],"NV8"],[[9169,9179],"valid",[],"NV8"],[[9180,9191],"valid",[],"NV8"],[[9192,9192],"valid",[],"NV8"],[[9193,9203],"valid",[],"NV8"],[[9204,9210],"valid",[],"NV8"],[[9211,9215],"disallowed"],[[9216,9252],"valid",[],"NV8"],[[9253,9254],"valid",[],"NV8"],[[9255,9279],"disallowed"],[[9280,9290],"valid",[],"NV8"],[[9291,9311],"disallowed"],[[9312,9312],"mapped",[49]],[[9313,9313],"mapped",[50]],[[9314,9314],"mapped",[51]],[[9315,9315],"mapped",[52]],[[9316,9316],"mapped",[53]],[[9317,9317],"mapped",[54]],[[9318,9318],"mapped",[55]],[[9319,9319],"mapped",[56]],[[9320,9320],"mapped",[57]],[[9321,9321],"mapped",[49,48]],[[9322,9322],"mapped",[49,49]],[[9323,9323],"mapped",[49,50]],[[9324,9324],"mapped",[49,51]],[[9325,9325],"mapped",[49,52]],[[9326,9326],"mapped",[49,53]],[[9327,9327],"mapped",[49,54]],[[9328,9328],"mapped",[49,55]],[[9329,9329],"mapped",[49,56]],[[9330,9330],"mapped",[49,57]],[[9331,9331],"mapped",[50,48]],[[9332,9332],"disallowed_STD3_mapped",[40,49,41]],[[9333,9333],"disallowed_STD3_mapped",[40,50,41]],[[9334,9334],"disallowed_STD3_mapped",[40,51,41]],[[9335,9335],"disallowed_STD3_mapped",[40,52,41]],[[9336,9336],"disallowed_STD3_mapped",[40,53,41]],[[9337,9337],"disallowed_STD3_mapped",[40,54,41]],[[9338,9338],"disallowed_STD3_mapped",[40,55,41]],[[9339,9339],"disallowed_STD3_mapped",[40,56,41]],[[9340,9340],"disallowed_STD3_mapped",[40,57,41]],[[9341,9341],"disallowed_STD3_mapped",[40,49,48,41]],[[9342,9342],"disallowed_STD3_mapped",[40,49,49,41]],[[9343,9343],"disallowed_STD3_mapped",[40,49,50,41]],[[9344,9344],"disallowed_STD3_mapped",[40,49,51,41]],[[9345,9345],"disallowed_STD3_mapped",[40,49,52,41]],[[9346,9346],"disallowed_STD3_mapped",[40,49,53,41]],[[9347,9347],"disallowed_STD3_mapped",[40,49,54,41]],[[9348,9348],"disallowed_STD3_mapped",[40,49,55,41]],[[9349,9349],"disallowed_STD3_mapped",[40,49,56,41]],[[9350,9350],"disallowed_STD3_mapped",[40,49,57,41]],[[9351,9351],"disallowed_STD3_mapped",[40,50,48,41]],[[9352,9371],"disallowed"],[[9372,9372],"disallowed_STD3_mapped",[40,97,41]],[[9373,9373],"disallowed_STD3_mapped",[40,98,41]],[[9374,9374],"disallowed_STD3_mapped",[40,99,41]],[[9375,9375],"disallowed_STD3_mapped",[40,100,41]],[[9376,9376],"disallowed_STD3_mapped",[40,101,41]],[[9377,9377],"disallowed_STD3_mapped",[40,102,41]],[[9378,9378],"disallowed_STD3_mapped",[40,103,41]],[[9379,9379],"disallowed_STD3_mapped",[40,104,41]],[[9380,9380],"disallowed_STD3_mapped",[40,105,41]],[[9381,9381],"disallowed_STD3_mapped",[40,106,41]],[[9382,9382],"disallowed_STD3_mapped",[40,107,41]],[[9383,9383],"disallowed_STD3_mapped",[40,108,41]],[[9384,9384],"disallowed_STD3_mapped",[40,109,41]],[[9385,9385],"disallowed_STD3_mapped",[40,110,41]],[[9386,9386],"disallowed_STD3_mapped",[40,111,41]],[[9387,9387],"disallowed_STD3_mapped",[40,112,41]],[[9388,9388],"disallowed_STD3_mapped",[40,113,41]],[[9389,9389],"disallowed_STD3_mapped",[40,114,41]],[[9390,9390],"disallowed_STD3_mapped",[40,115,41]],[[9391,9391],"disallowed_STD3_mapped",[40,116,41]],[[9392,9392],"disallowed_STD3_mapped",[40,117,41]],[[9393,9393],"disallowed_STD3_mapped",[40,118,41]],[[9394,9394],"disallowed_STD3_mapped",[40,119,41]],[[9395,9395],"disallowed_STD3_mapped",[40,120,41]],[[9396,9396],"disallowed_STD3_mapped",[40,121,41]],[[9397,9397],"disallowed_STD3_mapped",[40,122,41]],[[9398,9398],"mapped",[97]],[[9399,9399],"mapped",[98]],[[9400,9400],"mapped",[99]],[[9401,9401],"mapped",[100]],[[9402,9402],"mapped",[101]],[[9403,9403],"mapped",[102]],[[9404,9404],"mapped",[103]],[[9405,9405],"mapped",[104]],[[9406,9406],"mapped",[105]],[[9407,9407],"mapped",[106]],[[9408,9408],"mapped",[107]],[[9409,9409],"mapped",[108]],[[9410,9410],"mapped",[109]],[[9411,9411],"mapped",[110]],[[9412,9412],"mapped",[111]],[[9413,9413],"mapped",[112]],[[9414,9414],"mapped",[113]],[[9415,9415],"mapped",[114]],[[9416,9416],"mapped",[115]],[[9417,9417],"mapped",[116]],[[9418,9418],"mapped",[117]],[[9419,9419],"mapped",[118]],[[9420,9420],"mapped",[119]],[[9421,9421],"mapped",[120]],[[9422,9422],"mapped",[121]],[[9423,9423],"mapped",[122]],[[9424,9424],"mapped",[97]],[[9425,9425],"mapped",[98]],[[9426,9426],"mapped",[99]],[[9427,9427],"mapped",[100]],[[9428,9428],"mapped",[101]],[[9429,9429],"mapped",[102]],[[9430,9430],"mapped",[103]],[[9431,9431],"mapped",[104]],[[9432,9432],"mapped",[105]],[[9433,9433],"mapped",[106]],[[9434,9434],"mapped",[107]],[[9435,9435],"mapped",[108]],[[9436,9436],"mapped",[109]],[[9437,9437],"mapped",[110]],[[9438,9438],"mapped",[111]],[[9439,9439],"mapped",[112]],[[9440,9440],"mapped",[113]],[[9441,9441],"mapped",[114]],[[9442,9442],"mapped",[115]],[[9443,9443],"mapped",[116]],[[9444,9444],"mapped",[117]],[[9445,9445],"mapped",[118]],[[9446,9446],"mapped",[119]],[[9447,9447],"mapped",[120]],[[9448,9448],"mapped",[121]],[[9449,9449],"mapped",[122]],[[9450,9450],"mapped",[48]],[[9451,9470],"valid",[],"NV8"],[[9471,9471],"valid",[],"NV8"],[[9472,9621],"valid",[],"NV8"],[[9622,9631],"valid",[],"NV8"],[[9632,9711],"valid",[],"NV8"],[[9712,9719],"valid",[],"NV8"],[[9720,9727],"valid",[],"NV8"],[[9728,9747],"valid",[],"NV8"],[[9748,9749],"valid",[],"NV8"],[[9750,9751],"valid",[],"NV8"],[[9752,9752],"valid",[],"NV8"],[[9753,9753],"valid",[],"NV8"],[[9754,9839],"valid",[],"NV8"],[[9840,9841],"valid",[],"NV8"],[[9842,9853],"valid",[],"NV8"],[[9854,9855],"valid",[],"NV8"],[[9856,9865],"valid",[],"NV8"],[[9866,9873],"valid",[],"NV8"],[[9874,9884],"valid",[],"NV8"],[[9885,9885],"valid",[],"NV8"],[[9886,9887],"valid",[],"NV8"],[[9888,9889],"valid",[],"NV8"],[[9890,9905],"valid",[],"NV8"],[[9906,9906],"valid",[],"NV8"],[[9907,9916],"valid",[],"NV8"],[[9917,9919],"valid",[],"NV8"],[[9920,9923],"valid",[],"NV8"],[[9924,9933],"valid",[],"NV8"],[[9934,9934],"valid",[],"NV8"],[[9935,9953],"valid",[],"NV8"],[[9954,9954],"valid",[],"NV8"],[[9955,9955],"valid",[],"NV8"],[[9956,9959],"valid",[],"NV8"],[[9960,9983],"valid",[],"NV8"],[[9984,9984],"valid",[],"NV8"],[[9985,9988],"valid",[],"NV8"],[[9989,9989],"valid",[],"NV8"],[[9990,9993],"valid",[],"NV8"],[[9994,9995],"valid",[],"NV8"],[[9996,10023],"valid",[],"NV8"],[[10024,10024],"valid",[],"NV8"],[[10025,10059],"valid",[],"NV8"],[[10060,10060],"valid",[],"NV8"],[[10061,10061],"valid",[],"NV8"],[[10062,10062],"valid",[],"NV8"],[[10063,10066],"valid",[],"NV8"],[[10067,10069],"valid",[],"NV8"],[[10070,10070],"valid",[],"NV8"],[[10071,10071],"valid",[],"NV8"],[[10072,10078],"valid",[],"NV8"],[[10079,10080],"valid",[],"NV8"],[[10081,10087],"valid",[],"NV8"],[[10088,10101],"valid",[],"NV8"],[[10102,10132],"valid",[],"NV8"],[[10133,10135],"valid",[],"NV8"],[[10136,10159],"valid",[],"NV8"],[[10160,10160],"valid",[],"NV8"],[[10161,10174],"valid",[],"NV8"],[[10175,10175],"valid",[],"NV8"],[[10176,10182],"valid",[],"NV8"],[[10183,10186],"valid",[],"NV8"],[[10187,10187],"valid",[],"NV8"],[[10188,10188],"valid",[],"NV8"],[[10189,10189],"valid",[],"NV8"],[[10190,10191],"valid",[],"NV8"],[[10192,10219],"valid",[],"NV8"],[[10220,10223],"valid",[],"NV8"],[[10224,10239],"valid",[],"NV8"],[[10240,10495],"valid",[],"NV8"],[[10496,10763],"valid",[],"NV8"],[[10764,10764],"mapped",[8747,8747,8747,8747]],[[10765,10867],"valid",[],"NV8"],[[10868,10868],"disallowed_STD3_mapped",[58,58,61]],[[10869,10869],"disallowed_STD3_mapped",[61,61]],[[10870,10870],"disallowed_STD3_mapped",[61,61,61]],[[10871,10971],"valid",[],"NV8"],[[10972,10972],"mapped",[10973,824]],[[10973,11007],"valid",[],"NV8"],[[11008,11021],"valid",[],"NV8"],[[11022,11027],"valid",[],"NV8"],[[11028,11034],"valid",[],"NV8"],[[11035,11039],"valid",[],"NV8"],[[11040,11043],"valid",[],"NV8"],[[11044,11084],"valid",[],"NV8"],[[11085,11087],"valid",[],"NV8"],[[11088,11092],"valid",[],"NV8"],[[11093,11097],"valid",[],"NV8"],[[11098,11123],"valid",[],"NV8"],[[11124,11125],"disallowed"],[[11126,11157],"valid",[],"NV8"],[[11158,11159],"disallowed"],[[11160,11193],"valid",[],"NV8"],[[11194,11196],"disallowed"],[[11197,11208],"valid",[],"NV8"],[[11209,11209],"disallowed"],[[11210,11217],"valid",[],"NV8"],[[11218,11243],"disallowed"],[[11244,11247],"valid",[],"NV8"],[[11248,11263],"disallowed"],[[11264,11264],"mapped",[11312]],[[11265,11265],"mapped",[11313]],[[11266,11266],"mapped",[11314]],[[11267,11267],"mapped",[11315]],[[11268,11268],"mapped",[11316]],[[11269,11269],"mapped",[11317]],[[11270,11270],"mapped",[11318]],[[11271,11271],"mapped",[11319]],[[11272,11272],"mapped",[11320]],[[11273,11273],"mapped",[11321]],[[11274,11274],"mapped",[11322]],[[11275,11275],"mapped",[11323]],[[11276,11276],"mapped",[11324]],[[11277,11277],"mapped",[11325]],[[11278,11278],"mapped",[11326]],[[11279,11279],"mapped",[11327]],[[11280,11280],"mapped",[11328]],[[11281,11281],"mapped",[11329]],[[11282,11282],"mapped",[11330]],[[11283,11283],"mapped",[11331]],[[11284,11284],"mapped",[11332]],[[11285,11285],"mapped",[11333]],[[11286,11286],"mapped",[11334]],[[11287,11287],"mapped",[11335]],[[11288,11288],"mapped",[11336]],[[11289,11289],"mapped",[11337]],[[11290,11290],"mapped",[11338]],[[11291,11291],"mapped",[11339]],[[11292,11292],"mapped",[11340]],[[11293,11293],"mapped",[11341]],[[11294,11294],"mapped",[11342]],[[11295,11295],"mapped",[11343]],[[11296,11296],"mapped",[11344]],[[11297,11297],"mapped",[11345]],[[11298,11298],"mapped",[11346]],[[11299,11299],"mapped",[11347]],[[11300,11300],"mapped",[11348]],[[11301,11301],"mapped",[11349]],[[11302,11302],"mapped",[11350]],[[11303,11303],"mapped",[11351]],[[11304,11304],"mapped",[11352]],[[11305,11305],"mapped",[11353]],[[11306,11306],"mapped",[11354]],[[11307,11307],"mapped",[11355]],[[11308,11308],"mapped",[11356]],[[11309,11309],"mapped",[11357]],[[11310,11310],"mapped",[11358]],[[11311,11311],"disallowed"],[[11312,11358],"valid"],[[11359,11359],"disallowed"],[[11360,11360],"mapped",[11361]],[[11361,11361],"valid"],[[11362,11362],"mapped",[619]],[[11363,11363],"mapped",[7549]],[[11364,11364],"mapped",[637]],[[11365,11366],"valid"],[[11367,11367],"mapped",[11368]],[[11368,11368],"valid"],[[11369,11369],"mapped",[11370]],[[11370,11370],"valid"],[[11371,11371],"mapped",[11372]],[[11372,11372],"valid"],[[11373,11373],"mapped",[593]],[[11374,11374],"mapped",[625]],[[11375,11375],"mapped",[592]],[[11376,11376],"mapped",[594]],[[11377,11377],"valid"],[[11378,11378],"mapped",[11379]],[[11379,11379],"valid"],[[11380,11380],"valid"],[[11381,11381],"mapped",[11382]],[[11382,11383],"valid"],[[11384,11387],"valid"],[[11388,11388],"mapped",[106]],[[11389,11389],"mapped",[118]],[[11390,11390],"mapped",[575]],[[11391,11391],"mapped",[576]],[[11392,11392],"mapped",[11393]],[[11393,11393],"valid"],[[11394,11394],"mapped",[11395]],[[11395,11395],"valid"],[[11396,11396],"mapped",[11397]],[[11397,11397],"valid"],[[11398,11398],"mapped",[11399]],[[11399,11399],"valid"],[[11400,11400],"mapped",[11401]],[[11401,11401],"valid"],[[11402,11402],"mapped",[11403]],[[11403,11403],"valid"],[[11404,11404],"mapped",[11405]],[[11405,11405],"valid"],[[11406,11406],"mapped",[11407]],[[11407,11407],"valid"],[[11408,11408],"mapped",[11409]],[[11409,11409],"valid"],[[11410,11410],"mapped",[11411]],[[11411,11411],"valid"],[[11412,11412],"mapped",[11413]],[[11413,11413],"valid"],[[11414,11414],"mapped",[11415]],[[11415,11415],"valid"],[[11416,11416],"mapped",[11417]],[[11417,11417],"valid"],[[11418,11418],"mapped",[11419]],[[11419,11419],"valid"],[[11420,11420],"mapped",[11421]],[[11421,11421],"valid"],[[11422,11422],"mapped",[11423]],[[11423,11423],"valid"],[[11424,11424],"mapped",[11425]],[[11425,11425],"valid"],[[11426,11426],"mapped",[11427]],[[11427,11427],"valid"],[[11428,11428],"mapped",[11429]],[[11429,11429],"valid"],[[11430,11430],"mapped",[11431]],[[11431,11431],"valid"],[[11432,11432],"mapped",[11433]],[[11433,11433],"valid"],[[11434,11434],"mapped",[11435]],[[11435,11435],"valid"],[[11436,11436],"mapped",[11437]],[[11437,11437],"valid"],[[11438,11438],"mapped",[11439]],[[11439,11439],"valid"],[[11440,11440],"mapped",[11441]],[[11441,11441],"valid"],[[11442,11442],"mapped",[11443]],[[11443,11443],"valid"],[[11444,11444],"mapped",[11445]],[[11445,11445],"valid"],[[11446,11446],"mapped",[11447]],[[11447,11447],"valid"],[[11448,11448],"mapped",[11449]],[[11449,11449],"valid"],[[11450,11450],"mapped",[11451]],[[11451,11451],"valid"],[[11452,11452],"mapped",[11453]],[[11453,11453],"valid"],[[11454,11454],"mapped",[11455]],[[11455,11455],"valid"],[[11456,11456],"mapped",[11457]],[[11457,11457],"valid"],[[11458,11458],"mapped",[11459]],[[11459,11459],"valid"],[[11460,11460],"mapped",[11461]],[[11461,11461],"valid"],[[11462,11462],"mapped",[11463]],[[11463,11463],"valid"],[[11464,11464],"mapped",[11465]],[[11465,11465],"valid"],[[11466,11466],"mapped",[11467]],[[11467,11467],"valid"],[[11468,11468],"mapped",[11469]],[[11469,11469],"valid"],[[11470,11470],"mapped",[11471]],[[11471,11471],"valid"],[[11472,11472],"mapped",[11473]],[[11473,11473],"valid"],[[11474,11474],"mapped",[11475]],[[11475,11475],"valid"],[[11476,11476],"mapped",[11477]],[[11477,11477],"valid"],[[11478,11478],"mapped",[11479]],[[11479,11479],"valid"],[[11480,11480],"mapped",[11481]],[[11481,11481],"valid"],[[11482,11482],"mapped",[11483]],[[11483,11483],"valid"],[[11484,11484],"mapped",[11485]],[[11485,11485],"valid"],[[11486,11486],"mapped",[11487]],[[11487,11487],"valid"],[[11488,11488],"mapped",[11489]],[[11489,11489],"valid"],[[11490,11490],"mapped",[11491]],[[11491,11492],"valid"],[[11493,11498],"valid",[],"NV8"],[[11499,11499],"mapped",[11500]],[[11500,11500],"valid"],[[11501,11501],"mapped",[11502]],[[11502,11505],"valid"],[[11506,11506],"mapped",[11507]],[[11507,11507],"valid"],[[11508,11512],"disallowed"],[[11513,11519],"valid",[],"NV8"],[[11520,11557],"valid"],[[11558,11558],"disallowed"],[[11559,11559],"valid"],[[11560,11564],"disallowed"],[[11565,11565],"valid"],[[11566,11567],"disallowed"],[[11568,11621],"valid"],[[11622,11623],"valid"],[[11624,11630],"disallowed"],[[11631,11631],"mapped",[11617]],[[11632,11632],"valid",[],"NV8"],[[11633,11646],"disallowed"],[[11647,11647],"valid"],[[11648,11670],"valid"],[[11671,11679],"disallowed"],[[11680,11686],"valid"],[[11687,11687],"disallowed"],[[11688,11694],"valid"],[[11695,11695],"disallowed"],[[11696,11702],"valid"],[[11703,11703],"disallowed"],[[11704,11710],"valid"],[[11711,11711],"disallowed"],[[11712,11718],"valid"],[[11719,11719],"disallowed"],[[11720,11726],"valid"],[[11727,11727],"disallowed"],[[11728,11734],"valid"],[[11735,11735],"disallowed"],[[11736,11742],"valid"],[[11743,11743],"disallowed"],[[11744,11775],"valid"],[[11776,11799],"valid",[],"NV8"],[[11800,11803],"valid",[],"NV8"],[[11804,11805],"valid",[],"NV8"],[[11806,11822],"valid",[],"NV8"],[[11823,11823],"valid"],[[11824,11824],"valid",[],"NV8"],[[11825,11825],"valid",[],"NV8"],[[11826,11835],"valid",[],"NV8"],[[11836,11842],"valid",[],"NV8"],[[11843,11903],"disallowed"],[[11904,11929],"valid",[],"NV8"],[[11930,11930],"disallowed"],[[11931,11934],"valid",[],"NV8"],[[11935,11935],"mapped",[27597]],[[11936,12018],"valid",[],"NV8"],[[12019,12019],"mapped",[40863]],[[12020,12031],"disallowed"],[[12032,12032],"mapped",[19968]],[[12033,12033],"mapped",[20008]],[[12034,12034],"mapped",[20022]],[[12035,12035],"mapped",[20031]],[[12036,12036],"mapped",[20057]],[[12037,12037],"mapped",[20101]],[[12038,12038],"mapped",[20108]],[[12039,12039],"mapped",[20128]],[[12040,12040],"mapped",[20154]],[[12041,12041],"mapped",[20799]],[[12042,12042],"mapped",[20837]],[[12043,12043],"mapped",[20843]],[[12044,12044],"mapped",[20866]],[[12045,12045],"mapped",[20886]],[[12046,12046],"mapped",[20907]],[[12047,12047],"mapped",[20960]],[[12048,12048],"mapped",[20981]],[[12049,12049],"mapped",[20992]],[[12050,12050],"mapped",[21147]],[[12051,12051],"mapped",[21241]],[[12052,12052],"mapped",[21269]],[[12053,12053],"mapped",[21274]],[[12054,12054],"mapped",[21304]],[[12055,12055],"mapped",[21313]],[[12056,12056],"mapped",[21340]],[[12057,12057],"mapped",[21353]],[[12058,12058],"mapped",[21378]],[[12059,12059],"mapped",[21430]],[[12060,12060],"mapped",[21448]],[[12061,12061],"mapped",[21475]],[[12062,12062],"mapped",[22231]],[[12063,12063],"mapped",[22303]],[[12064,12064],"mapped",[22763]],[[12065,12065],"mapped",[22786]],[[12066,12066],"mapped",[22794]],[[12067,12067],"mapped",[22805]],[[12068,12068],"mapped",[22823]],[[12069,12069],"mapped",[22899]],[[12070,12070],"mapped",[23376]],[[12071,12071],"mapped",[23424]],[[12072,12072],"mapped",[23544]],[[12073,12073],"mapped",[23567]],[[12074,12074],"mapped",[23586]],[[12075,12075],"mapped",[23608]],[[12076,12076],"mapped",[23662]],[[12077,12077],"mapped",[23665]],[[12078,12078],"mapped",[24027]],[[12079,12079],"mapped",[24037]],[[12080,12080],"mapped",[24049]],[[12081,12081],"mapped",[24062]],[[12082,12082],"mapped",[24178]],[[12083,12083],"mapped",[24186]],[[12084,12084],"mapped",[24191]],[[12085,12085],"mapped",[24308]],[[12086,12086],"mapped",[24318]],[[12087,12087],"mapped",[24331]],[[12088,12088],"mapped",[24339]],[[12089,12089],"mapped",[24400]],[[12090,12090],"mapped",[24417]],[[12091,12091],"mapped",[24435]],[[12092,12092],"mapped",[24515]],[[12093,12093],"mapped",[25096]],[[12094,12094],"mapped",[25142]],[[12095,12095],"mapped",[25163]],[[12096,12096],"mapped",[25903]],[[12097,12097],"mapped",[25908]],[[12098,12098],"mapped",[25991]],[[12099,12099],"mapped",[26007]],[[12100,12100],"mapped",[26020]],[[12101,12101],"mapped",[26041]],[[12102,12102],"mapped",[26080]],[[12103,12103],"mapped",[26085]],[[12104,12104],"mapped",[26352]],[[12105,12105],"mapped",[26376]],[[12106,12106],"mapped",[26408]],[[12107,12107],"mapped",[27424]],[[12108,12108],"mapped",[27490]],[[12109,12109],"mapped",[27513]],[[12110,12110],"mapped",[27571]],[[12111,12111],"mapped",[27595]],[[12112,12112],"mapped",[27604]],[[12113,12113],"mapped",[27611]],[[12114,12114],"mapped",[27663]],[[12115,12115],"mapped",[27668]],[[12116,12116],"mapped",[27700]],[[12117,12117],"mapped",[28779]],[[12118,12118],"mapped",[29226]],[[12119,12119],"mapped",[29238]],[[12120,12120],"mapped",[29243]],[[12121,12121],"mapped",[29247]],[[12122,12122],"mapped",[29255]],[[12123,12123],"mapped",[29273]],[[12124,12124],"mapped",[29275]],[[12125,12125],"mapped",[29356]],[[12126,12126],"mapped",[29572]],[[12127,12127],"mapped",[29577]],[[12128,12128],"mapped",[29916]],[[12129,12129],"mapped",[29926]],[[12130,12130],"mapped",[29976]],[[12131,12131],"mapped",[29983]],[[12132,12132],"mapped",[29992]],[[12133,12133],"mapped",[30000]],[[12134,12134],"mapped",[30091]],[[12135,12135],"mapped",[30098]],[[12136,12136],"mapped",[30326]],[[12137,12137],"mapped",[30333]],[[12138,12138],"mapped",[30382]],[[12139,12139],"mapped",[30399]],[[12140,12140],"mapped",[30446]],[[12141,12141],"mapped",[30683]],[[12142,12142],"mapped",[30690]],[[12143,12143],"mapped",[30707]],[[12144,12144],"mapped",[31034]],[[12145,12145],"mapped",[31160]],[[12146,12146],"mapped",[31166]],[[12147,12147],"mapped",[31348]],[[12148,12148],"mapped",[31435]],[[12149,12149],"mapped",[31481]],[[12150,12150],"mapped",[31859]],[[12151,12151],"mapped",[31992]],[[12152,12152],"mapped",[32566]],[[12153,12153],"mapped",[32593]],[[12154,12154],"mapped",[32650]],[[12155,12155],"mapped",[32701]],[[12156,12156],"mapped",[32769]],[[12157,12157],"mapped",[32780]],[[12158,12158],"mapped",[32786]],[[12159,12159],"mapped",[32819]],[[12160,12160],"mapped",[32895]],[[12161,12161],"mapped",[32905]],[[12162,12162],"mapped",[33251]],[[12163,12163],"mapped",[33258]],[[12164,12164],"mapped",[33267]],[[12165,12165],"mapped",[33276]],[[12166,12166],"mapped",[33292]],[[12167,12167],"mapped",[33307]],[[12168,12168],"mapped",[33311]],[[12169,12169],"mapped",[33390]],[[12170,12170],"mapped",[33394]],[[12171,12171],"mapped",[33400]],[[12172,12172],"mapped",[34381]],[[12173,12173],"mapped",[34411]],[[12174,12174],"mapped",[34880]],[[12175,12175],"mapped",[34892]],[[12176,12176],"mapped",[34915]],[[12177,12177],"mapped",[35198]],[[12178,12178],"mapped",[35211]],[[12179,12179],"mapped",[35282]],[[12180,12180],"mapped",[35328]],[[12181,12181],"mapped",[35895]],[[12182,12182],"mapped",[35910]],[[12183,12183],"mapped",[35925]],[[12184,12184],"mapped",[35960]],[[12185,12185],"mapped",[35997]],[[12186,12186],"mapped",[36196]],[[12187,12187],"mapped",[36208]],[[12188,12188],"mapped",[36275]],[[12189,12189],"mapped",[36523]],[[12190,12190],"mapped",[36554]],[[12191,12191],"mapped",[36763]],[[12192,12192],"mapped",[36784]],[[12193,12193],"mapped",[36789]],[[12194,12194],"mapped",[37009]],[[12195,12195],"mapped",[37193]],[[12196,12196],"mapped",[37318]],[[12197,12197],"mapped",[37324]],[[12198,12198],"mapped",[37329]],[[12199,12199],"mapped",[38263]],[[12200,12200],"mapped",[38272]],[[12201,12201],"mapped",[38428]],[[12202,12202],"mapped",[38582]],[[12203,12203],"mapped",[38585]],[[12204,12204],"mapped",[38632]],[[12205,12205],"mapped",[38737]],[[12206,12206],"mapped",[38750]],[[12207,12207],"mapped",[38754]],[[12208,12208],"mapped",[38761]],[[12209,12209],"mapped",[38859]],[[12210,12210],"mapped",[38893]],[[12211,12211],"mapped",[38899]],[[12212,12212],"mapped",[38913]],[[12213,12213],"mapped",[39080]],[[12214,12214],"mapped",[39131]],[[12215,12215],"mapped",[39135]],[[12216,12216],"mapped",[39318]],[[12217,12217],"mapped",[39321]],[[12218,12218],"mapped",[39340]],[[12219,12219],"mapped",[39592]],[[12220,12220],"mapped",[39640]],[[12221,12221],"mapped",[39647]],[[12222,12222],"mapped",[39717]],[[12223,12223],"mapped",[39727]],[[12224,12224],"mapped",[39730]],[[12225,12225],"mapped",[39740]],[[12226,12226],"mapped",[39770]],[[12227,12227],"mapped",[40165]],[[12228,12228],"mapped",[40565]],[[12229,12229],"mapped",[40575]],[[12230,12230],"mapped",[40613]],[[12231,12231],"mapped",[40635]],[[12232,12232],"mapped",[40643]],[[12233,12233],"mapped",[40653]],[[12234,12234],"mapped",[40657]],[[12235,12235],"mapped",[40697]],[[12236,12236],"mapped",[40701]],[[12237,12237],"mapped",[40718]],[[12238,12238],"mapped",[40723]],[[12239,12239],"mapped",[40736]],[[12240,12240],"mapped",[40763]],[[12241,12241],"mapped",[40778]],[[12242,12242],"mapped",[40786]],[[12243,12243],"mapped",[40845]],[[12244,12244],"mapped",[40860]],[[12245,12245],"mapped",[40864]],[[12246,12271],"disallowed"],[[12272,12283],"disallowed"],[[12284,12287],"disallowed"],[[12288,12288],"disallowed_STD3_mapped",[32]],[[12289,12289],"valid",[],"NV8"],[[12290,12290],"mapped",[46]],[[12291,12292],"valid",[],"NV8"],[[12293,12295],"valid"],[[12296,12329],"valid",[],"NV8"],[[12330,12333],"valid"],[[12334,12341],"valid",[],"NV8"],[[12342,12342],"mapped",[12306]],[[12343,12343],"valid",[],"NV8"],[[12344,12344],"mapped",[21313]],[[12345,12345],"mapped",[21316]],[[12346,12346],"mapped",[21317]],[[12347,12347],"valid",[],"NV8"],[[12348,12348],"valid"],[[12349,12349],"valid",[],"NV8"],[[12350,12350],"valid",[],"NV8"],[[12351,12351],"valid",[],"NV8"],[[12352,12352],"disallowed"],[[12353,12436],"valid"],[[12437,12438],"valid"],[[12439,12440],"disallowed"],[[12441,12442],"valid"],[[12443,12443],"disallowed_STD3_mapped",[32,12441]],[[12444,12444],"disallowed_STD3_mapped",[32,12442]],[[12445,12446],"valid"],[[12447,12447],"mapped",[12424,12426]],[[12448,12448],"valid",[],"NV8"],[[12449,12542],"valid"],[[12543,12543],"mapped",[12467,12488]],[[12544,12548],"disallowed"],[[12549,12588],"valid"],[[12589,12589],"valid"],[[12590,12592],"disallowed"],[[12593,12593],"mapped",[4352]],[[12594,12594],"mapped",[4353]],[[12595,12595],"mapped",[4522]],[[12596,12596],"mapped",[4354]],[[12597,12597],"mapped",[4524]],[[12598,12598],"mapped",[4525]],[[12599,12599],"mapped",[4355]],[[12600,12600],"mapped",[4356]],[[12601,12601],"mapped",[4357]],[[12602,12602],"mapped",[4528]],[[12603,12603],"mapped",[4529]],[[12604,12604],"mapped",[4530]],[[12605,12605],"mapped",[4531]],[[12606,12606],"mapped",[4532]],[[12607,12607],"mapped",[4533]],[[12608,12608],"mapped",[4378]],[[12609,12609],"mapped",[4358]],[[12610,12610],"mapped",[4359]],[[12611,12611],"mapped",[4360]],[[12612,12612],"mapped",[4385]],[[12613,12613],"mapped",[4361]],[[12614,12614],"mapped",[4362]],[[12615,12615],"mapped",[4363]],[[12616,12616],"mapped",[4364]],[[12617,12617],"mapped",[4365]],[[12618,12618],"mapped",[4366]],[[12619,12619],"mapped",[4367]],[[12620,12620],"mapped",[4368]],[[12621,12621],"mapped",[4369]],[[12622,12622],"mapped",[4370]],[[12623,12623],"mapped",[4449]],[[12624,12624],"mapped",[4450]],[[12625,12625],"mapped",[4451]],[[12626,12626],"mapped",[4452]],[[12627,12627],"mapped",[4453]],[[12628,12628],"mapped",[4454]],[[12629,12629],"mapped",[4455]],[[12630,12630],"mapped",[4456]],[[12631,12631],"mapped",[4457]],[[12632,12632],"mapped",[4458]],[[12633,12633],"mapped",[4459]],[[12634,12634],"mapped",[4460]],[[12635,12635],"mapped",[4461]],[[12636,12636],"mapped",[4462]],[[12637,12637],"mapped",[4463]],[[12638,12638],"mapped",[4464]],[[12639,12639],"mapped",[4465]],[[12640,12640],"mapped",[4466]],[[12641,12641],"mapped",[4467]],[[12642,12642],"mapped",[4468]],[[12643,12643],"mapped",[4469]],[[12644,12644],"disallowed"],[[12645,12645],"mapped",[4372]],[[12646,12646],"mapped",[4373]],[[12647,12647],"mapped",[4551]],[[12648,12648],"mapped",[4552]],[[12649,12649],"mapped",[4556]],[[12650,12650],"mapped",[4558]],[[12651,12651],"mapped",[4563]],[[12652,12652],"mapped",[4567]],[[12653,12653],"mapped",[4569]],[[12654,12654],"mapped",[4380]],[[12655,12655],"mapped",[4573]],[[12656,12656],"mapped",[4575]],[[12657,12657],"mapped",[4381]],[[12658,12658],"mapped",[4382]],[[12659,12659],"mapped",[4384]],[[12660,12660],"mapped",[4386]],[[12661,12661],"mapped",[4387]],[[12662,12662],"mapped",[4391]],[[12663,12663],"mapped",[4393]],[[12664,12664],"mapped",[4395]],[[12665,12665],"mapped",[4396]],[[12666,12666],"mapped",[4397]],[[12667,12667],"mapped",[4398]],[[12668,12668],"mapped",[4399]],[[12669,12669],"mapped",[4402]],[[12670,12670],"mapped",[4406]],[[12671,12671],"mapped",[4416]],[[12672,12672],"mapped",[4423]],[[12673,12673],"mapped",[4428]],[[12674,12674],"mapped",[4593]],[[12675,12675],"mapped",[4594]],[[12676,12676],"mapped",[4439]],[[12677,12677],"mapped",[4440]],[[12678,12678],"mapped",[4441]],[[12679,12679],"mapped",[4484]],[[12680,12680],"mapped",[4485]],[[12681,12681],"mapped",[4488]],[[12682,12682],"mapped",[4497]],[[12683,12683],"mapped",[4498]],[[12684,12684],"mapped",[4500]],[[12685,12685],"mapped",[4510]],[[12686,12686],"mapped",[4513]],[[12687,12687],"disallowed"],[[12688,12689],"valid",[],"NV8"],[[12690,12690],"mapped",[19968]],[[12691,12691],"mapped",[20108]],[[12692,12692],"mapped",[19977]],[[12693,12693],"mapped",[22235]],[[12694,12694],"mapped",[19978]],[[12695,12695],"mapped",[20013]],[[12696,12696],"mapped",[19979]],[[12697,12697],"mapped",[30002]],[[12698,12698],"mapped",[20057]],[[12699,12699],"mapped",[19993]],[[12700,12700],"mapped",[19969]],[[12701,12701],"mapped",[22825]],[[12702,12702],"mapped",[22320]],[[12703,12703],"mapped",[20154]],[[12704,12727],"valid"],[[12728,12730],"valid"],[[12731,12735],"disallowed"],[[12736,12751],"valid",[],"NV8"],[[12752,12771],"valid",[],"NV8"],[[12772,12783],"disallowed"],[[12784,12799],"valid"],[[12800,12800],"disallowed_STD3_mapped",[40,4352,41]],[[12801,12801],"disallowed_STD3_mapped",[40,4354,41]],[[12802,12802],"disallowed_STD3_mapped",[40,4355,41]],[[12803,12803],"disallowed_STD3_mapped",[40,4357,41]],[[12804,12804],"disallowed_STD3_mapped",[40,4358,41]],[[12805,12805],"disallowed_STD3_mapped",[40,4359,41]],[[12806,12806],"disallowed_STD3_mapped",[40,4361,41]],[[12807,12807],"disallowed_STD3_mapped",[40,4363,41]],[[12808,12808],"disallowed_STD3_mapped",[40,4364,41]],[[12809,12809],"disallowed_STD3_mapped",[40,4366,41]],[[12810,12810],"disallowed_STD3_mapped",[40,4367,41]],[[12811,12811],"disallowed_STD3_mapped",[40,4368,41]],[[12812,12812],"disallowed_STD3_mapped",[40,4369,41]],[[12813,12813],"disallowed_STD3_mapped",[40,4370,41]],[[12814,12814],"disallowed_STD3_mapped",[40,44032,41]],[[12815,12815],"disallowed_STD3_mapped",[40,45208,41]],[[12816,12816],"disallowed_STD3_mapped",[40,45796,41]],[[12817,12817],"disallowed_STD3_mapped",[40,46972,41]],[[12818,12818],"disallowed_STD3_mapped",[40,47560,41]],[[12819,12819],"disallowed_STD3_mapped",[40,48148,41]],[[12820,12820],"disallowed_STD3_mapped",[40,49324,41]],[[12821,12821],"disallowed_STD3_mapped",[40,50500,41]],[[12822,12822],"disallowed_STD3_mapped",[40,51088,41]],[[12823,12823],"disallowed_STD3_mapped",[40,52264,41]],[[12824,12824],"disallowed_STD3_mapped",[40,52852,41]],[[12825,12825],"disallowed_STD3_mapped",[40,53440,41]],[[12826,12826],"disallowed_STD3_mapped",[40,54028,41]],[[12827,12827],"disallowed_STD3_mapped",[40,54616,41]],[[12828,12828],"disallowed_STD3_mapped",[40,51452,41]],[[12829,12829],"disallowed_STD3_mapped",[40,50724,51204,41]],[[12830,12830],"disallowed_STD3_mapped",[40,50724,54980,41]],[[12831,12831],"disallowed"],[[12832,12832],"disallowed_STD3_mapped",[40,19968,41]],[[12833,12833],"disallowed_STD3_mapped",[40,20108,41]],[[12834,12834],"disallowed_STD3_mapped",[40,19977,41]],[[12835,12835],"disallowed_STD3_mapped",[40,22235,41]],[[12836,12836],"disallowed_STD3_mapped",[40,20116,41]],[[12837,12837],"disallowed_STD3_mapped",[40,20845,41]],[[12838,12838],"disallowed_STD3_mapped",[40,19971,41]],[[12839,12839],"disallowed_STD3_mapped",[40,20843,41]],[[12840,12840],"disallowed_STD3_mapped",[40,20061,41]],[[12841,12841],"disallowed_STD3_mapped",[40,21313,41]],[[12842,12842],"disallowed_STD3_mapped",[40,26376,41]],[[12843,12843],"disallowed_STD3_mapped",[40,28779,41]],[[12844,12844],"disallowed_STD3_mapped",[40,27700,41]],[[12845,12845],"disallowed_STD3_mapped",[40,26408,41]],[[12846,12846],"disallowed_STD3_mapped",[40,37329,41]],[[12847,12847],"disallowed_STD3_mapped",[40,22303,41]],[[12848,12848],"disallowed_STD3_mapped",[40,26085,41]],[[12849,12849],"disallowed_STD3_mapped",[40,26666,41]],[[12850,12850],"disallowed_STD3_mapped",[40,26377,41]],[[12851,12851],"disallowed_STD3_mapped",[40,31038,41]],[[12852,12852],"disallowed_STD3_mapped",[40,21517,41]],[[12853,12853],"disallowed_STD3_mapped",[40,29305,41]],[[12854,12854],"disallowed_STD3_mapped",[40,36001,41]],[[12855,12855],"disallowed_STD3_mapped",[40,31069,41]],[[12856,12856],"disallowed_STD3_mapped",[40,21172,41]],[[12857,12857],"disallowed_STD3_mapped",[40,20195,41]],[[12858,12858],"disallowed_STD3_mapped",[40,21628,41]],[[12859,12859],"disallowed_STD3_mapped",[40,23398,41]],[[12860,12860],"disallowed_STD3_mapped",[40,30435,41]],[[12861,12861],"disallowed_STD3_mapped",[40,20225,41]],[[12862,12862],"disallowed_STD3_mapped",[40,36039,41]],[[12863,12863],"disallowed_STD3_mapped",[40,21332,41]],[[12864,12864],"disallowed_STD3_mapped",[40,31085,41]],[[12865,12865],"disallowed_STD3_mapped",[40,20241,41]],[[12866,12866],"disallowed_STD3_mapped",[40,33258,41]],[[12867,12867],"disallowed_STD3_mapped",[40,33267,41]],[[12868,12868],"mapped",[21839]],[[12869,12869],"mapped",[24188]],[[12870,12870],"mapped",[25991]],[[12871,12871],"mapped",[31631]],[[12872,12879],"valid",[],"NV8"],[[12880,12880],"mapped",[112,116,101]],[[12881,12881],"mapped",[50,49]],[[12882,12882],"mapped",[50,50]],[[12883,12883],"mapped",[50,51]],[[12884,12884],"mapped",[50,52]],[[12885,12885],"mapped",[50,53]],[[12886,12886],"mapped",[50,54]],[[12887,12887],"mapped",[50,55]],[[12888,12888],"mapped",[50,56]],[[12889,12889],"mapped",[50,57]],[[12890,12890],"mapped",[51,48]],[[12891,12891],"mapped",[51,49]],[[12892,12892],"mapped",[51,50]],[[12893,12893],"mapped",[51,51]],[[12894,12894],"mapped",[51,52]],[[12895,12895],"mapped",[51,53]],[[12896,12896],"mapped",[4352]],[[12897,12897],"mapped",[4354]],[[12898,12898],"mapped",[4355]],[[12899,12899],"mapped",[4357]],[[12900,12900],"mapped",[4358]],[[12901,12901],"mapped",[4359]],[[12902,12902],"mapped",[4361]],[[12903,12903],"mapped",[4363]],[[12904,12904],"mapped",[4364]],[[12905,12905],"mapped",[4366]],[[12906,12906],"mapped",[4367]],[[12907,12907],"mapped",[4368]],[[12908,12908],"mapped",[4369]],[[12909,12909],"mapped",[4370]],[[12910,12910],"mapped",[44032]],[[12911,12911],"mapped",[45208]],[[12912,12912],"mapped",[45796]],[[12913,12913],"mapped",[46972]],[[12914,12914],"mapped",[47560]],[[12915,12915],"mapped",[48148]],[[12916,12916],"mapped",[49324]],[[12917,12917],"mapped",[50500]],[[12918,12918],"mapped",[51088]],[[12919,12919],"mapped",[52264]],[[12920,12920],"mapped",[52852]],[[12921,12921],"mapped",[53440]],[[12922,12922],"mapped",[54028]],[[12923,12923],"mapped",[54616]],[[12924,12924],"mapped",[52280,44256]],[[12925,12925],"mapped",[51452,51032]],[[12926,12926],"mapped",[50864]],[[12927,12927],"valid",[],"NV8"],[[12928,12928],"mapped",[19968]],[[12929,12929],"mapped",[20108]],[[12930,12930],"mapped",[19977]],[[12931,12931],"mapped",[22235]],[[12932,12932],"mapped",[20116]],[[12933,12933],"mapped",[20845]],[[12934,12934],"mapped",[19971]],[[12935,12935],"mapped",[20843]],[[12936,12936],"mapped",[20061]],[[12937,12937],"mapped",[21313]],[[12938,12938],"mapped",[26376]],[[12939,12939],"mapped",[28779]],[[12940,12940],"mapped",[27700]],[[12941,12941],"mapped",[26408]],[[12942,12942],"mapped",[37329]],[[12943,12943],"mapped",[22303]],[[12944,12944],"mapped",[26085]],[[12945,12945],"mapped",[26666]],[[12946,12946],"mapped",[26377]],[[12947,12947],"mapped",[31038]],[[12948,12948],"mapped",[21517]],[[12949,12949],"mapped",[29305]],[[12950,12950],"mapped",[36001]],[[12951,12951],"mapped",[31069]],[[12952,12952],"mapped",[21172]],[[12953,12953],"mapped",[31192]],[[12954,12954],"mapped",[30007]],[[12955,12955],"mapped",[22899]],[[12956,12956],"mapped",[36969]],[[12957,12957],"mapped",[20778]],[[12958,12958],"mapped",[21360]],[[12959,12959],"mapped",[27880]],[[12960,12960],"mapped",[38917]],[[12961,12961],"mapped",[20241]],[[12962,12962],"mapped",[20889]],[[12963,12963],"mapped",[27491]],[[12964,12964],"mapped",[19978]],[[12965,12965],"mapped",[20013]],[[12966,12966],"mapped",[19979]],[[12967,12967],"mapped",[24038]],[[12968,12968],"mapped",[21491]],[[12969,12969],"mapped",[21307]],[[12970,12970],"mapped",[23447]],[[12971,12971],"mapped",[23398]],[[12972,12972],"mapped",[30435]],[[12973,12973],"mapped",[20225]],[[12974,12974],"mapped",[36039]],[[12975,12975],"mapped",[21332]],[[12976,12976],"mapped",[22812]],[[12977,12977],"mapped",[51,54]],[[12978,12978],"mapped",[51,55]],[[12979,12979],"mapped",[51,56]],[[12980,12980],"mapped",[51,57]],[[12981,12981],"mapped",[52,48]],[[12982,12982],"mapped",[52,49]],[[12983,12983],"mapped",[52,50]],[[12984,12984],"mapped",[52,51]],[[12985,12985],"mapped",[52,52]],[[12986,12986],"mapped",[52,53]],[[12987,12987],"mapped",[52,54]],[[12988,12988],"mapped",[52,55]],[[12989,12989],"mapped",[52,56]],[[12990,12990],"mapped",[52,57]],[[12991,12991],"mapped",[53,48]],[[12992,12992],"mapped",[49,26376]],[[12993,12993],"mapped",[50,26376]],[[12994,12994],"mapped",[51,26376]],[[12995,12995],"mapped",[52,26376]],[[12996,12996],"mapped",[53,26376]],[[12997,12997],"mapped",[54,26376]],[[12998,12998],"mapped",[55,26376]],[[12999,12999],"mapped",[56,26376]],[[13000,13000],"mapped",[57,26376]],[[13001,13001],"mapped",[49,48,26376]],[[13002,13002],"mapped",[49,49,26376]],[[13003,13003],"mapped",[49,50,26376]],[[13004,13004],"mapped",[104,103]],[[13005,13005],"mapped",[101,114,103]],[[13006,13006],"mapped",[101,118]],[[13007,13007],"mapped",[108,116,100]],[[13008,13008],"mapped",[12450]],[[13009,13009],"mapped",[12452]],[[13010,13010],"mapped",[12454]],[[13011,13011],"mapped",[12456]],[[13012,13012],"mapped",[12458]],[[13013,13013],"mapped",[12459]],[[13014,13014],"mapped",[12461]],[[13015,13015],"mapped",[12463]],[[13016,13016],"mapped",[12465]],[[13017,13017],"mapped",[12467]],[[13018,13018],"mapped",[12469]],[[13019,13019],"mapped",[12471]],[[13020,13020],"mapped",[12473]],[[13021,13021],"mapped",[12475]],[[13022,13022],"mapped",[12477]],[[13023,13023],"mapped",[12479]],[[13024,13024],"mapped",[12481]],[[13025,13025],"mapped",[12484]],[[13026,13026],"mapped",[12486]],[[13027,13027],"mapped",[12488]],[[13028,13028],"mapped",[12490]],[[13029,13029],"mapped",[12491]],[[13030,13030],"mapped",[12492]],[[13031,13031],"mapped",[12493]],[[13032,13032],"mapped",[12494]],[[13033,13033],"mapped",[12495]],[[13034,13034],"mapped",[12498]],[[13035,13035],"mapped",[12501]],[[13036,13036],"mapped",[12504]],[[13037,13037],"mapped",[12507]],[[13038,13038],"mapped",[12510]],[[13039,13039],"mapped",[12511]],[[13040,13040],"mapped",[12512]],[[13041,13041],"mapped",[12513]],[[13042,13042],"mapped",[12514]],[[13043,13043],"mapped",[12516]],[[13044,13044],"mapped",[12518]],[[13045,13045],"mapped",[12520]],[[13046,13046],"mapped",[12521]],[[13047,13047],"mapped",[12522]],[[13048,13048],"mapped",[12523]],[[13049,13049],"mapped",[12524]],[[13050,13050],"mapped",[12525]],[[13051,13051],"mapped",[12527]],[[13052,13052],"mapped",[12528]],[[13053,13053],"mapped",[12529]],[[13054,13054],"mapped",[12530]],[[13055,13055],"disallowed"],[[13056,13056],"mapped",[12450,12497,12540,12488]],[[13057,13057],"mapped",[12450,12523,12501,12449]],[[13058,13058],"mapped",[12450,12531,12506,12450]],[[13059,13059],"mapped",[12450,12540,12523]],[[13060,13060],"mapped",[12452,12491,12531,12464]],[[13061,13061],"mapped",[12452,12531,12481]],[[13062,13062],"mapped",[12454,12457,12531]],[[13063,13063],"mapped",[12456,12473,12463,12540,12489]],[[13064,13064],"mapped",[12456,12540,12459,12540]],[[13065,13065],"mapped",[12458,12531,12473]],[[13066,13066],"mapped",[12458,12540,12512]],[[13067,13067],"mapped",[12459,12452,12522]],[[13068,13068],"mapped",[12459,12521,12483,12488]],[[13069,13069],"mapped",[12459,12525,12522,12540]],[[13070,13070],"mapped",[12460,12525,12531]],[[13071,13071],"mapped",[12460,12531,12510]],[[13072,13072],"mapped",[12462,12460]],[[13073,13073],"mapped",[12462,12491,12540]],[[13074,13074],"mapped",[12461,12517,12522,12540]],[[13075,13075],"mapped",[12462,12523,12480,12540]],[[13076,13076],"mapped",[12461,12525]],[[13077,13077],"mapped",[12461,12525,12464,12521,12512]],[[13078,13078],"mapped",[12461,12525,12513,12540,12488,12523]],[[13079,13079],"mapped",[12461,12525,12527,12483,12488]],[[13080,13080],"mapped",[12464,12521,12512]],[[13081,13081],"mapped",[12464,12521,12512,12488,12531]],[[13082,13082],"mapped",[12463,12523,12476,12452,12525]],[[13083,13083],"mapped",[12463,12525,12540,12493]],[[13084,13084],"mapped",[12465,12540,12473]],[[13085,13085],"mapped",[12467,12523,12490]],[[13086,13086],"mapped",[12467,12540,12509]],[[13087,13087],"mapped",[12469,12452,12463,12523]],[[13088,13088],"mapped",[12469,12531,12481,12540,12512]],[[13089,13089],"mapped",[12471,12522,12531,12464]],[[13090,13090],"mapped",[12475,12531,12481]],[[13091,13091],"mapped",[12475,12531,12488]],[[13092,13092],"mapped",[12480,12540,12473]],[[13093,13093],"mapped",[12487,12471]],[[13094,13094],"mapped",[12489,12523]],[[13095,13095],"mapped",[12488,12531]],[[13096,13096],"mapped",[12490,12494]],[[13097,13097],"mapped",[12494,12483,12488]],[[13098,13098],"mapped",[12495,12452,12484]],[[13099,13099],"mapped",[12497,12540,12475,12531,12488]],[[13100,13100],"mapped",[12497,12540,12484]],[[13101,13101],"mapped",[12496,12540,12524,12523]],[[13102,13102],"mapped",[12500,12450,12473,12488,12523]],[[13103,13103],"mapped",[12500,12463,12523]],[[13104,13104],"mapped",[12500,12467]],[[13105,13105],"mapped",[12499,12523]],[[13106,13106],"mapped",[12501,12449,12521,12483,12489]],[[13107,13107],"mapped",[12501,12451,12540,12488]],[[13108,13108],"mapped",[12502,12483,12471,12455,12523]],[[13109,13109],"mapped",[12501,12521,12531]],[[13110,13110],"mapped",[12504,12463,12479,12540,12523]],[[13111,13111],"mapped",[12506,12477]],[[13112,13112],"mapped",[12506,12491,12498]],[[13113,13113],"mapped",[12504,12523,12484]],[[13114,13114],"mapped",[12506,12531,12473]],[[13115,13115],"mapped",[12506,12540,12472]],[[13116,13116],"mapped",[12505,12540,12479]],[[13117,13117],"mapped",[12509,12452,12531,12488]],[[13118,13118],"mapped",[12508,12523,12488]],[[13119,13119],"mapped",[12507,12531]],[[13120,13120],"mapped",[12509,12531,12489]],[[13121,13121],"mapped",[12507,12540,12523]],[[13122,13122],"mapped",[12507,12540,12531]],[[13123,13123],"mapped",[12510,12452,12463,12525]],[[13124,13124],"mapped",[12510,12452,12523]],[[13125,13125],"mapped",[12510,12483,12495]],[[13126,13126],"mapped",[12510,12523,12463]],[[13127,13127],"mapped",[12510,12531,12471,12519,12531]],[[13128,13128],"mapped",[12511,12463,12525,12531]],[[13129,13129],"mapped",[12511,12522]],[[13130,13130],"mapped",[12511,12522,12496,12540,12523]],[[13131,13131],"mapped",[12513,12460]],[[13132,13132],"mapped",[12513,12460,12488,12531]],[[13133,13133],"mapped",[12513,12540,12488,12523]],[[13134,13134],"mapped",[12516,12540,12489]],[[13135,13135],"mapped",[12516,12540,12523]],[[13136,13136],"mapped",[12518,12450,12531]],[[13137,13137],"mapped",[12522,12483,12488,12523]],[[13138,13138],"mapped",[12522,12521]],[[13139,13139],"mapped",[12523,12500,12540]],[[13140,13140],"mapped",[12523,12540,12502,12523]],[[13141,13141],"mapped",[12524,12512]],[[13142,13142],"mapped",[12524,12531,12488,12466,12531]],[[13143,13143],"mapped",[12527,12483,12488]],[[13144,13144],"mapped",[48,28857]],[[13145,13145],"mapped",[49,28857]],[[13146,13146],"mapped",[50,28857]],[[13147,13147],"mapped",[51,28857]],[[13148,13148],"mapped",[52,28857]],[[13149,13149],"mapped",[53,28857]],[[13150,13150],"mapped",[54,28857]],[[13151,13151],"mapped",[55,28857]],[[13152,13152],"mapped",[56,28857]],[[13153,13153],"mapped",[57,28857]],[[13154,13154],"mapped",[49,48,28857]],[[13155,13155],"mapped",[49,49,28857]],[[13156,13156],"mapped",[49,50,28857]],[[13157,13157],"mapped",[49,51,28857]],[[13158,13158],"mapped",[49,52,28857]],[[13159,13159],"mapped",[49,53,28857]],[[13160,13160],"mapped",[49,54,28857]],[[13161,13161],"mapped",[49,55,28857]],[[13162,13162],"mapped",[49,56,28857]],[[13163,13163],"mapped",[49,57,28857]],[[13164,13164],"mapped",[50,48,28857]],[[13165,13165],"mapped",[50,49,28857]],[[13166,13166],"mapped",[50,50,28857]],[[13167,13167],"mapped",[50,51,28857]],[[13168,13168],"mapped",[50,52,28857]],[[13169,13169],"mapped",[104,112,97]],[[13170,13170],"mapped",[100,97]],[[13171,13171],"mapped",[97,117]],[[13172,13172],"mapped",[98,97,114]],[[13173,13173],"mapped",[111,118]],[[13174,13174],"mapped",[112,99]],[[13175,13175],"mapped",[100,109]],[[13176,13176],"mapped",[100,109,50]],[[13177,13177],"mapped",[100,109,51]],[[13178,13178],"mapped",[105,117]],[[13179,13179],"mapped",[24179,25104]],[[13180,13180],"mapped",[26157,21644]],[[13181,13181],"mapped",[22823,27491]],[[13182,13182],"mapped",[26126,27835]],[[13183,13183],"mapped",[26666,24335,20250,31038]],[[13184,13184],"mapped",[112,97]],[[13185,13185],"mapped",[110,97]],[[13186,13186],"mapped",[956,97]],[[13187,13187],"mapped",[109,97]],[[13188,13188],"mapped",[107,97]],[[13189,13189],"mapped",[107,98]],[[13190,13190],"mapped",[109,98]],[[13191,13191],"mapped",[103,98]],[[13192,13192],"mapped",[99,97,108]],[[13193,13193],"mapped",[107,99,97,108]],[[13194,13194],"mapped",[112,102]],[[13195,13195],"mapped",[110,102]],[[13196,13196],"mapped",[956,102]],[[13197,13197],"mapped",[956,103]],[[13198,13198],"mapped",[109,103]],[[13199,13199],"mapped",[107,103]],[[13200,13200],"mapped",[104,122]],[[13201,13201],"mapped",[107,104,122]],[[13202,13202],"mapped",[109,104,122]],[[13203,13203],"mapped",[103,104,122]],[[13204,13204],"mapped",[116,104,122]],[[13205,13205],"mapped",[956,108]],[[13206,13206],"mapped",[109,108]],[[13207,13207],"mapped",[100,108]],[[13208,13208],"mapped",[107,108]],[[13209,13209],"mapped",[102,109]],[[13210,13210],"mapped",[110,109]],[[13211,13211],"mapped",[956,109]],[[13212,13212],"mapped",[109,109]],[[13213,13213],"mapped",[99,109]],[[13214,13214],"mapped",[107,109]],[[13215,13215],"mapped",[109,109,50]],[[13216,13216],"mapped",[99,109,50]],[[13217,13217],"mapped",[109,50]],[[13218,13218],"mapped",[107,109,50]],[[13219,13219],"mapped",[109,109,51]],[[13220,13220],"mapped",[99,109,51]],[[13221,13221],"mapped",[109,51]],[[13222,13222],"mapped",[107,109,51]],[[13223,13223],"mapped",[109,8725,115]],[[13224,13224],"mapped",[109,8725,115,50]],[[13225,13225],"mapped",[112,97]],[[13226,13226],"mapped",[107,112,97]],[[13227,13227],"mapped",[109,112,97]],[[13228,13228],"mapped",[103,112,97]],[[13229,13229],"mapped",[114,97,100]],[[13230,13230],"mapped",[114,97,100,8725,115]],[[13231,13231],"mapped",[114,97,100,8725,115,50]],[[13232,13232],"mapped",[112,115]],[[13233,13233],"mapped",[110,115]],[[13234,13234],"mapped",[956,115]],[[13235,13235],"mapped",[109,115]],[[13236,13236],"mapped",[112,118]],[[13237,13237],"mapped",[110,118]],[[13238,13238],"mapped",[956,118]],[[13239,13239],"mapped",[109,118]],[[13240,13240],"mapped",[107,118]],[[13241,13241],"mapped",[109,118]],[[13242,13242],"mapped",[112,119]],[[13243,13243],"mapped",[110,119]],[[13244,13244],"mapped",[956,119]],[[13245,13245],"mapped",[109,119]],[[13246,13246],"mapped",[107,119]],[[13247,13247],"mapped",[109,119]],[[13248,13248],"mapped",[107,969]],[[13249,13249],"mapped",[109,969]],[[13250,13250],"disallowed"],[[13251,13251],"mapped",[98,113]],[[13252,13252],"mapped",[99,99]],[[13253,13253],"mapped",[99,100]],[[13254,13254],"mapped",[99,8725,107,103]],[[13255,13255],"disallowed"],[[13256,13256],"mapped",[100,98]],[[13257,13257],"mapped",[103,121]],[[13258,13258],"mapped",[104,97]],[[13259,13259],"mapped",[104,112]],[[13260,13260],"mapped",[105,110]],[[13261,13261],"mapped",[107,107]],[[13262,13262],"mapped",[107,109]],[[13263,13263],"mapped",[107,116]],[[13264,13264],"mapped",[108,109]],[[13265,13265],"mapped",[108,110]],[[13266,13266],"mapped",[108,111,103]],[[13267,13267],"mapped",[108,120]],[[13268,13268],"mapped",[109,98]],[[13269,13269],"mapped",[109,105,108]],[[13270,13270],"mapped",[109,111,108]],[[13271,13271],"mapped",[112,104]],[[13272,13272],"disallowed"],[[13273,13273],"mapped",[112,112,109]],[[13274,13274],"mapped",[112,114]],[[13275,13275],"mapped",[115,114]],[[13276,13276],"mapped",[115,118]],[[13277,13277],"mapped",[119,98]],[[13278,13278],"mapped",[118,8725,109]],[[13279,13279],"mapped",[97,8725,109]],[[13280,13280],"mapped",[49,26085]],[[13281,13281],"mapped",[50,26085]],[[13282,13282],"mapped",[51,26085]],[[13283,13283],"mapped",[52,26085]],[[13284,13284],"mapped",[53,26085]],[[13285,13285],"mapped",[54,26085]],[[13286,13286],"mapped",[55,26085]],[[13287,13287],"mapped",[56,26085]],[[13288,13288],"mapped",[57,26085]],[[13289,13289],"mapped",[49,48,26085]],[[13290,13290],"mapped",[49,49,26085]],[[13291,13291],"mapped",[49,50,26085]],[[13292,13292],"mapped",[49,51,26085]],[[13293,13293],"mapped",[49,52,26085]],[[13294,13294],"mapped",[49,53,26085]],[[13295,13295],"mapped",[49,54,26085]],[[13296,13296],"mapped",[49,55,26085]],[[13297,13297],"mapped",[49,56,26085]],[[13298,13298],"mapped",[49,57,26085]],[[13299,13299],"mapped",[50,48,26085]],[[13300,13300],"mapped",[50,49,26085]],[[13301,13301],"mapped",[50,50,26085]],[[13302,13302],"mapped",[50,51,26085]],[[13303,13303],"mapped",[50,52,26085]],[[13304,13304],"mapped",[50,53,26085]],[[13305,13305],"mapped",[50,54,26085]],[[13306,13306],"mapped",[50,55,26085]],[[13307,13307],"mapped",[50,56,26085]],[[13308,13308],"mapped",[50,57,26085]],[[13309,13309],"mapped",[51,48,26085]],[[13310,13310],"mapped",[51,49,26085]],[[13311,13311],"mapped",[103,97,108]],[[13312,19893],"valid"],[[19894,19903],"disallowed"],[[19904,19967],"valid",[],"NV8"],[[19968,40869],"valid"],[[40870,40891],"valid"],[[40892,40899],"valid"],[[40900,40907],"valid"],[[40908,40908],"valid"],[[40909,40917],"valid"],[[40918,40959],"disallowed"],[[40960,42124],"valid"],[[42125,42127],"disallowed"],[[42128,42145],"valid",[],"NV8"],[[42146,42147],"valid",[],"NV8"],[[42148,42163],"valid",[],"NV8"],[[42164,42164],"valid",[],"NV8"],[[42165,42176],"valid",[],"NV8"],[[42177,42177],"valid",[],"NV8"],[[42178,42180],"valid",[],"NV8"],[[42181,42181],"valid",[],"NV8"],[[42182,42182],"valid",[],"NV8"],[[42183,42191],"disallowed"],[[42192,42237],"valid"],[[42238,42239],"valid",[],"NV8"],[[42240,42508],"valid"],[[42509,42511],"valid",[],"NV8"],[[42512,42539],"valid"],[[42540,42559],"disallowed"],[[42560,42560],"mapped",[42561]],[[42561,42561],"valid"],[[42562,42562],"mapped",[42563]],[[42563,42563],"valid"],[[42564,42564],"mapped",[42565]],[[42565,42565],"valid"],[[42566,42566],"mapped",[42567]],[[42567,42567],"valid"],[[42568,42568],"mapped",[42569]],[[42569,42569],"valid"],[[42570,42570],"mapped",[42571]],[[42571,42571],"valid"],[[42572,42572],"mapped",[42573]],[[42573,42573],"valid"],[[42574,42574],"mapped",[42575]],[[42575,42575],"valid"],[[42576,42576],"mapped",[42577]],[[42577,42577],"valid"],[[42578,42578],"mapped",[42579]],[[42579,42579],"valid"],[[42580,42580],"mapped",[42581]],[[42581,42581],"valid"],[[42582,42582],"mapped",[42583]],[[42583,42583],"valid"],[[42584,42584],"mapped",[42585]],[[42585,42585],"valid"],[[42586,42586],"mapped",[42587]],[[42587,42587],"valid"],[[42588,42588],"mapped",[42589]],[[42589,42589],"valid"],[[42590,42590],"mapped",[42591]],[[42591,42591],"valid"],[[42592,42592],"mapped",[42593]],[[42593,42593],"valid"],[[42594,42594],"mapped",[42595]],[[42595,42595],"valid"],[[42596,42596],"mapped",[42597]],[[42597,42597],"valid"],[[42598,42598],"mapped",[42599]],[[42599,42599],"valid"],[[42600,42600],"mapped",[42601]],[[42601,42601],"valid"],[[42602,42602],"mapped",[42603]],[[42603,42603],"valid"],[[42604,42604],"mapped",[42605]],[[42605,42607],"valid"],[[42608,42611],"valid",[],"NV8"],[[42612,42619],"valid"],[[42620,42621],"valid"],[[42622,42622],"valid",[],"NV8"],[[42623,42623],"valid"],[[42624,42624],"mapped",[42625]],[[42625,42625],"valid"],[[42626,42626],"mapped",[42627]],[[42627,42627],"valid"],[[42628,42628],"mapped",[42629]],[[42629,42629],"valid"],[[42630,42630],"mapped",[42631]],[[42631,42631],"valid"],[[42632,42632],"mapped",[42633]],[[42633,42633],"valid"],[[42634,42634],"mapped",[42635]],[[42635,42635],"valid"],[[42636,42636],"mapped",[42637]],[[42637,42637],"valid"],[[42638,42638],"mapped",[42639]],[[42639,42639],"valid"],[[42640,42640],"mapped",[42641]],[[42641,42641],"valid"],[[42642,42642],"mapped",[42643]],[[42643,42643],"valid"],[[42644,42644],"mapped",[42645]],[[42645,42645],"valid"],[[42646,42646],"mapped",[42647]],[[42647,42647],"valid"],[[42648,42648],"mapped",[42649]],[[42649,42649],"valid"],[[42650,42650],"mapped",[42651]],[[42651,42651],"valid"],[[42652,42652],"mapped",[1098]],[[42653,42653],"mapped",[1100]],[[42654,42654],"valid"],[[42655,42655],"valid"],[[42656,42725],"valid"],[[42726,42735],"valid",[],"NV8"],[[42736,42737],"valid"],[[42738,42743],"valid",[],"NV8"],[[42744,42751],"disallowed"],[[42752,42774],"valid",[],"NV8"],[[42775,42778],"valid"],[[42779,42783],"valid"],[[42784,42785],"valid",[],"NV8"],[[42786,42786],"mapped",[42787]],[[42787,42787],"valid"],[[42788,42788],"mapped",[42789]],[[42789,42789],"valid"],[[42790,42790],"mapped",[42791]],[[42791,42791],"valid"],[[42792,42792],"mapped",[42793]],[[42793,42793],"valid"],[[42794,42794],"mapped",[42795]],[[42795,42795],"valid"],[[42796,42796],"mapped",[42797]],[[42797,42797],"valid"],[[42798,42798],"mapped",[42799]],[[42799,42801],"valid"],[[42802,42802],"mapped",[42803]],[[42803,42803],"valid"],[[42804,42804],"mapped",[42805]],[[42805,42805],"valid"],[[42806,42806],"mapped",[42807]],[[42807,42807],"valid"],[[42808,42808],"mapped",[42809]],[[42809,42809],"valid"],[[42810,42810],"mapped",[42811]],[[42811,42811],"valid"],[[42812,42812],"mapped",[42813]],[[42813,42813],"valid"],[[42814,42814],"mapped",[42815]],[[42815,42815],"valid"],[[42816,42816],"mapped",[42817]],[[42817,42817],"valid"],[[42818,42818],"mapped",[42819]],[[42819,42819],"valid"],[[42820,42820],"mapped",[42821]],[[42821,42821],"valid"],[[42822,42822],"mapped",[42823]],[[42823,42823],"valid"],[[42824,42824],"mapped",[42825]],[[42825,42825],"valid"],[[42826,42826],"mapped",[42827]],[[42827,42827],"valid"],[[42828,42828],"mapped",[42829]],[[42829,42829],"valid"],[[42830,42830],"mapped",[42831]],[[42831,42831],"valid"],[[42832,42832],"mapped",[42833]],[[42833,42833],"valid"],[[42834,42834],"mapped",[42835]],[[42835,42835],"valid"],[[42836,42836],"mapped",[42837]],[[42837,42837],"valid"],[[42838,42838],"mapped",[42839]],[[42839,42839],"valid"],[[42840,42840],"mapped",[42841]],[[42841,42841],"valid"],[[42842,42842],"mapped",[42843]],[[42843,42843],"valid"],[[42844,42844],"mapped",[42845]],[[42845,42845],"valid"],[[42846,42846],"mapped",[42847]],[[42847,42847],"valid"],[[42848,42848],"mapped",[42849]],[[42849,42849],"valid"],[[42850,42850],"mapped",[42851]],[[42851,42851],"valid"],[[42852,42852],"mapped",[42853]],[[42853,42853],"valid"],[[42854,42854],"mapped",[42855]],[[42855,42855],"valid"],[[42856,42856],"mapped",[42857]],[[42857,42857],"valid"],[[42858,42858],"mapped",[42859]],[[42859,42859],"valid"],[[42860,42860],"mapped",[42861]],[[42861,42861],"valid"],[[42862,42862],"mapped",[42863]],[[42863,42863],"valid"],[[42864,42864],"mapped",[42863]],[[42865,42872],"valid"],[[42873,42873],"mapped",[42874]],[[42874,42874],"valid"],[[42875,42875],"mapped",[42876]],[[42876,42876],"valid"],[[42877,42877],"mapped",[7545]],[[42878,42878],"mapped",[42879]],[[42879,42879],"valid"],[[42880,42880],"mapped",[42881]],[[42881,42881],"valid"],[[42882,42882],"mapped",[42883]],[[42883,42883],"valid"],[[42884,42884],"mapped",[42885]],[[42885,42885],"valid"],[[42886,42886],"mapped",[42887]],[[42887,42888],"valid"],[[42889,42890],"valid",[],"NV8"],[[42891,42891],"mapped",[42892]],[[42892,42892],"valid"],[[42893,42893],"mapped",[613]],[[42894,42894],"valid"],[[42895,42895],"valid"],[[42896,42896],"mapped",[42897]],[[42897,42897],"valid"],[[42898,42898],"mapped",[42899]],[[42899,42899],"valid"],[[42900,42901],"valid"],[[42902,42902],"mapped",[42903]],[[42903,42903],"valid"],[[42904,42904],"mapped",[42905]],[[42905,42905],"valid"],[[42906,42906],"mapped",[42907]],[[42907,42907],"valid"],[[42908,42908],"mapped",[42909]],[[42909,42909],"valid"],[[42910,42910],"mapped",[42911]],[[42911,42911],"valid"],[[42912,42912],"mapped",[42913]],[[42913,42913],"valid"],[[42914,42914],"mapped",[42915]],[[42915,42915],"valid"],[[42916,42916],"mapped",[42917]],[[42917,42917],"valid"],[[42918,42918],"mapped",[42919]],[[42919,42919],"valid"],[[42920,42920],"mapped",[42921]],[[42921,42921],"valid"],[[42922,42922],"mapped",[614]],[[42923,42923],"mapped",[604]],[[42924,42924],"mapped",[609]],[[42925,42925],"mapped",[620]],[[42926,42927],"disallowed"],[[42928,42928],"mapped",[670]],[[42929,42929],"mapped",[647]],[[42930,42930],"mapped",[669]],[[42931,42931],"mapped",[43859]],[[42932,42932],"mapped",[42933]],[[42933,42933],"valid"],[[42934,42934],"mapped",[42935]],[[42935,42935],"valid"],[[42936,42998],"disallowed"],[[42999,42999],"valid"],[[43000,43000],"mapped",[295]],[[43001,43001],"mapped",[339]],[[43002,43002],"valid"],[[43003,43007],"valid"],[[43008,43047],"valid"],[[43048,43051],"valid",[],"NV8"],[[43052,43055],"disallowed"],[[43056,43065],"valid",[],"NV8"],[[43066,43071],"disallowed"],[[43072,43123],"valid"],[[43124,43127],"valid",[],"NV8"],[[43128,43135],"disallowed"],[[43136,43204],"valid"],[[43205,43213],"disallowed"],[[43214,43215],"valid",[],"NV8"],[[43216,43225],"valid"],[[43226,43231],"disallowed"],[[43232,43255],"valid"],[[43256,43258],"valid",[],"NV8"],[[43259,43259],"valid"],[[43260,43260],"valid",[],"NV8"],[[43261,43261],"valid"],[[43262,43263],"disallowed"],[[43264,43309],"valid"],[[43310,43311],"valid",[],"NV8"],[[43312,43347],"valid"],[[43348,43358],"disallowed"],[[43359,43359],"valid",[],"NV8"],[[43360,43388],"valid",[],"NV8"],[[43389,43391],"disallowed"],[[43392,43456],"valid"],[[43457,43469],"valid",[],"NV8"],[[43470,43470],"disallowed"],[[43471,43481],"valid"],[[43482,43485],"disallowed"],[[43486,43487],"valid",[],"NV8"],[[43488,43518],"valid"],[[43519,43519],"disallowed"],[[43520,43574],"valid"],[[43575,43583],"disallowed"],[[43584,43597],"valid"],[[43598,43599],"disallowed"],[[43600,43609],"valid"],[[43610,43611],"disallowed"],[[43612,43615],"valid",[],"NV8"],[[43616,43638],"valid"],[[43639,43641],"valid",[],"NV8"],[[43642,43643],"valid"],[[43644,43647],"valid"],[[43648,43714],"valid"],[[43715,43738],"disallowed"],[[43739,43741],"valid"],[[43742,43743],"valid",[],"NV8"],[[43744,43759],"valid"],[[43760,43761],"valid",[],"NV8"],[[43762,43766],"valid"],[[43767,43776],"disallowed"],[[43777,43782],"valid"],[[43783,43784],"disallowed"],[[43785,43790],"valid"],[[43791,43792],"disallowed"],[[43793,43798],"valid"],[[43799,43807],"disallowed"],[[43808,43814],"valid"],[[43815,43815],"disallowed"],[[43816,43822],"valid"],[[43823,43823],"disallowed"],[[43824,43866],"valid"],[[43867,43867],"valid",[],"NV8"],[[43868,43868],"mapped",[42791]],[[43869,43869],"mapped",[43831]],[[43870,43870],"mapped",[619]],[[43871,43871],"mapped",[43858]],[[43872,43875],"valid"],[[43876,43877],"valid"],[[43878,43887],"disallowed"],[[43888,43888],"mapped",[5024]],[[43889,43889],"mapped",[5025]],[[43890,43890],"mapped",[5026]],[[43891,43891],"mapped",[5027]],[[43892,43892],"mapped",[5028]],[[43893,43893],"mapped",[5029]],[[43894,43894],"mapped",[5030]],[[43895,43895],"mapped",[5031]],[[43896,43896],"mapped",[5032]],[[43897,43897],"mapped",[5033]],[[43898,43898],"mapped",[5034]],[[43899,43899],"mapped",[5035]],[[43900,43900],"mapped",[5036]],[[43901,43901],"mapped",[5037]],[[43902,43902],"mapped",[5038]],[[43903,43903],"mapped",[5039]],[[43904,43904],"mapped",[5040]],[[43905,43905],"mapped",[5041]],[[43906,43906],"mapped",[5042]],[[43907,43907],"mapped",[5043]],[[43908,43908],"mapped",[5044]],[[43909,43909],"mapped",[5045]],[[43910,43910],"mapped",[5046]],[[43911,43911],"mapped",[5047]],[[43912,43912],"mapped",[5048]],[[43913,43913],"mapped",[5049]],[[43914,43914],"mapped",[5050]],[[43915,43915],"mapped",[5051]],[[43916,43916],"mapped",[5052]],[[43917,43917],"mapped",[5053]],[[43918,43918],"mapped",[5054]],[[43919,43919],"mapped",[5055]],[[43920,43920],"mapped",[5056]],[[43921,43921],"mapped",[5057]],[[43922,43922],"mapped",[5058]],[[43923,43923],"mapped",[5059]],[[43924,43924],"mapped",[5060]],[[43925,43925],"mapped",[5061]],[[43926,43926],"mapped",[5062]],[[43927,43927],"mapped",[5063]],[[43928,43928],"mapped",[5064]],[[43929,43929],"mapped",[5065]],[[43930,43930],"mapped",[5066]],[[43931,43931],"mapped",[5067]],[[43932,43932],"mapped",[5068]],[[43933,43933],"mapped",[5069]],[[43934,43934],"mapped",[5070]],[[43935,43935],"mapped",[5071]],[[43936,43936],"mapped",[5072]],[[43937,43937],"mapped",[5073]],[[43938,43938],"mapped",[5074]],[[43939,43939],"mapped",[5075]],[[43940,43940],"mapped",[5076]],[[43941,43941],"mapped",[5077]],[[43942,43942],"mapped",[5078]],[[43943,43943],"mapped",[5079]],[[43944,43944],"mapped",[5080]],[[43945,43945],"mapped",[5081]],[[43946,43946],"mapped",[5082]],[[43947,43947],"mapped",[5083]],[[43948,43948],"mapped",[5084]],[[43949,43949],"mapped",[5085]],[[43950,43950],"mapped",[5086]],[[43951,43951],"mapped",[5087]],[[43952,43952],"mapped",[5088]],[[43953,43953],"mapped",[5089]],[[43954,43954],"mapped",[5090]],[[43955,43955],"mapped",[5091]],[[43956,43956],"mapped",[5092]],[[43957,43957],"mapped",[5093]],[[43958,43958],"mapped",[5094]],[[43959,43959],"mapped",[5095]],[[43960,43960],"mapped",[5096]],[[43961,43961],"mapped",[5097]],[[43962,43962],"mapped",[5098]],[[43963,43963],"mapped",[5099]],[[43964,43964],"mapped",[5100]],[[43965,43965],"mapped",[5101]],[[43966,43966],"mapped",[5102]],[[43967,43967],"mapped",[5103]],[[43968,44010],"valid"],[[44011,44011],"valid",[],"NV8"],[[44012,44013],"valid"],[[44014,44015],"disallowed"],[[44016,44025],"valid"],[[44026,44031],"disallowed"],[[44032,55203],"valid"],[[55204,55215],"disallowed"],[[55216,55238],"valid",[],"NV8"],[[55239,55242],"disallowed"],[[55243,55291],"valid",[],"NV8"],[[55292,55295],"disallowed"],[[55296,57343],"disallowed"],[[57344,63743],"disallowed"],[[63744,63744],"mapped",[35912]],[[63745,63745],"mapped",[26356]],[[63746,63746],"mapped",[36554]],[[63747,63747],"mapped",[36040]],[[63748,63748],"mapped",[28369]],[[63749,63749],"mapped",[20018]],[[63750,63750],"mapped",[21477]],[[63751,63752],"mapped",[40860]],[[63753,63753],"mapped",[22865]],[[63754,63754],"mapped",[37329]],[[63755,63755],"mapped",[21895]],[[63756,63756],"mapped",[22856]],[[63757,63757],"mapped",[25078]],[[63758,63758],"mapped",[30313]],[[63759,63759],"mapped",[32645]],[[63760,63760],"mapped",[34367]],[[63761,63761],"mapped",[34746]],[[63762,63762],"mapped",[35064]],[[63763,63763],"mapped",[37007]],[[63764,63764],"mapped",[27138]],[[63765,63765],"mapped",[27931]],[[63766,63766],"mapped",[28889]],[[63767,63767],"mapped",[29662]],[[63768,63768],"mapped",[33853]],[[63769,63769],"mapped",[37226]],[[63770,63770],"mapped",[39409]],[[63771,63771],"mapped",[20098]],[[63772,63772],"mapped",[21365]],[[63773,63773],"mapped",[27396]],[[63774,63774],"mapped",[29211]],[[63775,63775],"mapped",[34349]],[[63776,63776],"mapped",[40478]],[[63777,63777],"mapped",[23888]],[[63778,63778],"mapped",[28651]],[[63779,63779],"mapped",[34253]],[[63780,63780],"mapped",[35172]],[[63781,63781],"mapped",[25289]],[[63782,63782],"mapped",[33240]],[[63783,63783],"mapped",[34847]],[[63784,63784],"mapped",[24266]],[[63785,63785],"mapped",[26391]],[[63786,63786],"mapped",[28010]],[[63787,63787],"mapped",[29436]],[[63788,63788],"mapped",[37070]],[[63789,63789],"mapped",[20358]],[[63790,63790],"mapped",[20919]],[[63791,63791],"mapped",[21214]],[[63792,63792],"mapped",[25796]],[[63793,63793],"mapped",[27347]],[[63794,63794],"mapped",[29200]],[[63795,63795],"mapped",[30439]],[[63796,63796],"mapped",[32769]],[[63797,63797],"mapped",[34310]],[[63798,63798],"mapped",[34396]],[[63799,63799],"mapped",[36335]],[[63800,63800],"mapped",[38706]],[[63801,63801],"mapped",[39791]],[[63802,63802],"mapped",[40442]],[[63803,63803],"mapped",[30860]],[[63804,63804],"mapped",[31103]],[[63805,63805],"mapped",[32160]],[[63806,63806],"mapped",[33737]],[[63807,63807],"mapped",[37636]],[[63808,63808],"mapped",[40575]],[[63809,63809],"mapped",[35542]],[[63810,63810],"mapped",[22751]],[[63811,63811],"mapped",[24324]],[[63812,63812],"mapped",[31840]],[[63813,63813],"mapped",[32894]],[[63814,63814],"mapped",[29282]],[[63815,63815],"mapped",[30922]],[[63816,63816],"mapped",[36034]],[[63817,63817],"mapped",[38647]],[[63818,63818],"mapped",[22744]],[[63819,63819],"mapped",[23650]],[[63820,63820],"mapped",[27155]],[[63821,63821],"mapped",[28122]],[[63822,63822],"mapped",[28431]],[[63823,63823],"mapped",[32047]],[[63824,63824],"mapped",[32311]],[[63825,63825],"mapped",[38475]],[[63826,63826],"mapped",[21202]],[[63827,63827],"mapped",[32907]],[[63828,63828],"mapped",[20956]],[[63829,63829],"mapped",[20940]],[[63830,63830],"mapped",[31260]],[[63831,63831],"mapped",[32190]],[[63832,63832],"mapped",[33777]],[[63833,63833],"mapped",[38517]],[[63834,63834],"mapped",[35712]],[[63835,63835],"mapped",[25295]],[[63836,63836],"mapped",[27138]],[[63837,63837],"mapped",[35582]],[[63838,63838],"mapped",[20025]],[[63839,63839],"mapped",[23527]],[[63840,63840],"mapped",[24594]],[[63841,63841],"mapped",[29575]],[[63842,63842],"mapped",[30064]],[[63843,63843],"mapped",[21271]],[[63844,63844],"mapped",[30971]],[[63845,63845],"mapped",[20415]],[[63846,63846],"mapped",[24489]],[[63847,63847],"mapped",[19981]],[[63848,63848],"mapped",[27852]],[[63849,63849],"mapped",[25976]],[[63850,63850],"mapped",[32034]],[[63851,63851],"mapped",[21443]],[[63852,63852],"mapped",[22622]],[[63853,63853],"mapped",[30465]],[[63854,63854],"mapped",[33865]],[[63855,63855],"mapped",[35498]],[[63856,63856],"mapped",[27578]],[[63857,63857],"mapped",[36784]],[[63858,63858],"mapped",[27784]],[[63859,63859],"mapped",[25342]],[[63860,63860],"mapped",[33509]],[[63861,63861],"mapped",[25504]],[[63862,63862],"mapped",[30053]],[[63863,63863],"mapped",[20142]],[[63864,63864],"mapped",[20841]],[[63865,63865],"mapped",[20937]],[[63866,63866],"mapped",[26753]],[[63867,63867],"mapped",[31975]],[[63868,63868],"mapped",[33391]],[[63869,63869],"mapped",[35538]],[[63870,63870],"mapped",[37327]],[[63871,63871],"mapped",[21237]],[[63872,63872],"mapped",[21570]],[[63873,63873],"mapped",[22899]],[[63874,63874],"mapped",[24300]],[[63875,63875],"mapped",[26053]],[[63876,63876],"mapped",[28670]],[[63877,63877],"mapped",[31018]],[[63878,63878],"mapped",[38317]],[[63879,63879],"mapped",[39530]],[[63880,63880],"mapped",[40599]],[[63881,63881],"mapped",[40654]],[[63882,63882],"mapped",[21147]],[[63883,63883],"mapped",[26310]],[[63884,63884],"mapped",[27511]],[[63885,63885],"mapped",[36706]],[[63886,63886],"mapped",[24180]],[[63887,63887],"mapped",[24976]],[[63888,63888],"mapped",[25088]],[[63889,63889],"mapped",[25754]],[[63890,63890],"mapped",[28451]],[[63891,63891],"mapped",[29001]],[[63892,63892],"mapped",[29833]],[[63893,63893],"mapped",[31178]],[[63894,63894],"mapped",[32244]],[[63895,63895],"mapped",[32879]],[[63896,63896],"mapped",[36646]],[[63897,63897],"mapped",[34030]],[[63898,63898],"mapped",[36899]],[[63899,63899],"mapped",[37706]],[[63900,63900],"mapped",[21015]],[[63901,63901],"mapped",[21155]],[[63902,63902],"mapped",[21693]],[[63903,63903],"mapped",[28872]],[[63904,63904],"mapped",[35010]],[[63905,63905],"mapped",[35498]],[[63906,63906],"mapped",[24265]],[[63907,63907],"mapped",[24565]],[[63908,63908],"mapped",[25467]],[[63909,63909],"mapped",[27566]],[[63910,63910],"mapped",[31806]],[[63911,63911],"mapped",[29557]],[[63912,63912],"mapped",[20196]],[[63913,63913],"mapped",[22265]],[[63914,63914],"mapped",[23527]],[[63915,63915],"mapped",[23994]],[[63916,63916],"mapped",[24604]],[[63917,63917],"mapped",[29618]],[[63918,63918],"mapped",[29801]],[[63919,63919],"mapped",[32666]],[[63920,63920],"mapped",[32838]],[[63921,63921],"mapped",[37428]],[[63922,63922],"mapped",[38646]],[[63923,63923],"mapped",[38728]],[[63924,63924],"mapped",[38936]],[[63925,63925],"mapped",[20363]],[[63926,63926],"mapped",[31150]],[[63927,63927],"mapped",[37300]],[[63928,63928],"mapped",[38584]],[[63929,63929],"mapped",[24801]],[[63930,63930],"mapped",[20102]],[[63931,63931],"mapped",[20698]],[[63932,63932],"mapped",[23534]],[[63933,63933],"mapped",[23615]],[[63934,63934],"mapped",[26009]],[[63935,63935],"mapped",[27138]],[[63936,63936],"mapped",[29134]],[[63937,63937],"mapped",[30274]],[[63938,63938],"mapped",[34044]],[[63939,63939],"mapped",[36988]],[[63940,63940],"mapped",[40845]],[[63941,63941],"mapped",[26248]],[[63942,63942],"mapped",[38446]],[[63943,63943],"mapped",[21129]],[[63944,63944],"mapped",[26491]],[[63945,63945],"mapped",[26611]],[[63946,63946],"mapped",[27969]],[[63947,63947],"mapped",[28316]],[[63948,63948],"mapped",[29705]],[[63949,63949],"mapped",[30041]],[[63950,63950],"mapped",[30827]],[[63951,63951],"mapped",[32016]],[[63952,63952],"mapped",[39006]],[[63953,63953],"mapped",[20845]],[[63954,63954],"mapped",[25134]],[[63955,63955],"mapped",[38520]],[[63956,63956],"mapped",[20523]],[[63957,63957],"mapped",[23833]],[[63958,63958],"mapped",[28138]],[[63959,63959],"mapped",[36650]],[[63960,63960],"mapped",[24459]],[[63961,63961],"mapped",[24900]],[[63962,63962],"mapped",[26647]],[[63963,63963],"mapped",[29575]],[[63964,63964],"mapped",[38534]],[[63965,63965],"mapped",[21033]],[[63966,63966],"mapped",[21519]],[[63967,63967],"mapped",[23653]],[[63968,63968],"mapped",[26131]],[[63969,63969],"mapped",[26446]],[[63970,63970],"mapped",[26792]],[[63971,63971],"mapped",[27877]],[[63972,63972],"mapped",[29702]],[[63973,63973],"mapped",[30178]],[[63974,63974],"mapped",[32633]],[[63975,63975],"mapped",[35023]],[[63976,63976],"mapped",[35041]],[[63977,63977],"mapped",[37324]],[[63978,63978],"mapped",[38626]],[[63979,63979],"mapped",[21311]],[[63980,63980],"mapped",[28346]],[[63981,63981],"mapped",[21533]],[[63982,63982],"mapped",[29136]],[[63983,63983],"mapped",[29848]],[[63984,63984],"mapped",[34298]],[[63985,63985],"mapped",[38563]],[[63986,63986],"mapped",[40023]],[[63987,63987],"mapped",[40607]],[[63988,63988],"mapped",[26519]],[[63989,63989],"mapped",[28107]],[[63990,63990],"mapped",[33256]],[[63991,63991],"mapped",[31435]],[[63992,63992],"mapped",[31520]],[[63993,63993],"mapped",[31890]],[[63994,63994],"mapped",[29376]],[[63995,63995],"mapped",[28825]],[[63996,63996],"mapped",[35672]],[[63997,63997],"mapped",[20160]],[[63998,63998],"mapped",[33590]],[[63999,63999],"mapped",[21050]],[[64000,64000],"mapped",[20999]],[[64001,64001],"mapped",[24230]],[[64002,64002],"mapped",[25299]],[[64003,64003],"mapped",[31958]],[[64004,64004],"mapped",[23429]],[[64005,64005],"mapped",[27934]],[[64006,64006],"mapped",[26292]],[[64007,64007],"mapped",[36667]],[[64008,64008],"mapped",[34892]],[[64009,64009],"mapped",[38477]],[[64010,64010],"mapped",[35211]],[[64011,64011],"mapped",[24275]],[[64012,64012],"mapped",[20800]],[[64013,64013],"mapped",[21952]],[[64014,64015],"valid"],[[64016,64016],"mapped",[22618]],[[64017,64017],"valid"],[[64018,64018],"mapped",[26228]],[[64019,64020],"valid"],[[64021,64021],"mapped",[20958]],[[64022,64022],"mapped",[29482]],[[64023,64023],"mapped",[30410]],[[64024,64024],"mapped",[31036]],[[64025,64025],"mapped",[31070]],[[64026,64026],"mapped",[31077]],[[64027,64027],"mapped",[31119]],[[64028,64028],"mapped",[38742]],[[64029,64029],"mapped",[31934]],[[64030,64030],"mapped",[32701]],[[64031,64031],"valid"],[[64032,64032],"mapped",[34322]],[[64033,64033],"valid"],[[64034,64034],"mapped",[35576]],[[64035,64036],"valid"],[[64037,64037],"mapped",[36920]],[[64038,64038],"mapped",[37117]],[[64039,64041],"valid"],[[64042,64042],"mapped",[39151]],[[64043,64043],"mapped",[39164]],[[64044,64044],"mapped",[39208]],[[64045,64045],"mapped",[40372]],[[64046,64046],"mapped",[37086]],[[64047,64047],"mapped",[38583]],[[64048,64048],"mapped",[20398]],[[64049,64049],"mapped",[20711]],[[64050,64050],"mapped",[20813]],[[64051,64051],"mapped",[21193]],[[64052,64052],"mapped",[21220]],[[64053,64053],"mapped",[21329]],[[64054,64054],"mapped",[21917]],[[64055,64055],"mapped",[22022]],[[64056,64056],"mapped",[22120]],[[64057,64057],"mapped",[22592]],[[64058,64058],"mapped",[22696]],[[64059,64059],"mapped",[23652]],[[64060,64060],"mapped",[23662]],[[64061,64061],"mapped",[24724]],[[64062,64062],"mapped",[24936]],[[64063,64063],"mapped",[24974]],[[64064,64064],"mapped",[25074]],[[64065,64065],"mapped",[25935]],[[64066,64066],"mapped",[26082]],[[64067,64067],"mapped",[26257]],[[64068,64068],"mapped",[26757]],[[64069,64069],"mapped",[28023]],[[64070,64070],"mapped",[28186]],[[64071,64071],"mapped",[28450]],[[64072,64072],"mapped",[29038]],[[64073,64073],"mapped",[29227]],[[64074,64074],"mapped",[29730]],[[64075,64075],"mapped",[30865]],[[64076,64076],"mapped",[31038]],[[64077,64077],"mapped",[31049]],[[64078,64078],"mapped",[31048]],[[64079,64079],"mapped",[31056]],[[64080,64080],"mapped",[31062]],[[64081,64081],"mapped",[31069]],[[64082,64082],"mapped",[31117]],[[64083,64083],"mapped",[31118]],[[64084,64084],"mapped",[31296]],[[64085,64085],"mapped",[31361]],[[64086,64086],"mapped",[31680]],[[64087,64087],"mapped",[32244]],[[64088,64088],"mapped",[32265]],[[64089,64089],"mapped",[32321]],[[64090,64090],"mapped",[32626]],[[64091,64091],"mapped",[32773]],[[64092,64092],"mapped",[33261]],[[64093,64094],"mapped",[33401]],[[64095,64095],"mapped",[33879]],[[64096,64096],"mapped",[35088]],[[64097,64097],"mapped",[35222]],[[64098,64098],"mapped",[35585]],[[64099,64099],"mapped",[35641]],[[64100,64100],"mapped",[36051]],[[64101,64101],"mapped",[36104]],[[64102,64102],"mapped",[36790]],[[64103,64103],"mapped",[36920]],[[64104,64104],"mapped",[38627]],[[64105,64105],"mapped",[38911]],[[64106,64106],"mapped",[38971]],[[64107,64107],"mapped",[24693]],[[64108,64108],"mapped",[148206]],[[64109,64109],"mapped",[33304]],[[64110,64111],"disallowed"],[[64112,64112],"mapped",[20006]],[[64113,64113],"mapped",[20917]],[[64114,64114],"mapped",[20840]],[[64115,64115],"mapped",[20352]],[[64116,64116],"mapped",[20805]],[[64117,64117],"mapped",[20864]],[[64118,64118],"mapped",[21191]],[[64119,64119],"mapped",[21242]],[[64120,64120],"mapped",[21917]],[[64121,64121],"mapped",[21845]],[[64122,64122],"mapped",[21913]],[[64123,64123],"mapped",[21986]],[[64124,64124],"mapped",[22618]],[[64125,64125],"mapped",[22707]],[[64126,64126],"mapped",[22852]],[[64127,64127],"mapped",[22868]],[[64128,64128],"mapped",[23138]],[[64129,64129],"mapped",[23336]],[[64130,64130],"mapped",[24274]],[[64131,64131],"mapped",[24281]],[[64132,64132],"mapped",[24425]],[[64133,64133],"mapped",[24493]],[[64134,64134],"mapped",[24792]],[[64135,64135],"mapped",[24910]],[[64136,64136],"mapped",[24840]],[[64137,64137],"mapped",[24974]],[[64138,64138],"mapped",[24928]],[[64139,64139],"mapped",[25074]],[[64140,64140],"mapped",[25140]],[[64141,64141],"mapped",[25540]],[[64142,64142],"mapped",[25628]],[[64143,64143],"mapped",[25682]],[[64144,64144],"mapped",[25942]],[[64145,64145],"mapped",[26228]],[[64146,64146],"mapped",[26391]],[[64147,64147],"mapped",[26395]],[[64148,64148],"mapped",[26454]],[[64149,64149],"mapped",[27513]],[[64150,64150],"mapped",[27578]],[[64151,64151],"mapped",[27969]],[[64152,64152],"mapped",[28379]],[[64153,64153],"mapped",[28363]],[[64154,64154],"mapped",[28450]],[[64155,64155],"mapped",[28702]],[[64156,64156],"mapped",[29038]],[[64157,64157],"mapped",[30631]],[[64158,64158],"mapped",[29237]],[[64159,64159],"mapped",[29359]],[[64160,64160],"mapped",[29482]],[[64161,64161],"mapped",[29809]],[[64162,64162],"mapped",[29958]],[[64163,64163],"mapped",[30011]],[[64164,64164],"mapped",[30237]],[[64165,64165],"mapped",[30239]],[[64166,64166],"mapped",[30410]],[[64167,64167],"mapped",[30427]],[[64168,64168],"mapped",[30452]],[[64169,64169],"mapped",[30538]],[[64170,64170],"mapped",[30528]],[[64171,64171],"mapped",[30924]],[[64172,64172],"mapped",[31409]],[[64173,64173],"mapped",[31680]],[[64174,64174],"mapped",[31867]],[[64175,64175],"mapped",[32091]],[[64176,64176],"mapped",[32244]],[[64177,64177],"mapped",[32574]],[[64178,64178],"mapped",[32773]],[[64179,64179],"mapped",[33618]],[[64180,64180],"mapped",[33775]],[[64181,64181],"mapped",[34681]],[[64182,64182],"mapped",[35137]],[[64183,64183],"mapped",[35206]],[[64184,64184],"mapped",[35222]],[[64185,64185],"mapped",[35519]],[[64186,64186],"mapped",[35576]],[[64187,64187],"mapped",[35531]],[[64188,64188],"mapped",[35585]],[[64189,64189],"mapped",[35582]],[[64190,64190],"mapped",[35565]],[[64191,64191],"mapped",[35641]],[[64192,64192],"mapped",[35722]],[[64193,64193],"mapped",[36104]],[[64194,64194],"mapped",[36664]],[[64195,64195],"mapped",[36978]],[[64196,64196],"mapped",[37273]],[[64197,64197],"mapped",[37494]],[[64198,64198],"mapped",[38524]],[[64199,64199],"mapped",[38627]],[[64200,64200],"mapped",[38742]],[[64201,64201],"mapped",[38875]],[[64202,64202],"mapped",[38911]],[[64203,64203],"mapped",[38923]],[[64204,64204],"mapped",[38971]],[[64205,64205],"mapped",[39698]],[[64206,64206],"mapped",[40860]],[[64207,64207],"mapped",[141386]],[[64208,64208],"mapped",[141380]],[[64209,64209],"mapped",[144341]],[[64210,64210],"mapped",[15261]],[[64211,64211],"mapped",[16408]],[[64212,64212],"mapped",[16441]],[[64213,64213],"mapped",[152137]],[[64214,64214],"mapped",[154832]],[[64215,64215],"mapped",[163539]],[[64216,64216],"mapped",[40771]],[[64217,64217],"mapped",[40846]],[[64218,64255],"disallowed"],[[64256,64256],"mapped",[102,102]],[[64257,64257],"mapped",[102,105]],[[64258,64258],"mapped",[102,108]],[[64259,64259],"mapped",[102,102,105]],[[64260,64260],"mapped",[102,102,108]],[[64261,64262],"mapped",[115,116]],[[64263,64274],"disallowed"],[[64275,64275],"mapped",[1396,1398]],[[64276,64276],"mapped",[1396,1381]],[[64277,64277],"mapped",[1396,1387]],[[64278,64278],"mapped",[1406,1398]],[[64279,64279],"mapped",[1396,1389]],[[64280,64284],"disallowed"],[[64285,64285],"mapped",[1497,1460]],[[64286,64286],"valid"],[[64287,64287],"mapped",[1522,1463]],[[64288,64288],"mapped",[1506]],[[64289,64289],"mapped",[1488]],[[64290,64290],"mapped",[1491]],[[64291,64291],"mapped",[1492]],[[64292,64292],"mapped",[1499]],[[64293,64293],"mapped",[1500]],[[64294,64294],"mapped",[1501]],[[64295,64295],"mapped",[1512]],[[64296,64296],"mapped",[1514]],[[64297,64297],"disallowed_STD3_mapped",[43]],[[64298,64298],"mapped",[1513,1473]],[[64299,64299],"mapped",[1513,1474]],[[64300,64300],"mapped",[1513,1468,1473]],[[64301,64301],"mapped",[1513,1468,1474]],[[64302,64302],"mapped",[1488,1463]],[[64303,64303],"mapped",[1488,1464]],[[64304,64304],"mapped",[1488,1468]],[[64305,64305],"mapped",[1489,1468]],[[64306,64306],"mapped",[1490,1468]],[[64307,64307],"mapped",[1491,1468]],[[64308,64308],"mapped",[1492,1468]],[[64309,64309],"mapped",[1493,1468]],[[64310,64310],"mapped",[1494,1468]],[[64311,64311],"disallowed"],[[64312,64312],"mapped",[1496,1468]],[[64313,64313],"mapped",[1497,1468]],[[64314,64314],"mapped",[1498,1468]],[[64315,64315],"mapped",[1499,1468]],[[64316,64316],"mapped",[1500,1468]],[[64317,64317],"disallowed"],[[64318,64318],"mapped",[1502,1468]],[[64319,64319],"disallowed"],[[64320,64320],"mapped",[1504,1468]],[[64321,64321],"mapped",[1505,1468]],[[64322,64322],"disallowed"],[[64323,64323],"mapped",[1507,1468]],[[64324,64324],"mapped",[1508,1468]],[[64325,64325],"disallowed"],[[64326,64326],"mapped",[1510,1468]],[[64327,64327],"mapped",[1511,1468]],[[64328,64328],"mapped",[1512,1468]],[[64329,64329],"mapped",[1513,1468]],[[64330,64330],"mapped",[1514,1468]],[[64331,64331],"mapped",[1493,1465]],[[64332,64332],"mapped",[1489,1471]],[[64333,64333],"mapped",[1499,1471]],[[64334,64334],"mapped",[1508,1471]],[[64335,64335],"mapped",[1488,1500]],[[64336,64337],"mapped",[1649]],[[64338,64341],"mapped",[1659]],[[64342,64345],"mapped",[1662]],[[64346,64349],"mapped",[1664]],[[64350,64353],"mapped",[1658]],[[64354,64357],"mapped",[1663]],[[64358,64361],"mapped",[1657]],[[64362,64365],"mapped",[1700]],[[64366,64369],"mapped",[1702]],[[64370,64373],"mapped",[1668]],[[64374,64377],"mapped",[1667]],[[64378,64381],"mapped",[1670]],[[64382,64385],"mapped",[1671]],[[64386,64387],"mapped",[1677]],[[64388,64389],"mapped",[1676]],[[64390,64391],"mapped",[1678]],[[64392,64393],"mapped",[1672]],[[64394,64395],"mapped",[1688]],[[64396,64397],"mapped",[1681]],[[64398,64401],"mapped",[1705]],[[64402,64405],"mapped",[1711]],[[64406,64409],"mapped",[1715]],[[64410,64413],"mapped",[1713]],[[64414,64415],"mapped",[1722]],[[64416,64419],"mapped",[1723]],[[64420,64421],"mapped",[1728]],[[64422,64425],"mapped",[1729]],[[64426,64429],"mapped",[1726]],[[64430,64431],"mapped",[1746]],[[64432,64433],"mapped",[1747]],[[64434,64449],"valid",[],"NV8"],[[64450,64466],"disallowed"],[[64467,64470],"mapped",[1709]],[[64471,64472],"mapped",[1735]],[[64473,64474],"mapped",[1734]],[[64475,64476],"mapped",[1736]],[[64477,64477],"mapped",[1735,1652]],[[64478,64479],"mapped",[1739]],[[64480,64481],"mapped",[1733]],[[64482,64483],"mapped",[1737]],[[64484,64487],"mapped",[1744]],[[64488,64489],"mapped",[1609]],[[64490,64491],"mapped",[1574,1575]],[[64492,64493],"mapped",[1574,1749]],[[64494,64495],"mapped",[1574,1608]],[[64496,64497],"mapped",[1574,1735]],[[64498,64499],"mapped",[1574,1734]],[[64500,64501],"mapped",[1574,1736]],[[64502,64504],"mapped",[1574,1744]],[[64505,64507],"mapped",[1574,1609]],[[64508,64511],"mapped",[1740]],[[64512,64512],"mapped",[1574,1580]],[[64513,64513],"mapped",[1574,1581]],[[64514,64514],"mapped",[1574,1605]],[[64515,64515],"mapped",[1574,1609]],[[64516,64516],"mapped",[1574,1610]],[[64517,64517],"mapped",[1576,1580]],[[64518,64518],"mapped",[1576,1581]],[[64519,64519],"mapped",[1576,1582]],[[64520,64520],"mapped",[1576,1605]],[[64521,64521],"mapped",[1576,1609]],[[64522,64522],"mapped",[1576,1610]],[[64523,64523],"mapped",[1578,1580]],[[64524,64524],"mapped",[1578,1581]],[[64525,64525],"mapped",[1578,1582]],[[64526,64526],"mapped",[1578,1605]],[[64527,64527],"mapped",[1578,1609]],[[64528,64528],"mapped",[1578,1610]],[[64529,64529],"mapped",[1579,1580]],[[64530,64530],"mapped",[1579,1605]],[[64531,64531],"mapped",[1579,1609]],[[64532,64532],"mapped",[1579,1610]],[[64533,64533],"mapped",[1580,1581]],[[64534,64534],"mapped",[1580,1605]],[[64535,64535],"mapped",[1581,1580]],[[64536,64536],"mapped",[1581,1605]],[[64537,64537],"mapped",[1582,1580]],[[64538,64538],"mapped",[1582,1581]],[[64539,64539],"mapped",[1582,1605]],[[64540,64540],"mapped",[1587,1580]],[[64541,64541],"mapped",[1587,1581]],[[64542,64542],"mapped",[1587,1582]],[[64543,64543],"mapped",[1587,1605]],[[64544,64544],"mapped",[1589,1581]],[[64545,64545],"mapped",[1589,1605]],[[64546,64546],"mapped",[1590,1580]],[[64547,64547],"mapped",[1590,1581]],[[64548,64548],"mapped",[1590,1582]],[[64549,64549],"mapped",[1590,1605]],[[64550,64550],"mapped",[1591,1581]],[[64551,64551],"mapped",[1591,1605]],[[64552,64552],"mapped",[1592,1605]],[[64553,64553],"mapped",[1593,1580]],[[64554,64554],"mapped",[1593,1605]],[[64555,64555],"mapped",[1594,1580]],[[64556,64556],"mapped",[1594,1605]],[[64557,64557],"mapped",[1601,1580]],[[64558,64558],"mapped",[1601,1581]],[[64559,64559],"mapped",[1601,1582]],[[64560,64560],"mapped",[1601,1605]],[[64561,64561],"mapped",[1601,1609]],[[64562,64562],"mapped",[1601,1610]],[[64563,64563],"mapped",[1602,1581]],[[64564,64564],"mapped",[1602,1605]],[[64565,64565],"mapped",[1602,1609]],[[64566,64566],"mapped",[1602,1610]],[[64567,64567],"mapped",[1603,1575]],[[64568,64568],"mapped",[1603,1580]],[[64569,64569],"mapped",[1603,1581]],[[64570,64570],"mapped",[1603,1582]],[[64571,64571],"mapped",[1603,1604]],[[64572,64572],"mapped",[1603,1605]],[[64573,64573],"mapped",[1603,1609]],[[64574,64574],"mapped",[1603,1610]],[[64575,64575],"mapped",[1604,1580]],[[64576,64576],"mapped",[1604,1581]],[[64577,64577],"mapped",[1604,1582]],[[64578,64578],"mapped",[1604,1605]],[[64579,64579],"mapped",[1604,1609]],[[64580,64580],"mapped",[1604,1610]],[[64581,64581],"mapped",[1605,1580]],[[64582,64582],"mapped",[1605,1581]],[[64583,64583],"mapped",[1605,1582]],[[64584,64584],"mapped",[1605,1605]],[[64585,64585],"mapped",[1605,1609]],[[64586,64586],"mapped",[1605,1610]],[[64587,64587],"mapped",[1606,1580]],[[64588,64588],"mapped",[1606,1581]],[[64589,64589],"mapped",[1606,1582]],[[64590,64590],"mapped",[1606,1605]],[[64591,64591],"mapped",[1606,1609]],[[64592,64592],"mapped",[1606,1610]],[[64593,64593],"mapped",[1607,1580]],[[64594,64594],"mapped",[1607,1605]],[[64595,64595],"mapped",[1607,1609]],[[64596,64596],"mapped",[1607,1610]],[[64597,64597],"mapped",[1610,1580]],[[64598,64598],"mapped",[1610,1581]],[[64599,64599],"mapped",[1610,1582]],[[64600,64600],"mapped",[1610,1605]],[[64601,64601],"mapped",[1610,1609]],[[64602,64602],"mapped",[1610,1610]],[[64603,64603],"mapped",[1584,1648]],[[64604,64604],"mapped",[1585,1648]],[[64605,64605],"mapped",[1609,1648]],[[64606,64606],"disallowed_STD3_mapped",[32,1612,1617]],[[64607,64607],"disallowed_STD3_mapped",[32,1613,1617]],[[64608,64608],"disallowed_STD3_mapped",[32,1614,1617]],[[64609,64609],"disallowed_STD3_mapped",[32,1615,1617]],[[64610,64610],"disallowed_STD3_mapped",[32,1616,1617]],[[64611,64611],"disallowed_STD3_mapped",[32,1617,1648]],[[64612,64612],"mapped",[1574,1585]],[[64613,64613],"mapped",[1574,1586]],[[64614,64614],"mapped",[1574,1605]],[[64615,64615],"mapped",[1574,1606]],[[64616,64616],"mapped",[1574,1609]],[[64617,64617],"mapped",[1574,1610]],[[64618,64618],"mapped",[1576,1585]],[[64619,64619],"mapped",[1576,1586]],[[64620,64620],"mapped",[1576,1605]],[[64621,64621],"mapped",[1576,1606]],[[64622,64622],"mapped",[1576,1609]],[[64623,64623],"mapped",[1576,1610]],[[64624,64624],"mapped",[1578,1585]],[[64625,64625],"mapped",[1578,1586]],[[64626,64626],"mapped",[1578,1605]],[[64627,64627],"mapped",[1578,1606]],[[64628,64628],"mapped",[1578,1609]],[[64629,64629],"mapped",[1578,1610]],[[64630,64630],"mapped",[1579,1585]],[[64631,64631],"mapped",[1579,1586]],[[64632,64632],"mapped",[1579,1605]],[[64633,64633],"mapped",[1579,1606]],[[64634,64634],"mapped",[1579,1609]],[[64635,64635],"mapped",[1579,1610]],[[64636,64636],"mapped",[1601,1609]],[[64637,64637],"mapped",[1601,1610]],[[64638,64638],"mapped",[1602,1609]],[[64639,64639],"mapped",[1602,1610]],[[64640,64640],"mapped",[1603,1575]],[[64641,64641],"mapped",[1603,1604]],[[64642,64642],"mapped",[1603,1605]],[[64643,64643],"mapped",[1603,1609]],[[64644,64644],"mapped",[1603,1610]],[[64645,64645],"mapped",[1604,1605]],[[64646,64646],"mapped",[1604,1609]],[[64647,64647],"mapped",[1604,1610]],[[64648,64648],"mapped",[1605,1575]],[[64649,64649],"mapped",[1605,1605]],[[64650,64650],"mapped",[1606,1585]],[[64651,64651],"mapped",[1606,1586]],[[64652,64652],"mapped",[1606,1605]],[[64653,64653],"mapped",[1606,1606]],[[64654,64654],"mapped",[1606,1609]],[[64655,64655],"mapped",[1606,1610]],[[64656,64656],"mapped",[1609,1648]],[[64657,64657],"mapped",[1610,1585]],[[64658,64658],"mapped",[1610,1586]],[[64659,64659],"mapped",[1610,1605]],[[64660,64660],"mapped",[1610,1606]],[[64661,64661],"mapped",[1610,1609]],[[64662,64662],"mapped",[1610,1610]],[[64663,64663],"mapped",[1574,1580]],[[64664,64664],"mapped",[1574,1581]],[[64665,64665],"mapped",[1574,1582]],[[64666,64666],"mapped",[1574,1605]],[[64667,64667],"mapped",[1574,1607]],[[64668,64668],"mapped",[1576,1580]],[[64669,64669],"mapped",[1576,1581]],[[64670,64670],"mapped",[1576,1582]],[[64671,64671],"mapped",[1576,1605]],[[64672,64672],"mapped",[1576,1607]],[[64673,64673],"mapped",[1578,1580]],[[64674,64674],"mapped",[1578,1581]],[[64675,64675],"mapped",[1578,1582]],[[64676,64676],"mapped",[1578,1605]],[[64677,64677],"mapped",[1578,1607]],[[64678,64678],"mapped",[1579,1605]],[[64679,64679],"mapped",[1580,1581]],[[64680,64680],"mapped",[1580,1605]],[[64681,64681],"mapped",[1581,1580]],[[64682,64682],"mapped",[1581,1605]],[[64683,64683],"mapped",[1582,1580]],[[64684,64684],"mapped",[1582,1605]],[[64685,64685],"mapped",[1587,1580]],[[64686,64686],"mapped",[1587,1581]],[[64687,64687],"mapped",[1587,1582]],[[64688,64688],"mapped",[1587,1605]],[[64689,64689],"mapped",[1589,1581]],[[64690,64690],"mapped",[1589,1582]],[[64691,64691],"mapped",[1589,1605]],[[64692,64692],"mapped",[1590,1580]],[[64693,64693],"mapped",[1590,1581]],[[64694,64694],"mapped",[1590,1582]],[[64695,64695],"mapped",[1590,1605]],[[64696,64696],"mapped",[1591,1581]],[[64697,64697],"mapped",[1592,1605]],[[64698,64698],"mapped",[1593,1580]],[[64699,64699],"mapped",[1593,1605]],[[64700,64700],"mapped",[1594,1580]],[[64701,64701],"mapped",[1594,1605]],[[64702,64702],"mapped",[1601,1580]],[[64703,64703],"mapped",[1601,1581]],[[64704,64704],"mapped",[1601,1582]],[[64705,64705],"mapped",[1601,1605]],[[64706,64706],"mapped",[1602,1581]],[[64707,64707],"mapped",[1602,1605]],[[64708,64708],"mapped",[1603,1580]],[[64709,64709],"mapped",[1603,1581]],[[64710,64710],"mapped",[1603,1582]],[[64711,64711],"mapped",[1603,1604]],[[64712,64712],"mapped",[1603,1605]],[[64713,64713],"mapped",[1604,1580]],[[64714,64714],"mapped",[1604,1581]],[[64715,64715],"mapped",[1604,1582]],[[64716,64716],"mapped",[1604,1605]],[[64717,64717],"mapped",[1604,1607]],[[64718,64718],"mapped",[1605,1580]],[[64719,64719],"mapped",[1605,1581]],[[64720,64720],"mapped",[1605,1582]],[[64721,64721],"mapped",[1605,1605]],[[64722,64722],"mapped",[1606,1580]],[[64723,64723],"mapped",[1606,1581]],[[64724,64724],"mapped",[1606,1582]],[[64725,64725],"mapped",[1606,1605]],[[64726,64726],"mapped",[1606,1607]],[[64727,64727],"mapped",[1607,1580]],[[64728,64728],"mapped",[1607,1605]],[[64729,64729],"mapped",[1607,1648]],[[64730,64730],"mapped",[1610,1580]],[[64731,64731],"mapped",[1610,1581]],[[64732,64732],"mapped",[1610,1582]],[[64733,64733],"mapped",[1610,1605]],[[64734,64734],"mapped",[1610,1607]],[[64735,64735],"mapped",[1574,1605]],[[64736,64736],"mapped",[1574,1607]],[[64737,64737],"mapped",[1576,1605]],[[64738,64738],"mapped",[1576,1607]],[[64739,64739],"mapped",[1578,1605]],[[64740,64740],"mapped",[1578,1607]],[[64741,64741],"mapped",[1579,1605]],[[64742,64742],"mapped",[1579,1607]],[[64743,64743],"mapped",[1587,1605]],[[64744,64744],"mapped",[1587,1607]],[[64745,64745],"mapped",[1588,1605]],[[64746,64746],"mapped",[1588,1607]],[[64747,64747],"mapped",[1603,1604]],[[64748,64748],"mapped",[1603,1605]],[[64749,64749],"mapped",[1604,1605]],[[64750,64750],"mapped",[1606,1605]],[[64751,64751],"mapped",[1606,1607]],[[64752,64752],"mapped",[1610,1605]],[[64753,64753],"mapped",[1610,1607]],[[64754,64754],"mapped",[1600,1614,1617]],[[64755,64755],"mapped",[1600,1615,1617]],[[64756,64756],"mapped",[1600,1616,1617]],[[64757,64757],"mapped",[1591,1609]],[[64758,64758],"mapped",[1591,1610]],[[64759,64759],"mapped",[1593,1609]],[[64760,64760],"mapped",[1593,1610]],[[64761,64761],"mapped",[1594,1609]],[[64762,64762],"mapped",[1594,1610]],[[64763,64763],"mapped",[1587,1609]],[[64764,64764],"mapped",[1587,1610]],[[64765,64765],"mapped",[1588,1609]],[[64766,64766],"mapped",[1588,1610]],[[64767,64767],"mapped",[1581,1609]],[[64768,64768],"mapped",[1581,1610]],[[64769,64769],"mapped",[1580,1609]],[[64770,64770],"mapped",[1580,1610]],[[64771,64771],"mapped",[1582,1609]],[[64772,64772],"mapped",[1582,1610]],[[64773,64773],"mapped",[1589,1609]],[[64774,64774],"mapped",[1589,1610]],[[64775,64775],"mapped",[1590,1609]],[[64776,64776],"mapped",[1590,1610]],[[64777,64777],"mapped",[1588,1580]],[[64778,64778],"mapped",[1588,1581]],[[64779,64779],"mapped",[1588,1582]],[[64780,64780],"mapped",[1588,1605]],[[64781,64781],"mapped",[1588,1585]],[[64782,64782],"mapped",[1587,1585]],[[64783,64783],"mapped",[1589,1585]],[[64784,64784],"mapped",[1590,1585]],[[64785,64785],"mapped",[1591,1609]],[[64786,64786],"mapped",[1591,1610]],[[64787,64787],"mapped",[1593,1609]],[[64788,64788],"mapped",[1593,1610]],[[64789,64789],"mapped",[1594,1609]],[[64790,64790],"mapped",[1594,1610]],[[64791,64791],"mapped",[1587,1609]],[[64792,64792],"mapped",[1587,1610]],[[64793,64793],"mapped",[1588,1609]],[[64794,64794],"mapped",[1588,1610]],[[64795,64795],"mapped",[1581,1609]],[[64796,64796],"mapped",[1581,1610]],[[64797,64797],"mapped",[1580,1609]],[[64798,64798],"mapped",[1580,1610]],[[64799,64799],"mapped",[1582,1609]],[[64800,64800],"mapped",[1582,1610]],[[64801,64801],"mapped",[1589,1609]],[[64802,64802],"mapped",[1589,1610]],[[64803,64803],"mapped",[1590,1609]],[[64804,64804],"mapped",[1590,1610]],[[64805,64805],"mapped",[1588,1580]],[[64806,64806],"mapped",[1588,1581]],[[64807,64807],"mapped",[1588,1582]],[[64808,64808],"mapped",[1588,1605]],[[64809,64809],"mapped",[1588,1585]],[[64810,64810],"mapped",[1587,1585]],[[64811,64811],"mapped",[1589,1585]],[[64812,64812],"mapped",[1590,1585]],[[64813,64813],"mapped",[1588,1580]],[[64814,64814],"mapped",[1588,1581]],[[64815,64815],"mapped",[1588,1582]],[[64816,64816],"mapped",[1588,1605]],[[64817,64817],"mapped",[1587,1607]],[[64818,64818],"mapped",[1588,1607]],[[64819,64819],"mapped",[1591,1605]],[[64820,64820],"mapped",[1587,1580]],[[64821,64821],"mapped",[1587,1581]],[[64822,64822],"mapped",[1587,1582]],[[64823,64823],"mapped",[1588,1580]],[[64824,64824],"mapped",[1588,1581]],[[64825,64825],"mapped",[1588,1582]],[[64826,64826],"mapped",[1591,1605]],[[64827,64827],"mapped",[1592,1605]],[[64828,64829],"mapped",[1575,1611]],[[64830,64831],"valid",[],"NV8"],[[64832,64847],"disallowed"],[[64848,64848],"mapped",[1578,1580,1605]],[[64849,64850],"mapped",[1578,1581,1580]],[[64851,64851],"mapped",[1578,1581,1605]],[[64852,64852],"mapped",[1578,1582,1605]],[[64853,64853],"mapped",[1578,1605,1580]],[[64854,64854],"mapped",[1578,1605,1581]],[[64855,64855],"mapped",[1578,1605,1582]],[[64856,64857],"mapped",[1580,1605,1581]],[[64858,64858],"mapped",[1581,1605,1610]],[[64859,64859],"mapped",[1581,1605,1609]],[[64860,64860],"mapped",[1587,1581,1580]],[[64861,64861],"mapped",[1587,1580,1581]],[[64862,64862],"mapped",[1587,1580,1609]],[[64863,64864],"mapped",[1587,1605,1581]],[[64865,64865],"mapped",[1587,1605,1580]],[[64866,64867],"mapped",[1587,1605,1605]],[[64868,64869],"mapped",[1589,1581,1581]],[[64870,64870],"mapped",[1589,1605,1605]],[[64871,64872],"mapped",[1588,1581,1605]],[[64873,64873],"mapped",[1588,1580,1610]],[[64874,64875],"mapped",[1588,1605,1582]],[[64876,64877],"mapped",[1588,1605,1605]],[[64878,64878],"mapped",[1590,1581,1609]],[[64879,64880],"mapped",[1590,1582,1605]],[[64881,64882],"mapped",[1591,1605,1581]],[[64883,64883],"mapped",[1591,1605,1605]],[[64884,64884],"mapped",[1591,1605,1610]],[[64885,64885],"mapped",[1593,1580,1605]],[[64886,64887],"mapped",[1593,1605,1605]],[[64888,64888],"mapped",[1593,1605,1609]],[[64889,64889],"mapped",[1594,1605,1605]],[[64890,64890],"mapped",[1594,1605,1610]],[[64891,64891],"mapped",[1594,1605,1609]],[[64892,64893],"mapped",[1601,1582,1605]],[[64894,64894],"mapped",[1602,1605,1581]],[[64895,64895],"mapped",[1602,1605,1605]],[[64896,64896],"mapped",[1604,1581,1605]],[[64897,64897],"mapped",[1604,1581,1610]],[[64898,64898],"mapped",[1604,1581,1609]],[[64899,64900],"mapped",[1604,1580,1580]],[[64901,64902],"mapped",[1604,1582,1605]],[[64903,64904],"mapped",[1604,1605,1581]],[[64905,64905],"mapped",[1605,1581,1580]],[[64906,64906],"mapped",[1605,1581,1605]],[[64907,64907],"mapped",[1605,1581,1610]],[[64908,64908],"mapped",[1605,1580,1581]],[[64909,64909],"mapped",[1605,1580,1605]],[[64910,64910],"mapped",[1605,1582,1580]],[[64911,64911],"mapped",[1605,1582,1605]],[[64912,64913],"disallowed"],[[64914,64914],"mapped",[1605,1580,1582]],[[64915,64915],"mapped",[1607,1605,1580]],[[64916,64916],"mapped",[1607,1605,1605]],[[64917,64917],"mapped",[1606,1581,1605]],[[64918,64918],"mapped",[1606,1581,1609]],[[64919,64920],"mapped",[1606,1580,1605]],[[64921,64921],"mapped",[1606,1580,1609]],[[64922,64922],"mapped",[1606,1605,1610]],[[64923,64923],"mapped",[1606,1605,1609]],[[64924,64925],"mapped",[1610,1605,1605]],[[64926,64926],"mapped",[1576,1582,1610]],[[64927,64927],"mapped",[1578,1580,1610]],[[64928,64928],"mapped",[1578,1580,1609]],[[64929,64929],"mapped",[1578,1582,1610]],[[64930,64930],"mapped",[1578,1582,1609]],[[64931,64931],"mapped",[1578,1605,1610]],[[64932,64932],"mapped",[1578,1605,1609]],[[64933,64933],"mapped",[1580,1605,1610]],[[64934,64934],"mapped",[1580,1581,1609]],[[64935,64935],"mapped",[1580,1605,1609]],[[64936,64936],"mapped",[1587,1582,1609]],[[64937,64937],"mapped",[1589,1581,1610]],[[64938,64938],"mapped",[1588,1581,1610]],[[64939,64939],"mapped",[1590,1581,1610]],[[64940,64940],"mapped",[1604,1580,1610]],[[64941,64941],"mapped",[1604,1605,1610]],[[64942,64942],"mapped",[1610,1581,1610]],[[64943,64943],"mapped",[1610,1580,1610]],[[64944,64944],"mapped",[1610,1605,1610]],[[64945,64945],"mapped",[1605,1605,1610]],[[64946,64946],"mapped",[1602,1605,1610]],[[64947,64947],"mapped",[1606,1581,1610]],[[64948,64948],"mapped",[1602,1605,1581]],[[64949,64949],"mapped",[1604,1581,1605]],[[64950,64950],"mapped",[1593,1605,1610]],[[64951,64951],"mapped",[1603,1605,1610]],[[64952,64952],"mapped",[1606,1580,1581]],[[64953,64953],"mapped",[1605,1582,1610]],[[64954,64954],"mapped",[1604,1580,1605]],[[64955,64955],"mapped",[1603,1605,1605]],[[64956,64956],"mapped",[1604,1580,1605]],[[64957,64957],"mapped",[1606,1580,1581]],[[64958,64958],"mapped",[1580,1581,1610]],[[64959,64959],"mapped",[1581,1580,1610]],[[64960,64960],"mapped",[1605,1580,1610]],[[64961,64961],"mapped",[1601,1605,1610]],[[64962,64962],"mapped",[1576,1581,1610]],[[64963,64963],"mapped",[1603,1605,1605]],[[64964,64964],"mapped",[1593,1580,1605]],[[64965,64965],"mapped",[1589,1605,1605]],[[64966,64966],"mapped",[1587,1582,1610]],[[64967,64967],"mapped",[1606,1580,1610]],[[64968,64975],"disallowed"],[[64976,65007],"disallowed"],[[65008,65008],"mapped",[1589,1604,1746]],[[65009,65009],"mapped",[1602,1604,1746]],[[65010,65010],"mapped",[1575,1604,1604,1607]],[[65011,65011],"mapped",[1575,1603,1576,1585]],[[65012,65012],"mapped",[1605,1581,1605,1583]],[[65013,65013],"mapped",[1589,1604,1593,1605]],[[65014,65014],"mapped",[1585,1587,1608,1604]],[[65015,65015],"mapped",[1593,1604,1610,1607]],[[65016,65016],"mapped",[1608,1587,1604,1605]],[[65017,65017],"mapped",[1589,1604,1609]],[[65018,65018],"disallowed_STD3_mapped",[1589,1604,1609,32,1575,1604,1604,1607,32,1593,1604,1610,1607,32,1608,1587,1604,1605]],[[65019,65019],"disallowed_STD3_mapped",[1580,1604,32,1580,1604,1575,1604,1607]],[[65020,65020],"mapped",[1585,1740,1575,1604]],[[65021,65021],"valid",[],"NV8"],[[65022,65023],"disallowed"],[[65024,65039],"ignored"],[[65040,65040],"disallowed_STD3_mapped",[44]],[[65041,65041],"mapped",[12289]],[[65042,65042],"disallowed"],[[65043,65043],"disallowed_STD3_mapped",[58]],[[65044,65044],"disallowed_STD3_mapped",[59]],[[65045,65045],"disallowed_STD3_mapped",[33]],[[65046,65046],"disallowed_STD3_mapped",[63]],[[65047,65047],"mapped",[12310]],[[65048,65048],"mapped",[12311]],[[65049,65049],"disallowed"],[[65050,65055],"disallowed"],[[65056,65059],"valid"],[[65060,65062],"valid"],[[65063,65069],"valid"],[[65070,65071],"valid"],[[65072,65072],"disallowed"],[[65073,65073],"mapped",[8212]],[[65074,65074],"mapped",[8211]],[[65075,65076],"disallowed_STD3_mapped",[95]],[[65077,65077],"disallowed_STD3_mapped",[40]],[[65078,65078],"disallowed_STD3_mapped",[41]],[[65079,65079],"disallowed_STD3_mapped",[123]],[[65080,65080],"disallowed_STD3_mapped",[125]],[[65081,65081],"mapped",[12308]],[[65082,65082],"mapped",[12309]],[[65083,65083],"mapped",[12304]],[[65084,65084],"mapped",[12305]],[[65085,65085],"mapped",[12298]],[[65086,65086],"mapped",[12299]],[[65087,65087],"mapped",[12296]],[[65088,65088],"mapped",[12297]],[[65089,65089],"mapped",[12300]],[[65090,65090],"mapped",[12301]],[[65091,65091],"mapped",[12302]],[[65092,65092],"mapped",[12303]],[[65093,65094],"valid",[],"NV8"],[[65095,65095],"disallowed_STD3_mapped",[91]],[[65096,65096],"disallowed_STD3_mapped",[93]],[[65097,65100],"disallowed_STD3_mapped",[32,773]],[[65101,65103],"disallowed_STD3_mapped",[95]],[[65104,65104],"disallowed_STD3_mapped",[44]],[[65105,65105],"mapped",[12289]],[[65106,65106],"disallowed"],[[65107,65107],"disallowed"],[[65108,65108],"disallowed_STD3_mapped",[59]],[[65109,65109],"disallowed_STD3_mapped",[58]],[[65110,65110],"disallowed_STD3_mapped",[63]],[[65111,65111],"disallowed_STD3_mapped",[33]],[[65112,65112],"mapped",[8212]],[[65113,65113],"disallowed_STD3_mapped",[40]],[[65114,65114],"disallowed_STD3_mapped",[41]],[[65115,65115],"disallowed_STD3_mapped",[123]],[[65116,65116],"disallowed_STD3_mapped",[125]],[[65117,65117],"mapped",[12308]],[[65118,65118],"mapped",[12309]],[[65119,65119],"disallowed_STD3_mapped",[35]],[[65120,65120],"disallowed_STD3_mapped",[38]],[[65121,65121],"disallowed_STD3_mapped",[42]],[[65122,65122],"disallowed_STD3_mapped",[43]],[[65123,65123],"mapped",[45]],[[65124,65124],"disallowed_STD3_mapped",[60]],[[65125,65125],"disallowed_STD3_mapped",[62]],[[65126,65126],"disallowed_STD3_mapped",[61]],[[65127,65127],"disallowed"],[[65128,65128],"disallowed_STD3_mapped",[92]],[[65129,65129],"disallowed_STD3_mapped",[36]],[[65130,65130],"disallowed_STD3_mapped",[37]],[[65131,65131],"disallowed_STD3_mapped",[64]],[[65132,65135],"disallowed"],[[65136,65136],"disallowed_STD3_mapped",[32,1611]],[[65137,65137],"mapped",[1600,1611]],[[65138,65138],"disallowed_STD3_mapped",[32,1612]],[[65139,65139],"valid"],[[65140,65140],"disallowed_STD3_mapped",[32,1613]],[[65141,65141],"disallowed"],[[65142,65142],"disallowed_STD3_mapped",[32,1614]],[[65143,65143],"mapped",[1600,1614]],[[65144,65144],"disallowed_STD3_mapped",[32,1615]],[[65145,65145],"mapped",[1600,1615]],[[65146,65146],"disallowed_STD3_mapped",[32,1616]],[[65147,65147],"mapped",[1600,1616]],[[65148,65148],"disallowed_STD3_mapped",[32,1617]],[[65149,65149],"mapped",[1600,1617]],[[65150,65150],"disallowed_STD3_mapped",[32,1618]],[[65151,65151],"mapped",[1600,1618]],[[65152,65152],"mapped",[1569]],[[65153,65154],"mapped",[1570]],[[65155,65156],"mapped",[1571]],[[65157,65158],"mapped",[1572]],[[65159,65160],"mapped",[1573]],[[65161,65164],"mapped",[1574]],[[65165,65166],"mapped",[1575]],[[65167,65170],"mapped",[1576]],[[65171,65172],"mapped",[1577]],[[65173,65176],"mapped",[1578]],[[65177,65180],"mapped",[1579]],[[65181,65184],"mapped",[1580]],[[65185,65188],"mapped",[1581]],[[65189,65192],"mapped",[1582]],[[65193,65194],"mapped",[1583]],[[65195,65196],"mapped",[1584]],[[65197,65198],"mapped",[1585]],[[65199,65200],"mapped",[1586]],[[65201,65204],"mapped",[1587]],[[65205,65208],"mapped",[1588]],[[65209,65212],"mapped",[1589]],[[65213,65216],"mapped",[1590]],[[65217,65220],"mapped",[1591]],[[65221,65224],"mapped",[1592]],[[65225,65228],"mapped",[1593]],[[65229,65232],"mapped",[1594]],[[65233,65236],"mapped",[1601]],[[65237,65240],"mapped",[1602]],[[65241,65244],"mapped",[1603]],[[65245,65248],"mapped",[1604]],[[65249,65252],"mapped",[1605]],[[65253,65256],"mapped",[1606]],[[65257,65260],"mapped",[1607]],[[65261,65262],"mapped",[1608]],[[65263,65264],"mapped",[1609]],[[65265,65268],"mapped",[1610]],[[65269,65270],"mapped",[1604,1570]],[[65271,65272],"mapped",[1604,1571]],[[65273,65274],"mapped",[1604,1573]],[[65275,65276],"mapped",[1604,1575]],[[65277,65278],"disallowed"],[[65279,65279],"ignored"],[[65280,65280],"disallowed"],[[65281,65281],"disallowed_STD3_mapped",[33]],[[65282,65282],"disallowed_STD3_mapped",[34]],[[65283,65283],"disallowed_STD3_mapped",[35]],[[65284,65284],"disallowed_STD3_mapped",[36]],[[65285,65285],"disallowed_STD3_mapped",[37]],[[65286,65286],"disallowed_STD3_mapped",[38]],[[65287,65287],"disallowed_STD3_mapped",[39]],[[65288,65288],"disallowed_STD3_mapped",[40]],[[65289,65289],"disallowed_STD3_mapped",[41]],[[65290,65290],"disallowed_STD3_mapped",[42]],[[65291,65291],"disallowed_STD3_mapped",[43]],[[65292,65292],"disallowed_STD3_mapped",[44]],[[65293,65293],"mapped",[45]],[[65294,65294],"mapped",[46]],[[65295,65295],"disallowed_STD3_mapped",[47]],[[65296,65296],"mapped",[48]],[[65297,65297],"mapped",[49]],[[65298,65298],"mapped",[50]],[[65299,65299],"mapped",[51]],[[65300,65300],"mapped",[52]],[[65301,65301],"mapped",[53]],[[65302,65302],"mapped",[54]],[[65303,65303],"mapped",[55]],[[65304,65304],"mapped",[56]],[[65305,65305],"mapped",[57]],[[65306,65306],"disallowed_STD3_mapped",[58]],[[65307,65307],"disallowed_STD3_mapped",[59]],[[65308,65308],"disallowed_STD3_mapped",[60]],[[65309,65309],"disallowed_STD3_mapped",[61]],[[65310,65310],"disallowed_STD3_mapped",[62]],[[65311,65311],"disallowed_STD3_mapped",[63]],[[65312,65312],"disallowed_STD3_mapped",[64]],[[65313,65313],"mapped",[97]],[[65314,65314],"mapped",[98]],[[65315,65315],"mapped",[99]],[[65316,65316],"mapped",[100]],[[65317,65317],"mapped",[101]],[[65318,65318],"mapped",[102]],[[65319,65319],"mapped",[103]],[[65320,65320],"mapped",[104]],[[65321,65321],"mapped",[105]],[[65322,65322],"mapped",[106]],[[65323,65323],"mapped",[107]],[[65324,65324],"mapped",[108]],[[65325,65325],"mapped",[109]],[[65326,65326],"mapped",[110]],[[65327,65327],"mapped",[111]],[[65328,65328],"mapped",[112]],[[65329,65329],"mapped",[113]],[[65330,65330],"mapped",[114]],[[65331,65331],"mapped",[115]],[[65332,65332],"mapped",[116]],[[65333,65333],"mapped",[117]],[[65334,65334],"mapped",[118]],[[65335,65335],"mapped",[119]],[[65336,65336],"mapped",[120]],[[65337,65337],"mapped",[121]],[[65338,65338],"mapped",[122]],[[65339,65339],"disallowed_STD3_mapped",[91]],[[65340,65340],"disallowed_STD3_mapped",[92]],[[65341,65341],"disallowed_STD3_mapped",[93]],[[65342,65342],"disallowed_STD3_mapped",[94]],[[65343,65343],"disallowed_STD3_mapped",[95]],[[65344,65344],"disallowed_STD3_mapped",[96]],[[65345,65345],"mapped",[97]],[[65346,65346],"mapped",[98]],[[65347,65347],"mapped",[99]],[[65348,65348],"mapped",[100]],[[65349,65349],"mapped",[101]],[[65350,65350],"mapped",[102]],[[65351,65351],"mapped",[103]],[[65352,65352],"mapped",[104]],[[65353,65353],"mapped",[105]],[[65354,65354],"mapped",[106]],[[65355,65355],"mapped",[107]],[[65356,65356],"mapped",[108]],[[65357,65357],"mapped",[109]],[[65358,65358],"mapped",[110]],[[65359,65359],"mapped",[111]],[[65360,65360],"mapped",[112]],[[65361,65361],"mapped",[113]],[[65362,65362],"mapped",[114]],[[65363,65363],"mapped",[115]],[[65364,65364],"mapped",[116]],[[65365,65365],"mapped",[117]],[[65366,65366],"mapped",[118]],[[65367,65367],"mapped",[119]],[[65368,65368],"mapped",[120]],[[65369,65369],"mapped",[121]],[[65370,65370],"mapped",[122]],[[65371,65371],"disallowed_STD3_mapped",[123]],[[65372,65372],"disallowed_STD3_mapped",[124]],[[65373,65373],"disallowed_STD3_mapped",[125]],[[65374,65374],"disallowed_STD3_mapped",[126]],[[65375,65375],"mapped",[10629]],[[65376,65376],"mapped",[10630]],[[65377,65377],"mapped",[46]],[[65378,65378],"mapped",[12300]],[[65379,65379],"mapped",[12301]],[[65380,65380],"mapped",[12289]],[[65381,65381],"mapped",[12539]],[[65382,65382],"mapped",[12530]],[[65383,65383],"mapped",[12449]],[[65384,65384],"mapped",[12451]],[[65385,65385],"mapped",[12453]],[[65386,65386],"mapped",[12455]],[[65387,65387],"mapped",[12457]],[[65388,65388],"mapped",[12515]],[[65389,65389],"mapped",[12517]],[[65390,65390],"mapped",[12519]],[[65391,65391],"mapped",[12483]],[[65392,65392],"mapped",[12540]],[[65393,65393],"mapped",[12450]],[[65394,65394],"mapped",[12452]],[[65395,65395],"mapped",[12454]],[[65396,65396],"mapped",[12456]],[[65397,65397],"mapped",[12458]],[[65398,65398],"mapped",[12459]],[[65399,65399],"mapped",[12461]],[[65400,65400],"mapped",[12463]],[[65401,65401],"mapped",[12465]],[[65402,65402],"mapped",[12467]],[[65403,65403],"mapped",[12469]],[[65404,65404],"mapped",[12471]],[[65405,65405],"mapped",[12473]],[[65406,65406],"mapped",[12475]],[[65407,65407],"mapped",[12477]],[[65408,65408],"mapped",[12479]],[[65409,65409],"mapped",[12481]],[[65410,65410],"mapped",[12484]],[[65411,65411],"mapped",[12486]],[[65412,65412],"mapped",[12488]],[[65413,65413],"mapped",[12490]],[[65414,65414],"mapped",[12491]],[[65415,65415],"mapped",[12492]],[[65416,65416],"mapped",[12493]],[[65417,65417],"mapped",[12494]],[[65418,65418],"mapped",[12495]],[[65419,65419],"mapped",[12498]],[[65420,65420],"mapped",[12501]],[[65421,65421],"mapped",[12504]],[[65422,65422],"mapped",[12507]],[[65423,65423],"mapped",[12510]],[[65424,65424],"mapped",[12511]],[[65425,65425],"mapped",[12512]],[[65426,65426],"mapped",[12513]],[[65427,65427],"mapped",[12514]],[[65428,65428],"mapped",[12516]],[[65429,65429],"mapped",[12518]],[[65430,65430],"mapped",[12520]],[[65431,65431],"mapped",[12521]],[[65432,65432],"mapped",[12522]],[[65433,65433],"mapped",[12523]],[[65434,65434],"mapped",[12524]],[[65435,65435],"mapped",[12525]],[[65436,65436],"mapped",[12527]],[[65437,65437],"mapped",[12531]],[[65438,65438],"mapped",[12441]],[[65439,65439],"mapped",[12442]],[[65440,65440],"disallowed"],[[65441,65441],"mapped",[4352]],[[65442,65442],"mapped",[4353]],[[65443,65443],"mapped",[4522]],[[65444,65444],"mapped",[4354]],[[65445,65445],"mapped",[4524]],[[65446,65446],"mapped",[4525]],[[65447,65447],"mapped",[4355]],[[65448,65448],"mapped",[4356]],[[65449,65449],"mapped",[4357]],[[65450,65450],"mapped",[4528]],[[65451,65451],"mapped",[4529]],[[65452,65452],"mapped",[4530]],[[65453,65453],"mapped",[4531]],[[65454,65454],"mapped",[4532]],[[65455,65455],"mapped",[4533]],[[65456,65456],"mapped",[4378]],[[65457,65457],"mapped",[4358]],[[65458,65458],"mapped",[4359]],[[65459,65459],"mapped",[4360]],[[65460,65460],"mapped",[4385]],[[65461,65461],"mapped",[4361]],[[65462,65462],"mapped",[4362]],[[65463,65463],"mapped",[4363]],[[65464,65464],"mapped",[4364]],[[65465,65465],"mapped",[4365]],[[65466,65466],"mapped",[4366]],[[65467,65467],"mapped",[4367]],[[65468,65468],"mapped",[4368]],[[65469,65469],"mapped",[4369]],[[65470,65470],"mapped",[4370]],[[65471,65473],"disallowed"],[[65474,65474],"mapped",[4449]],[[65475,65475],"mapped",[4450]],[[65476,65476],"mapped",[4451]],[[65477,65477],"mapped",[4452]],[[65478,65478],"mapped",[4453]],[[65479,65479],"mapped",[4454]],[[65480,65481],"disallowed"],[[65482,65482],"mapped",[4455]],[[65483,65483],"mapped",[4456]],[[65484,65484],"mapped",[4457]],[[65485,65485],"mapped",[4458]],[[65486,65486],"mapped",[4459]],[[65487,65487],"mapped",[4460]],[[65488,65489],"disallowed"],[[65490,65490],"mapped",[4461]],[[65491,65491],"mapped",[4462]],[[65492,65492],"mapped",[4463]],[[65493,65493],"mapped",[4464]],[[65494,65494],"mapped",[4465]],[[65495,65495],"mapped",[4466]],[[65496,65497],"disallowed"],[[65498,65498],"mapped",[4467]],[[65499,65499],"mapped",[4468]],[[65500,65500],"mapped",[4469]],[[65501,65503],"disallowed"],[[65504,65504],"mapped",[162]],[[65505,65505],"mapped",[163]],[[65506,65506],"mapped",[172]],[[65507,65507],"disallowed_STD3_mapped",[32,772]],[[65508,65508],"mapped",[166]],[[65509,65509],"mapped",[165]],[[65510,65510],"mapped",[8361]],[[65511,65511],"disallowed"],[[65512,65512],"mapped",[9474]],[[65513,65513],"mapped",[8592]],[[65514,65514],"mapped",[8593]],[[65515,65515],"mapped",[8594]],[[65516,65516],"mapped",[8595]],[[65517,65517],"mapped",[9632]],[[65518,65518],"mapped",[9675]],[[65519,65528],"disallowed"],[[65529,65531],"disallowed"],[[65532,65532],"disallowed"],[[65533,65533],"disallowed"],[[65534,65535],"disallowed"],[[65536,65547],"valid"],[[65548,65548],"disallowed"],[[65549,65574],"valid"],[[65575,65575],"disallowed"],[[65576,65594],"valid"],[[65595,65595],"disallowed"],[[65596,65597],"valid"],[[65598,65598],"disallowed"],[[65599,65613],"valid"],[[65614,65615],"disallowed"],[[65616,65629],"valid"],[[65630,65663],"disallowed"],[[65664,65786],"valid"],[[65787,65791],"disallowed"],[[65792,65794],"valid",[],"NV8"],[[65795,65798],"disallowed"],[[65799,65843],"valid",[],"NV8"],[[65844,65846],"disallowed"],[[65847,65855],"valid",[],"NV8"],[[65856,65930],"valid",[],"NV8"],[[65931,65932],"valid",[],"NV8"],[[65933,65935],"disallowed"],[[65936,65947],"valid",[],"NV8"],[[65948,65951],"disallowed"],[[65952,65952],"valid",[],"NV8"],[[65953,65999],"disallowed"],[[66000,66044],"valid",[],"NV8"],[[66045,66045],"valid"],[[66046,66175],"disallowed"],[[66176,66204],"valid"],[[66205,66207],"disallowed"],[[66208,66256],"valid"],[[66257,66271],"disallowed"],[[66272,66272],"valid"],[[66273,66299],"valid",[],"NV8"],[[66300,66303],"disallowed"],[[66304,66334],"valid"],[[66335,66335],"valid"],[[66336,66339],"valid",[],"NV8"],[[66340,66351],"disallowed"],[[66352,66368],"valid"],[[66369,66369],"valid",[],"NV8"],[[66370,66377],"valid"],[[66378,66378],"valid",[],"NV8"],[[66379,66383],"disallowed"],[[66384,66426],"valid"],[[66427,66431],"disallowed"],[[66432,66461],"valid"],[[66462,66462],"disallowed"],[[66463,66463],"valid",[],"NV8"],[[66464,66499],"valid"],[[66500,66503],"disallowed"],[[66504,66511],"valid"],[[66512,66517],"valid",[],"NV8"],[[66518,66559],"disallowed"],[[66560,66560],"mapped",[66600]],[[66561,66561],"mapped",[66601]],[[66562,66562],"mapped",[66602]],[[66563,66563],"mapped",[66603]],[[66564,66564],"mapped",[66604]],[[66565,66565],"mapped",[66605]],[[66566,66566],"mapped",[66606]],[[66567,66567],"mapped",[66607]],[[66568,66568],"mapped",[66608]],[[66569,66569],"mapped",[66609]],[[66570,66570],"mapped",[66610]],[[66571,66571],"mapped",[66611]],[[66572,66572],"mapped",[66612]],[[66573,66573],"mapped",[66613]],[[66574,66574],"mapped",[66614]],[[66575,66575],"mapped",[66615]],[[66576,66576],"mapped",[66616]],[[66577,66577],"mapped",[66617]],[[66578,66578],"mapped",[66618]],[[66579,66579],"mapped",[66619]],[[66580,66580],"mapped",[66620]],[[66581,66581],"mapped",[66621]],[[66582,66582],"mapped",[66622]],[[66583,66583],"mapped",[66623]],[[66584,66584],"mapped",[66624]],[[66585,66585],"mapped",[66625]],[[66586,66586],"mapped",[66626]],[[66587,66587],"mapped",[66627]],[[66588,66588],"mapped",[66628]],[[66589,66589],"mapped",[66629]],[[66590,66590],"mapped",[66630]],[[66591,66591],"mapped",[66631]],[[66592,66592],"mapped",[66632]],[[66593,66593],"mapped",[66633]],[[66594,66594],"mapped",[66634]],[[66595,66595],"mapped",[66635]],[[66596,66596],"mapped",[66636]],[[66597,66597],"mapped",[66637]],[[66598,66598],"mapped",[66638]],[[66599,66599],"mapped",[66639]],[[66600,66637],"valid"],[[66638,66717],"valid"],[[66718,66719],"disallowed"],[[66720,66729],"valid"],[[66730,66815],"disallowed"],[[66816,66855],"valid"],[[66856,66863],"disallowed"],[[66864,66915],"valid"],[[66916,66926],"disallowed"],[[66927,66927],"valid",[],"NV8"],[[66928,67071],"disallowed"],[[67072,67382],"valid"],[[67383,67391],"disallowed"],[[67392,67413],"valid"],[[67414,67423],"disallowed"],[[67424,67431],"valid"],[[67432,67583],"disallowed"],[[67584,67589],"valid"],[[67590,67591],"disallowed"],[[67592,67592],"valid"],[[67593,67593],"disallowed"],[[67594,67637],"valid"],[[67638,67638],"disallowed"],[[67639,67640],"valid"],[[67641,67643],"disallowed"],[[67644,67644],"valid"],[[67645,67646],"disallowed"],[[67647,67647],"valid"],[[67648,67669],"valid"],[[67670,67670],"disallowed"],[[67671,67679],"valid",[],"NV8"],[[67680,67702],"valid"],[[67703,67711],"valid",[],"NV8"],[[67712,67742],"valid"],[[67743,67750],"disallowed"],[[67751,67759],"valid",[],"NV8"],[[67760,67807],"disallowed"],[[67808,67826],"valid"],[[67827,67827],"disallowed"],[[67828,67829],"valid"],[[67830,67834],"disallowed"],[[67835,67839],"valid",[],"NV8"],[[67840,67861],"valid"],[[67862,67865],"valid",[],"NV8"],[[67866,67867],"valid",[],"NV8"],[[67868,67870],"disallowed"],[[67871,67871],"valid",[],"NV8"],[[67872,67897],"valid"],[[67898,67902],"disallowed"],[[67903,67903],"valid",[],"NV8"],[[67904,67967],"disallowed"],[[67968,68023],"valid"],[[68024,68027],"disallowed"],[[68028,68029],"valid",[],"NV8"],[[68030,68031],"valid"],[[68032,68047],"valid",[],"NV8"],[[68048,68049],"disallowed"],[[68050,68095],"valid",[],"NV8"],[[68096,68099],"valid"],[[68100,68100],"disallowed"],[[68101,68102],"valid"],[[68103,68107],"disallowed"],[[68108,68115],"valid"],[[68116,68116],"disallowed"],[[68117,68119],"valid"],[[68120,68120],"disallowed"],[[68121,68147],"valid"],[[68148,68151],"disallowed"],[[68152,68154],"valid"],[[68155,68158],"disallowed"],[[68159,68159],"valid"],[[68160,68167],"valid",[],"NV8"],[[68168,68175],"disallowed"],[[68176,68184],"valid",[],"NV8"],[[68185,68191],"disallowed"],[[68192,68220],"valid"],[[68221,68223],"valid",[],"NV8"],[[68224,68252],"valid"],[[68253,68255],"valid",[],"NV8"],[[68256,68287],"disallowed"],[[68288,68295],"valid"],[[68296,68296],"valid",[],"NV8"],[[68297,68326],"valid"],[[68327,68330],"disallowed"],[[68331,68342],"valid",[],"NV8"],[[68343,68351],"disallowed"],[[68352,68405],"valid"],[[68406,68408],"disallowed"],[[68409,68415],"valid",[],"NV8"],[[68416,68437],"valid"],[[68438,68439],"disallowed"],[[68440,68447],"valid",[],"NV8"],[[68448,68466],"valid"],[[68467,68471],"disallowed"],[[68472,68479],"valid",[],"NV8"],[[68480,68497],"valid"],[[68498,68504],"disallowed"],[[68505,68508],"valid",[],"NV8"],[[68509,68520],"disallowed"],[[68521,68527],"valid",[],"NV8"],[[68528,68607],"disallowed"],[[68608,68680],"valid"],[[68681,68735],"disallowed"],[[68736,68736],"mapped",[68800]],[[68737,68737],"mapped",[68801]],[[68738,68738],"mapped",[68802]],[[68739,68739],"mapped",[68803]],[[68740,68740],"mapped",[68804]],[[68741,68741],"mapped",[68805]],[[68742,68742],"mapped",[68806]],[[68743,68743],"mapped",[68807]],[[68744,68744],"mapped",[68808]],[[68745,68745],"mapped",[68809]],[[68746,68746],"mapped",[68810]],[[68747,68747],"mapped",[68811]],[[68748,68748],"mapped",[68812]],[[68749,68749],"mapped",[68813]],[[68750,68750],"mapped",[68814]],[[68751,68751],"mapped",[68815]],[[68752,68752],"mapped",[68816]],[[68753,68753],"mapped",[68817]],[[68754,68754],"mapped",[68818]],[[68755,68755],"mapped",[68819]],[[68756,68756],"mapped",[68820]],[[68757,68757],"mapped",[68821]],[[68758,68758],"mapped",[68822]],[[68759,68759],"mapped",[68823]],[[68760,68760],"mapped",[68824]],[[68761,68761],"mapped",[68825]],[[68762,68762],"mapped",[68826]],[[68763,68763],"mapped",[68827]],[[68764,68764],"mapped",[68828]],[[68765,68765],"mapped",[68829]],[[68766,68766],"mapped",[68830]],[[68767,68767],"mapped",[68831]],[[68768,68768],"mapped",[68832]],[[68769,68769],"mapped",[68833]],[[68770,68770],"mapped",[68834]],[[68771,68771],"mapped",[68835]],[[68772,68772],"mapped",[68836]],[[68773,68773],"mapped",[68837]],[[68774,68774],"mapped",[68838]],[[68775,68775],"mapped",[68839]],[[68776,68776],"mapped",[68840]],[[68777,68777],"mapped",[68841]],[[68778,68778],"mapped",[68842]],[[68779,68779],"mapped",[68843]],[[68780,68780],"mapped",[68844]],[[68781,68781],"mapped",[68845]],[[68782,68782],"mapped",[68846]],[[68783,68783],"mapped",[68847]],[[68784,68784],"mapped",[68848]],[[68785,68785],"mapped",[68849]],[[68786,68786],"mapped",[68850]],[[68787,68799],"disallowed"],[[68800,68850],"valid"],[[68851,68857],"disallowed"],[[68858,68863],"valid",[],"NV8"],[[68864,69215],"disallowed"],[[69216,69246],"valid",[],"NV8"],[[69247,69631],"disallowed"],[[69632,69702],"valid"],[[69703,69709],"valid",[],"NV8"],[[69710,69713],"disallowed"],[[69714,69733],"valid",[],"NV8"],[[69734,69743],"valid"],[[69744,69758],"disallowed"],[[69759,69759],"valid"],[[69760,69818],"valid"],[[69819,69820],"valid",[],"NV8"],[[69821,69821],"disallowed"],[[69822,69825],"valid",[],"NV8"],[[69826,69839],"disallowed"],[[69840,69864],"valid"],[[69865,69871],"disallowed"],[[69872,69881],"valid"],[[69882,69887],"disallowed"],[[69888,69940],"valid"],[[69941,69941],"disallowed"],[[69942,69951],"valid"],[[69952,69955],"valid",[],"NV8"],[[69956,69967],"disallowed"],[[69968,70003],"valid"],[[70004,70005],"valid",[],"NV8"],[[70006,70006],"valid"],[[70007,70015],"disallowed"],[[70016,70084],"valid"],[[70085,70088],"valid",[],"NV8"],[[70089,70089],"valid",[],"NV8"],[[70090,70092],"valid"],[[70093,70093],"valid",[],"NV8"],[[70094,70095],"disallowed"],[[70096,70105],"valid"],[[70106,70106],"valid"],[[70107,70107],"valid",[],"NV8"],[[70108,70108],"valid"],[[70109,70111],"valid",[],"NV8"],[[70112,70112],"disallowed"],[[70113,70132],"valid",[],"NV8"],[[70133,70143],"disallowed"],[[70144,70161],"valid"],[[70162,70162],"disallowed"],[[70163,70199],"valid"],[[70200,70205],"valid",[],"NV8"],[[70206,70271],"disallowed"],[[70272,70278],"valid"],[[70279,70279],"disallowed"],[[70280,70280],"valid"],[[70281,70281],"disallowed"],[[70282,70285],"valid"],[[70286,70286],"disallowed"],[[70287,70301],"valid"],[[70302,70302],"disallowed"],[[70303,70312],"valid"],[[70313,70313],"valid",[],"NV8"],[[70314,70319],"disallowed"],[[70320,70378],"valid"],[[70379,70383],"disallowed"],[[70384,70393],"valid"],[[70394,70399],"disallowed"],[[70400,70400],"valid"],[[70401,70403],"valid"],[[70404,70404],"disallowed"],[[70405,70412],"valid"],[[70413,70414],"disallowed"],[[70415,70416],"valid"],[[70417,70418],"disallowed"],[[70419,70440],"valid"],[[70441,70441],"disallowed"],[[70442,70448],"valid"],[[70449,70449],"disallowed"],[[70450,70451],"valid"],[[70452,70452],"disallowed"],[[70453,70457],"valid"],[[70458,70459],"disallowed"],[[70460,70468],"valid"],[[70469,70470],"disallowed"],[[70471,70472],"valid"],[[70473,70474],"disallowed"],[[70475,70477],"valid"],[[70478,70479],"disallowed"],[[70480,70480],"valid"],[[70481,70486],"disallowed"],[[70487,70487],"valid"],[[70488,70492],"disallowed"],[[70493,70499],"valid"],[[70500,70501],"disallowed"],[[70502,70508],"valid"],[[70509,70511],"disallowed"],[[70512,70516],"valid"],[[70517,70783],"disallowed"],[[70784,70853],"valid"],[[70854,70854],"valid",[],"NV8"],[[70855,70855],"valid"],[[70856,70863],"disallowed"],[[70864,70873],"valid"],[[70874,71039],"disallowed"],[[71040,71093],"valid"],[[71094,71095],"disallowed"],[[71096,71104],"valid"],[[71105,71113],"valid",[],"NV8"],[[71114,71127],"valid",[],"NV8"],[[71128,71133],"valid"],[[71134,71167],"disallowed"],[[71168,71232],"valid"],[[71233,71235],"valid",[],"NV8"],[[71236,71236],"valid"],[[71237,71247],"disallowed"],[[71248,71257],"valid"],[[71258,71295],"disallowed"],[[71296,71351],"valid"],[[71352,71359],"disallowed"],[[71360,71369],"valid"],[[71370,71423],"disallowed"],[[71424,71449],"valid"],[[71450,71452],"disallowed"],[[71453,71467],"valid"],[[71468,71471],"disallowed"],[[71472,71481],"valid"],[[71482,71487],"valid",[],"NV8"],[[71488,71839],"disallowed"],[[71840,71840],"mapped",[71872]],[[71841,71841],"mapped",[71873]],[[71842,71842],"mapped",[71874]],[[71843,71843],"mapped",[71875]],[[71844,71844],"mapped",[71876]],[[71845,71845],"mapped",[71877]],[[71846,71846],"mapped",[71878]],[[71847,71847],"mapped",[71879]],[[71848,71848],"mapped",[71880]],[[71849,71849],"mapped",[71881]],[[71850,71850],"mapped",[71882]],[[71851,71851],"mapped",[71883]],[[71852,71852],"mapped",[71884]],[[71853,71853],"mapped",[71885]],[[71854,71854],"mapped",[71886]],[[71855,71855],"mapped",[71887]],[[71856,71856],"mapped",[71888]],[[71857,71857],"mapped",[71889]],[[71858,71858],"mapped",[71890]],[[71859,71859],"mapped",[71891]],[[71860,71860],"mapped",[71892]],[[71861,71861],"mapped",[71893]],[[71862,71862],"mapped",[71894]],[[71863,71863],"mapped",[71895]],[[71864,71864],"mapped",[71896]],[[71865,71865],"mapped",[71897]],[[71866,71866],"mapped",[71898]],[[71867,71867],"mapped",[71899]],[[71868,71868],"mapped",[71900]],[[71869,71869],"mapped",[71901]],[[71870,71870],"mapped",[71902]],[[71871,71871],"mapped",[71903]],[[71872,71913],"valid"],[[71914,71922],"valid",[],"NV8"],[[71923,71934],"disallowed"],[[71935,71935],"valid"],[[71936,72383],"disallowed"],[[72384,72440],"valid"],[[72441,73727],"disallowed"],[[73728,74606],"valid"],[[74607,74648],"valid"],[[74649,74649],"valid"],[[74650,74751],"disallowed"],[[74752,74850],"valid",[],"NV8"],[[74851,74862],"valid",[],"NV8"],[[74863,74863],"disallowed"],[[74864,74867],"valid",[],"NV8"],[[74868,74868],"valid",[],"NV8"],[[74869,74879],"disallowed"],[[74880,75075],"valid"],[[75076,77823],"disallowed"],[[77824,78894],"valid"],[[78895,82943],"disallowed"],[[82944,83526],"valid"],[[83527,92159],"disallowed"],[[92160,92728],"valid"],[[92729,92735],"disallowed"],[[92736,92766],"valid"],[[92767,92767],"disallowed"],[[92768,92777],"valid"],[[92778,92781],"disallowed"],[[92782,92783],"valid",[],"NV8"],[[92784,92879],"disallowed"],[[92880,92909],"valid"],[[92910,92911],"disallowed"],[[92912,92916],"valid"],[[92917,92917],"valid",[],"NV8"],[[92918,92927],"disallowed"],[[92928,92982],"valid"],[[92983,92991],"valid",[],"NV8"],[[92992,92995],"valid"],[[92996,92997],"valid",[],"NV8"],[[92998,93007],"disallowed"],[[93008,93017],"valid"],[[93018,93018],"disallowed"],[[93019,93025],"valid",[],"NV8"],[[93026,93026],"disallowed"],[[93027,93047],"valid"],[[93048,93052],"disallowed"],[[93053,93071],"valid"],[[93072,93951],"disallowed"],[[93952,94020],"valid"],[[94021,94031],"disallowed"],[[94032,94078],"valid"],[[94079,94094],"disallowed"],[[94095,94111],"valid"],[[94112,110591],"disallowed"],[[110592,110593],"valid"],[[110594,113663],"disallowed"],[[113664,113770],"valid"],[[113771,113775],"disallowed"],[[113776,113788],"valid"],[[113789,113791],"disallowed"],[[113792,113800],"valid"],[[113801,113807],"disallowed"],[[113808,113817],"valid"],[[113818,113819],"disallowed"],[[113820,113820],"valid",[],"NV8"],[[113821,113822],"valid"],[[113823,113823],"valid",[],"NV8"],[[113824,113827],"ignored"],[[113828,118783],"disallowed"],[[118784,119029],"valid",[],"NV8"],[[119030,119039],"disallowed"],[[119040,119078],"valid",[],"NV8"],[[119079,119080],"disallowed"],[[119081,119081],"valid",[],"NV8"],[[119082,119133],"valid",[],"NV8"],[[119134,119134],"mapped",[119127,119141]],[[119135,119135],"mapped",[119128,119141]],[[119136,119136],"mapped",[119128,119141,119150]],[[119137,119137],"mapped",[119128,119141,119151]],[[119138,119138],"mapped",[119128,119141,119152]],[[119139,119139],"mapped",[119128,119141,119153]],[[119140,119140],"mapped",[119128,119141,119154]],[[119141,119154],"valid",[],"NV8"],[[119155,119162],"disallowed"],[[119163,119226],"valid",[],"NV8"],[[119227,119227],"mapped",[119225,119141]],[[119228,119228],"mapped",[119226,119141]],[[119229,119229],"mapped",[119225,119141,119150]],[[119230,119230],"mapped",[119226,119141,119150]],[[119231,119231],"mapped",[119225,119141,119151]],[[119232,119232],"mapped",[119226,119141,119151]],[[119233,119261],"valid",[],"NV8"],[[119262,119272],"valid",[],"NV8"],[[119273,119295],"disallowed"],[[119296,119365],"valid",[],"NV8"],[[119366,119551],"disallowed"],[[119552,119638],"valid",[],"NV8"],[[119639,119647],"disallowed"],[[119648,119665],"valid",[],"NV8"],[[119666,119807],"disallowed"],[[119808,119808],"mapped",[97]],[[119809,119809],"mapped",[98]],[[119810,119810],"mapped",[99]],[[119811,119811],"mapped",[100]],[[119812,119812],"mapped",[101]],[[119813,119813],"mapped",[102]],[[119814,119814],"mapped",[103]],[[119815,119815],"mapped",[104]],[[119816,119816],"mapped",[105]],[[119817,119817],"mapped",[106]],[[119818,119818],"mapped",[107]],[[119819,119819],"mapped",[108]],[[119820,119820],"mapped",[109]],[[119821,119821],"mapped",[110]],[[119822,119822],"mapped",[111]],[[119823,119823],"mapped",[112]],[[119824,119824],"mapped",[113]],[[119825,119825],"mapped",[114]],[[119826,119826],"mapped",[115]],[[119827,119827],"mapped",[116]],[[119828,119828],"mapped",[117]],[[119829,119829],"mapped",[118]],[[119830,119830],"mapped",[119]],[[119831,119831],"mapped",[120]],[[119832,119832],"mapped",[121]],[[119833,119833],"mapped",[122]],[[119834,119834],"mapped",[97]],[[119835,119835],"mapped",[98]],[[119836,119836],"mapped",[99]],[[119837,119837],"mapped",[100]],[[119838,119838],"mapped",[101]],[[119839,119839],"mapped",[102]],[[119840,119840],"mapped",[103]],[[119841,119841],"mapped",[104]],[[119842,119842],"mapped",[105]],[[119843,119843],"mapped",[106]],[[119844,119844],"mapped",[107]],[[119845,119845],"mapped",[108]],[[119846,119846],"mapped",[109]],[[119847,119847],"mapped",[110]],[[119848,119848],"mapped",[111]],[[119849,119849],"mapped",[112]],[[119850,119850],"mapped",[113]],[[119851,119851],"mapped",[114]],[[119852,119852],"mapped",[115]],[[119853,119853],"mapped",[116]],[[119854,119854],"mapped",[117]],[[119855,119855],"mapped",[118]],[[119856,119856],"mapped",[119]],[[119857,119857],"mapped",[120]],[[119858,119858],"mapped",[121]],[[119859,119859],"mapped",[122]],[[119860,119860],"mapped",[97]],[[119861,119861],"mapped",[98]],[[119862,119862],"mapped",[99]],[[119863,119863],"mapped",[100]],[[119864,119864],"mapped",[101]],[[119865,119865],"mapped",[102]],[[119866,119866],"mapped",[103]],[[119867,119867],"mapped",[104]],[[119868,119868],"mapped",[105]],[[119869,119869],"mapped",[106]],[[119870,119870],"mapped",[107]],[[119871,119871],"mapped",[108]],[[119872,119872],"mapped",[109]],[[119873,119873],"mapped",[110]],[[119874,119874],"mapped",[111]],[[119875,119875],"mapped",[112]],[[119876,119876],"mapped",[113]],[[119877,119877],"mapped",[114]],[[119878,119878],"mapped",[115]],[[119879,119879],"mapped",[116]],[[119880,119880],"mapped",[117]],[[119881,119881],"mapped",[118]],[[119882,119882],"mapped",[119]],[[119883,119883],"mapped",[120]],[[119884,119884],"mapped",[121]],[[119885,119885],"mapped",[122]],[[119886,119886],"mapped",[97]],[[119887,119887],"mapped",[98]],[[119888,119888],"mapped",[99]],[[119889,119889],"mapped",[100]],[[119890,119890],"mapped",[101]],[[119891,119891],"mapped",[102]],[[119892,119892],"mapped",[103]],[[119893,119893],"disallowed"],[[119894,119894],"mapped",[105]],[[119895,119895],"mapped",[106]],[[119896,119896],"mapped",[107]],[[119897,119897],"mapped",[108]],[[119898,119898],"mapped",[109]],[[119899,119899],"mapped",[110]],[[119900,119900],"mapped",[111]],[[119901,119901],"mapped",[112]],[[119902,119902],"mapped",[113]],[[119903,119903],"mapped",[114]],[[119904,119904],"mapped",[115]],[[119905,119905],"mapped",[116]],[[119906,119906],"mapped",[117]],[[119907,119907],"mapped",[118]],[[119908,119908],"mapped",[119]],[[119909,119909],"mapped",[120]],[[119910,119910],"mapped",[121]],[[119911,119911],"mapped",[122]],[[119912,119912],"mapped",[97]],[[119913,119913],"mapped",[98]],[[119914,119914],"mapped",[99]],[[119915,119915],"mapped",[100]],[[119916,119916],"mapped",[101]],[[119917,119917],"mapped",[102]],[[119918,119918],"mapped",[103]],[[119919,119919],"mapped",[104]],[[119920,119920],"mapped",[105]],[[119921,119921],"mapped",[106]],[[119922,119922],"mapped",[107]],[[119923,119923],"mapped",[108]],[[119924,119924],"mapped",[109]],[[119925,119925],"mapped",[110]],[[119926,119926],"mapped",[111]],[[119927,119927],"mapped",[112]],[[119928,119928],"mapped",[113]],[[119929,119929],"mapped",[114]],[[119930,119930],"mapped",[115]],[[119931,119931],"mapped",[116]],[[119932,119932],"mapped",[117]],[[119933,119933],"mapped",[118]],[[119934,119934],"mapped",[119]],[[119935,119935],"mapped",[120]],[[119936,119936],"mapped",[121]],[[119937,119937],"mapped",[122]],[[119938,119938],"mapped",[97]],[[119939,119939],"mapped",[98]],[[119940,119940],"mapped",[99]],[[119941,119941],"mapped",[100]],[[119942,119942],"mapped",[101]],[[119943,119943],"mapped",[102]],[[119944,119944],"mapped",[103]],[[119945,119945],"mapped",[104]],[[119946,119946],"mapped",[105]],[[119947,119947],"mapped",[106]],[[119948,119948],"mapped",[107]],[[119949,119949],"mapped",[108]],[[119950,119950],"mapped",[109]],[[119951,119951],"mapped",[110]],[[119952,119952],"mapped",[111]],[[119953,119953],"mapped",[112]],[[119954,119954],"mapped",[113]],[[119955,119955],"mapped",[114]],[[119956,119956],"mapped",[115]],[[119957,119957],"mapped",[116]],[[119958,119958],"mapped",[117]],[[119959,119959],"mapped",[118]],[[119960,119960],"mapped",[119]],[[119961,119961],"mapped",[120]],[[119962,119962],"mapped",[121]],[[119963,119963],"mapped",[122]],[[119964,119964],"mapped",[97]],[[119965,119965],"disallowed"],[[119966,119966],"mapped",[99]],[[119967,119967],"mapped",[100]],[[119968,119969],"disallowed"],[[119970,119970],"mapped",[103]],[[119971,119972],"disallowed"],[[119973,119973],"mapped",[106]],[[119974,119974],"mapped",[107]],[[119975,119976],"disallowed"],[[119977,119977],"mapped",[110]],[[119978,119978],"mapped",[111]],[[119979,119979],"mapped",[112]],[[119980,119980],"mapped",[113]],[[119981,119981],"disallowed"],[[119982,119982],"mapped",[115]],[[119983,119983],"mapped",[116]],[[119984,119984],"mapped",[117]],[[119985,119985],"mapped",[118]],[[119986,119986],"mapped",[119]],[[119987,119987],"mapped",[120]],[[119988,119988],"mapped",[121]],[[119989,119989],"mapped",[122]],[[119990,119990],"mapped",[97]],[[119991,119991],"mapped",[98]],[[119992,119992],"mapped",[99]],[[119993,119993],"mapped",[100]],[[119994,119994],"disallowed"],[[119995,119995],"mapped",[102]],[[119996,119996],"disallowed"],[[119997,119997],"mapped",[104]],[[119998,119998],"mapped",[105]],[[119999,119999],"mapped",[106]],[[120000,120000],"mapped",[107]],[[120001,120001],"mapped",[108]],[[120002,120002],"mapped",[109]],[[120003,120003],"mapped",[110]],[[120004,120004],"disallowed"],[[120005,120005],"mapped",[112]],[[120006,120006],"mapped",[113]],[[120007,120007],"mapped",[114]],[[120008,120008],"mapped",[115]],[[120009,120009],"mapped",[116]],[[120010,120010],"mapped",[117]],[[120011,120011],"mapped",[118]],[[120012,120012],"mapped",[119]],[[120013,120013],"mapped",[120]],[[120014,120014],"mapped",[121]],[[120015,120015],"mapped",[122]],[[120016,120016],"mapped",[97]],[[120017,120017],"mapped",[98]],[[120018,120018],"mapped",[99]],[[120019,120019],"mapped",[100]],[[120020,120020],"mapped",[101]],[[120021,120021],"mapped",[102]],[[120022,120022],"mapped",[103]],[[120023,120023],"mapped",[104]],[[120024,120024],"mapped",[105]],[[120025,120025],"mapped",[106]],[[120026,120026],"mapped",[107]],[[120027,120027],"mapped",[108]],[[120028,120028],"mapped",[109]],[[120029,120029],"mapped",[110]],[[120030,120030],"mapped",[111]],[[120031,120031],"mapped",[112]],[[120032,120032],"mapped",[113]],[[120033,120033],"mapped",[114]],[[120034,120034],"mapped",[115]],[[120035,120035],"mapped",[116]],[[120036,120036],"mapped",[117]],[[120037,120037],"mapped",[118]],[[120038,120038],"mapped",[119]],[[120039,120039],"mapped",[120]],[[120040,120040],"mapped",[121]],[[120041,120041],"mapped",[122]],[[120042,120042],"mapped",[97]],[[120043,120043],"mapped",[98]],[[120044,120044],"mapped",[99]],[[120045,120045],"mapped",[100]],[[120046,120046],"mapped",[101]],[[120047,120047],"mapped",[102]],[[120048,120048],"mapped",[103]],[[120049,120049],"mapped",[104]],[[120050,120050],"mapped",[105]],[[120051,120051],"mapped",[106]],[[120052,120052],"mapped",[107]],[[120053,120053],"mapped",[108]],[[120054,120054],"mapped",[109]],[[120055,120055],"mapped",[110]],[[120056,120056],"mapped",[111]],[[120057,120057],"mapped",[112]],[[120058,120058],"mapped",[113]],[[120059,120059],"mapped",[114]],[[120060,120060],"mapped",[115]],[[120061,120061],"mapped",[116]],[[120062,120062],"mapped",[117]],[[120063,120063],"mapped",[118]],[[120064,120064],"mapped",[119]],[[120065,120065],"mapped",[120]],[[120066,120066],"mapped",[121]],[[120067,120067],"mapped",[122]],[[120068,120068],"mapped",[97]],[[120069,120069],"mapped",[98]],[[120070,120070],"disallowed"],[[120071,120071],"mapped",[100]],[[120072,120072],"mapped",[101]],[[120073,120073],"mapped",[102]],[[120074,120074],"mapped",[103]],[[120075,120076],"disallowed"],[[120077,120077],"mapped",[106]],[[120078,120078],"mapped",[107]],[[120079,120079],"mapped",[108]],[[120080,120080],"mapped",[109]],[[120081,120081],"mapped",[110]],[[120082,120082],"mapped",[111]],[[120083,120083],"mapped",[112]],[[120084,120084],"mapped",[113]],[[120085,120085],"disallowed"],[[120086,120086],"mapped",[115]],[[120087,120087],"mapped",[116]],[[120088,120088],"mapped",[117]],[[120089,120089],"mapped",[118]],[[120090,120090],"mapped",[119]],[[120091,120091],"mapped",[120]],[[120092,120092],"mapped",[121]],[[120093,120093],"disallowed"],[[120094,120094],"mapped",[97]],[[120095,120095],"mapped",[98]],[[120096,120096],"mapped",[99]],[[120097,120097],"mapped",[100]],[[120098,120098],"mapped",[101]],[[120099,120099],"mapped",[102]],[[120100,120100],"mapped",[103]],[[120101,120101],"mapped",[104]],[[120102,120102],"mapped",[105]],[[120103,120103],"mapped",[106]],[[120104,120104],"mapped",[107]],[[120105,120105],"mapped",[108]],[[120106,120106],"mapped",[109]],[[120107,120107],"mapped",[110]],[[120108,120108],"mapped",[111]],[[120109,120109],"mapped",[112]],[[120110,120110],"mapped",[113]],[[120111,120111],"mapped",[114]],[[120112,120112],"mapped",[115]],[[120113,120113],"mapped",[116]],[[120114,120114],"mapped",[117]],[[120115,120115],"mapped",[118]],[[120116,120116],"mapped",[119]],[[120117,120117],"mapped",[120]],[[120118,120118],"mapped",[121]],[[120119,120119],"mapped",[122]],[[120120,120120],"mapped",[97]],[[120121,120121],"mapped",[98]],[[120122,120122],"disallowed"],[[120123,120123],"mapped",[100]],[[120124,120124],"mapped",[101]],[[120125,120125],"mapped",[102]],[[120126,120126],"mapped",[103]],[[120127,120127],"disallowed"],[[120128,120128],"mapped",[105]],[[120129,120129],"mapped",[106]],[[120130,120130],"mapped",[107]],[[120131,120131],"mapped",[108]],[[120132,120132],"mapped",[109]],[[120133,120133],"disallowed"],[[120134,120134],"mapped",[111]],[[120135,120137],"disallowed"],[[120138,120138],"mapped",[115]],[[120139,120139],"mapped",[116]],[[120140,120140],"mapped",[117]],[[120141,120141],"mapped",[118]],[[120142,120142],"mapped",[119]],[[120143,120143],"mapped",[120]],[[120144,120144],"mapped",[121]],[[120145,120145],"disallowed"],[[120146,120146],"mapped",[97]],[[120147,120147],"mapped",[98]],[[120148,120148],"mapped",[99]],[[120149,120149],"mapped",[100]],[[120150,120150],"mapped",[101]],[[120151,120151],"mapped",[102]],[[120152,120152],"mapped",[103]],[[120153,120153],"mapped",[104]],[[120154,120154],"mapped",[105]],[[120155,120155],"mapped",[106]],[[120156,120156],"mapped",[107]],[[120157,120157],"mapped",[108]],[[120158,120158],"mapped",[109]],[[120159,120159],"mapped",[110]],[[120160,120160],"mapped",[111]],[[120161,120161],"mapped",[112]],[[120162,120162],"mapped",[113]],[[120163,120163],"mapped",[114]],[[120164,120164],"mapped",[115]],[[120165,120165],"mapped",[116]],[[120166,120166],"mapped",[117]],[[120167,120167],"mapped",[118]],[[120168,120168],"mapped",[119]],[[120169,120169],"mapped",[120]],[[120170,120170],"mapped",[121]],[[120171,120171],"mapped",[122]],[[120172,120172],"mapped",[97]],[[120173,120173],"mapped",[98]],[[120174,120174],"mapped",[99]],[[120175,120175],"mapped",[100]],[[120176,120176],"mapped",[101]],[[120177,120177],"mapped",[102]],[[120178,120178],"mapped",[103]],[[120179,120179],"mapped",[104]],[[120180,120180],"mapped",[105]],[[120181,120181],"mapped",[106]],[[120182,120182],"mapped",[107]],[[120183,120183],"mapped",[108]],[[120184,120184],"mapped",[109]],[[120185,120185],"mapped",[110]],[[120186,120186],"mapped",[111]],[[120187,120187],"mapped",[112]],[[120188,120188],"mapped",[113]],[[120189,120189],"mapped",[114]],[[120190,120190],"mapped",[115]],[[120191,120191],"mapped",[116]],[[120192,120192],"mapped",[117]],[[120193,120193],"mapped",[118]],[[120194,120194],"mapped",[119]],[[120195,120195],"mapped",[120]],[[120196,120196],"mapped",[121]],[[120197,120197],"mapped",[122]],[[120198,120198],"mapped",[97]],[[120199,120199],"mapped",[98]],[[120200,120200],"mapped",[99]],[[120201,120201],"mapped",[100]],[[120202,120202],"mapped",[101]],[[120203,120203],"mapped",[102]],[[120204,120204],"mapped",[103]],[[120205,120205],"mapped",[104]],[[120206,120206],"mapped",[105]],[[120207,120207],"mapped",[106]],[[120208,120208],"mapped",[107]],[[120209,120209],"mapped",[108]],[[120210,120210],"mapped",[109]],[[120211,120211],"mapped",[110]],[[120212,120212],"mapped",[111]],[[120213,120213],"mapped",[112]],[[120214,120214],"mapped",[113]],[[120215,120215],"mapped",[114]],[[120216,120216],"mapped",[115]],[[120217,120217],"mapped",[116]],[[120218,120218],"mapped",[117]],[[120219,120219],"mapped",[118]],[[120220,120220],"mapped",[119]],[[120221,120221],"mapped",[120]],[[120222,120222],"mapped",[121]],[[120223,120223],"mapped",[122]],[[120224,120224],"mapped",[97]],[[120225,120225],"mapped",[98]],[[120226,120226],"mapped",[99]],[[120227,120227],"mapped",[100]],[[120228,120228],"mapped",[101]],[[120229,120229],"mapped",[102]],[[120230,120230],"mapped",[103]],[[120231,120231],"mapped",[104]],[[120232,120232],"mapped",[105]],[[120233,120233],"mapped",[106]],[[120234,120234],"mapped",[107]],[[120235,120235],"mapped",[108]],[[120236,120236],"mapped",[109]],[[120237,120237],"mapped",[110]],[[120238,120238],"mapped",[111]],[[120239,120239],"mapped",[112]],[[120240,120240],"mapped",[113]],[[120241,120241],"mapped",[114]],[[120242,120242],"mapped",[115]],[[120243,120243],"mapped",[116]],[[120244,120244],"mapped",[117]],[[120245,120245],"mapped",[118]],[[120246,120246],"mapped",[119]],[[120247,120247],"mapped",[120]],[[120248,120248],"mapped",[121]],[[120249,120249],"mapped",[122]],[[120250,120250],"mapped",[97]],[[120251,120251],"mapped",[98]],[[120252,120252],"mapped",[99]],[[120253,120253],"mapped",[100]],[[120254,120254],"mapped",[101]],[[120255,120255],"mapped",[102]],[[120256,120256],"mapped",[103]],[[120257,120257],"mapped",[104]],[[120258,120258],"mapped",[105]],[[120259,120259],"mapped",[106]],[[120260,120260],"mapped",[107]],[[120261,120261],"mapped",[108]],[[120262,120262],"mapped",[109]],[[120263,120263],"mapped",[110]],[[120264,120264],"mapped",[111]],[[120265,120265],"mapped",[112]],[[120266,120266],"mapped",[113]],[[120267,120267],"mapped",[114]],[[120268,120268],"mapped",[115]],[[120269,120269],"mapped",[116]],[[120270,120270],"mapped",[117]],[[120271,120271],"mapped",[118]],[[120272,120272],"mapped",[119]],[[120273,120273],"mapped",[120]],[[120274,120274],"mapped",[121]],[[120275,120275],"mapped",[122]],[[120276,120276],"mapped",[97]],[[120277,120277],"mapped",[98]],[[120278,120278],"mapped",[99]],[[120279,120279],"mapped",[100]],[[120280,120280],"mapped",[101]],[[120281,120281],"mapped",[102]],[[120282,120282],"mapped",[103]],[[120283,120283],"mapped",[104]],[[120284,120284],"mapped",[105]],[[120285,120285],"mapped",[106]],[[120286,120286],"mapped",[107]],[[120287,120287],"mapped",[108]],[[120288,120288],"mapped",[109]],[[120289,120289],"mapped",[110]],[[120290,120290],"mapped",[111]],[[120291,120291],"mapped",[112]],[[120292,120292],"mapped",[113]],[[120293,120293],"mapped",[114]],[[120294,120294],"mapped",[115]],[[120295,120295],"mapped",[116]],[[120296,120296],"mapped",[117]],[[120297,120297],"mapped",[118]],[[120298,120298],"mapped",[119]],[[120299,120299],"mapped",[120]],[[120300,120300],"mapped",[121]],[[120301,120301],"mapped",[122]],[[120302,120302],"mapped",[97]],[[120303,120303],"mapped",[98]],[[120304,120304],"mapped",[99]],[[120305,120305],"mapped",[100]],[[120306,120306],"mapped",[101]],[[120307,120307],"mapped",[102]],[[120308,120308],"mapped",[103]],[[120309,120309],"mapped",[104]],[[120310,120310],"mapped",[105]],[[120311,120311],"mapped",[106]],[[120312,120312],"mapped",[107]],[[120313,120313],"mapped",[108]],[[120314,120314],"mapped",[109]],[[120315,120315],"mapped",[110]],[[120316,120316],"mapped",[111]],[[120317,120317],"mapped",[112]],[[120318,120318],"mapped",[113]],[[120319,120319],"mapped",[114]],[[120320,120320],"mapped",[115]],[[120321,120321],"mapped",[116]],[[120322,120322],"mapped",[117]],[[120323,120323],"mapped",[118]],[[120324,120324],"mapped",[119]],[[120325,120325],"mapped",[120]],[[120326,120326],"mapped",[121]],[[120327,120327],"mapped",[122]],[[120328,120328],"mapped",[97]],[[120329,120329],"mapped",[98]],[[120330,120330],"mapped",[99]],[[120331,120331],"mapped",[100]],[[120332,120332],"mapped",[101]],[[120333,120333],"mapped",[102]],[[120334,120334],"mapped",[103]],[[120335,120335],"mapped",[104]],[[120336,120336],"mapped",[105]],[[120337,120337],"mapped",[106]],[[120338,120338],"mapped",[107]],[[120339,120339],"mapped",[108]],[[120340,120340],"mapped",[109]],[[120341,120341],"mapped",[110]],[[120342,120342],"mapped",[111]],[[120343,120343],"mapped",[112]],[[120344,120344],"mapped",[113]],[[120345,120345],"mapped",[114]],[[120346,120346],"mapped",[115]],[[120347,120347],"mapped",[116]],[[120348,120348],"mapped",[117]],[[120349,120349],"mapped",[118]],[[120350,120350],"mapped",[119]],[[120351,120351],"mapped",[120]],[[120352,120352],"mapped",[121]],[[120353,120353],"mapped",[122]],[[120354,120354],"mapped",[97]],[[120355,120355],"mapped",[98]],[[120356,120356],"mapped",[99]],[[120357,120357],"mapped",[100]],[[120358,120358],"mapped",[101]],[[120359,120359],"mapped",[102]],[[120360,120360],"mapped",[103]],[[120361,120361],"mapped",[104]],[[120362,120362],"mapped",[105]],[[120363,120363],"mapped",[106]],[[120364,120364],"mapped",[107]],[[120365,120365],"mapped",[108]],[[120366,120366],"mapped",[109]],[[120367,120367],"mapped",[110]],[[120368,120368],"mapped",[111]],[[120369,120369],"mapped",[112]],[[120370,120370],"mapped",[113]],[[120371,120371],"mapped",[114]],[[120372,120372],"mapped",[115]],[[120373,120373],"mapped",[116]],[[120374,120374],"mapped",[117]],[[120375,120375],"mapped",[118]],[[120376,120376],"mapped",[119]],[[120377,120377],"mapped",[120]],[[120378,120378],"mapped",[121]],[[120379,120379],"mapped",[122]],[[120380,120380],"mapped",[97]],[[120381,120381],"mapped",[98]],[[120382,120382],"mapped",[99]],[[120383,120383],"mapped",[100]],[[120384,120384],"mapped",[101]],[[120385,120385],"mapped",[102]],[[120386,120386],"mapped",[103]],[[120387,120387],"mapped",[104]],[[120388,120388],"mapped",[105]],[[120389,120389],"mapped",[106]],[[120390,120390],"mapped",[107]],[[120391,120391],"mapped",[108]],[[120392,120392],"mapped",[109]],[[120393,120393],"mapped",[110]],[[120394,120394],"mapped",[111]],[[120395,120395],"mapped",[112]],[[120396,120396],"mapped",[113]],[[120397,120397],"mapped",[114]],[[120398,120398],"mapped",[115]],[[120399,120399],"mapped",[116]],[[120400,120400],"mapped",[117]],[[120401,120401],"mapped",[118]],[[120402,120402],"mapped",[119]],[[120403,120403],"mapped",[120]],[[120404,120404],"mapped",[121]],[[120405,120405],"mapped",[122]],[[120406,120406],"mapped",[97]],[[120407,120407],"mapped",[98]],[[120408,120408],"mapped",[99]],[[120409,120409],"mapped",[100]],[[120410,120410],"mapped",[101]],[[120411,120411],"mapped",[102]],[[120412,120412],"mapped",[103]],[[120413,120413],"mapped",[104]],[[120414,120414],"mapped",[105]],[[120415,120415],"mapped",[106]],[[120416,120416],"mapped",[107]],[[120417,120417],"mapped",[108]],[[120418,120418],"mapped",[109]],[[120419,120419],"mapped",[110]],[[120420,120420],"mapped",[111]],[[120421,120421],"mapped",[112]],[[120422,120422],"mapped",[113]],[[120423,120423],"mapped",[114]],[[120424,120424],"mapped",[115]],[[120425,120425],"mapped",[116]],[[120426,120426],"mapped",[117]],[[120427,120427],"mapped",[118]],[[120428,120428],"mapped",[119]],[[120429,120429],"mapped",[120]],[[120430,120430],"mapped",[121]],[[120431,120431],"mapped",[122]],[[120432,120432],"mapped",[97]],[[120433,120433],"mapped",[98]],[[120434,120434],"mapped",[99]],[[120435,120435],"mapped",[100]],[[120436,120436],"mapped",[101]],[[120437,120437],"mapped",[102]],[[120438,120438],"mapped",[103]],[[120439,120439],"mapped",[104]],[[120440,120440],"mapped",[105]],[[120441,120441],"mapped",[106]],[[120442,120442],"mapped",[107]],[[120443,120443],"mapped",[108]],[[120444,120444],"mapped",[109]],[[120445,120445],"mapped",[110]],[[120446,120446],"mapped",[111]],[[120447,120447],"mapped",[112]],[[120448,120448],"mapped",[113]],[[120449,120449],"mapped",[114]],[[120450,120450],"mapped",[115]],[[120451,120451],"mapped",[116]],[[120452,120452],"mapped",[117]],[[120453,120453],"mapped",[118]],[[120454,120454],"mapped",[119]],[[120455,120455],"mapped",[120]],[[120456,120456],"mapped",[121]],[[120457,120457],"mapped",[122]],[[120458,120458],"mapped",[97]],[[120459,120459],"mapped",[98]],[[120460,120460],"mapped",[99]],[[120461,120461],"mapped",[100]],[[120462,120462],"mapped",[101]],[[120463,120463],"mapped",[102]],[[120464,120464],"mapped",[103]],[[120465,120465],"mapped",[104]],[[120466,120466],"mapped",[105]],[[120467,120467],"mapped",[106]],[[120468,120468],"mapped",[107]],[[120469,120469],"mapped",[108]],[[120470,120470],"mapped",[109]],[[120471,120471],"mapped",[110]],[[120472,120472],"mapped",[111]],[[120473,120473],"mapped",[112]],[[120474,120474],"mapped",[113]],[[120475,120475],"mapped",[114]],[[120476,120476],"mapped",[115]],[[120477,120477],"mapped",[116]],[[120478,120478],"mapped",[117]],[[120479,120479],"mapped",[118]],[[120480,120480],"mapped",[119]],[[120481,120481],"mapped",[120]],[[120482,120482],"mapped",[121]],[[120483,120483],"mapped",[122]],[[120484,120484],"mapped",[305]],[[120485,120485],"mapped",[567]],[[120486,120487],"disallowed"],[[120488,120488],"mapped",[945]],[[120489,120489],"mapped",[946]],[[120490,120490],"mapped",[947]],[[120491,120491],"mapped",[948]],[[120492,120492],"mapped",[949]],[[120493,120493],"mapped",[950]],[[120494,120494],"mapped",[951]],[[120495,120495],"mapped",[952]],[[120496,120496],"mapped",[953]],[[120497,120497],"mapped",[954]],[[120498,120498],"mapped",[955]],[[120499,120499],"mapped",[956]],[[120500,120500],"mapped",[957]],[[120501,120501],"mapped",[958]],[[120502,120502],"mapped",[959]],[[120503,120503],"mapped",[960]],[[120504,120504],"mapped",[961]],[[120505,120505],"mapped",[952]],[[120506,120506],"mapped",[963]],[[120507,120507],"mapped",[964]],[[120508,120508],"mapped",[965]],[[120509,120509],"mapped",[966]],[[120510,120510],"mapped",[967]],[[120511,120511],"mapped",[968]],[[120512,120512],"mapped",[969]],[[120513,120513],"mapped",[8711]],[[120514,120514],"mapped",[945]],[[120515,120515],"mapped",[946]],[[120516,120516],"mapped",[947]],[[120517,120517],"mapped",[948]],[[120518,120518],"mapped",[949]],[[120519,120519],"mapped",[950]],[[120520,120520],"mapped",[951]],[[120521,120521],"mapped",[952]],[[120522,120522],"mapped",[953]],[[120523,120523],"mapped",[954]],[[120524,120524],"mapped",[955]],[[120525,120525],"mapped",[956]],[[120526,120526],"mapped",[957]],[[120527,120527],"mapped",[958]],[[120528,120528],"mapped",[959]],[[120529,120529],"mapped",[960]],[[120530,120530],"mapped",[961]],[[120531,120532],"mapped",[963]],[[120533,120533],"mapped",[964]],[[120534,120534],"mapped",[965]],[[120535,120535],"mapped",[966]],[[120536,120536],"mapped",[967]],[[120537,120537],"mapped",[968]],[[120538,120538],"mapped",[969]],[[120539,120539],"mapped",[8706]],[[120540,120540],"mapped",[949]],[[120541,120541],"mapped",[952]],[[120542,120542],"mapped",[954]],[[120543,120543],"mapped",[966]],[[120544,120544],"mapped",[961]],[[120545,120545],"mapped",[960]],[[120546,120546],"mapped",[945]],[[120547,120547],"mapped",[946]],[[120548,120548],"mapped",[947]],[[120549,120549],"mapped",[948]],[[120550,120550],"mapped",[949]],[[120551,120551],"mapped",[950]],[[120552,120552],"mapped",[951]],[[120553,120553],"mapped",[952]],[[120554,120554],"mapped",[953]],[[120555,120555],"mapped",[954]],[[120556,120556],"mapped",[955]],[[120557,120557],"mapped",[956]],[[120558,120558],"mapped",[957]],[[120559,120559],"mapped",[958]],[[120560,120560],"mapped",[959]],[[120561,120561],"mapped",[960]],[[120562,120562],"mapped",[961]],[[120563,120563],"mapped",[952]],[[120564,120564],"mapped",[963]],[[120565,120565],"mapped",[964]],[[120566,120566],"mapped",[965]],[[120567,120567],"mapped",[966]],[[120568,120568],"mapped",[967]],[[120569,120569],"mapped",[968]],[[120570,120570],"mapped",[969]],[[120571,120571],"mapped",[8711]],[[120572,120572],"mapped",[945]],[[120573,120573],"mapped",[946]],[[120574,120574],"mapped",[947]],[[120575,120575],"mapped",[948]],[[120576,120576],"mapped",[949]],[[120577,120577],"mapped",[950]],[[120578,120578],"mapped",[951]],[[120579,120579],"mapped",[952]],[[120580,120580],"mapped",[953]],[[120581,120581],"mapped",[954]],[[120582,120582],"mapped",[955]],[[120583,120583],"mapped",[956]],[[120584,120584],"mapped",[957]],[[120585,120585],"mapped",[958]],[[120586,120586],"mapped",[959]],[[120587,120587],"mapped",[960]],[[120588,120588],"mapped",[961]],[[120589,120590],"mapped",[963]],[[120591,120591],"mapped",[964]],[[120592,120592],"mapped",[965]],[[120593,120593],"mapped",[966]],[[120594,120594],"mapped",[967]],[[120595,120595],"mapped",[968]],[[120596,120596],"mapped",[969]],[[120597,120597],"mapped",[8706]],[[120598,120598],"mapped",[949]],[[120599,120599],"mapped",[952]],[[120600,120600],"mapped",[954]],[[120601,120601],"mapped",[966]],[[120602,120602],"mapped",[961]],[[120603,120603],"mapped",[960]],[[120604,120604],"mapped",[945]],[[120605,120605],"mapped",[946]],[[120606,120606],"mapped",[947]],[[120607,120607],"mapped",[948]],[[120608,120608],"mapped",[949]],[[120609,120609],"mapped",[950]],[[120610,120610],"mapped",[951]],[[120611,120611],"mapped",[952]],[[120612,120612],"mapped",[953]],[[120613,120613],"mapped",[954]],[[120614,120614],"mapped",[955]],[[120615,120615],"mapped",[956]],[[120616,120616],"mapped",[957]],[[120617,120617],"mapped",[958]],[[120618,120618],"mapped",[959]],[[120619,120619],"mapped",[960]],[[120620,120620],"mapped",[961]],[[120621,120621],"mapped",[952]],[[120622,120622],"mapped",[963]],[[120623,120623],"mapped",[964]],[[120624,120624],"mapped",[965]],[[120625,120625],"mapped",[966]],[[120626,120626],"mapped",[967]],[[120627,120627],"mapped",[968]],[[120628,120628],"mapped",[969]],[[120629,120629],"mapped",[8711]],[[120630,120630],"mapped",[945]],[[120631,120631],"mapped",[946]],[[120632,120632],"mapped",[947]],[[120633,120633],"mapped",[948]],[[120634,120634],"mapped",[949]],[[120635,120635],"mapped",[950]],[[120636,120636],"mapped",[951]],[[120637,120637],"mapped",[952]],[[120638,120638],"mapped",[953]],[[120639,120639],"mapped",[954]],[[120640,120640],"mapped",[955]],[[120641,120641],"mapped",[956]],[[120642,120642],"mapped",[957]],[[120643,120643],"mapped",[958]],[[120644,120644],"mapped",[959]],[[120645,120645],"mapped",[960]],[[120646,120646],"mapped",[961]],[[120647,120648],"mapped",[963]],[[120649,120649],"mapped",[964]],[[120650,120650],"mapped",[965]],[[120651,120651],"mapped",[966]],[[120652,120652],"mapped",[967]],[[120653,120653],"mapped",[968]],[[120654,120654],"mapped",[969]],[[120655,120655],"mapped",[8706]],[[120656,120656],"mapped",[949]],[[120657,120657],"mapped",[952]],[[120658,120658],"mapped",[954]],[[120659,120659],"mapped",[966]],[[120660,120660],"mapped",[961]],[[120661,120661],"mapped",[960]],[[120662,120662],"mapped",[945]],[[120663,120663],"mapped",[946]],[[120664,120664],"mapped",[947]],[[120665,120665],"mapped",[948]],[[120666,120666],"mapped",[949]],[[120667,120667],"mapped",[950]],[[120668,120668],"mapped",[951]],[[120669,120669],"mapped",[952]],[[120670,120670],"mapped",[953]],[[120671,120671],"mapped",[954]],[[120672,120672],"mapped",[955]],[[120673,120673],"mapped",[956]],[[120674,120674],"mapped",[957]],[[120675,120675],"mapped",[958]],[[120676,120676],"mapped",[959]],[[120677,120677],"mapped",[960]],[[120678,120678],"mapped",[961]],[[120679,120679],"mapped",[952]],[[120680,120680],"mapped",[963]],[[120681,120681],"mapped",[964]],[[120682,120682],"mapped",[965]],[[120683,120683],"mapped",[966]],[[120684,120684],"mapped",[967]],[[120685,120685],"mapped",[968]],[[120686,120686],"mapped",[969]],[[120687,120687],"mapped",[8711]],[[120688,120688],"mapped",[945]],[[120689,120689],"mapped",[946]],[[120690,120690],"mapped",[947]],[[120691,120691],"mapped",[948]],[[120692,120692],"mapped",[949]],[[120693,120693],"mapped",[950]],[[120694,120694],"mapped",[951]],[[120695,120695],"mapped",[952]],[[120696,120696],"mapped",[953]],[[120697,120697],"mapped",[954]],[[120698,120698],"mapped",[955]],[[120699,120699],"mapped",[956]],[[120700,120700],"mapped",[957]],[[120701,120701],"mapped",[958]],[[120702,120702],"mapped",[959]],[[120703,120703],"mapped",[960]],[[120704,120704],"mapped",[961]],[[120705,120706],"mapped",[963]],[[120707,120707],"mapped",[964]],[[120708,120708],"mapped",[965]],[[120709,120709],"mapped",[966]],[[120710,120710],"mapped",[967]],[[120711,120711],"mapped",[968]],[[120712,120712],"mapped",[969]],[[120713,120713],"mapped",[8706]],[[120714,120714],"mapped",[949]],[[120715,120715],"mapped",[952]],[[120716,120716],"mapped",[954]],[[120717,120717],"mapped",[966]],[[120718,120718],"mapped",[961]],[[120719,120719],"mapped",[960]],[[120720,120720],"mapped",[945]],[[120721,120721],"mapped",[946]],[[120722,120722],"mapped",[947]],[[120723,120723],"mapped",[948]],[[120724,120724],"mapped",[949]],[[120725,120725],"mapped",[950]],[[120726,120726],"mapped",[951]],[[120727,120727],"mapped",[952]],[[120728,120728],"mapped",[953]],[[120729,120729],"mapped",[954]],[[120730,120730],"mapped",[955]],[[120731,120731],"mapped",[956]],[[120732,120732],"mapped",[957]],[[120733,120733],"mapped",[958]],[[120734,120734],"mapped",[959]],[[120735,120735],"mapped",[960]],[[120736,120736],"mapped",[961]],[[120737,120737],"mapped",[952]],[[120738,120738],"mapped",[963]],[[120739,120739],"mapped",[964]],[[120740,120740],"mapped",[965]],[[120741,120741],"mapped",[966]],[[120742,120742],"mapped",[967]],[[120743,120743],"mapped",[968]],[[120744,120744],"mapped",[969]],[[120745,120745],"mapped",[8711]],[[120746,120746],"mapped",[945]],[[120747,120747],"mapped",[946]],[[120748,120748],"mapped",[947]],[[120749,120749],"mapped",[948]],[[120750,120750],"mapped",[949]],[[120751,120751],"mapped",[950]],[[120752,120752],"mapped",[951]],[[120753,120753],"mapped",[952]],[[120754,120754],"mapped",[953]],[[120755,120755],"mapped",[954]],[[120756,120756],"mapped",[955]],[[120757,120757],"mapped",[956]],[[120758,120758],"mapped",[957]],[[120759,120759],"mapped",[958]],[[120760,120760],"mapped",[959]],[[120761,120761],"mapped",[960]],[[120762,120762],"mapped",[961]],[[120763,120764],"mapped",[963]],[[120765,120765],"mapped",[964]],[[120766,120766],"mapped",[965]],[[120767,120767],"mapped",[966]],[[120768,120768],"mapped",[967]],[[120769,120769],"mapped",[968]],[[120770,120770],"mapped",[969]],[[120771,120771],"mapped",[8706]],[[120772,120772],"mapped",[949]],[[120773,120773],"mapped",[952]],[[120774,120774],"mapped",[954]],[[120775,120775],"mapped",[966]],[[120776,120776],"mapped",[961]],[[120777,120777],"mapped",[960]],[[120778,120779],"mapped",[989]],[[120780,120781],"disallowed"],[[120782,120782],"mapped",[48]],[[120783,120783],"mapped",[49]],[[120784,120784],"mapped",[50]],[[120785,120785],"mapped",[51]],[[120786,120786],"mapped",[52]],[[120787,120787],"mapped",[53]],[[120788,120788],"mapped",[54]],[[120789,120789],"mapped",[55]],[[120790,120790],"mapped",[56]],[[120791,120791],"mapped",[57]],[[120792,120792],"mapped",[48]],[[120793,120793],"mapped",[49]],[[120794,120794],"mapped",[50]],[[120795,120795],"mapped",[51]],[[120796,120796],"mapped",[52]],[[120797,120797],"mapped",[53]],[[120798,120798],"mapped",[54]],[[120799,120799],"mapped",[55]],[[120800,120800],"mapped",[56]],[[120801,120801],"mapped",[57]],[[120802,120802],"mapped",[48]],[[120803,120803],"mapped",[49]],[[120804,120804],"mapped",[50]],[[120805,120805],"mapped",[51]],[[120806,120806],"mapped",[52]],[[120807,120807],"mapped",[53]],[[120808,120808],"mapped",[54]],[[120809,120809],"mapped",[55]],[[120810,120810],"mapped",[56]],[[120811,120811],"mapped",[57]],[[120812,120812],"mapped",[48]],[[120813,120813],"mapped",[49]],[[120814,120814],"mapped",[50]],[[120815,120815],"mapped",[51]],[[120816,120816],"mapped",[52]],[[120817,120817],"mapped",[53]],[[120818,120818],"mapped",[54]],[[120819,120819],"mapped",[55]],[[120820,120820],"mapped",[56]],[[120821,120821],"mapped",[57]],[[120822,120822],"mapped",[48]],[[120823,120823],"mapped",[49]],[[120824,120824],"mapped",[50]],[[120825,120825],"mapped",[51]],[[120826,120826],"mapped",[52]],[[120827,120827],"mapped",[53]],[[120828,120828],"mapped",[54]],[[120829,120829],"mapped",[55]],[[120830,120830],"mapped",[56]],[[120831,120831],"mapped",[57]],[[120832,121343],"valid",[],"NV8"],[[121344,121398],"valid"],[[121399,121402],"valid",[],"NV8"],[[121403,121452],"valid"],[[121453,121460],"valid",[],"NV8"],[[121461,121461],"valid"],[[121462,121475],"valid",[],"NV8"],[[121476,121476],"valid"],[[121477,121483],"valid",[],"NV8"],[[121484,121498],"disallowed"],[[121499,121503],"valid"],[[121504,121504],"disallowed"],[[121505,121519],"valid"],[[121520,124927],"disallowed"],[[124928,125124],"valid"],[[125125,125126],"disallowed"],[[125127,125135],"valid",[],"NV8"],[[125136,125142],"valid"],[[125143,126463],"disallowed"],[[126464,126464],"mapped",[1575]],[[126465,126465],"mapped",[1576]],[[126466,126466],"mapped",[1580]],[[126467,126467],"mapped",[1583]],[[126468,126468],"disallowed"],[[126469,126469],"mapped",[1608]],[[126470,126470],"mapped",[1586]],[[126471,126471],"mapped",[1581]],[[126472,126472],"mapped",[1591]],[[126473,126473],"mapped",[1610]],[[126474,126474],"mapped",[1603]],[[126475,126475],"mapped",[1604]],[[126476,126476],"mapped",[1605]],[[126477,126477],"mapped",[1606]],[[126478,126478],"mapped",[1587]],[[126479,126479],"mapped",[1593]],[[126480,126480],"mapped",[1601]],[[126481,126481],"mapped",[1589]],[[126482,126482],"mapped",[1602]],[[126483,126483],"mapped",[1585]],[[126484,126484],"mapped",[1588]],[[126485,126485],"mapped",[1578]],[[126486,126486],"mapped",[1579]],[[126487,126487],"mapped",[1582]],[[126488,126488],"mapped",[1584]],[[126489,126489],"mapped",[1590]],[[126490,126490],"mapped",[1592]],[[126491,126491],"mapped",[1594]],[[126492,126492],"mapped",[1646]],[[126493,126493],"mapped",[1722]],[[126494,126494],"mapped",[1697]],[[126495,126495],"mapped",[1647]],[[126496,126496],"disallowed"],[[126497,126497],"mapped",[1576]],[[126498,126498],"mapped",[1580]],[[126499,126499],"disallowed"],[[126500,126500],"mapped",[1607]],[[126501,126502],"disallowed"],[[126503,126503],"mapped",[1581]],[[126504,126504],"disallowed"],[[126505,126505],"mapped",[1610]],[[126506,126506],"mapped",[1603]],[[126507,126507],"mapped",[1604]],[[126508,126508],"mapped",[1605]],[[126509,126509],"mapped",[1606]],[[126510,126510],"mapped",[1587]],[[126511,126511],"mapped",[1593]],[[126512,126512],"mapped",[1601]],[[126513,126513],"mapped",[1589]],[[126514,126514],"mapped",[1602]],[[126515,126515],"disallowed"],[[126516,126516],"mapped",[1588]],[[126517,126517],"mapped",[1578]],[[126518,126518],"mapped",[1579]],[[126519,126519],"mapped",[1582]],[[126520,126520],"disallowed"],[[126521,126521],"mapped",[1590]],[[126522,126522],"disallowed"],[[126523,126523],"mapped",[1594]],[[126524,126529],"disallowed"],[[126530,126530],"mapped",[1580]],[[126531,126534],"disallowed"],[[126535,126535],"mapped",[1581]],[[126536,126536],"disallowed"],[[126537,126537],"mapped",[1610]],[[126538,126538],"disallowed"],[[126539,126539],"mapped",[1604]],[[126540,126540],"disallowed"],[[126541,126541],"mapped",[1606]],[[126542,126542],"mapped",[1587]],[[126543,126543],"mapped",[1593]],[[126544,126544],"disallowed"],[[126545,126545],"mapped",[1589]],[[126546,126546],"mapped",[1602]],[[126547,126547],"disallowed"],[[126548,126548],"mapped",[1588]],[[126549,126550],"disallowed"],[[126551,126551],"mapped",[1582]],[[126552,126552],"disallowed"],[[126553,126553],"mapped",[1590]],[[126554,126554],"disallowed"],[[126555,126555],"mapped",[1594]],[[126556,126556],"disallowed"],[[126557,126557],"mapped",[1722]],[[126558,126558],"disallowed"],[[126559,126559],"mapped",[1647]],[[126560,126560],"disallowed"],[[126561,126561],"mapped",[1576]],[[126562,126562],"mapped",[1580]],[[126563,126563],"disallowed"],[[126564,126564],"mapped",[1607]],[[126565,126566],"disallowed"],[[126567,126567],"mapped",[1581]],[[126568,126568],"mapped",[1591]],[[126569,126569],"mapped",[1610]],[[126570,126570],"mapped",[1603]],[[126571,126571],"disallowed"],[[126572,126572],"mapped",[1605]],[[126573,126573],"mapped",[1606]],[[126574,126574],"mapped",[1587]],[[126575,126575],"mapped",[1593]],[[126576,126576],"mapped",[1601]],[[126577,126577],"mapped",[1589]],[[126578,126578],"mapped",[1602]],[[126579,126579],"disallowed"],[[126580,126580],"mapped",[1588]],[[126581,126581],"mapped",[1578]],[[126582,126582],"mapped",[1579]],[[126583,126583],"mapped",[1582]],[[126584,126584],"disallowed"],[[126585,126585],"mapped",[1590]],[[126586,126586],"mapped",[1592]],[[126587,126587],"mapped",[1594]],[[126588,126588],"mapped",[1646]],[[126589,126589],"disallowed"],[[126590,126590],"mapped",[1697]],[[126591,126591],"disallowed"],[[126592,126592],"mapped",[1575]],[[126593,126593],"mapped",[1576]],[[126594,126594],"mapped",[1580]],[[126595,126595],"mapped",[1583]],[[126596,126596],"mapped",[1607]],[[126597,126597],"mapped",[1608]],[[126598,126598],"mapped",[1586]],[[126599,126599],"mapped",[1581]],[[126600,126600],"mapped",[1591]],[[126601,126601],"mapped",[1610]],[[126602,126602],"disallowed"],[[126603,126603],"mapped",[1604]],[[126604,126604],"mapped",[1605]],[[126605,126605],"mapped",[1606]],[[126606,126606],"mapped",[1587]],[[126607,126607],"mapped",[1593]],[[126608,126608],"mapped",[1601]],[[126609,126609],"mapped",[1589]],[[126610,126610],"mapped",[1602]],[[126611,126611],"mapped",[1585]],[[126612,126612],"mapped",[1588]],[[126613,126613],"mapped",[1578]],[[126614,126614],"mapped",[1579]],[[126615,126615],"mapped",[1582]],[[126616,126616],"mapped",[1584]],[[126617,126617],"mapped",[1590]],[[126618,126618],"mapped",[1592]],[[126619,126619],"mapped",[1594]],[[126620,126624],"disallowed"],[[126625,126625],"mapped",[1576]],[[126626,126626],"mapped",[1580]],[[126627,126627],"mapped",[1583]],[[126628,126628],"disallowed"],[[126629,126629],"mapped",[1608]],[[126630,126630],"mapped",[1586]],[[126631,126631],"mapped",[1581]],[[126632,126632],"mapped",[1591]],[[126633,126633],"mapped",[1610]],[[126634,126634],"disallowed"],[[126635,126635],"mapped",[1604]],[[126636,126636],"mapped",[1605]],[[126637,126637],"mapped",[1606]],[[126638,126638],"mapped",[1587]],[[126639,126639],"mapped",[1593]],[[126640,126640],"mapped",[1601]],[[126641,126641],"mapped",[1589]],[[126642,126642],"mapped",[1602]],[[126643,126643],"mapped",[1585]],[[126644,126644],"mapped",[1588]],[[126645,126645],"mapped",[1578]],[[126646,126646],"mapped",[1579]],[[126647,126647],"mapped",[1582]],[[126648,126648],"mapped",[1584]],[[126649,126649],"mapped",[1590]],[[126650,126650],"mapped",[1592]],[[126651,126651],"mapped",[1594]],[[126652,126703],"disallowed"],[[126704,126705],"valid",[],"NV8"],[[126706,126975],"disallowed"],[[126976,127019],"valid",[],"NV8"],[[127020,127023],"disallowed"],[[127024,127123],"valid",[],"NV8"],[[127124,127135],"disallowed"],[[127136,127150],"valid",[],"NV8"],[[127151,127152],"disallowed"],[[127153,127166],"valid",[],"NV8"],[[127167,127167],"valid",[],"NV8"],[[127168,127168],"disallowed"],[[127169,127183],"valid",[],"NV8"],[[127184,127184],"disallowed"],[[127185,127199],"valid",[],"NV8"],[[127200,127221],"valid",[],"NV8"],[[127222,127231],"disallowed"],[[127232,127232],"disallowed"],[[127233,127233],"disallowed_STD3_mapped",[48,44]],[[127234,127234],"disallowed_STD3_mapped",[49,44]],[[127235,127235],"disallowed_STD3_mapped",[50,44]],[[127236,127236],"disallowed_STD3_mapped",[51,44]],[[127237,127237],"disallowed_STD3_mapped",[52,44]],[[127238,127238],"disallowed_STD3_mapped",[53,44]],[[127239,127239],"disallowed_STD3_mapped",[54,44]],[[127240,127240],"disallowed_STD3_mapped",[55,44]],[[127241,127241],"disallowed_STD3_mapped",[56,44]],[[127242,127242],"disallowed_STD3_mapped",[57,44]],[[127243,127244],"valid",[],"NV8"],[[127245,127247],"disallowed"],[[127248,127248],"disallowed_STD3_mapped",[40,97,41]],[[127249,127249],"disallowed_STD3_mapped",[40,98,41]],[[127250,127250],"disallowed_STD3_mapped",[40,99,41]],[[127251,127251],"disallowed_STD3_mapped",[40,100,41]],[[127252,127252],"disallowed_STD3_mapped",[40,101,41]],[[127253,127253],"disallowed_STD3_mapped",[40,102,41]],[[127254,127254],"disallowed_STD3_mapped",[40,103,41]],[[127255,127255],"disallowed_STD3_mapped",[40,104,41]],[[127256,127256],"disallowed_STD3_mapped",[40,105,41]],[[127257,127257],"disallowed_STD3_mapped",[40,106,41]],[[127258,127258],"disallowed_STD3_mapped",[40,107,41]],[[127259,127259],"disallowed_STD3_mapped",[40,108,41]],[[127260,127260],"disallowed_STD3_mapped",[40,109,41]],[[127261,127261],"disallowed_STD3_mapped",[40,110,41]],[[127262,127262],"disallowed_STD3_mapped",[40,111,41]],[[127263,127263],"disallowed_STD3_mapped",[40,112,41]],[[127264,127264],"disallowed_STD3_mapped",[40,113,41]],[[127265,127265],"disallowed_STD3_mapped",[40,114,41]],[[127266,127266],"disallowed_STD3_mapped",[40,115,41]],[[127267,127267],"disallowed_STD3_mapped",[40,116,41]],[[127268,127268],"disallowed_STD3_mapped",[40,117,41]],[[127269,127269],"disallowed_STD3_mapped",[40,118,41]],[[127270,127270],"disallowed_STD3_mapped",[40,119,41]],[[127271,127271],"disallowed_STD3_mapped",[40,120,41]],[[127272,127272],"disallowed_STD3_mapped",[40,121,41]],[[127273,127273],"disallowed_STD3_mapped",[40,122,41]],[[127274,127274],"mapped",[12308,115,12309]],[[127275,127275],"mapped",[99]],[[127276,127276],"mapped",[114]],[[127277,127277],"mapped",[99,100]],[[127278,127278],"mapped",[119,122]],[[127279,127279],"disallowed"],[[127280,127280],"mapped",[97]],[[127281,127281],"mapped",[98]],[[127282,127282],"mapped",[99]],[[127283,127283],"mapped",[100]],[[127284,127284],"mapped",[101]],[[127285,127285],"mapped",[102]],[[127286,127286],"mapped",[103]],[[127287,127287],"mapped",[104]],[[127288,127288],"mapped",[105]],[[127289,127289],"mapped",[106]],[[127290,127290],"mapped",[107]],[[127291,127291],"mapped",[108]],[[127292,127292],"mapped",[109]],[[127293,127293],"mapped",[110]],[[127294,127294],"mapped",[111]],[[127295,127295],"mapped",[112]],[[127296,127296],"mapped",[113]],[[127297,127297],"mapped",[114]],[[127298,127298],"mapped",[115]],[[127299,127299],"mapped",[116]],[[127300,127300],"mapped",[117]],[[127301,127301],"mapped",[118]],[[127302,127302],"mapped",[119]],[[127303,127303],"mapped",[120]],[[127304,127304],"mapped",[121]],[[127305,127305],"mapped",[122]],[[127306,127306],"mapped",[104,118]],[[127307,127307],"mapped",[109,118]],[[127308,127308],"mapped",[115,100]],[[127309,127309],"mapped",[115,115]],[[127310,127310],"mapped",[112,112,118]],[[127311,127311],"mapped",[119,99]],[[127312,127318],"valid",[],"NV8"],[[127319,127319],"valid",[],"NV8"],[[127320,127326],"valid",[],"NV8"],[[127327,127327],"valid",[],"NV8"],[[127328,127337],"valid",[],"NV8"],[[127338,127338],"mapped",[109,99]],[[127339,127339],"mapped",[109,100]],[[127340,127343],"disallowed"],[[127344,127352],"valid",[],"NV8"],[[127353,127353],"valid",[],"NV8"],[[127354,127354],"valid",[],"NV8"],[[127355,127356],"valid",[],"NV8"],[[127357,127358],"valid",[],"NV8"],[[127359,127359],"valid",[],"NV8"],[[127360,127369],"valid",[],"NV8"],[[127370,127373],"valid",[],"NV8"],[[127374,127375],"valid",[],"NV8"],[[127376,127376],"mapped",[100,106]],[[127377,127386],"valid",[],"NV8"],[[127387,127461],"disallowed"],[[127462,127487],"valid",[],"NV8"],[[127488,127488],"mapped",[12411,12363]],[[127489,127489],"mapped",[12467,12467]],[[127490,127490],"mapped",[12469]],[[127491,127503],"disallowed"],[[127504,127504],"mapped",[25163]],[[127505,127505],"mapped",[23383]],[[127506,127506],"mapped",[21452]],[[127507,127507],"mapped",[12487]],[[127508,127508],"mapped",[20108]],[[127509,127509],"mapped",[22810]],[[127510,127510],"mapped",[35299]],[[127511,127511],"mapped",[22825]],[[127512,127512],"mapped",[20132]],[[127513,127513],"mapped",[26144]],[[127514,127514],"mapped",[28961]],[[127515,127515],"mapped",[26009]],[[127516,127516],"mapped",[21069]],[[127517,127517],"mapped",[24460]],[[127518,127518],"mapped",[20877]],[[127519,127519],"mapped",[26032]],[[127520,127520],"mapped",[21021]],[[127521,127521],"mapped",[32066]],[[127522,127522],"mapped",[29983]],[[127523,127523],"mapped",[36009]],[[127524,127524],"mapped",[22768]],[[127525,127525],"mapped",[21561]],[[127526,127526],"mapped",[28436]],[[127527,127527],"mapped",[25237]],[[127528,127528],"mapped",[25429]],[[127529,127529],"mapped",[19968]],[[127530,127530],"mapped",[19977]],[[127531,127531],"mapped",[36938]],[[127532,127532],"mapped",[24038]],[[127533,127533],"mapped",[20013]],[[127534,127534],"mapped",[21491]],[[127535,127535],"mapped",[25351]],[[127536,127536],"mapped",[36208]],[[127537,127537],"mapped",[25171]],[[127538,127538],"mapped",[31105]],[[127539,127539],"mapped",[31354]],[[127540,127540],"mapped",[21512]],[[127541,127541],"mapped",[28288]],[[127542,127542],"mapped",[26377]],[[127543,127543],"mapped",[26376]],[[127544,127544],"mapped",[30003]],[[127545,127545],"mapped",[21106]],[[127546,127546],"mapped",[21942]],[[127547,127551],"disallowed"],[[127552,127552],"mapped",[12308,26412,12309]],[[127553,127553],"mapped",[12308,19977,12309]],[[127554,127554],"mapped",[12308,20108,12309]],[[127555,127555],"mapped",[12308,23433,12309]],[[127556,127556],"mapped",[12308,28857,12309]],[[127557,127557],"mapped",[12308,25171,12309]],[[127558,127558],"mapped",[12308,30423,12309]],[[127559,127559],"mapped",[12308,21213,12309]],[[127560,127560],"mapped",[12308,25943,12309]],[[127561,127567],"disallowed"],[[127568,127568],"mapped",[24471]],[[127569,127569],"mapped",[21487]],[[127570,127743],"disallowed"],[[127744,127776],"valid",[],"NV8"],[[127777,127788],"valid",[],"NV8"],[[127789,127791],"valid",[],"NV8"],[[127792,127797],"valid",[],"NV8"],[[127798,127798],"valid",[],"NV8"],[[127799,127868],"valid",[],"NV8"],[[127869,127869],"valid",[],"NV8"],[[127870,127871],"valid",[],"NV8"],[[127872,127891],"valid",[],"NV8"],[[127892,127903],"valid",[],"NV8"],[[127904,127940],"valid",[],"NV8"],[[127941,127941],"valid",[],"NV8"],[[127942,127946],"valid",[],"NV8"],[[127947,127950],"valid",[],"NV8"],[[127951,127955],"valid",[],"NV8"],[[127956,127967],"valid",[],"NV8"],[[127968,127984],"valid",[],"NV8"],[[127985,127991],"valid",[],"NV8"],[[127992,127999],"valid",[],"NV8"],[[128000,128062],"valid",[],"NV8"],[[128063,128063],"valid",[],"NV8"],[[128064,128064],"valid",[],"NV8"],[[128065,128065],"valid",[],"NV8"],[[128066,128247],"valid",[],"NV8"],[[128248,128248],"valid",[],"NV8"],[[128249,128252],"valid",[],"NV8"],[[128253,128254],"valid",[],"NV8"],[[128255,128255],"valid",[],"NV8"],[[128256,128317],"valid",[],"NV8"],[[128318,128319],"valid",[],"NV8"],[[128320,128323],"valid",[],"NV8"],[[128324,128330],"valid",[],"NV8"],[[128331,128335],"valid",[],"NV8"],[[128336,128359],"valid",[],"NV8"],[[128360,128377],"valid",[],"NV8"],[[128378,128378],"disallowed"],[[128379,128419],"valid",[],"NV8"],[[128420,128420],"disallowed"],[[128421,128506],"valid",[],"NV8"],[[128507,128511],"valid",[],"NV8"],[[128512,128512],"valid",[],"NV8"],[[128513,128528],"valid",[],"NV8"],[[128529,128529],"valid",[],"NV8"],[[128530,128532],"valid",[],"NV8"],[[128533,128533],"valid",[],"NV8"],[[128534,128534],"valid",[],"NV8"],[[128535,128535],"valid",[],"NV8"],[[128536,128536],"valid",[],"NV8"],[[128537,128537],"valid",[],"NV8"],[[128538,128538],"valid",[],"NV8"],[[128539,128539],"valid",[],"NV8"],[[128540,128542],"valid",[],"NV8"],[[128543,128543],"valid",[],"NV8"],[[128544,128549],"valid",[],"NV8"],[[128550,128551],"valid",[],"NV8"],[[128552,128555],"valid",[],"NV8"],[[128556,128556],"valid",[],"NV8"],[[128557,128557],"valid",[],"NV8"],[[128558,128559],"valid",[],"NV8"],[[128560,128563],"valid",[],"NV8"],[[128564,128564],"valid",[],"NV8"],[[128565,128576],"valid",[],"NV8"],[[128577,128578],"valid",[],"NV8"],[[128579,128580],"valid",[],"NV8"],[[128581,128591],"valid",[],"NV8"],[[128592,128639],"valid",[],"NV8"],[[128640,128709],"valid",[],"NV8"],[[128710,128719],"valid",[],"NV8"],[[128720,128720],"valid",[],"NV8"],[[128721,128735],"disallowed"],[[128736,128748],"valid",[],"NV8"],[[128749,128751],"disallowed"],[[128752,128755],"valid",[],"NV8"],[[128756,128767],"disallowed"],[[128768,128883],"valid",[],"NV8"],[[128884,128895],"disallowed"],[[128896,128980],"valid",[],"NV8"],[[128981,129023],"disallowed"],[[129024,129035],"valid",[],"NV8"],[[129036,129039],"disallowed"],[[129040,129095],"valid",[],"NV8"],[[129096,129103],"disallowed"],[[129104,129113],"valid",[],"NV8"],[[129114,129119],"disallowed"],[[129120,129159],"valid",[],"NV8"],[[129160,129167],"disallowed"],[[129168,129197],"valid",[],"NV8"],[[129198,129295],"disallowed"],[[129296,129304],"valid",[],"NV8"],[[129305,129407],"disallowed"],[[129408,129412],"valid",[],"NV8"],[[129413,129471],"disallowed"],[[129472,129472],"valid",[],"NV8"],[[129473,131069],"disallowed"],[[131070,131071],"disallowed"],[[131072,173782],"valid"],[[173783,173823],"disallowed"],[[173824,177972],"valid"],[[177973,177983],"disallowed"],[[177984,178205],"valid"],[[178206,178207],"disallowed"],[[178208,183969],"valid"],[[183970,194559],"disallowed"],[[194560,194560],"mapped",[20029]],[[194561,194561],"mapped",[20024]],[[194562,194562],"mapped",[20033]],[[194563,194563],"mapped",[131362]],[[194564,194564],"mapped",[20320]],[[194565,194565],"mapped",[20398]],[[194566,194566],"mapped",[20411]],[[194567,194567],"mapped",[20482]],[[194568,194568],"mapped",[20602]],[[194569,194569],"mapped",[20633]],[[194570,194570],"mapped",[20711]],[[194571,194571],"mapped",[20687]],[[194572,194572],"mapped",[13470]],[[194573,194573],"mapped",[132666]],[[194574,194574],"mapped",[20813]],[[194575,194575],"mapped",[20820]],[[194576,194576],"mapped",[20836]],[[194577,194577],"mapped",[20855]],[[194578,194578],"mapped",[132380]],[[194579,194579],"mapped",[13497]],[[194580,194580],"mapped",[20839]],[[194581,194581],"mapped",[20877]],[[194582,194582],"mapped",[132427]],[[194583,194583],"mapped",[20887]],[[194584,194584],"mapped",[20900]],[[194585,194585],"mapped",[20172]],[[194586,194586],"mapped",[20908]],[[194587,194587],"mapped",[20917]],[[194588,194588],"mapped",[168415]],[[194589,194589],"mapped",[20981]],[[194590,194590],"mapped",[20995]],[[194591,194591],"mapped",[13535]],[[194592,194592],"mapped",[21051]],[[194593,194593],"mapped",[21062]],[[194594,194594],"mapped",[21106]],[[194595,194595],"mapped",[21111]],[[194596,194596],"mapped",[13589]],[[194597,194597],"mapped",[21191]],[[194598,194598],"mapped",[21193]],[[194599,194599],"mapped",[21220]],[[194600,194600],"mapped",[21242]],[[194601,194601],"mapped",[21253]],[[194602,194602],"mapped",[21254]],[[194603,194603],"mapped",[21271]],[[194604,194604],"mapped",[21321]],[[194605,194605],"mapped",[21329]],[[194606,194606],"mapped",[21338]],[[194607,194607],"mapped",[21363]],[[194608,194608],"mapped",[21373]],[[194609,194611],"mapped",[21375]],[[194612,194612],"mapped",[133676]],[[194613,194613],"mapped",[28784]],[[194614,194614],"mapped",[21450]],[[194615,194615],"mapped",[21471]],[[194616,194616],"mapped",[133987]],[[194617,194617],"mapped",[21483]],[[194618,194618],"mapped",[21489]],[[194619,194619],"mapped",[21510]],[[194620,194620],"mapped",[21662]],[[194621,194621],"mapped",[21560]],[[194622,194622],"mapped",[21576]],[[194623,194623],"mapped",[21608]],[[194624,194624],"mapped",[21666]],[[194625,194625],"mapped",[21750]],[[194626,194626],"mapped",[21776]],[[194627,194627],"mapped",[21843]],[[194628,194628],"mapped",[21859]],[[194629,194630],"mapped",[21892]],[[194631,194631],"mapped",[21913]],[[194632,194632],"mapped",[21931]],[[194633,194633],"mapped",[21939]],[[194634,194634],"mapped",[21954]],[[194635,194635],"mapped",[22294]],[[194636,194636],"mapped",[22022]],[[194637,194637],"mapped",[22295]],[[194638,194638],"mapped",[22097]],[[194639,194639],"mapped",[22132]],[[194640,194640],"mapped",[20999]],[[194641,194641],"mapped",[22766]],[[194642,194642],"mapped",[22478]],[[194643,194643],"mapped",[22516]],[[194644,194644],"mapped",[22541]],[[194645,194645],"mapped",[22411]],[[194646,194646],"mapped",[22578]],[[194647,194647],"mapped",[22577]],[[194648,194648],"mapped",[22700]],[[194649,194649],"mapped",[136420]],[[194650,194650],"mapped",[22770]],[[194651,194651],"mapped",[22775]],[[194652,194652],"mapped",[22790]],[[194653,194653],"mapped",[22810]],[[194654,194654],"mapped",[22818]],[[194655,194655],"mapped",[22882]],[[194656,194656],"mapped",[136872]],[[194657,194657],"mapped",[136938]],[[194658,194658],"mapped",[23020]],[[194659,194659],"mapped",[23067]],[[194660,194660],"mapped",[23079]],[[194661,194661],"mapped",[23000]],[[194662,194662],"mapped",[23142]],[[194663,194663],"mapped",[14062]],[[194664,194664],"disallowed"],[[194665,194665],"mapped",[23304]],[[194666,194667],"mapped",[23358]],[[194668,194668],"mapped",[137672]],[[194669,194669],"mapped",[23491]],[[194670,194670],"mapped",[23512]],[[194671,194671],"mapped",[23527]],[[194672,194672],"mapped",[23539]],[[194673,194673],"mapped",[138008]],[[194674,194674],"mapped",[23551]],[[194675,194675],"mapped",[23558]],[[194676,194676],"disallowed"],[[194677,194677],"mapped",[23586]],[[194678,194678],"mapped",[14209]],[[194679,194679],"mapped",[23648]],[[194680,194680],"mapped",[23662]],[[194681,194681],"mapped",[23744]],[[194682,194682],"mapped",[23693]],[[194683,194683],"mapped",[138724]],[[194684,194684],"mapped",[23875]],[[194685,194685],"mapped",[138726]],[[194686,194686],"mapped",[23918]],[[194687,194687],"mapped",[23915]],[[194688,194688],"mapped",[23932]],[[194689,194689],"mapped",[24033]],[[194690,194690],"mapped",[24034]],[[194691,194691],"mapped",[14383]],[[194692,194692],"mapped",[24061]],[[194693,194693],"mapped",[24104]],[[194694,194694],"mapped",[24125]],[[194695,194695],"mapped",[24169]],[[194696,194696],"mapped",[14434]],[[194697,194697],"mapped",[139651]],[[194698,194698],"mapped",[14460]],[[194699,194699],"mapped",[24240]],[[194700,194700],"mapped",[24243]],[[194701,194701],"mapped",[24246]],[[194702,194702],"mapped",[24266]],[[194703,194703],"mapped",[172946]],[[194704,194704],"mapped",[24318]],[[194705,194706],"mapped",[140081]],[[194707,194707],"mapped",[33281]],[[194708,194709],"mapped",[24354]],[[194710,194710],"mapped",[14535]],[[194711,194711],"mapped",[144056]],[[194712,194712],"mapped",[156122]],[[194713,194713],"mapped",[24418]],[[194714,194714],"mapped",[24427]],[[194715,194715],"mapped",[14563]],[[194716,194716],"mapped",[24474]],[[194717,194717],"mapped",[24525]],[[194718,194718],"mapped",[24535]],[[194719,194719],"mapped",[24569]],[[194720,194720],"mapped",[24705]],[[194721,194721],"mapped",[14650]],[[194722,194722],"mapped",[14620]],[[194723,194723],"mapped",[24724]],[[194724,194724],"mapped",[141012]],[[194725,194725],"mapped",[24775]],[[194726,194726],"mapped",[24904]],[[194727,194727],"mapped",[24908]],[[194728,194728],"mapped",[24910]],[[194729,194729],"mapped",[24908]],[[194730,194730],"mapped",[24954]],[[194731,194731],"mapped",[24974]],[[194732,194732],"mapped",[25010]],[[194733,194733],"mapped",[24996]],[[194734,194734],"mapped",[25007]],[[194735,194735],"mapped",[25054]],[[194736,194736],"mapped",[25074]],[[194737,194737],"mapped",[25078]],[[194738,194738],"mapped",[25104]],[[194739,194739],"mapped",[25115]],[[194740,194740],"mapped",[25181]],[[194741,194741],"mapped",[25265]],[[194742,194742],"mapped",[25300]],[[194743,194743],"mapped",[25424]],[[194744,194744],"mapped",[142092]],[[194745,194745],"mapped",[25405]],[[194746,194746],"mapped",[25340]],[[194747,194747],"mapped",[25448]],[[194748,194748],"mapped",[25475]],[[194749,194749],"mapped",[25572]],[[194750,194750],"mapped",[142321]],[[194751,194751],"mapped",[25634]],[[194752,194752],"mapped",[25541]],[[194753,194753],"mapped",[25513]],[[194754,194754],"mapped",[14894]],[[194755,194755],"mapped",[25705]],[[194756,194756],"mapped",[25726]],[[194757,194757],"mapped",[25757]],[[194758,194758],"mapped",[25719]],[[194759,194759],"mapped",[14956]],[[194760,194760],"mapped",[25935]],[[194761,194761],"mapped",[25964]],[[194762,194762],"mapped",[143370]],[[194763,194763],"mapped",[26083]],[[194764,194764],"mapped",[26360]],[[194765,194765],"mapped",[26185]],[[194766,194766],"mapped",[15129]],[[194767,194767],"mapped",[26257]],[[194768,194768],"mapped",[15112]],[[194769,194769],"mapped",[15076]],[[194770,194770],"mapped",[20882]],[[194771,194771],"mapped",[20885]],[[194772,194772],"mapped",[26368]],[[194773,194773],"mapped",[26268]],[[194774,194774],"mapped",[32941]],[[194775,194775],"mapped",[17369]],[[194776,194776],"mapped",[26391]],[[194777,194777],"mapped",[26395]],[[194778,194778],"mapped",[26401]],[[194779,194779],"mapped",[26462]],[[194780,194780],"mapped",[26451]],[[194781,194781],"mapped",[144323]],[[194782,194782],"mapped",[15177]],[[194783,194783],"mapped",[26618]],[[194784,194784],"mapped",[26501]],[[194785,194785],"mapped",[26706]],[[194786,194786],"mapped",[26757]],[[194787,194787],"mapped",[144493]],[[194788,194788],"mapped",[26766]],[[194789,194789],"mapped",[26655]],[[194790,194790],"mapped",[26900]],[[194791,194791],"mapped",[15261]],[[194792,194792],"mapped",[26946]],[[194793,194793],"mapped",[27043]],[[194794,194794],"mapped",[27114]],[[194795,194795],"mapped",[27304]],[[194796,194796],"mapped",[145059]],[[194797,194797],"mapped",[27355]],[[194798,194798],"mapped",[15384]],[[194799,194799],"mapped",[27425]],[[194800,194800],"mapped",[145575]],[[194801,194801],"mapped",[27476]],[[194802,194802],"mapped",[15438]],[[194803,194803],"mapped",[27506]],[[194804,194804],"mapped",[27551]],[[194805,194805],"mapped",[27578]],[[194806,194806],"mapped",[27579]],[[194807,194807],"mapped",[146061]],[[194808,194808],"mapped",[138507]],[[194809,194809],"mapped",[146170]],[[194810,194810],"mapped",[27726]],[[194811,194811],"mapped",[146620]],[[194812,194812],"mapped",[27839]],[[194813,194813],"mapped",[27853]],[[194814,194814],"mapped",[27751]],[[194815,194815],"mapped",[27926]],[[194816,194816],"mapped",[27966]],[[194817,194817],"mapped",[28023]],[[194818,194818],"mapped",[27969]],[[194819,194819],"mapped",[28009]],[[194820,194820],"mapped",[28024]],[[194821,194821],"mapped",[28037]],[[194822,194822],"mapped",[146718]],[[194823,194823],"mapped",[27956]],[[194824,194824],"mapped",[28207]],[[194825,194825],"mapped",[28270]],[[194826,194826],"mapped",[15667]],[[194827,194827],"mapped",[28363]],[[194828,194828],"mapped",[28359]],[[194829,194829],"mapped",[147153]],[[194830,194830],"mapped",[28153]],[[194831,194831],"mapped",[28526]],[[194832,194832],"mapped",[147294]],[[194833,194833],"mapped",[147342]],[[194834,194834],"mapped",[28614]],[[194835,194835],"mapped",[28729]],[[194836,194836],"mapped",[28702]],[[194837,194837],"mapped",[28699]],[[194838,194838],"mapped",[15766]],[[194839,194839],"mapped",[28746]],[[194840,194840],"mapped",[28797]],[[194841,194841],"mapped",[28791]],[[194842,194842],"mapped",[28845]],[[194843,194843],"mapped",[132389]],[[194844,194844],"mapped",[28997]],[[194845,194845],"mapped",[148067]],[[194846,194846],"mapped",[29084]],[[194847,194847],"disallowed"],[[194848,194848],"mapped",[29224]],[[194849,194849],"mapped",[29237]],[[194850,194850],"mapped",[29264]],[[194851,194851],"mapped",[149000]],[[194852,194852],"mapped",[29312]],[[194853,194853],"mapped",[29333]],[[194854,194854],"mapped",[149301]],[[194855,194855],"mapped",[149524]],[[194856,194856],"mapped",[29562]],[[194857,194857],"mapped",[29579]],[[194858,194858],"mapped",[16044]],[[194859,194859],"mapped",[29605]],[[194860,194861],"mapped",[16056]],[[194862,194862],"mapped",[29767]],[[194863,194863],"mapped",[29788]],[[194864,194864],"mapped",[29809]],[[194865,194865],"mapped",[29829]],[[194866,194866],"mapped",[29898]],[[194867,194867],"mapped",[16155]],[[194868,194868],"mapped",[29988]],[[194869,194869],"mapped",[150582]],[[194870,194870],"mapped",[30014]],[[194871,194871],"mapped",[150674]],[[194872,194872],"mapped",[30064]],[[194873,194873],"mapped",[139679]],[[194874,194874],"mapped",[30224]],[[194875,194875],"mapped",[151457]],[[194876,194876],"mapped",[151480]],[[194877,194877],"mapped",[151620]],[[194878,194878],"mapped",[16380]],[[194879,194879],"mapped",[16392]],[[194880,194880],"mapped",[30452]],[[194881,194881],"mapped",[151795]],[[194882,194882],"mapped",[151794]],[[194883,194883],"mapped",[151833]],[[194884,194884],"mapped",[151859]],[[194885,194885],"mapped",[30494]],[[194886,194887],"mapped",[30495]],[[194888,194888],"mapped",[30538]],[[194889,194889],"mapped",[16441]],[[194890,194890],"mapped",[30603]],[[194891,194891],"mapped",[16454]],[[194892,194892],"mapped",[16534]],[[194893,194893],"mapped",[152605]],[[194894,194894],"mapped",[30798]],[[194895,194895],"mapped",[30860]],[[194896,194896],"mapped",[30924]],[[194897,194897],"mapped",[16611]],[[194898,194898],"mapped",[153126]],[[194899,194899],"mapped",[31062]],[[194900,194900],"mapped",[153242]],[[194901,194901],"mapped",[153285]],[[194902,194902],"mapped",[31119]],[[194903,194903],"mapped",[31211]],[[194904,194904],"mapped",[16687]],[[194905,194905],"mapped",[31296]],[[194906,194906],"mapped",[31306]],[[194907,194907],"mapped",[31311]],[[194908,194908],"mapped",[153980]],[[194909,194910],"mapped",[154279]],[[194911,194911],"disallowed"],[[194912,194912],"mapped",[16898]],[[194913,194913],"mapped",[154539]],[[194914,194914],"mapped",[31686]],[[194915,194915],"mapped",[31689]],[[194916,194916],"mapped",[16935]],[[194917,194917],"mapped",[154752]],[[194918,194918],"mapped",[31954]],[[194919,194919],"mapped",[17056]],[[194920,194920],"mapped",[31976]],[[194921,194921],"mapped",[31971]],[[194922,194922],"mapped",[32000]],[[194923,194923],"mapped",[155526]],[[194924,194924],"mapped",[32099]],[[194925,194925],"mapped",[17153]],[[194926,194926],"mapped",[32199]],[[194927,194927],"mapped",[32258]],[[194928,194928],"mapped",[32325]],[[194929,194929],"mapped",[17204]],[[194930,194930],"mapped",[156200]],[[194931,194931],"mapped",[156231]],[[194932,194932],"mapped",[17241]],[[194933,194933],"mapped",[156377]],[[194934,194934],"mapped",[32634]],[[194935,194935],"mapped",[156478]],[[194936,194936],"mapped",[32661]],[[194937,194937],"mapped",[32762]],[[194938,194938],"mapped",[32773]],[[194939,194939],"mapped",[156890]],[[194940,194940],"mapped",[156963]],[[194941,194941],"mapped",[32864]],[[194942,194942],"mapped",[157096]],[[194943,194943],"mapped",[32880]],[[194944,194944],"mapped",[144223]],[[194945,194945],"mapped",[17365]],[[194946,194946],"mapped",[32946]],[[194947,194947],"mapped",[33027]],[[194948,194948],"mapped",[17419]],[[194949,194949],"mapped",[33086]],[[194950,194950],"mapped",[23221]],[[194951,194951],"mapped",[157607]],[[194952,194952],"mapped",[157621]],[[194953,194953],"mapped",[144275]],[[194954,194954],"mapped",[144284]],[[194955,194955],"mapped",[33281]],[[194956,194956],"mapped",[33284]],[[194957,194957],"mapped",[36766]],[[194958,194958],"mapped",[17515]],[[194959,194959],"mapped",[33425]],[[194960,194960],"mapped",[33419]],[[194961,194961],"mapped",[33437]],[[194962,194962],"mapped",[21171]],[[194963,194963],"mapped",[33457]],[[194964,194964],"mapped",[33459]],[[194965,194965],"mapped",[33469]],[[194966,194966],"mapped",[33510]],[[194967,194967],"mapped",[158524]],[[194968,194968],"mapped",[33509]],[[194969,194969],"mapped",[33565]],[[194970,194970],"mapped",[33635]],[[194971,194971],"mapped",[33709]],[[194972,194972],"mapped",[33571]],[[194973,194973],"mapped",[33725]],[[194974,194974],"mapped",[33767]],[[194975,194975],"mapped",[33879]],[[194976,194976],"mapped",[33619]],[[194977,194977],"mapped",[33738]],[[194978,194978],"mapped",[33740]],[[194979,194979],"mapped",[33756]],[[194980,194980],"mapped",[158774]],[[194981,194981],"mapped",[159083]],[[194982,194982],"mapped",[158933]],[[194983,194983],"mapped",[17707]],[[194984,194984],"mapped",[34033]],[[194985,194985],"mapped",[34035]],[[194986,194986],"mapped",[34070]],[[194987,194987],"mapped",[160714]],[[194988,194988],"mapped",[34148]],[[194989,194989],"mapped",[159532]],[[194990,194990],"mapped",[17757]],[[194991,194991],"mapped",[17761]],[[194992,194992],"mapped",[159665]],[[194993,194993],"mapped",[159954]],[[194994,194994],"mapped",[17771]],[[194995,194995],"mapped",[34384]],[[194996,194996],"mapped",[34396]],[[194997,194997],"mapped",[34407]],[[194998,194998],"mapped",[34409]],[[194999,194999],"mapped",[34473]],[[195000,195000],"mapped",[34440]],[[195001,195001],"mapped",[34574]],[[195002,195002],"mapped",[34530]],[[195003,195003],"mapped",[34681]],[[195004,195004],"mapped",[34600]],[[195005,195005],"mapped",[34667]],[[195006,195006],"mapped",[34694]],[[195007,195007],"disallowed"],[[195008,195008],"mapped",[34785]],[[195009,195009],"mapped",[34817]],[[195010,195010],"mapped",[17913]],[[195011,195011],"mapped",[34912]],[[195012,195012],"mapped",[34915]],[[195013,195013],"mapped",[161383]],[[195014,195014],"mapped",[35031]],[[195015,195015],"mapped",[35038]],[[195016,195016],"mapped",[17973]],[[195017,195017],"mapped",[35066]],[[195018,195018],"mapped",[13499]],[[195019,195019],"mapped",[161966]],[[195020,195020],"mapped",[162150]],[[195021,195021],"mapped",[18110]],[[195022,195022],"mapped",[18119]],[[195023,195023],"mapped",[35488]],[[195024,195024],"mapped",[35565]],[[195025,195025],"mapped",[35722]],[[195026,195026],"mapped",[35925]],[[195027,195027],"mapped",[162984]],[[195028,195028],"mapped",[36011]],[[195029,195029],"mapped",[36033]],[[195030,195030],"mapped",[36123]],[[195031,195031],"mapped",[36215]],[[195032,195032],"mapped",[163631]],[[195033,195033],"mapped",[133124]],[[195034,195034],"mapped",[36299]],[[195035,195035],"mapped",[36284]],[[195036,195036],"mapped",[36336]],[[195037,195037],"mapped",[133342]],[[195038,195038],"mapped",[36564]],[[195039,195039],"mapped",[36664]],[[195040,195040],"mapped",[165330]],[[195041,195041],"mapped",[165357]],[[195042,195042],"mapped",[37012]],[[195043,195043],"mapped",[37105]],[[195044,195044],"mapped",[37137]],[[195045,195045],"mapped",[165678]],[[195046,195046],"mapped",[37147]],[[195047,195047],"mapped",[37432]],[[195048,195048],"mapped",[37591]],[[195049,195049],"mapped",[37592]],[[195050,195050],"mapped",[37500]],[[195051,195051],"mapped",[37881]],[[195052,195052],"mapped",[37909]],[[195053,195053],"mapped",[166906]],[[195054,195054],"mapped",[38283]],[[195055,195055],"mapped",[18837]],[[195056,195056],"mapped",[38327]],[[195057,195057],"mapped",[167287]],[[195058,195058],"mapped",[18918]],[[195059,195059],"mapped",[38595]],[[195060,195060],"mapped",[23986]],[[195061,195061],"mapped",[38691]],[[195062,195062],"mapped",[168261]],[[195063,195063],"mapped",[168474]],[[195064,195064],"mapped",[19054]],[[195065,195065],"mapped",[19062]],[[195066,195066],"mapped",[38880]],[[195067,195067],"mapped",[168970]],[[195068,195068],"mapped",[19122]],[[195069,195069],"mapped",[169110]],[[195070,195071],"mapped",[38923]],[[195072,195072],"mapped",[38953]],[[195073,195073],"mapped",[169398]],[[195074,195074],"mapped",[39138]],[[195075,195075],"mapped",[19251]],[[195076,195076],"mapped",[39209]],[[195077,195077],"mapped",[39335]],[[195078,195078],"mapped",[39362]],[[195079,195079],"mapped",[39422]],[[195080,195080],"mapped",[19406]],[[195081,195081],"mapped",[170800]],[[195082,195082],"mapped",[39698]],[[195083,195083],"mapped",[40000]],[[195084,195084],"mapped",[40189]],[[195085,195085],"mapped",[19662]],[[195086,195086],"mapped",[19693]],[[195087,195087],"mapped",[40295]],[[195088,195088],"mapped",[172238]],[[195089,195089],"mapped",[19704]],[[195090,195090],"mapped",[172293]],[[195091,195091],"mapped",[172558]],[[195092,195092],"mapped",[172689]],[[195093,195093],"mapped",[40635]],[[195094,195094],"mapped",[19798]],[[195095,195095],"mapped",[40697]],[[195096,195096],"mapped",[40702]],[[195097,195097],"mapped",[40709]],[[195098,195098],"mapped",[40719]],[[195099,195099],"mapped",[40726]],[[195100,195100],"mapped",[40763]],[[195101,195101],"mapped",[173568]],[[195102,196605],"disallowed"],[[196606,196607],"disallowed"],[[196608,262141],"disallowed"],[[262142,262143],"disallowed"],[[262144,327677],"disallowed"],[[327678,327679],"disallowed"],[[327680,393213],"disallowed"],[[393214,393215],"disallowed"],[[393216,458749],"disallowed"],[[458750,458751],"disallowed"],[[458752,524285],"disallowed"],[[524286,524287],"disallowed"],[[524288,589821],"disallowed"],[[589822,589823],"disallowed"],[[589824,655357],"disallowed"],[[655358,655359],"disallowed"],[[655360,720893],"disallowed"],[[720894,720895],"disallowed"],[[720896,786429],"disallowed"],[[786430,786431],"disallowed"],[[786432,851965],"disallowed"],[[851966,851967],"disallowed"],[[851968,917501],"disallowed"],[[917502,917503],"disallowed"],[[917504,917504],"disallowed"],[[917505,917505],"disallowed"],[[917506,917535],"disallowed"],[[917536,917631],"disallowed"],[[917632,917759],"disallowed"],[[917760,917999],"ignored"],[[918000,983037],"disallowed"],[[983038,983039],"disallowed"],[[983040,1048573],"disallowed"],[[1048574,1048575],"disallowed"],[[1048576,1114109],"disallowed"],[[1114110,1114111],"disallowed"]]'
      );
    }
  };
  var __webpack_module_cache__ = {};
  function __nccwpck_require__(a) {
    var C = __webpack_module_cache__[a];
    if (C !== undefined) {
      return C.exports;
    }
    var q = (__webpack_module_cache__[a] = { exports: {} });
    var re = true;
    try {
      __webpack_modules__[a].call(q.exports, q, q.exports, __nccwpck_require__);
      re = false;
    } finally {
      if (re) delete __webpack_module_cache__[a];
    }
    return q.exports;
  }
  __nccwpck_require__.m = __webpack_modules__;
  (() => {
    __nccwpck_require__.n = (a) => {
      var C = a && a.__esModule ? () => a['default'] : () => a;
      __nccwpck_require__.d(C, { a: C });
      return C;
    };
  })();
  (() => {
    __nccwpck_require__.d = (a, C) => {
      for (var q in C) {
        if (__nccwpck_require__.o(C, q) && !__nccwpck_require__.o(a, q)) {
          Object.defineProperty(a, q, { enumerable: true, get: C[q] });
        }
      }
    };
  })();
  (() => {
    __nccwpck_require__.f = {};
    __nccwpck_require__.e = (a) =>
      Promise.all(
        Object.keys(__nccwpck_require__.f).reduce((C, q) => {
          __nccwpck_require__.f[q](a, C);
          return C;
        }, [])
      );
  })();
  (() => {
    __nccwpck_require__.u = (a) => '' + a + '.index.js';
  })();
  (() => {
    __nccwpck_require__.o = (a, C) =>
      Object.prototype.hasOwnProperty.call(a, C);
  })();
  (() => {
    __nccwpck_require__.r = (a) => {
      if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        Object.defineProperty(a, Symbol.toStringTag, { value: 'Module' });
      }
      Object.defineProperty(a, '__esModule', { value: true });
    };
  })();
  if (typeof __nccwpck_require__ !== 'undefined')
    __nccwpck_require__.ab = __dirname + '/';
  (() => {
    var a = { 179: 1 };
    var installChunk = (C) => {
      var q = C.modules,
        re = C.ids,
        ae = C.runtime;
      for (var Ue in q) {
        if (__nccwpck_require__.o(q, Ue)) {
          __nccwpck_require__.m[Ue] = q[Ue];
        }
      }
      if (ae) ae(__nccwpck_require__);
      for (var lt = 0; lt < re.length; lt++) a[re[lt]] = 1;
    };
    __nccwpck_require__.f.require = (C, q) => {
      if (!a[C]) {
        if (true) {
          installChunk(require('./' + __nccwpck_require__.u(C)));
        } else a[C] = 1;
      }
    };
  })();
  var __webpack_exports__ = {};
  (() => {
    'use strict';
    __nccwpck_require__.r(__webpack_exports__);
    __nccwpck_require__.d(__webpack_exports__, {
      main_options: () => src_main_options
    });
    var a = {};
    __nccwpck_require__.r(a);
    __nccwpck_require__.d(a, {
      CDATA: () => un,
      Comment: () => ln,
      Directive: () => an,
      Doctype: () => pn,
      ElementType: () => sn,
      Root: () => nn,
      Script: () => cn,
      Style: () => An,
      Tag: () => dn,
      Text: () => on,
      isTag: () => isTag
    });
    var C = {};
    __nccwpck_require__.r(C);
    __nccwpck_require__.d(C, {
      DocumentPosition: () => Fn,
      append: () => append,
      appendChild: () => appendChild,
      compareDocumentPosition: () => compareDocumentPosition,
      existsOne: () => existsOne,
      filter: () => filter,
      find: () => find,
      findAll: () => findAll,
      findOne: () => findOne,
      findOneChild: () => findOneChild,
      getAttributeValue: () => getAttributeValue,
      getChildren: () => getChildren,
      getElementById: () => getElementById,
      getElements: () => getElements,
      getElementsByTagName: () => getElementsByTagName,
      getElementsByTagType: () => getElementsByTagType,
      getFeed: () => getFeed,
      getInnerHTML: () => getInnerHTML,
      getName: () => getName,
      getOuterHTML: () => getOuterHTML,
      getParent: () => getParent,
      getSiblings: () => getSiblings,
      getText: () => getText,
      hasAttrib: () => hasAttrib,
      hasChildren: () => hasChildren,
      innerText: () => innerText,
      isCDATA: () => isCDATA,
      isComment: () => isComment,
      isDocument: () => isDocument,
      isTag: () => node_isTag,
      isText: () => isText,
      nextElementSibling: () => nextElementSibling,
      prepend: () => prepend,
      prependChild: () => prependChild,
      prevElementSibling: () => prevElementSibling,
      removeElement: () => removeElement,
      removeSubsets: () => removeSubsets,
      replaceElement: () => replaceElement,
      testElement: () => testElement,
      textContent: () => textContent,
      uniqueSort: () => uniqueSort
    });
    var q = {};
    __nccwpck_require__.r(q);
    __nccwpck_require__.d(q, {
      DefaultHandler: () => DomHandler,
      DomHandler: () => DomHandler,
      DomUtils: () => C,
      ElementType: () => a,
      Parser: () => Parser,
      QuoteType: () => Ws,
      Tokenizer: () => Tokenizer,
      createDocumentStream: () => createDocumentStream,
      createDomStream: () => createDomStream,
      getFeed: () => getFeed,
      parseDOM: () => parseDOM,
      parseDocument: () => parseDocument,
      parseFeed: () => parseFeed
    });
    var re = {};
    __nccwpck_require__.r(re);
    __nccwpck_require__.d(re, {
      APIConnectionError: () => APIConnectionError,
      APIConnectionTimeoutError: () => APIConnectionTimeoutError,
      APIError: () => APIError,
      APIUserAbortError: () => APIUserAbortError,
      AuthenticationError: () => AuthenticationError,
      BadRequestError: () => BadRequestError,
      ConflictError: () => ConflictError,
      InternalServerError: () => InternalServerError,
      NotFoundError: () => NotFoundError,
      OpenAIError: () => error_OpenAIError,
      PermissionDeniedError: () => PermissionDeniedError,
      RateLimitError: () => RateLimitError,
      UnprocessableEntityError: () => UnprocessableEntityError
    });
    var ae = __nccwpck_require__(9093);
    var Ue = __nccwpck_require__(5942);
    function getUserAgent() {
      if (typeof navigator === 'object' && 'userAgent' in navigator) {
        return navigator.userAgent;
      }
      if (typeof process === 'object' && process.version !== undefined) {
        return `Node.js/${process.version.substr(1)} (${process.platform}; ${process.arch})`;
      }
      return '<environment undetectable>';
    }
    function register(a, C, q, re) {
      if (typeof q !== 'function') {
        throw new Error('method for before hook must be a function');
      }
      if (!re) {
        re = {};
      }
      if (Array.isArray(C)) {
        return C.reverse().reduce(
          (C, q) => register.bind(null, a, q, C, re),
          q
        )();
      }
      return Promise.resolve().then(() => {
        if (!a.registry[C]) {
          return q(re);
        }
        return a.registry[C].reduce((a, C) => C.hook.bind(null, a, re), q)();
      });
    }
    function addHook(a, C, q, re) {
      const ae = re;
      if (!a.registry[q]) {
        a.registry[q] = [];
      }
      if (C === 'before') {
        re = (a, C) =>
          Promise.resolve().then(ae.bind(null, C)).then(a.bind(null, C));
      }
      if (C === 'after') {
        re = (a, C) => {
          let q;
          return Promise.resolve()
            .then(a.bind(null, C))
            .then((a) => {
              q = a;
              return ae(q, C);
            })
            .then(() => q);
        };
      }
      if (C === 'error') {
        re = (a, C) =>
          Promise.resolve()
            .then(a.bind(null, C))
            .catch((a) => ae(a, C));
      }
      a.registry[q].push({ hook: re, orig: ae });
    }
    function removeHook(a, C, q) {
      if (!a.registry[C]) {
        return;
      }
      const re = a.registry[C].map((a) => a.orig).indexOf(q);
      if (re === -1) {
        return;
      }
      a.registry[C].splice(re, 1);
    }
    const lt = Function.bind;
    const Pt = lt.bind(lt);
    function bindApi(a, C, q) {
      const re = Pt(removeHook, null).apply(null, q ? [C, q] : [C]);
      a.api = { remove: re };
      a.remove = re;
      ['before', 'error', 'after', 'wrap'].forEach((re) => {
        const ae = q ? [C, re, q] : [C, re];
        a[re] = a.api[re] = Pt(addHook, null).apply(null, ae);
      });
    }
    function Singular() {
      const a = Symbol('Singular');
      const C = { registry: {} };
      const q = register.bind(null, C, a);
      bindApi(q, C, a);
      return q;
    }
    function Collection() {
      const a = { registry: {} };
      const C = register.bind(null, a);
      bindApi(C, a);
      return C;
    }
    const Wt = { Singular: Singular, Collection: Collection };
    var Ar = '0.0.0-development';
    var Er = `octokit-endpoint.js/${Ar} ${getUserAgent()}`;
    var Ir = {
      method: 'GET',
      baseUrl: 'https://api.github.com',
      headers: { accept: 'application/vnd.github.v3+json', 'user-agent': Er },
      mediaType: { format: '' }
    };
    function lowercaseKeys(a) {
      if (!a) {
        return {};
      }
      return Object.keys(a).reduce((C, q) => {
        C[q.toLowerCase()] = a[q];
        return C;
      }, {});
    }
    function isPlainObject(a) {
      if (typeof a !== 'object' || a === null) return false;
      if (Object.prototype.toString.call(a) !== '[object Object]') return false;
      const C = Object.getPrototypeOf(a);
      if (C === null) return true;
      const q =
        Object.prototype.hasOwnProperty.call(C, 'constructor') && C.constructor;
      return (
        typeof q === 'function' &&
        q instanceof q &&
        Function.prototype.call(q) === Function.prototype.call(a)
      );
    }
    function mergeDeep(a, C) {
      const q = Object.assign({}, a);
      Object.keys(C).forEach((re) => {
        if (isPlainObject(C[re])) {
          if (!(re in a)) Object.assign(q, { [re]: C[re] });
          else q[re] = mergeDeep(a[re], C[re]);
        } else {
          Object.assign(q, { [re]: C[re] });
        }
      });
      return q;
    }
    function removeUndefinedProperties(a) {
      for (const C in a) {
        if (a[C] === void 0) {
          delete a[C];
        }
      }
      return a;
    }
    function merge(a, C, q) {
      if (typeof C === 'string') {
        let [a, re] = C.split(' ');
        q = Object.assign(re ? { method: a, url: re } : { url: a }, q);
      } else {
        q = Object.assign({}, C);
      }
      q.headers = lowercaseKeys(q.headers);
      removeUndefinedProperties(q);
      removeUndefinedProperties(q.headers);
      const re = mergeDeep(a || {}, q);
      if (q.url === '/graphql') {
        if (a && a.mediaType.previews?.length) {
          re.mediaType.previews = a.mediaType.previews
            .filter((a) => !re.mediaType.previews.includes(a))
            .concat(re.mediaType.previews);
        }
        re.mediaType.previews = (re.mediaType.previews || []).map((a) =>
          a.replace(/-preview/, '')
        );
      }
      return re;
    }
    function addQueryParameters(a, C) {
      const q = /\?/.test(a) ? '&' : '?';
      const re = Object.keys(C);
      if (re.length === 0) {
        return a;
      }
      return (
        a +
        q +
        re
          .map((a) => {
            if (a === 'q') {
              return 'q=' + C.q.split('+').map(encodeURIComponent).join('+');
            }
            return `${a}=${encodeURIComponent(C[a])}`;
          })
          .join('&')
      );
    }
    var Br = /\{[^}]+\}/g;
    function removeNonChars(a) {
      return a.replace(/^\W+|\W+$/g, '').split(/,/);
    }
    function extractUrlVariableNames(a) {
      const C = a.match(Br);
      if (!C) {
        return [];
      }
      return C.map(removeNonChars).reduce((a, C) => a.concat(C), []);
    }
    function omit(a, C) {
      const q = { __proto__: null };
      for (const re of Object.keys(a)) {
        if (C.indexOf(re) === -1) {
          q[re] = a[re];
        }
      }
      return q;
    }
    function encodeReserved(a) {
      return a
        .split(/(%[0-9A-Fa-f]{2})/g)
        .map(function (a) {
          if (!/%[0-9A-Fa-f]/.test(a)) {
            a = encodeURI(a).replace(/%5B/g, '[').replace(/%5D/g, ']');
          }
          return a;
        })
        .join('');
    }
    function encodeUnreserved(a) {
      return encodeURIComponent(a).replace(/[!'()*]/g, function (a) {
        return '%' + a.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    function encodeValue(a, C, q) {
      C = a === '+' || a === '#' ? encodeReserved(C) : encodeUnreserved(C);
      if (q) {
        return encodeUnreserved(q) + '=' + C;
      } else {
        return C;
      }
    }
    function isDefined(a) {
      return a !== void 0 && a !== null;
    }
    function isKeyOperator(a) {
      return a === ';' || a === '&' || a === '?';
    }
    function getValues(a, C, q, re) {
      var ae = a[q],
        Ue = [];
      if (isDefined(ae) && ae !== '') {
        if (
          typeof ae === 'string' ||
          typeof ae === 'number' ||
          typeof ae === 'boolean'
        ) {
          ae = ae.toString();
          if (re && re !== '*') {
            ae = ae.substring(0, parseInt(re, 10));
          }
          Ue.push(encodeValue(C, ae, isKeyOperator(C) ? q : ''));
        } else {
          if (re === '*') {
            if (Array.isArray(ae)) {
              ae.filter(isDefined).forEach(function (a) {
                Ue.push(encodeValue(C, a, isKeyOperator(C) ? q : ''));
              });
            } else {
              Object.keys(ae).forEach(function (a) {
                if (isDefined(ae[a])) {
                  Ue.push(encodeValue(C, ae[a], a));
                }
              });
            }
          } else {
            const a = [];
            if (Array.isArray(ae)) {
              ae.filter(isDefined).forEach(function (q) {
                a.push(encodeValue(C, q));
              });
            } else {
              Object.keys(ae).forEach(function (q) {
                if (isDefined(ae[q])) {
                  a.push(encodeUnreserved(q));
                  a.push(encodeValue(C, ae[q].toString()));
                }
              });
            }
            if (isKeyOperator(C)) {
              Ue.push(encodeUnreserved(q) + '=' + a.join(','));
            } else if (a.length !== 0) {
              Ue.push(a.join(','));
            }
          }
        }
      } else {
        if (C === ';') {
          if (isDefined(ae)) {
            Ue.push(encodeUnreserved(q));
          }
        } else if (ae === '' && (C === '&' || C === '?')) {
          Ue.push(encodeUnreserved(q) + '=');
        } else if (ae === '') {
          Ue.push('');
        }
      }
      return Ue;
    }
    function parseUrl(a) {
      return { expand: expand.bind(null, a) };
    }
    function expand(a, C) {
      var q = ['+', '#', '.', '/', ';', '?', '&'];
      a = a.replace(/\{([^\{\}]+)\}|([^\{\}]+)/g, function (a, re, ae) {
        if (re) {
          let a = '';
          const ae = [];
          if (q.indexOf(re.charAt(0)) !== -1) {
            a = re.charAt(0);
            re = re.substr(1);
          }
          re.split(/,/g).forEach(function (q) {
            var re = /([^:\*]*)(?::(\d+)|(\*))?/.exec(q);
            ae.push(getValues(C, a, re[1], re[2] || re[3]));
          });
          if (a && a !== '+') {
            var Ue = ',';
            if (a === '?') {
              Ue = '&';
            } else if (a !== '#') {
              Ue = a;
            }
            return (ae.length !== 0 ? a : '') + ae.join(Ue);
          } else {
            return ae.join(',');
          }
        } else {
          return encodeReserved(ae);
        }
      });
      if (a === '/') {
        return a;
      } else {
        return a.replace(/\/$/, '');
      }
    }
    function dist_bundle_parse(a) {
      let C = a.method.toUpperCase();
      let q = (a.url || '/').replace(/:([a-z]\w+)/g, '{$1}');
      let re = Object.assign({}, a.headers);
      let ae;
      let Ue = omit(a, [
        'method',
        'baseUrl',
        'url',
        'headers',
        'request',
        'mediaType'
      ]);
      const lt = extractUrlVariableNames(q);
      q = parseUrl(q).expand(Ue);
      if (!/^http/.test(q)) {
        q = a.baseUrl + q;
      }
      const Pt = Object.keys(a)
        .filter((a) => lt.includes(a))
        .concat('baseUrl');
      const Wt = omit(Ue, Pt);
      const Ar = /application\/octet-stream/i.test(re.accept);
      if (!Ar) {
        if (a.mediaType.format) {
          re.accept = re.accept
            .split(/,/)
            .map((C) =>
              C.replace(
                /application\/vnd(\.\w+)(\.v3)?(\.\w+)?(\+json)?$/,
                `application/vnd$1$2.${a.mediaType.format}`
              )
            )
            .join(',');
        }
        if (q.endsWith('/graphql')) {
          if (a.mediaType.previews?.length) {
            const C = re.accept.match(/[\w-]+(?=-preview)/g) || [];
            re.accept = C.concat(a.mediaType.previews)
              .map((C) => {
                const q = a.mediaType.format
                  ? `.${a.mediaType.format}`
                  : '+json';
                return `application/vnd.github.${C}-preview${q}`;
              })
              .join(',');
          }
        }
      }
      if (['GET', 'HEAD'].includes(C)) {
        q = addQueryParameters(q, Wt);
      } else {
        if ('data' in Wt) {
          ae = Wt.data;
        } else {
          if (Object.keys(Wt).length) {
            ae = Wt;
          }
        }
      }
      if (!re['content-type'] && typeof ae !== 'undefined') {
        re['content-type'] = 'application/json; charset=utf-8';
      }
      if (['PATCH', 'PUT'].includes(C) && typeof ae === 'undefined') {
        ae = '';
      }
      return Object.assign(
        { method: C, url: q, headers: re },
        typeof ae !== 'undefined' ? { body: ae } : null,
        a.request ? { request: a.request } : null
      );
    }
    function endpointWithDefaults(a, C, q) {
      return dist_bundle_parse(merge(a, C, q));
    }
    function withDefaults(a, C) {
      const q = merge(a, C);
      const re = endpointWithDefaults.bind(null, q);
      return Object.assign(re, {
        DEFAULTS: q,
        defaults: withDefaults.bind(null, q),
        merge: merge.bind(null, q),
        parse: dist_bundle_parse
      });
    }
    var Qr = withDefaults(null, Ir);
    class RequestError extends Error {
      name;
      status;
      request;
      response;
      constructor(a, C, q) {
        super(a);
        this.name = 'HttpError';
        this.status = Number.parseInt(C);
        if (Number.isNaN(this.status)) {
          this.status = 0;
        }
        if ('response' in q) {
          this.response = q.response;
        }
        const re = Object.assign({}, q.request);
        if (q.request.headers.authorization) {
          re.headers = Object.assign({}, q.request.headers, {
            authorization: q.request.headers.authorization.replace(
              / .*$/,
              ' [REDACTED]'
            )
          });
        }
        re.url = re.url
          .replace(/\bclient_secret=\w+/g, 'client_secret=[REDACTED]')
          .replace(/\baccess_token=\w+/g, 'access_token=[REDACTED]');
        this.request = re;
      }
    }
    var kr = '0.0.0-development';
    var Dr = {
      headers: { 'user-agent': `octokit-request.js/${kr} ${getUserAgent()}` }
    };
    function dist_bundle_isPlainObject(a) {
      if (typeof a !== 'object' || a === null) return false;
      if (Object.prototype.toString.call(a) !== '[object Object]') return false;
      const C = Object.getPrototypeOf(a);
      if (C === null) return true;
      const q =
        Object.prototype.hasOwnProperty.call(C, 'constructor') && C.constructor;
      return (
        typeof q === 'function' &&
        q instanceof q &&
        Function.prototype.call(q) === Function.prototype.call(a)
      );
    }
    async function fetchWrapper(a) {
      const C = a.request?.fetch || globalThis.fetch;
      if (!C) {
        throw new Error(
          'fetch is not set. Please pass a fetch implementation as new Octokit({ request: { fetch }}). Learn more at https://github.com/octokit/octokit.js/#fetch-missing'
        );
      }
      const q = a.request?.log || console;
      const re = a.request?.parseSuccessResponseBody !== false;
      const ae =
        dist_bundle_isPlainObject(a.body) || Array.isArray(a.body)
          ? JSON.stringify(a.body)
          : a.body;
      const Ue = Object.fromEntries(
        Object.entries(a.headers).map(([a, C]) => [a, String(C)])
      );
      let lt;
      try {
        lt = await C(a.url, {
          method: a.method,
          body: ae,
          redirect: a.request?.redirect,
          headers: Ue,
          signal: a.request?.signal,
          ...(a.body && { duplex: 'half' })
        });
      } catch (C) {
        let q = 'Unknown Error';
        if (C instanceof Error) {
          if (C.name === 'AbortError') {
            C.status = 500;
            throw C;
          }
          q = C.message;
          if (C.name === 'TypeError' && 'cause' in C) {
            if (C.cause instanceof Error) {
              q = C.cause.message;
            } else if (typeof C.cause === 'string') {
              q = C.cause;
            }
          }
        }
        const re = new RequestError(q, 500, { request: a });
        re.cause = C;
        throw re;
      }
      const Pt = lt.status;
      const Wt = lt.url;
      const Ar = {};
      for (const [a, C] of lt.headers) {
        Ar[a] = C;
      }
      const Er = { url: Wt, status: Pt, headers: Ar, data: '' };
      if ('deprecation' in Ar) {
        const C = Ar.link && Ar.link.match(/<([^>]+)>; rel="deprecation"/);
        const re = C && C.pop();
        q.warn(
          `[@octokit/request] "${a.method} ${a.url}" is deprecated. It is scheduled to be removed on ${Ar.sunset}${re ? `. See ${re}` : ''}`
        );
      }
      if (Pt === 204 || Pt === 205) {
        return Er;
      }
      if (a.method === 'HEAD') {
        if (Pt < 400) {
          return Er;
        }
        throw new RequestError(lt.statusText, Pt, { response: Er, request: a });
      }
      if (Pt === 304) {
        Er.data = await getResponseData(lt);
        throw new RequestError('Not modified', Pt, {
          response: Er,
          request: a
        });
      }
      if (Pt >= 400) {
        Er.data = await getResponseData(lt);
        throw new RequestError(toErrorMessage(Er.data), Pt, {
          response: Er,
          request: a
        });
      }
      Er.data = re ? await getResponseData(lt) : lt.body;
      return Er;
    }
    async function getResponseData(a) {
      const C = a.headers.get('content-type');
      if (/application\/json/.test(C)) {
        return a
          .json()
          .catch(() => a.text())
          .catch(() => '');
      }
      if (!C || /^text\/|charset=utf-8$/.test(C)) {
        return a.text();
      }
      return a.arrayBuffer();
    }
    function toErrorMessage(a) {
      if (typeof a === 'string') {
        return a;
      }
      if (a instanceof ArrayBuffer) {
        return 'Unknown error';
      }
      if ('message' in a) {
        const C = 'documentation_url' in a ? ` - ${a.documentation_url}` : '';
        return Array.isArray(a.errors)
          ? `${a.message}: ${a.errors.map((a) => JSON.stringify(a)).join(', ')}${C}`
          : `${a.message}${C}`;
      }
      return `Unknown error: ${JSON.stringify(a)}`;
    }
    function dist_bundle_withDefaults(a, C) {
      const q = a.defaults(C);
      const newApi = function (a, C) {
        const re = q.merge(a, C);
        if (!re.request || !re.request.hook) {
          return fetchWrapper(q.parse(re));
        }
        const request2 = (a, C) => fetchWrapper(q.parse(q.merge(a, C)));
        Object.assign(request2, {
          endpoint: q,
          defaults: dist_bundle_withDefaults.bind(null, q)
        });
        return re.request.hook(request2, re);
      };
      return Object.assign(newApi, {
        endpoint: q,
        defaults: dist_bundle_withDefaults.bind(null, q)
      });
    }
    var Nr = dist_bundle_withDefaults(Qr, Dr);
    var Lr = '0.0.0-development';
    function _buildMessageForResponseErrors(a) {
      return (
        `Request failed due to following response errors:\n` +
        a.errors.map((a) => ` - ${a.message}`).join('\n')
      );
    }
    var Fr = class extends Error {
      constructor(a, C, q) {
        super(_buildMessageForResponseErrors(q));
        this.request = a;
        this.headers = C;
        this.response = q;
        this.errors = q.errors;
        this.data = q.data;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(this, this.constructor);
        }
      }
      name = 'GraphqlResponseError';
      errors;
      data;
    };
    var Mr = [
      'method',
      'baseUrl',
      'url',
      'headers',
      'request',
      'query',
      'mediaType'
    ];
    var Pr = ['query', 'method', 'url'];
    var Or = /\/api\/v3\/?$/;
    function graphql(a, C, q) {
      if (q) {
        if (typeof C === 'string' && 'query' in q) {
          return Promise.reject(
            new Error(
              `[@octokit/graphql] "query" cannot be used as variable name`
            )
          );
        }
        for (const a in q) {
          if (!Pr.includes(a)) continue;
          return Promise.reject(
            new Error(
              `[@octokit/graphql] "${a}" cannot be used as variable name`
            )
          );
        }
      }
      const re = typeof C === 'string' ? Object.assign({ query: C }, q) : C;
      const ae = Object.keys(re).reduce((a, C) => {
        if (Mr.includes(C)) {
          a[C] = re[C];
          return a;
        }
        if (!a.variables) {
          a.variables = {};
        }
        a.variables[C] = re[C];
        return a;
      }, {});
      const Ue = re.baseUrl || a.endpoint.DEFAULTS.baseUrl;
      if (Or.test(Ue)) {
        ae.url = Ue.replace(Or, '/api/graphql');
      }
      return a(ae).then((a) => {
        if (a.data.errors) {
          const C = {};
          for (const q of Object.keys(a.headers)) {
            C[q] = a.headers[q];
          }
          throw new Fr(ae, C, a.data);
        }
        return a.data.data;
      });
    }
    function graphql_dist_bundle_withDefaults(a, C) {
      const q = a.defaults(C);
      const newApi = (a, C) => graphql(q, a, C);
      return Object.assign(newApi, {
        defaults: graphql_dist_bundle_withDefaults.bind(null, q),
        endpoint: q.endpoint
      });
    }
    var xr = graphql_dist_bundle_withDefaults(Nr, {
      headers: { 'user-agent': `octokit-graphql.js/${Lr} ${getUserAgent()}` },
      method: 'POST',
      url: '/graphql'
    });
    function withCustomRequest(a) {
      return graphql_dist_bundle_withDefaults(a, {
        method: 'POST',
        url: '/graphql'
      });
    }
    var Ur = /^v1\./;
    var Gr = /^ghs_/;
    var Hr = /^ghu_/;
    async function auth(a) {
      const C = a.split(/\./).length === 3;
      const q = Ur.test(a) || Gr.test(a);
      const re = Hr.test(a);
      const ae = C
        ? 'app'
        : q
          ? 'installation'
          : re
            ? 'user-to-server'
            : 'oauth';
      return { type: 'token', token: a, tokenType: ae };
    }
    function withAuthorizationPrefix(a) {
      if (a.split(/\./).length === 3) {
        return `bearer ${a}`;
      }
      return `token ${a}`;
    }
    async function hook(a, C, q, re) {
      const ae = C.endpoint.merge(q, re);
      ae.headers.authorization = withAuthorizationPrefix(a);
      return C(ae);
    }
    var Vr = function createTokenAuth2(a) {
      if (!a) {
        throw new Error(
          '[@octokit/auth-token] No token passed to createTokenAuth'
        );
      }
      if (typeof a !== 'string') {
        throw new Error(
          '[@octokit/auth-token] Token passed to createTokenAuth is not a string'
        );
      }
      a = a.replace(/^(token|bearer) +/i, '');
      return Object.assign(auth.bind(null, a), { hook: hook.bind(null, a) });
    };
    const Wr = '6.1.2';
    const noop = () => {};
    const Yr = console.warn.bind(console);
    const jr = console.error.bind(console);
    const Jr = `octokit-core.js/${Wr} ${getUserAgent()}`;
    class Octokit {
      static VERSION = Wr;
      static defaults(a) {
        const C = class extends this {
          constructor(...C) {
            const q = C[0] || {};
            if (typeof a === 'function') {
              super(a(q));
              return;
            }
            super(
              Object.assign(
                {},
                a,
                q,
                q.userAgent && a.userAgent
                  ? { userAgent: `${q.userAgent} ${a.userAgent}` }
                  : null
              )
            );
          }
        };
        return C;
      }
      static plugins = [];
      static plugin(...a) {
        const C = this.plugins;
        const q = class extends this {
          static plugins = C.concat(a.filter((a) => !C.includes(a)));
        };
        return q;
      }
      constructor(a = {}) {
        const C = new Wt.Collection();
        const q = {
          baseUrl: Nr.endpoint.DEFAULTS.baseUrl,
          headers: {},
          request: Object.assign({}, a.request, {
            hook: C.bind(null, 'request')
          }),
          mediaType: { previews: [], format: '' }
        };
        q.headers['user-agent'] = a.userAgent ? `${a.userAgent} ${Jr}` : Jr;
        if (a.baseUrl) {
          q.baseUrl = a.baseUrl;
        }
        if (a.previews) {
          q.mediaType.previews = a.previews;
        }
        if (a.timeZone) {
          q.headers['time-zone'] = a.timeZone;
        }
        this.request = Nr.defaults(q);
        this.graphql = withCustomRequest(this.request).defaults(q);
        this.log = Object.assign(
          { debug: noop, info: noop, warn: Yr, error: jr },
          a.log
        );
        this.hook = C;
        if (!a.authStrategy) {
          if (!a.auth) {
            this.auth = async () => ({ type: 'unauthenticated' });
          } else {
            const q = Vr(a.auth);
            C.wrap('request', q.hook);
            this.auth = q;
          }
        } else {
          const { authStrategy: q, ...re } = a;
          const ae = q(
            Object.assign(
              {
                request: this.request,
                log: this.log,
                octokit: this,
                octokitOptions: re
              },
              a.auth
            )
          );
          C.wrap('request', ae.hook);
          this.auth = ae;
        }
        const re = this.constructor;
        for (let C = 0; C < re.plugins.length; ++C) {
          Object.assign(this, re.plugins[C](this, a));
        }
      }
      request;
      graphql;
      log;
      hook;
      auth;
    }
    const zr = '5.3.1';
    function requestLog(a) {
      a.hook.wrap('request', (C, q) => {
        a.log.debug('request', q);
        const re = Date.now();
        const ae = a.request.endpoint.parse(q);
        const Ue = ae.url.replace(q.baseUrl, '');
        return C(q)
          .then((C) => {
            const q = C.headers['x-github-request-id'];
            a.log.info(
              `${ae.method} ${Ue} - ${C.status} with id ${q} in ${Date.now() - re}ms`
            );
            return C;
          })
          .catch((C) => {
            const q = C.response?.headers['x-github-request-id'] || 'UNKNOWN';
            a.log.error(
              `${ae.method} ${Ue} - ${C.status} with id ${q} in ${Date.now() - re}ms`
            );
            throw C;
          });
      });
    }
    requestLog.VERSION = zr;
    var $r = '0.0.0-development';
    function normalizePaginatedListResponse(a) {
      if (!a.data) {
        return { ...a, data: [] };
      }
      const C = 'total_count' in a.data && !('url' in a.data);
      if (!C) return a;
      const q = a.data.incomplete_results;
      const re = a.data.repository_selection;
      const ae = a.data.total_count;
      delete a.data.incomplete_results;
      delete a.data.repository_selection;
      delete a.data.total_count;
      const Ue = Object.keys(a.data)[0];
      const lt = a.data[Ue];
      a.data = lt;
      if (typeof q !== 'undefined') {
        a.data.incomplete_results = q;
      }
      if (typeof re !== 'undefined') {
        a.data.repository_selection = re;
      }
      a.data.total_count = ae;
      return a;
    }
    function iterator(a, C, q) {
      const re =
        typeof C === 'function' ? C.endpoint(q) : a.request.endpoint(C, q);
      const ae = typeof C === 'function' ? C : a.request;
      const Ue = re.method;
      const lt = re.headers;
      let Pt = re.url;
      return {
        [Symbol.asyncIterator]: () => ({
          async next() {
            if (!Pt) return { done: true };
            try {
              const a = await ae({ method: Ue, url: Pt, headers: lt });
              const C = normalizePaginatedListResponse(a);
              Pt = ((C.headers.link || '').match(/<([^>]+)>;\s*rel="next"/) ||
                [])[1];
              return { value: C };
            } catch (a) {
              if (a.status !== 409) throw a;
              Pt = '';
              return { value: { status: 200, headers: {}, data: [] } };
            }
          }
        })
      };
    }
    function paginate(a, C, q, re) {
      if (typeof q === 'function') {
        re = q;
        q = void 0;
      }
      return gather(a, [], iterator(a, C, q)[Symbol.asyncIterator](), re);
    }
    function gather(a, C, q, re) {
      return q.next().then((ae) => {
        if (ae.done) {
          return C;
        }
        let Ue = false;
        function done() {
          Ue = true;
        }
        C = C.concat(re ? re(ae.value, done) : ae.value.data);
        if (Ue) {
          return C;
        }
        return gather(a, C, q, re);
      });
    }
    var Kr = Object.assign(paginate, { iterator: iterator });
    var Xr = null && [
      'GET /advisories',
      'GET /app/hook/deliveries',
      'GET /app/installation-requests',
      'GET /app/installations',
      'GET /assignments/{assignment_id}/accepted_assignments',
      'GET /classrooms',
      'GET /classrooms/{classroom_id}/assignments',
      'GET /enterprises/{enterprise}/copilot/usage',
      'GET /enterprises/{enterprise}/dependabot/alerts',
      'GET /enterprises/{enterprise}/secret-scanning/alerts',
      'GET /events',
      'GET /gists',
      'GET /gists/public',
      'GET /gists/starred',
      'GET /gists/{gist_id}/comments',
      'GET /gists/{gist_id}/commits',
      'GET /gists/{gist_id}/forks',
      'GET /installation/repositories',
      'GET /issues',
      'GET /licenses',
      'GET /marketplace_listing/plans',
      'GET /marketplace_listing/plans/{plan_id}/accounts',
      'GET /marketplace_listing/stubbed/plans',
      'GET /marketplace_listing/stubbed/plans/{plan_id}/accounts',
      'GET /networks/{owner}/{repo}/events',
      'GET /notifications',
      'GET /organizations',
      'GET /orgs/{org}/actions/cache/usage-by-repository',
      'GET /orgs/{org}/actions/permissions/repositories',
      'GET /orgs/{org}/actions/runners',
      'GET /orgs/{org}/actions/secrets',
      'GET /orgs/{org}/actions/secrets/{secret_name}/repositories',
      'GET /orgs/{org}/actions/variables',
      'GET /orgs/{org}/actions/variables/{name}/repositories',
      'GET /orgs/{org}/blocks',
      'GET /orgs/{org}/code-scanning/alerts',
      'GET /orgs/{org}/codespaces',
      'GET /orgs/{org}/codespaces/secrets',
      'GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories',
      'GET /orgs/{org}/copilot/billing/seats',
      'GET /orgs/{org}/copilot/usage',
      'GET /orgs/{org}/dependabot/alerts',
      'GET /orgs/{org}/dependabot/secrets',
      'GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories',
      'GET /orgs/{org}/events',
      'GET /orgs/{org}/failed_invitations',
      'GET /orgs/{org}/hooks',
      'GET /orgs/{org}/hooks/{hook_id}/deliveries',
      'GET /orgs/{org}/installations',
      'GET /orgs/{org}/invitations',
      'GET /orgs/{org}/invitations/{invitation_id}/teams',
      'GET /orgs/{org}/issues',
      'GET /orgs/{org}/members',
      'GET /orgs/{org}/members/{username}/codespaces',
      'GET /orgs/{org}/migrations',
      'GET /orgs/{org}/migrations/{migration_id}/repositories',
      'GET /orgs/{org}/organization-roles/{role_id}/teams',
      'GET /orgs/{org}/organization-roles/{role_id}/users',
      'GET /orgs/{org}/outside_collaborators',
      'GET /orgs/{org}/packages',
      'GET /orgs/{org}/packages/{package_type}/{package_name}/versions',
      'GET /orgs/{org}/personal-access-token-requests',
      'GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories',
      'GET /orgs/{org}/personal-access-tokens',
      'GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories',
      'GET /orgs/{org}/projects',
      'GET /orgs/{org}/properties/values',
      'GET /orgs/{org}/public_members',
      'GET /orgs/{org}/repos',
      'GET /orgs/{org}/rulesets',
      'GET /orgs/{org}/rulesets/rule-suites',
      'GET /orgs/{org}/secret-scanning/alerts',
      'GET /orgs/{org}/security-advisories',
      'GET /orgs/{org}/team/{team_slug}/copilot/usage',
      'GET /orgs/{org}/teams',
      'GET /orgs/{org}/teams/{team_slug}/discussions',
      'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments',
      'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions',
      'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions',
      'GET /orgs/{org}/teams/{team_slug}/invitations',
      'GET /orgs/{org}/teams/{team_slug}/members',
      'GET /orgs/{org}/teams/{team_slug}/projects',
      'GET /orgs/{org}/teams/{team_slug}/repos',
      'GET /orgs/{org}/teams/{team_slug}/teams',
      'GET /projects/columns/{column_id}/cards',
      'GET /projects/{project_id}/collaborators',
      'GET /projects/{project_id}/columns',
      'GET /repos/{owner}/{repo}/actions/artifacts',
      'GET /repos/{owner}/{repo}/actions/caches',
      'GET /repos/{owner}/{repo}/actions/organization-secrets',
      'GET /repos/{owner}/{repo}/actions/organization-variables',
      'GET /repos/{owner}/{repo}/actions/runners',
      'GET /repos/{owner}/{repo}/actions/runs',
      'GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts',
      'GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs',
      'GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs',
      'GET /repos/{owner}/{repo}/actions/secrets',
      'GET /repos/{owner}/{repo}/actions/variables',
      'GET /repos/{owner}/{repo}/actions/workflows',
      'GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs',
      'GET /repos/{owner}/{repo}/activity',
      'GET /repos/{owner}/{repo}/assignees',
      'GET /repos/{owner}/{repo}/branches',
      'GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations',
      'GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs',
      'GET /repos/{owner}/{repo}/code-scanning/alerts',
      'GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances',
      'GET /repos/{owner}/{repo}/code-scanning/analyses',
      'GET /repos/{owner}/{repo}/codespaces',
      'GET /repos/{owner}/{repo}/codespaces/devcontainers',
      'GET /repos/{owner}/{repo}/codespaces/secrets',
      'GET /repos/{owner}/{repo}/collaborators',
      'GET /repos/{owner}/{repo}/comments',
      'GET /repos/{owner}/{repo}/comments/{comment_id}/reactions',
      'GET /repos/{owner}/{repo}/commits',
      'GET /repos/{owner}/{repo}/commits/{commit_sha}/comments',
      'GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls',
      'GET /repos/{owner}/{repo}/commits/{ref}/check-runs',
      'GET /repos/{owner}/{repo}/commits/{ref}/check-suites',
      'GET /repos/{owner}/{repo}/commits/{ref}/status',
      'GET /repos/{owner}/{repo}/commits/{ref}/statuses',
      'GET /repos/{owner}/{repo}/contributors',
      'GET /repos/{owner}/{repo}/dependabot/alerts',
      'GET /repos/{owner}/{repo}/dependabot/secrets',
      'GET /repos/{owner}/{repo}/deployments',
      'GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses',
      'GET /repos/{owner}/{repo}/environments',
      'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies',
      'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps',
      'GET /repos/{owner}/{repo}/environments/{environment_name}/secrets',
      'GET /repos/{owner}/{repo}/environments/{environment_name}/variables',
      'GET /repos/{owner}/{repo}/events',
      'GET /repos/{owner}/{repo}/forks',
      'GET /repos/{owner}/{repo}/hooks',
      'GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries',
      'GET /repos/{owner}/{repo}/invitations',
      'GET /repos/{owner}/{repo}/issues',
      'GET /repos/{owner}/{repo}/issues/comments',
      'GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions',
      'GET /repos/{owner}/{repo}/issues/events',
      'GET /repos/{owner}/{repo}/issues/{issue_number}/comments',
      'GET /repos/{owner}/{repo}/issues/{issue_number}/events',
      'GET /repos/{owner}/{repo}/issues/{issue_number}/labels',
      'GET /repos/{owner}/{repo}/issues/{issue_number}/reactions',
      'GET /repos/{owner}/{repo}/issues/{issue_number}/timeline',
      'GET /repos/{owner}/{repo}/keys',
      'GET /repos/{owner}/{repo}/labels',
      'GET /repos/{owner}/{repo}/milestones',
      'GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels',
      'GET /repos/{owner}/{repo}/notifications',
      'GET /repos/{owner}/{repo}/pages/builds',
      'GET /repos/{owner}/{repo}/projects',
      'GET /repos/{owner}/{repo}/pulls',
      'GET /repos/{owner}/{repo}/pulls/comments',
      'GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions',
      'GET /repos/{owner}/{repo}/pulls/{pull_number}/comments',
      'GET /repos/{owner}/{repo}/pulls/{pull_number}/commits',
      'GET /repos/{owner}/{repo}/pulls/{pull_number}/files',
      'GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews',
      'GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments',
      'GET /repos/{owner}/{repo}/releases',
      'GET /repos/{owner}/{repo}/releases/{release_id}/assets',
      'GET /repos/{owner}/{repo}/releases/{release_id}/reactions',
      'GET /repos/{owner}/{repo}/rules/branches/{branch}',
      'GET /repos/{owner}/{repo}/rulesets',
      'GET /repos/{owner}/{repo}/rulesets/rule-suites',
      'GET /repos/{owner}/{repo}/secret-scanning/alerts',
      'GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations',
      'GET /repos/{owner}/{repo}/security-advisories',
      'GET /repos/{owner}/{repo}/stargazers',
      'GET /repos/{owner}/{repo}/subscribers',
      'GET /repos/{owner}/{repo}/tags',
      'GET /repos/{owner}/{repo}/teams',
      'GET /repos/{owner}/{repo}/topics',
      'GET /repositories',
      'GET /search/code',
      'GET /search/commits',
      'GET /search/issues',
      'GET /search/labels',
      'GET /search/repositories',
      'GET /search/topics',
      'GET /search/users',
      'GET /teams/{team_id}/discussions',
      'GET /teams/{team_id}/discussions/{discussion_number}/comments',
      'GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions',
      'GET /teams/{team_id}/discussions/{discussion_number}/reactions',
      'GET /teams/{team_id}/invitations',
      'GET /teams/{team_id}/members',
      'GET /teams/{team_id}/projects',
      'GET /teams/{team_id}/repos',
      'GET /teams/{team_id}/teams',
      'GET /user/blocks',
      'GET /user/codespaces',
      'GET /user/codespaces/secrets',
      'GET /user/emails',
      'GET /user/followers',
      'GET /user/following',
      'GET /user/gpg_keys',
      'GET /user/installations',
      'GET /user/installations/{installation_id}/repositories',
      'GET /user/issues',
      'GET /user/keys',
      'GET /user/marketplace_purchases',
      'GET /user/marketplace_purchases/stubbed',
      'GET /user/memberships/orgs',
      'GET /user/migrations',
      'GET /user/migrations/{migration_id}/repositories',
      'GET /user/orgs',
      'GET /user/packages',
      'GET /user/packages/{package_type}/{package_name}/versions',
      'GET /user/public_emails',
      'GET /user/repos',
      'GET /user/repository_invitations',
      'GET /user/social_accounts',
      'GET /user/ssh_signing_keys',
      'GET /user/starred',
      'GET /user/subscriptions',
      'GET /user/teams',
      'GET /users',
      'GET /users/{username}/events',
      'GET /users/{username}/events/orgs/{org}',
      'GET /users/{username}/events/public',
      'GET /users/{username}/followers',
      'GET /users/{username}/following',
      'GET /users/{username}/gists',
      'GET /users/{username}/gpg_keys',
      'GET /users/{username}/keys',
      'GET /users/{username}/orgs',
      'GET /users/{username}/packages',
      'GET /users/{username}/projects',
      'GET /users/{username}/received_events',
      'GET /users/{username}/received_events/public',
      'GET /users/{username}/repos',
      'GET /users/{username}/social_accounts',
      'GET /users/{username}/ssh_signing_keys',
      'GET /users/{username}/starred',
      'GET /users/{username}/subscriptions'
    ];
    function isPaginatingEndpoint(a) {
      if (typeof a === 'string') {
        return Xr.includes(a);
      } else {
        return false;
      }
    }
    function paginateRest(a) {
      return {
        paginate: Object.assign(paginate.bind(null, a), {
          iterator: iterator.bind(null, a)
        })
      };
    }
    paginateRest.VERSION = $r;
    const Zr = '13.2.4';
    const es = {
      actions: {
        addCustomLabelsToSelfHostedRunnerForOrg: [
          'POST /orgs/{org}/actions/runners/{runner_id}/labels'
        ],
        addCustomLabelsToSelfHostedRunnerForRepo: [
          'POST /repos/{owner}/{repo}/actions/runners/{runner_id}/labels'
        ],
        addSelectedRepoToOrgSecret: [
          'PUT /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'
        ],
        addSelectedRepoToOrgVariable: [
          'PUT /orgs/{org}/actions/variables/{name}/repositories/{repository_id}'
        ],
        approveWorkflowRun: [
          'POST /repos/{owner}/{repo}/actions/runs/{run_id}/approve'
        ],
        cancelWorkflowRun: [
          'POST /repos/{owner}/{repo}/actions/runs/{run_id}/cancel'
        ],
        createEnvironmentVariable: [
          'POST /repos/{owner}/{repo}/environments/{environment_name}/variables'
        ],
        createOrUpdateEnvironmentSecret: [
          'PUT /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}'
        ],
        createOrUpdateOrgSecret: [
          'PUT /orgs/{org}/actions/secrets/{secret_name}'
        ],
        createOrUpdateRepoSecret: [
          'PUT /repos/{owner}/{repo}/actions/secrets/{secret_name}'
        ],
        createOrgVariable: ['POST /orgs/{org}/actions/variables'],
        createRegistrationTokenForOrg: [
          'POST /orgs/{org}/actions/runners/registration-token'
        ],
        createRegistrationTokenForRepo: [
          'POST /repos/{owner}/{repo}/actions/runners/registration-token'
        ],
        createRemoveTokenForOrg: [
          'POST /orgs/{org}/actions/runners/remove-token'
        ],
        createRemoveTokenForRepo: [
          'POST /repos/{owner}/{repo}/actions/runners/remove-token'
        ],
        createRepoVariable: ['POST /repos/{owner}/{repo}/actions/variables'],
        createWorkflowDispatch: [
          'POST /repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches'
        ],
        deleteActionsCacheById: [
          'DELETE /repos/{owner}/{repo}/actions/caches/{cache_id}'
        ],
        deleteActionsCacheByKey: [
          'DELETE /repos/{owner}/{repo}/actions/caches{?key,ref}'
        ],
        deleteArtifact: [
          'DELETE /repos/{owner}/{repo}/actions/artifacts/{artifact_id}'
        ],
        deleteEnvironmentSecret: [
          'DELETE /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}'
        ],
        deleteEnvironmentVariable: [
          'DELETE /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}'
        ],
        deleteOrgSecret: ['DELETE /orgs/{org}/actions/secrets/{secret_name}'],
        deleteOrgVariable: ['DELETE /orgs/{org}/actions/variables/{name}'],
        deleteRepoSecret: [
          'DELETE /repos/{owner}/{repo}/actions/secrets/{secret_name}'
        ],
        deleteRepoVariable: [
          'DELETE /repos/{owner}/{repo}/actions/variables/{name}'
        ],
        deleteSelfHostedRunnerFromOrg: [
          'DELETE /orgs/{org}/actions/runners/{runner_id}'
        ],
        deleteSelfHostedRunnerFromRepo: [
          'DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}'
        ],
        deleteWorkflowRun: [
          'DELETE /repos/{owner}/{repo}/actions/runs/{run_id}'
        ],
        deleteWorkflowRunLogs: [
          'DELETE /repos/{owner}/{repo}/actions/runs/{run_id}/logs'
        ],
        disableSelectedRepositoryGithubActionsOrganization: [
          'DELETE /orgs/{org}/actions/permissions/repositories/{repository_id}'
        ],
        disableWorkflow: [
          'PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable'
        ],
        downloadArtifact: [
          'GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}'
        ],
        downloadJobLogsForWorkflowRun: [
          'GET /repos/{owner}/{repo}/actions/jobs/{job_id}/logs'
        ],
        downloadWorkflowRunAttemptLogs: [
          'GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs'
        ],
        downloadWorkflowRunLogs: [
          'GET /repos/{owner}/{repo}/actions/runs/{run_id}/logs'
        ],
        enableSelectedRepositoryGithubActionsOrganization: [
          'PUT /orgs/{org}/actions/permissions/repositories/{repository_id}'
        ],
        enableWorkflow: [
          'PUT /repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable'
        ],
        forceCancelWorkflowRun: [
          'POST /repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel'
        ],
        generateRunnerJitconfigForOrg: [
          'POST /orgs/{org}/actions/runners/generate-jitconfig'
        ],
        generateRunnerJitconfigForRepo: [
          'POST /repos/{owner}/{repo}/actions/runners/generate-jitconfig'
        ],
        getActionsCacheList: ['GET /repos/{owner}/{repo}/actions/caches'],
        getActionsCacheUsage: ['GET /repos/{owner}/{repo}/actions/cache/usage'],
        getActionsCacheUsageByRepoForOrg: [
          'GET /orgs/{org}/actions/cache/usage-by-repository'
        ],
        getActionsCacheUsageForOrg: ['GET /orgs/{org}/actions/cache/usage'],
        getAllowedActionsOrganization: [
          'GET /orgs/{org}/actions/permissions/selected-actions'
        ],
        getAllowedActionsRepository: [
          'GET /repos/{owner}/{repo}/actions/permissions/selected-actions'
        ],
        getArtifact: [
          'GET /repos/{owner}/{repo}/actions/artifacts/{artifact_id}'
        ],
        getCustomOidcSubClaimForRepo: [
          'GET /repos/{owner}/{repo}/actions/oidc/customization/sub'
        ],
        getEnvironmentPublicKey: [
          'GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/public-key'
        ],
        getEnvironmentSecret: [
          'GET /repos/{owner}/{repo}/environments/{environment_name}/secrets/{secret_name}'
        ],
        getEnvironmentVariable: [
          'GET /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}'
        ],
        getGithubActionsDefaultWorkflowPermissionsOrganization: [
          'GET /orgs/{org}/actions/permissions/workflow'
        ],
        getGithubActionsDefaultWorkflowPermissionsRepository: [
          'GET /repos/{owner}/{repo}/actions/permissions/workflow'
        ],
        getGithubActionsPermissionsOrganization: [
          'GET /orgs/{org}/actions/permissions'
        ],
        getGithubActionsPermissionsRepository: [
          'GET /repos/{owner}/{repo}/actions/permissions'
        ],
        getJobForWorkflowRun: [
          'GET /repos/{owner}/{repo}/actions/jobs/{job_id}'
        ],
        getOrgPublicKey: ['GET /orgs/{org}/actions/secrets/public-key'],
        getOrgSecret: ['GET /orgs/{org}/actions/secrets/{secret_name}'],
        getOrgVariable: ['GET /orgs/{org}/actions/variables/{name}'],
        getPendingDeploymentsForRun: [
          'GET /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments'
        ],
        getRepoPermissions: [
          'GET /repos/{owner}/{repo}/actions/permissions',
          {},
          { renamed: ['actions', 'getGithubActionsPermissionsRepository'] }
        ],
        getRepoPublicKey: [
          'GET /repos/{owner}/{repo}/actions/secrets/public-key'
        ],
        getRepoSecret: [
          'GET /repos/{owner}/{repo}/actions/secrets/{secret_name}'
        ],
        getRepoVariable: ['GET /repos/{owner}/{repo}/actions/variables/{name}'],
        getReviewsForRun: [
          'GET /repos/{owner}/{repo}/actions/runs/{run_id}/approvals'
        ],
        getSelfHostedRunnerForOrg: [
          'GET /orgs/{org}/actions/runners/{runner_id}'
        ],
        getSelfHostedRunnerForRepo: [
          'GET /repos/{owner}/{repo}/actions/runners/{runner_id}'
        ],
        getWorkflow: [
          'GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}'
        ],
        getWorkflowAccessToRepository: [
          'GET /repos/{owner}/{repo}/actions/permissions/access'
        ],
        getWorkflowRun: ['GET /repos/{owner}/{repo}/actions/runs/{run_id}'],
        getWorkflowRunAttempt: [
          'GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}'
        ],
        getWorkflowRunUsage: [
          'GET /repos/{owner}/{repo}/actions/runs/{run_id}/timing'
        ],
        getWorkflowUsage: [
          'GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing'
        ],
        listArtifactsForRepo: ['GET /repos/{owner}/{repo}/actions/artifacts'],
        listEnvironmentSecrets: [
          'GET /repos/{owner}/{repo}/environments/{environment_name}/secrets'
        ],
        listEnvironmentVariables: [
          'GET /repos/{owner}/{repo}/environments/{environment_name}/variables'
        ],
        listJobsForWorkflowRun: [
          'GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs'
        ],
        listJobsForWorkflowRunAttempt: [
          'GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs'
        ],
        listLabelsForSelfHostedRunnerForOrg: [
          'GET /orgs/{org}/actions/runners/{runner_id}/labels'
        ],
        listLabelsForSelfHostedRunnerForRepo: [
          'GET /repos/{owner}/{repo}/actions/runners/{runner_id}/labels'
        ],
        listOrgSecrets: ['GET /orgs/{org}/actions/secrets'],
        listOrgVariables: ['GET /orgs/{org}/actions/variables'],
        listRepoOrganizationSecrets: [
          'GET /repos/{owner}/{repo}/actions/organization-secrets'
        ],
        listRepoOrganizationVariables: [
          'GET /repos/{owner}/{repo}/actions/organization-variables'
        ],
        listRepoSecrets: ['GET /repos/{owner}/{repo}/actions/secrets'],
        listRepoVariables: ['GET /repos/{owner}/{repo}/actions/variables'],
        listRepoWorkflows: ['GET /repos/{owner}/{repo}/actions/workflows'],
        listRunnerApplicationsForOrg: [
          'GET /orgs/{org}/actions/runners/downloads'
        ],
        listRunnerApplicationsForRepo: [
          'GET /repos/{owner}/{repo}/actions/runners/downloads'
        ],
        listSelectedReposForOrgSecret: [
          'GET /orgs/{org}/actions/secrets/{secret_name}/repositories'
        ],
        listSelectedReposForOrgVariable: [
          'GET /orgs/{org}/actions/variables/{name}/repositories'
        ],
        listSelectedRepositoriesEnabledGithubActionsOrganization: [
          'GET /orgs/{org}/actions/permissions/repositories'
        ],
        listSelfHostedRunnersForOrg: ['GET /orgs/{org}/actions/runners'],
        listSelfHostedRunnersForRepo: [
          'GET /repos/{owner}/{repo}/actions/runners'
        ],
        listWorkflowRunArtifacts: [
          'GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts'
        ],
        listWorkflowRuns: [
          'GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs'
        ],
        listWorkflowRunsForRepo: ['GET /repos/{owner}/{repo}/actions/runs'],
        reRunJobForWorkflowRun: [
          'POST /repos/{owner}/{repo}/actions/jobs/{job_id}/rerun'
        ],
        reRunWorkflow: [
          'POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun'
        ],
        reRunWorkflowFailedJobs: [
          'POST /repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs'
        ],
        removeAllCustomLabelsFromSelfHostedRunnerForOrg: [
          'DELETE /orgs/{org}/actions/runners/{runner_id}/labels'
        ],
        removeAllCustomLabelsFromSelfHostedRunnerForRepo: [
          'DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels'
        ],
        removeCustomLabelFromSelfHostedRunnerForOrg: [
          'DELETE /orgs/{org}/actions/runners/{runner_id}/labels/{name}'
        ],
        removeCustomLabelFromSelfHostedRunnerForRepo: [
          'DELETE /repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}'
        ],
        removeSelectedRepoFromOrgSecret: [
          'DELETE /orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}'
        ],
        removeSelectedRepoFromOrgVariable: [
          'DELETE /orgs/{org}/actions/variables/{name}/repositories/{repository_id}'
        ],
        reviewCustomGatesForRun: [
          'POST /repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule'
        ],
        reviewPendingDeploymentsForRun: [
          'POST /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments'
        ],
        setAllowedActionsOrganization: [
          'PUT /orgs/{org}/actions/permissions/selected-actions'
        ],
        setAllowedActionsRepository: [
          'PUT /repos/{owner}/{repo}/actions/permissions/selected-actions'
        ],
        setCustomLabelsForSelfHostedRunnerForOrg: [
          'PUT /orgs/{org}/actions/runners/{runner_id}/labels'
        ],
        setCustomLabelsForSelfHostedRunnerForRepo: [
          'PUT /repos/{owner}/{repo}/actions/runners/{runner_id}/labels'
        ],
        setCustomOidcSubClaimForRepo: [
          'PUT /repos/{owner}/{repo}/actions/oidc/customization/sub'
        ],
        setGithubActionsDefaultWorkflowPermissionsOrganization: [
          'PUT /orgs/{org}/actions/permissions/workflow'
        ],
        setGithubActionsDefaultWorkflowPermissionsRepository: [
          'PUT /repos/{owner}/{repo}/actions/permissions/workflow'
        ],
        setGithubActionsPermissionsOrganization: [
          'PUT /orgs/{org}/actions/permissions'
        ],
        setGithubActionsPermissionsRepository: [
          'PUT /repos/{owner}/{repo}/actions/permissions'
        ],
        setSelectedReposForOrgSecret: [
          'PUT /orgs/{org}/actions/secrets/{secret_name}/repositories'
        ],
        setSelectedReposForOrgVariable: [
          'PUT /orgs/{org}/actions/variables/{name}/repositories'
        ],
        setSelectedRepositoriesEnabledGithubActionsOrganization: [
          'PUT /orgs/{org}/actions/permissions/repositories'
        ],
        setWorkflowAccessToRepository: [
          'PUT /repos/{owner}/{repo}/actions/permissions/access'
        ],
        updateEnvironmentVariable: [
          'PATCH /repos/{owner}/{repo}/environments/{environment_name}/variables/{name}'
        ],
        updateOrgVariable: ['PATCH /orgs/{org}/actions/variables/{name}'],
        updateRepoVariable: [
          'PATCH /repos/{owner}/{repo}/actions/variables/{name}'
        ]
      },
      activity: {
        checkRepoIsStarredByAuthenticatedUser: [
          'GET /user/starred/{owner}/{repo}'
        ],
        deleteRepoSubscription: ['DELETE /repos/{owner}/{repo}/subscription'],
        deleteThreadSubscription: [
          'DELETE /notifications/threads/{thread_id}/subscription'
        ],
        getFeeds: ['GET /feeds'],
        getRepoSubscription: ['GET /repos/{owner}/{repo}/subscription'],
        getThread: ['GET /notifications/threads/{thread_id}'],
        getThreadSubscriptionForAuthenticatedUser: [
          'GET /notifications/threads/{thread_id}/subscription'
        ],
        listEventsForAuthenticatedUser: ['GET /users/{username}/events'],
        listNotificationsForAuthenticatedUser: ['GET /notifications'],
        listOrgEventsForAuthenticatedUser: [
          'GET /users/{username}/events/orgs/{org}'
        ],
        listPublicEvents: ['GET /events'],
        listPublicEventsForRepoNetwork: ['GET /networks/{owner}/{repo}/events'],
        listPublicEventsForUser: ['GET /users/{username}/events/public'],
        listPublicOrgEvents: ['GET /orgs/{org}/events'],
        listReceivedEventsForUser: ['GET /users/{username}/received_events'],
        listReceivedPublicEventsForUser: [
          'GET /users/{username}/received_events/public'
        ],
        listRepoEvents: ['GET /repos/{owner}/{repo}/events'],
        listRepoNotificationsForAuthenticatedUser: [
          'GET /repos/{owner}/{repo}/notifications'
        ],
        listReposStarredByAuthenticatedUser: ['GET /user/starred'],
        listReposStarredByUser: ['GET /users/{username}/starred'],
        listReposWatchedByUser: ['GET /users/{username}/subscriptions'],
        listStargazersForRepo: ['GET /repos/{owner}/{repo}/stargazers'],
        listWatchedReposForAuthenticatedUser: ['GET /user/subscriptions'],
        listWatchersForRepo: ['GET /repos/{owner}/{repo}/subscribers'],
        markNotificationsAsRead: ['PUT /notifications'],
        markRepoNotificationsAsRead: [
          'PUT /repos/{owner}/{repo}/notifications'
        ],
        markThreadAsDone: ['DELETE /notifications/threads/{thread_id}'],
        markThreadAsRead: ['PATCH /notifications/threads/{thread_id}'],
        setRepoSubscription: ['PUT /repos/{owner}/{repo}/subscription'],
        setThreadSubscription: [
          'PUT /notifications/threads/{thread_id}/subscription'
        ],
        starRepoForAuthenticatedUser: ['PUT /user/starred/{owner}/{repo}'],
        unstarRepoForAuthenticatedUser: ['DELETE /user/starred/{owner}/{repo}']
      },
      apps: {
        addRepoToInstallation: [
          'PUT /user/installations/{installation_id}/repositories/{repository_id}',
          {},
          { renamed: ['apps', 'addRepoToInstallationForAuthenticatedUser'] }
        ],
        addRepoToInstallationForAuthenticatedUser: [
          'PUT /user/installations/{installation_id}/repositories/{repository_id}'
        ],
        checkToken: ['POST /applications/{client_id}/token'],
        createFromManifest: ['POST /app-manifests/{code}/conversions'],
        createInstallationAccessToken: [
          'POST /app/installations/{installation_id}/access_tokens'
        ],
        deleteAuthorization: ['DELETE /applications/{client_id}/grant'],
        deleteInstallation: ['DELETE /app/installations/{installation_id}'],
        deleteToken: ['DELETE /applications/{client_id}/token'],
        getAuthenticated: ['GET /app'],
        getBySlug: ['GET /apps/{app_slug}'],
        getInstallation: ['GET /app/installations/{installation_id}'],
        getOrgInstallation: ['GET /orgs/{org}/installation'],
        getRepoInstallation: ['GET /repos/{owner}/{repo}/installation'],
        getSubscriptionPlanForAccount: [
          'GET /marketplace_listing/accounts/{account_id}'
        ],
        getSubscriptionPlanForAccountStubbed: [
          'GET /marketplace_listing/stubbed/accounts/{account_id}'
        ],
        getUserInstallation: ['GET /users/{username}/installation'],
        getWebhookConfigForApp: ['GET /app/hook/config'],
        getWebhookDelivery: ['GET /app/hook/deliveries/{delivery_id}'],
        listAccountsForPlan: [
          'GET /marketplace_listing/plans/{plan_id}/accounts'
        ],
        listAccountsForPlanStubbed: [
          'GET /marketplace_listing/stubbed/plans/{plan_id}/accounts'
        ],
        listInstallationReposForAuthenticatedUser: [
          'GET /user/installations/{installation_id}/repositories'
        ],
        listInstallationRequestsForAuthenticatedApp: [
          'GET /app/installation-requests'
        ],
        listInstallations: ['GET /app/installations'],
        listInstallationsForAuthenticatedUser: ['GET /user/installations'],
        listPlans: ['GET /marketplace_listing/plans'],
        listPlansStubbed: ['GET /marketplace_listing/stubbed/plans'],
        listReposAccessibleToInstallation: ['GET /installation/repositories'],
        listSubscriptionsForAuthenticatedUser: [
          'GET /user/marketplace_purchases'
        ],
        listSubscriptionsForAuthenticatedUserStubbed: [
          'GET /user/marketplace_purchases/stubbed'
        ],
        listWebhookDeliveries: ['GET /app/hook/deliveries'],
        redeliverWebhookDelivery: [
          'POST /app/hook/deliveries/{delivery_id}/attempts'
        ],
        removeRepoFromInstallation: [
          'DELETE /user/installations/{installation_id}/repositories/{repository_id}',
          {},
          {
            renamed: ['apps', 'removeRepoFromInstallationForAuthenticatedUser']
          }
        ],
        removeRepoFromInstallationForAuthenticatedUser: [
          'DELETE /user/installations/{installation_id}/repositories/{repository_id}'
        ],
        resetToken: ['PATCH /applications/{client_id}/token'],
        revokeInstallationAccessToken: ['DELETE /installation/token'],
        scopeToken: ['POST /applications/{client_id}/token/scoped'],
        suspendInstallation: [
          'PUT /app/installations/{installation_id}/suspended'
        ],
        unsuspendInstallation: [
          'DELETE /app/installations/{installation_id}/suspended'
        ],
        updateWebhookConfigForApp: ['PATCH /app/hook/config']
      },
      billing: {
        getGithubActionsBillingOrg: [
          'GET /orgs/{org}/settings/billing/actions'
        ],
        getGithubActionsBillingUser: [
          'GET /users/{username}/settings/billing/actions'
        ],
        getGithubPackagesBillingOrg: [
          'GET /orgs/{org}/settings/billing/packages'
        ],
        getGithubPackagesBillingUser: [
          'GET /users/{username}/settings/billing/packages'
        ],
        getSharedStorageBillingOrg: [
          'GET /orgs/{org}/settings/billing/shared-storage'
        ],
        getSharedStorageBillingUser: [
          'GET /users/{username}/settings/billing/shared-storage'
        ]
      },
      checks: {
        create: ['POST /repos/{owner}/{repo}/check-runs'],
        createSuite: ['POST /repos/{owner}/{repo}/check-suites'],
        get: ['GET /repos/{owner}/{repo}/check-runs/{check_run_id}'],
        getSuite: ['GET /repos/{owner}/{repo}/check-suites/{check_suite_id}'],
        listAnnotations: [
          'GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations'
        ],
        listForRef: ['GET /repos/{owner}/{repo}/commits/{ref}/check-runs'],
        listForSuite: [
          'GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs'
        ],
        listSuitesForRef: [
          'GET /repos/{owner}/{repo}/commits/{ref}/check-suites'
        ],
        rerequestRun: [
          'POST /repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest'
        ],
        rerequestSuite: [
          'POST /repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest'
        ],
        setSuitesPreferences: [
          'PATCH /repos/{owner}/{repo}/check-suites/preferences'
        ],
        update: ['PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}']
      },
      codeScanning: {
        deleteAnalysis: [
          'DELETE /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}{?confirm_delete}'
        ],
        getAlert: [
          'GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}',
          {},
          { renamedParameters: { alert_id: 'alert_number' } }
        ],
        getAnalysis: [
          'GET /repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}'
        ],
        getCodeqlDatabase: [
          'GET /repos/{owner}/{repo}/code-scanning/codeql/databases/{language}'
        ],
        getDefaultSetup: [
          'GET /repos/{owner}/{repo}/code-scanning/default-setup'
        ],
        getSarif: ['GET /repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}'],
        listAlertInstances: [
          'GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances'
        ],
        listAlertsForOrg: ['GET /orgs/{org}/code-scanning/alerts'],
        listAlertsForRepo: ['GET /repos/{owner}/{repo}/code-scanning/alerts'],
        listAlertsInstances: [
          'GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances',
          {},
          { renamed: ['codeScanning', 'listAlertInstances'] }
        ],
        listCodeqlDatabases: [
          'GET /repos/{owner}/{repo}/code-scanning/codeql/databases'
        ],
        listRecentAnalyses: [
          'GET /repos/{owner}/{repo}/code-scanning/analyses'
        ],
        updateAlert: [
          'PATCH /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}'
        ],
        updateDefaultSetup: [
          'PATCH /repos/{owner}/{repo}/code-scanning/default-setup'
        ],
        uploadSarif: ['POST /repos/{owner}/{repo}/code-scanning/sarifs']
      },
      codesOfConduct: {
        getAllCodesOfConduct: ['GET /codes_of_conduct'],
        getConductCode: ['GET /codes_of_conduct/{key}']
      },
      codespaces: {
        addRepositoryForSecretForAuthenticatedUser: [
          'PUT /user/codespaces/secrets/{secret_name}/repositories/{repository_id}'
        ],
        addSelectedRepoToOrgSecret: [
          'PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}'
        ],
        checkPermissionsForDevcontainer: [
          'GET /repos/{owner}/{repo}/codespaces/permissions_check'
        ],
        codespaceMachinesForAuthenticatedUser: [
          'GET /user/codespaces/{codespace_name}/machines'
        ],
        createForAuthenticatedUser: ['POST /user/codespaces'],
        createOrUpdateOrgSecret: [
          'PUT /orgs/{org}/codespaces/secrets/{secret_name}'
        ],
        createOrUpdateRepoSecret: [
          'PUT /repos/{owner}/{repo}/codespaces/secrets/{secret_name}'
        ],
        createOrUpdateSecretForAuthenticatedUser: [
          'PUT /user/codespaces/secrets/{secret_name}'
        ],
        createWithPrForAuthenticatedUser: [
          'POST /repos/{owner}/{repo}/pulls/{pull_number}/codespaces'
        ],
        createWithRepoForAuthenticatedUser: [
          'POST /repos/{owner}/{repo}/codespaces'
        ],
        deleteForAuthenticatedUser: [
          'DELETE /user/codespaces/{codespace_name}'
        ],
        deleteFromOrganization: [
          'DELETE /orgs/{org}/members/{username}/codespaces/{codespace_name}'
        ],
        deleteOrgSecret: [
          'DELETE /orgs/{org}/codespaces/secrets/{secret_name}'
        ],
        deleteRepoSecret: [
          'DELETE /repos/{owner}/{repo}/codespaces/secrets/{secret_name}'
        ],
        deleteSecretForAuthenticatedUser: [
          'DELETE /user/codespaces/secrets/{secret_name}'
        ],
        exportForAuthenticatedUser: [
          'POST /user/codespaces/{codespace_name}/exports'
        ],
        getCodespacesForUserInOrg: [
          'GET /orgs/{org}/members/{username}/codespaces'
        ],
        getExportDetailsForAuthenticatedUser: [
          'GET /user/codespaces/{codespace_name}/exports/{export_id}'
        ],
        getForAuthenticatedUser: ['GET /user/codespaces/{codespace_name}'],
        getOrgPublicKey: ['GET /orgs/{org}/codespaces/secrets/public-key'],
        getOrgSecret: ['GET /orgs/{org}/codespaces/secrets/{secret_name}'],
        getPublicKeyForAuthenticatedUser: [
          'GET /user/codespaces/secrets/public-key'
        ],
        getRepoPublicKey: [
          'GET /repos/{owner}/{repo}/codespaces/secrets/public-key'
        ],
        getRepoSecret: [
          'GET /repos/{owner}/{repo}/codespaces/secrets/{secret_name}'
        ],
        getSecretForAuthenticatedUser: [
          'GET /user/codespaces/secrets/{secret_name}'
        ],
        listDevcontainersInRepositoryForAuthenticatedUser: [
          'GET /repos/{owner}/{repo}/codespaces/devcontainers'
        ],
        listForAuthenticatedUser: ['GET /user/codespaces'],
        listInOrganization: [
          'GET /orgs/{org}/codespaces',
          {},
          { renamedParameters: { org_id: 'org' } }
        ],
        listInRepositoryForAuthenticatedUser: [
          'GET /repos/{owner}/{repo}/codespaces'
        ],
        listOrgSecrets: ['GET /orgs/{org}/codespaces/secrets'],
        listRepoSecrets: ['GET /repos/{owner}/{repo}/codespaces/secrets'],
        listRepositoriesForSecretForAuthenticatedUser: [
          'GET /user/codespaces/secrets/{secret_name}/repositories'
        ],
        listSecretsForAuthenticatedUser: ['GET /user/codespaces/secrets'],
        listSelectedReposForOrgSecret: [
          'GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories'
        ],
        preFlightWithRepoForAuthenticatedUser: [
          'GET /repos/{owner}/{repo}/codespaces/new'
        ],
        publishForAuthenticatedUser: [
          'POST /user/codespaces/{codespace_name}/publish'
        ],
        removeRepositoryForSecretForAuthenticatedUser: [
          'DELETE /user/codespaces/secrets/{secret_name}/repositories/{repository_id}'
        ],
        removeSelectedRepoFromOrgSecret: [
          'DELETE /orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}'
        ],
        repoMachinesForAuthenticatedUser: [
          'GET /repos/{owner}/{repo}/codespaces/machines'
        ],
        setRepositoriesForSecretForAuthenticatedUser: [
          'PUT /user/codespaces/secrets/{secret_name}/repositories'
        ],
        setSelectedReposForOrgSecret: [
          'PUT /orgs/{org}/codespaces/secrets/{secret_name}/repositories'
        ],
        startForAuthenticatedUser: [
          'POST /user/codespaces/{codespace_name}/start'
        ],
        stopForAuthenticatedUser: [
          'POST /user/codespaces/{codespace_name}/stop'
        ],
        stopInOrganization: [
          'POST /orgs/{org}/members/{username}/codespaces/{codespace_name}/stop'
        ],
        updateForAuthenticatedUser: ['PATCH /user/codespaces/{codespace_name}']
      },
      copilot: {
        addCopilotSeatsForTeams: [
          'POST /orgs/{org}/copilot/billing/selected_teams'
        ],
        addCopilotSeatsForUsers: [
          'POST /orgs/{org}/copilot/billing/selected_users'
        ],
        cancelCopilotSeatAssignmentForTeams: [
          'DELETE /orgs/{org}/copilot/billing/selected_teams'
        ],
        cancelCopilotSeatAssignmentForUsers: [
          'DELETE /orgs/{org}/copilot/billing/selected_users'
        ],
        getCopilotOrganizationDetails: ['GET /orgs/{org}/copilot/billing'],
        getCopilotSeatDetailsForUser: [
          'GET /orgs/{org}/members/{username}/copilot'
        ],
        listCopilotSeats: ['GET /orgs/{org}/copilot/billing/seats'],
        usageMetricsForEnterprise: [
          'GET /enterprises/{enterprise}/copilot/usage'
        ],
        usageMetricsForOrg: ['GET /orgs/{org}/copilot/usage'],
        usageMetricsForTeam: ['GET /orgs/{org}/team/{team_slug}/copilot/usage']
      },
      dependabot: {
        addSelectedRepoToOrgSecret: [
          'PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}'
        ],
        createOrUpdateOrgSecret: [
          'PUT /orgs/{org}/dependabot/secrets/{secret_name}'
        ],
        createOrUpdateRepoSecret: [
          'PUT /repos/{owner}/{repo}/dependabot/secrets/{secret_name}'
        ],
        deleteOrgSecret: [
          'DELETE /orgs/{org}/dependabot/secrets/{secret_name}'
        ],
        deleteRepoSecret: [
          'DELETE /repos/{owner}/{repo}/dependabot/secrets/{secret_name}'
        ],
        getAlert: [
          'GET /repos/{owner}/{repo}/dependabot/alerts/{alert_number}'
        ],
        getOrgPublicKey: ['GET /orgs/{org}/dependabot/secrets/public-key'],
        getOrgSecret: ['GET /orgs/{org}/dependabot/secrets/{secret_name}'],
        getRepoPublicKey: [
          'GET /repos/{owner}/{repo}/dependabot/secrets/public-key'
        ],
        getRepoSecret: [
          'GET /repos/{owner}/{repo}/dependabot/secrets/{secret_name}'
        ],
        listAlertsForEnterprise: [
          'GET /enterprises/{enterprise}/dependabot/alerts'
        ],
        listAlertsForOrg: ['GET /orgs/{org}/dependabot/alerts'],
        listAlertsForRepo: ['GET /repos/{owner}/{repo}/dependabot/alerts'],
        listOrgSecrets: ['GET /orgs/{org}/dependabot/secrets'],
        listRepoSecrets: ['GET /repos/{owner}/{repo}/dependabot/secrets'],
        listSelectedReposForOrgSecret: [
          'GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories'
        ],
        removeSelectedRepoFromOrgSecret: [
          'DELETE /orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}'
        ],
        setSelectedReposForOrgSecret: [
          'PUT /orgs/{org}/dependabot/secrets/{secret_name}/repositories'
        ],
        updateAlert: [
          'PATCH /repos/{owner}/{repo}/dependabot/alerts/{alert_number}'
        ]
      },
      dependencyGraph: {
        createRepositorySnapshot: [
          'POST /repos/{owner}/{repo}/dependency-graph/snapshots'
        ],
        diffRange: [
          'GET /repos/{owner}/{repo}/dependency-graph/compare/{basehead}'
        ],
        exportSbom: ['GET /repos/{owner}/{repo}/dependency-graph/sbom']
      },
      emojis: { get: ['GET /emojis'] },
      gists: {
        checkIsStarred: ['GET /gists/{gist_id}/star'],
        create: ['POST /gists'],
        createComment: ['POST /gists/{gist_id}/comments'],
        delete: ['DELETE /gists/{gist_id}'],
        deleteComment: ['DELETE /gists/{gist_id}/comments/{comment_id}'],
        fork: ['POST /gists/{gist_id}/forks'],
        get: ['GET /gists/{gist_id}'],
        getComment: ['GET /gists/{gist_id}/comments/{comment_id}'],
        getRevision: ['GET /gists/{gist_id}/{sha}'],
        list: ['GET /gists'],
        listComments: ['GET /gists/{gist_id}/comments'],
        listCommits: ['GET /gists/{gist_id}/commits'],
        listForUser: ['GET /users/{username}/gists'],
        listForks: ['GET /gists/{gist_id}/forks'],
        listPublic: ['GET /gists/public'],
        listStarred: ['GET /gists/starred'],
        star: ['PUT /gists/{gist_id}/star'],
        unstar: ['DELETE /gists/{gist_id}/star'],
        update: ['PATCH /gists/{gist_id}'],
        updateComment: ['PATCH /gists/{gist_id}/comments/{comment_id}']
      },
      git: {
        createBlob: ['POST /repos/{owner}/{repo}/git/blobs'],
        createCommit: ['POST /repos/{owner}/{repo}/git/commits'],
        createRef: ['POST /repos/{owner}/{repo}/git/refs'],
        createTag: ['POST /repos/{owner}/{repo}/git/tags'],
        createTree: ['POST /repos/{owner}/{repo}/git/trees'],
        deleteRef: ['DELETE /repos/{owner}/{repo}/git/refs/{ref}'],
        getBlob: ['GET /repos/{owner}/{repo}/git/blobs/{file_sha}'],
        getCommit: ['GET /repos/{owner}/{repo}/git/commits/{commit_sha}'],
        getRef: ['GET /repos/{owner}/{repo}/git/ref/{ref}'],
        getTag: ['GET /repos/{owner}/{repo}/git/tags/{tag_sha}'],
        getTree: ['GET /repos/{owner}/{repo}/git/trees/{tree_sha}'],
        listMatchingRefs: ['GET /repos/{owner}/{repo}/git/matching-refs/{ref}'],
        updateRef: ['PATCH /repos/{owner}/{repo}/git/refs/{ref}']
      },
      gitignore: {
        getAllTemplates: ['GET /gitignore/templates'],
        getTemplate: ['GET /gitignore/templates/{name}']
      },
      interactions: {
        getRestrictionsForAuthenticatedUser: ['GET /user/interaction-limits'],
        getRestrictionsForOrg: ['GET /orgs/{org}/interaction-limits'],
        getRestrictionsForRepo: [
          'GET /repos/{owner}/{repo}/interaction-limits'
        ],
        getRestrictionsForYourPublicRepos: [
          'GET /user/interaction-limits',
          {},
          { renamed: ['interactions', 'getRestrictionsForAuthenticatedUser'] }
        ],
        removeRestrictionsForAuthenticatedUser: [
          'DELETE /user/interaction-limits'
        ],
        removeRestrictionsForOrg: ['DELETE /orgs/{org}/interaction-limits'],
        removeRestrictionsForRepo: [
          'DELETE /repos/{owner}/{repo}/interaction-limits'
        ],
        removeRestrictionsForYourPublicRepos: [
          'DELETE /user/interaction-limits',
          {},
          {
            renamed: ['interactions', 'removeRestrictionsForAuthenticatedUser']
          }
        ],
        setRestrictionsForAuthenticatedUser: ['PUT /user/interaction-limits'],
        setRestrictionsForOrg: ['PUT /orgs/{org}/interaction-limits'],
        setRestrictionsForRepo: [
          'PUT /repos/{owner}/{repo}/interaction-limits'
        ],
        setRestrictionsForYourPublicRepos: [
          'PUT /user/interaction-limits',
          {},
          { renamed: ['interactions', 'setRestrictionsForAuthenticatedUser'] }
        ]
      },
      issues: {
        addAssignees: [
          'POST /repos/{owner}/{repo}/issues/{issue_number}/assignees'
        ],
        addLabels: ['POST /repos/{owner}/{repo}/issues/{issue_number}/labels'],
        checkUserCanBeAssigned: [
          'GET /repos/{owner}/{repo}/assignees/{assignee}'
        ],
        checkUserCanBeAssignedToIssue: [
          'GET /repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}'
        ],
        create: ['POST /repos/{owner}/{repo}/issues'],
        createComment: [
          'POST /repos/{owner}/{repo}/issues/{issue_number}/comments'
        ],
        createLabel: ['POST /repos/{owner}/{repo}/labels'],
        createMilestone: ['POST /repos/{owner}/{repo}/milestones'],
        deleteComment: [
          'DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}'
        ],
        deleteLabel: ['DELETE /repos/{owner}/{repo}/labels/{name}'],
        deleteMilestone: [
          'DELETE /repos/{owner}/{repo}/milestones/{milestone_number}'
        ],
        get: ['GET /repos/{owner}/{repo}/issues/{issue_number}'],
        getComment: ['GET /repos/{owner}/{repo}/issues/comments/{comment_id}'],
        getEvent: ['GET /repos/{owner}/{repo}/issues/events/{event_id}'],
        getLabel: ['GET /repos/{owner}/{repo}/labels/{name}'],
        getMilestone: [
          'GET /repos/{owner}/{repo}/milestones/{milestone_number}'
        ],
        list: ['GET /issues'],
        listAssignees: ['GET /repos/{owner}/{repo}/assignees'],
        listComments: [
          'GET /repos/{owner}/{repo}/issues/{issue_number}/comments'
        ],
        listCommentsForRepo: ['GET /repos/{owner}/{repo}/issues/comments'],
        listEvents: ['GET /repos/{owner}/{repo}/issues/{issue_number}/events'],
        listEventsForRepo: ['GET /repos/{owner}/{repo}/issues/events'],
        listEventsForTimeline: [
          'GET /repos/{owner}/{repo}/issues/{issue_number}/timeline'
        ],
        listForAuthenticatedUser: ['GET /user/issues'],
        listForOrg: ['GET /orgs/{org}/issues'],
        listForRepo: ['GET /repos/{owner}/{repo}/issues'],
        listLabelsForMilestone: [
          'GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels'
        ],
        listLabelsForRepo: ['GET /repos/{owner}/{repo}/labels'],
        listLabelsOnIssue: [
          'GET /repos/{owner}/{repo}/issues/{issue_number}/labels'
        ],
        listMilestones: ['GET /repos/{owner}/{repo}/milestones'],
        lock: ['PUT /repos/{owner}/{repo}/issues/{issue_number}/lock'],
        removeAllLabels: [
          'DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels'
        ],
        removeAssignees: [
          'DELETE /repos/{owner}/{repo}/issues/{issue_number}/assignees'
        ],
        removeLabel: [
          'DELETE /repos/{owner}/{repo}/issues/{issue_number}/labels/{name}'
        ],
        setLabels: ['PUT /repos/{owner}/{repo}/issues/{issue_number}/labels'],
        unlock: ['DELETE /repos/{owner}/{repo}/issues/{issue_number}/lock'],
        update: ['PATCH /repos/{owner}/{repo}/issues/{issue_number}'],
        updateComment: [
          'PATCH /repos/{owner}/{repo}/issues/comments/{comment_id}'
        ],
        updateLabel: ['PATCH /repos/{owner}/{repo}/labels/{name}'],
        updateMilestone: [
          'PATCH /repos/{owner}/{repo}/milestones/{milestone_number}'
        ]
      },
      licenses: {
        get: ['GET /licenses/{license}'],
        getAllCommonlyUsed: ['GET /licenses'],
        getForRepo: ['GET /repos/{owner}/{repo}/license']
      },
      markdown: {
        render: ['POST /markdown'],
        renderRaw: [
          'POST /markdown/raw',
          { headers: { 'content-type': 'text/plain; charset=utf-8' } }
        ]
      },
      meta: {
        get: ['GET /meta'],
        getAllVersions: ['GET /versions'],
        getOctocat: ['GET /octocat'],
        getZen: ['GET /zen'],
        root: ['GET /']
      },
      migrations: {
        deleteArchiveForAuthenticatedUser: [
          'DELETE /user/migrations/{migration_id}/archive'
        ],
        deleteArchiveForOrg: [
          'DELETE /orgs/{org}/migrations/{migration_id}/archive'
        ],
        downloadArchiveForOrg: [
          'GET /orgs/{org}/migrations/{migration_id}/archive'
        ],
        getArchiveForAuthenticatedUser: [
          'GET /user/migrations/{migration_id}/archive'
        ],
        getStatusForAuthenticatedUser: ['GET /user/migrations/{migration_id}'],
        getStatusForOrg: ['GET /orgs/{org}/migrations/{migration_id}'],
        listForAuthenticatedUser: ['GET /user/migrations'],
        listForOrg: ['GET /orgs/{org}/migrations'],
        listReposForAuthenticatedUser: [
          'GET /user/migrations/{migration_id}/repositories'
        ],
        listReposForOrg: [
          'GET /orgs/{org}/migrations/{migration_id}/repositories'
        ],
        listReposForUser: [
          'GET /user/migrations/{migration_id}/repositories',
          {},
          { renamed: ['migrations', 'listReposForAuthenticatedUser'] }
        ],
        startForAuthenticatedUser: ['POST /user/migrations'],
        startForOrg: ['POST /orgs/{org}/migrations'],
        unlockRepoForAuthenticatedUser: [
          'DELETE /user/migrations/{migration_id}/repos/{repo_name}/lock'
        ],
        unlockRepoForOrg: [
          'DELETE /orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock'
        ]
      },
      oidc: {
        getOidcCustomSubTemplateForOrg: [
          'GET /orgs/{org}/actions/oidc/customization/sub'
        ],
        updateOidcCustomSubTemplateForOrg: [
          'PUT /orgs/{org}/actions/oidc/customization/sub'
        ]
      },
      orgs: {
        addSecurityManagerTeam: [
          'PUT /orgs/{org}/security-managers/teams/{team_slug}'
        ],
        assignTeamToOrgRole: [
          'PUT /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}'
        ],
        assignUserToOrgRole: [
          'PUT /orgs/{org}/organization-roles/users/{username}/{role_id}'
        ],
        blockUser: ['PUT /orgs/{org}/blocks/{username}'],
        cancelInvitation: ['DELETE /orgs/{org}/invitations/{invitation_id}'],
        checkBlockedUser: ['GET /orgs/{org}/blocks/{username}'],
        checkMembershipForUser: ['GET /orgs/{org}/members/{username}'],
        checkPublicMembershipForUser: [
          'GET /orgs/{org}/public_members/{username}'
        ],
        convertMemberToOutsideCollaborator: [
          'PUT /orgs/{org}/outside_collaborators/{username}'
        ],
        createCustomOrganizationRole: ['POST /orgs/{org}/organization-roles'],
        createInvitation: ['POST /orgs/{org}/invitations'],
        createOrUpdateCustomProperties: ['PATCH /orgs/{org}/properties/schema'],
        createOrUpdateCustomPropertiesValuesForRepos: [
          'PATCH /orgs/{org}/properties/values'
        ],
        createOrUpdateCustomProperty: [
          'PUT /orgs/{org}/properties/schema/{custom_property_name}'
        ],
        createWebhook: ['POST /orgs/{org}/hooks'],
        delete: ['DELETE /orgs/{org}'],
        deleteCustomOrganizationRole: [
          'DELETE /orgs/{org}/organization-roles/{role_id}'
        ],
        deleteWebhook: ['DELETE /orgs/{org}/hooks/{hook_id}'],
        enableOrDisableSecurityProductOnAllOrgRepos: [
          'POST /orgs/{org}/{security_product}/{enablement}'
        ],
        get: ['GET /orgs/{org}'],
        getAllCustomProperties: ['GET /orgs/{org}/properties/schema'],
        getCustomProperty: [
          'GET /orgs/{org}/properties/schema/{custom_property_name}'
        ],
        getMembershipForAuthenticatedUser: ['GET /user/memberships/orgs/{org}'],
        getMembershipForUser: ['GET /orgs/{org}/memberships/{username}'],
        getOrgRole: ['GET /orgs/{org}/organization-roles/{role_id}'],
        getWebhook: ['GET /orgs/{org}/hooks/{hook_id}'],
        getWebhookConfigForOrg: ['GET /orgs/{org}/hooks/{hook_id}/config'],
        getWebhookDelivery: [
          'GET /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}'
        ],
        list: ['GET /organizations'],
        listAppInstallations: ['GET /orgs/{org}/installations'],
        listBlockedUsers: ['GET /orgs/{org}/blocks'],
        listCustomPropertiesValuesForRepos: [
          'GET /orgs/{org}/properties/values'
        ],
        listFailedInvitations: ['GET /orgs/{org}/failed_invitations'],
        listForAuthenticatedUser: ['GET /user/orgs'],
        listForUser: ['GET /users/{username}/orgs'],
        listInvitationTeams: [
          'GET /orgs/{org}/invitations/{invitation_id}/teams'
        ],
        listMembers: ['GET /orgs/{org}/members'],
        listMembershipsForAuthenticatedUser: ['GET /user/memberships/orgs'],
        listOrgRoleTeams: [
          'GET /orgs/{org}/organization-roles/{role_id}/teams'
        ],
        listOrgRoleUsers: [
          'GET /orgs/{org}/organization-roles/{role_id}/users'
        ],
        listOrgRoles: ['GET /orgs/{org}/organization-roles'],
        listOrganizationFineGrainedPermissions: [
          'GET /orgs/{org}/organization-fine-grained-permissions'
        ],
        listOutsideCollaborators: ['GET /orgs/{org}/outside_collaborators'],
        listPatGrantRepositories: [
          'GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories'
        ],
        listPatGrantRequestRepositories: [
          'GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories'
        ],
        listPatGrantRequests: [
          'GET /orgs/{org}/personal-access-token-requests'
        ],
        listPatGrants: ['GET /orgs/{org}/personal-access-tokens'],
        listPendingInvitations: ['GET /orgs/{org}/invitations'],
        listPublicMembers: ['GET /orgs/{org}/public_members'],
        listSecurityManagerTeams: ['GET /orgs/{org}/security-managers'],
        listWebhookDeliveries: ['GET /orgs/{org}/hooks/{hook_id}/deliveries'],
        listWebhooks: ['GET /orgs/{org}/hooks'],
        patchCustomOrganizationRole: [
          'PATCH /orgs/{org}/organization-roles/{role_id}'
        ],
        pingWebhook: ['POST /orgs/{org}/hooks/{hook_id}/pings'],
        redeliverWebhookDelivery: [
          'POST /orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts'
        ],
        removeCustomProperty: [
          'DELETE /orgs/{org}/properties/schema/{custom_property_name}'
        ],
        removeMember: ['DELETE /orgs/{org}/members/{username}'],
        removeMembershipForUser: ['DELETE /orgs/{org}/memberships/{username}'],
        removeOutsideCollaborator: [
          'DELETE /orgs/{org}/outside_collaborators/{username}'
        ],
        removePublicMembershipForAuthenticatedUser: [
          'DELETE /orgs/{org}/public_members/{username}'
        ],
        removeSecurityManagerTeam: [
          'DELETE /orgs/{org}/security-managers/teams/{team_slug}'
        ],
        reviewPatGrantRequest: [
          'POST /orgs/{org}/personal-access-token-requests/{pat_request_id}'
        ],
        reviewPatGrantRequestsInBulk: [
          'POST /orgs/{org}/personal-access-token-requests'
        ],
        revokeAllOrgRolesTeam: [
          'DELETE /orgs/{org}/organization-roles/teams/{team_slug}'
        ],
        revokeAllOrgRolesUser: [
          'DELETE /orgs/{org}/organization-roles/users/{username}'
        ],
        revokeOrgRoleTeam: [
          'DELETE /orgs/{org}/organization-roles/teams/{team_slug}/{role_id}'
        ],
        revokeOrgRoleUser: [
          'DELETE /orgs/{org}/organization-roles/users/{username}/{role_id}'
        ],
        setMembershipForUser: ['PUT /orgs/{org}/memberships/{username}'],
        setPublicMembershipForAuthenticatedUser: [
          'PUT /orgs/{org}/public_members/{username}'
        ],
        unblockUser: ['DELETE /orgs/{org}/blocks/{username}'],
        update: ['PATCH /orgs/{org}'],
        updateMembershipForAuthenticatedUser: [
          'PATCH /user/memberships/orgs/{org}'
        ],
        updatePatAccess: ['POST /orgs/{org}/personal-access-tokens/{pat_id}'],
        updatePatAccesses: ['POST /orgs/{org}/personal-access-tokens'],
        updateWebhook: ['PATCH /orgs/{org}/hooks/{hook_id}'],
        updateWebhookConfigForOrg: ['PATCH /orgs/{org}/hooks/{hook_id}/config']
      },
      packages: {
        deletePackageForAuthenticatedUser: [
          'DELETE /user/packages/{package_type}/{package_name}'
        ],
        deletePackageForOrg: [
          'DELETE /orgs/{org}/packages/{package_type}/{package_name}'
        ],
        deletePackageForUser: [
          'DELETE /users/{username}/packages/{package_type}/{package_name}'
        ],
        deletePackageVersionForAuthenticatedUser: [
          'DELETE /user/packages/{package_type}/{package_name}/versions/{package_version_id}'
        ],
        deletePackageVersionForOrg: [
          'DELETE /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}'
        ],
        deletePackageVersionForUser: [
          'DELETE /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}'
        ],
        getAllPackageVersionsForAPackageOwnedByAnOrg: [
          'GET /orgs/{org}/packages/{package_type}/{package_name}/versions',
          {},
          { renamed: ['packages', 'getAllPackageVersionsForPackageOwnedByOrg'] }
        ],
        getAllPackageVersionsForAPackageOwnedByTheAuthenticatedUser: [
          'GET /user/packages/{package_type}/{package_name}/versions',
          {},
          {
            renamed: [
              'packages',
              'getAllPackageVersionsForPackageOwnedByAuthenticatedUser'
            ]
          }
        ],
        getAllPackageVersionsForPackageOwnedByAuthenticatedUser: [
          'GET /user/packages/{package_type}/{package_name}/versions'
        ],
        getAllPackageVersionsForPackageOwnedByOrg: [
          'GET /orgs/{org}/packages/{package_type}/{package_name}/versions'
        ],
        getAllPackageVersionsForPackageOwnedByUser: [
          'GET /users/{username}/packages/{package_type}/{package_name}/versions'
        ],
        getPackageForAuthenticatedUser: [
          'GET /user/packages/{package_type}/{package_name}'
        ],
        getPackageForOrganization: [
          'GET /orgs/{org}/packages/{package_type}/{package_name}'
        ],
        getPackageForUser: [
          'GET /users/{username}/packages/{package_type}/{package_name}'
        ],
        getPackageVersionForAuthenticatedUser: [
          'GET /user/packages/{package_type}/{package_name}/versions/{package_version_id}'
        ],
        getPackageVersionForOrganization: [
          'GET /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}'
        ],
        getPackageVersionForUser: [
          'GET /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}'
        ],
        listDockerMigrationConflictingPackagesForAuthenticatedUser: [
          'GET /user/docker/conflicts'
        ],
        listDockerMigrationConflictingPackagesForOrganization: [
          'GET /orgs/{org}/docker/conflicts'
        ],
        listDockerMigrationConflictingPackagesForUser: [
          'GET /users/{username}/docker/conflicts'
        ],
        listPackagesForAuthenticatedUser: ['GET /user/packages'],
        listPackagesForOrganization: ['GET /orgs/{org}/packages'],
        listPackagesForUser: ['GET /users/{username}/packages'],
        restorePackageForAuthenticatedUser: [
          'POST /user/packages/{package_type}/{package_name}/restore{?token}'
        ],
        restorePackageForOrg: [
          'POST /orgs/{org}/packages/{package_type}/{package_name}/restore{?token}'
        ],
        restorePackageForUser: [
          'POST /users/{username}/packages/{package_type}/{package_name}/restore{?token}'
        ],
        restorePackageVersionForAuthenticatedUser: [
          'POST /user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'
        ],
        restorePackageVersionForOrg: [
          'POST /orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'
        ],
        restorePackageVersionForUser: [
          'POST /users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore'
        ]
      },
      projects: {
        addCollaborator: [
          'PUT /projects/{project_id}/collaborators/{username}'
        ],
        createCard: ['POST /projects/columns/{column_id}/cards'],
        createColumn: ['POST /projects/{project_id}/columns'],
        createForAuthenticatedUser: ['POST /user/projects'],
        createForOrg: ['POST /orgs/{org}/projects'],
        createForRepo: ['POST /repos/{owner}/{repo}/projects'],
        delete: ['DELETE /projects/{project_id}'],
        deleteCard: ['DELETE /projects/columns/cards/{card_id}'],
        deleteColumn: ['DELETE /projects/columns/{column_id}'],
        get: ['GET /projects/{project_id}'],
        getCard: ['GET /projects/columns/cards/{card_id}'],
        getColumn: ['GET /projects/columns/{column_id}'],
        getPermissionForUser: [
          'GET /projects/{project_id}/collaborators/{username}/permission'
        ],
        listCards: ['GET /projects/columns/{column_id}/cards'],
        listCollaborators: ['GET /projects/{project_id}/collaborators'],
        listColumns: ['GET /projects/{project_id}/columns'],
        listForOrg: ['GET /orgs/{org}/projects'],
        listForRepo: ['GET /repos/{owner}/{repo}/projects'],
        listForUser: ['GET /users/{username}/projects'],
        moveCard: ['POST /projects/columns/cards/{card_id}/moves'],
        moveColumn: ['POST /projects/columns/{column_id}/moves'],
        removeCollaborator: [
          'DELETE /projects/{project_id}/collaborators/{username}'
        ],
        update: ['PATCH /projects/{project_id}'],
        updateCard: ['PATCH /projects/columns/cards/{card_id}'],
        updateColumn: ['PATCH /projects/columns/{column_id}']
      },
      pulls: {
        checkIfMerged: ['GET /repos/{owner}/{repo}/pulls/{pull_number}/merge'],
        create: ['POST /repos/{owner}/{repo}/pulls'],
        createReplyForReviewComment: [
          'POST /repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies'
        ],
        createReview: [
          'POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews'
        ],
        createReviewComment: [
          'POST /repos/{owner}/{repo}/pulls/{pull_number}/comments'
        ],
        deletePendingReview: [
          'DELETE /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'
        ],
        deleteReviewComment: [
          'DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}'
        ],
        dismissReview: [
          'PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals'
        ],
        get: ['GET /repos/{owner}/{repo}/pulls/{pull_number}'],
        getReview: [
          'GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'
        ],
        getReviewComment: [
          'GET /repos/{owner}/{repo}/pulls/comments/{comment_id}'
        ],
        list: ['GET /repos/{owner}/{repo}/pulls'],
        listCommentsForReview: [
          'GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments'
        ],
        listCommits: ['GET /repos/{owner}/{repo}/pulls/{pull_number}/commits'],
        listFiles: ['GET /repos/{owner}/{repo}/pulls/{pull_number}/files'],
        listRequestedReviewers: [
          'GET /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'
        ],
        listReviewComments: [
          'GET /repos/{owner}/{repo}/pulls/{pull_number}/comments'
        ],
        listReviewCommentsForRepo: ['GET /repos/{owner}/{repo}/pulls/comments'],
        listReviews: ['GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews'],
        merge: ['PUT /repos/{owner}/{repo}/pulls/{pull_number}/merge'],
        removeRequestedReviewers: [
          'DELETE /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'
        ],
        requestReviewers: [
          'POST /repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers'
        ],
        submitReview: [
          'POST /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events'
        ],
        update: ['PATCH /repos/{owner}/{repo}/pulls/{pull_number}'],
        updateBranch: [
          'PUT /repos/{owner}/{repo}/pulls/{pull_number}/update-branch'
        ],
        updateReview: [
          'PUT /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}'
        ],
        updateReviewComment: [
          'PATCH /repos/{owner}/{repo}/pulls/comments/{comment_id}'
        ]
      },
      rateLimit: { get: ['GET /rate_limit'] },
      reactions: {
        createForCommitComment: [
          'POST /repos/{owner}/{repo}/comments/{comment_id}/reactions'
        ],
        createForIssue: [
          'POST /repos/{owner}/{repo}/issues/{issue_number}/reactions'
        ],
        createForIssueComment: [
          'POST /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'
        ],
        createForPullRequestReviewComment: [
          'POST /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'
        ],
        createForRelease: [
          'POST /repos/{owner}/{repo}/releases/{release_id}/reactions'
        ],
        createForTeamDiscussionCommentInOrg: [
          'POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'
        ],
        createForTeamDiscussionInOrg: [
          'POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'
        ],
        deleteForCommitComment: [
          'DELETE /repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}'
        ],
        deleteForIssue: [
          'DELETE /repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}'
        ],
        deleteForIssueComment: [
          'DELETE /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}'
        ],
        deleteForPullRequestComment: [
          'DELETE /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}'
        ],
        deleteForRelease: [
          'DELETE /repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}'
        ],
        deleteForTeamDiscussion: [
          'DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}'
        ],
        deleteForTeamDiscussionComment: [
          'DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}'
        ],
        listForCommitComment: [
          'GET /repos/{owner}/{repo}/comments/{comment_id}/reactions'
        ],
        listForIssue: [
          'GET /repos/{owner}/{repo}/issues/{issue_number}/reactions'
        ],
        listForIssueComment: [
          'GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions'
        ],
        listForPullRequestReviewComment: [
          'GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions'
        ],
        listForRelease: [
          'GET /repos/{owner}/{repo}/releases/{release_id}/reactions'
        ],
        listForTeamDiscussionCommentInOrg: [
          'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions'
        ],
        listForTeamDiscussionInOrg: [
          'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions'
        ]
      },
      repos: {
        acceptInvitation: [
          'PATCH /user/repository_invitations/{invitation_id}',
          {},
          { renamed: ['repos', 'acceptInvitationForAuthenticatedUser'] }
        ],
        acceptInvitationForAuthenticatedUser: [
          'PATCH /user/repository_invitations/{invitation_id}'
        ],
        addAppAccessRestrictions: [
          'POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
          {},
          { mapToData: 'apps' }
        ],
        addCollaborator: ['PUT /repos/{owner}/{repo}/collaborators/{username}'],
        addStatusCheckContexts: [
          'POST /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
          {},
          { mapToData: 'contexts' }
        ],
        addTeamAccessRestrictions: [
          'POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
          {},
          { mapToData: 'teams' }
        ],
        addUserAccessRestrictions: [
          'POST /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
          {},
          { mapToData: 'users' }
        ],
        cancelPagesDeployment: [
          'POST /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel'
        ],
        checkAutomatedSecurityFixes: [
          'GET /repos/{owner}/{repo}/automated-security-fixes'
        ],
        checkCollaborator: [
          'GET /repos/{owner}/{repo}/collaborators/{username}'
        ],
        checkPrivateVulnerabilityReporting: [
          'GET /repos/{owner}/{repo}/private-vulnerability-reporting'
        ],
        checkVulnerabilityAlerts: [
          'GET /repos/{owner}/{repo}/vulnerability-alerts'
        ],
        codeownersErrors: ['GET /repos/{owner}/{repo}/codeowners/errors'],
        compareCommits: ['GET /repos/{owner}/{repo}/compare/{base}...{head}'],
        compareCommitsWithBasehead: [
          'GET /repos/{owner}/{repo}/compare/{basehead}'
        ],
        createAutolink: ['POST /repos/{owner}/{repo}/autolinks'],
        createCommitComment: [
          'POST /repos/{owner}/{repo}/commits/{commit_sha}/comments'
        ],
        createCommitSignatureProtection: [
          'POST /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'
        ],
        createCommitStatus: ['POST /repos/{owner}/{repo}/statuses/{sha}'],
        createDeployKey: ['POST /repos/{owner}/{repo}/keys'],
        createDeployment: ['POST /repos/{owner}/{repo}/deployments'],
        createDeploymentBranchPolicy: [
          'POST /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies'
        ],
        createDeploymentProtectionRule: [
          'POST /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules'
        ],
        createDeploymentStatus: [
          'POST /repos/{owner}/{repo}/deployments/{deployment_id}/statuses'
        ],
        createDispatchEvent: ['POST /repos/{owner}/{repo}/dispatches'],
        createForAuthenticatedUser: ['POST /user/repos'],
        createFork: ['POST /repos/{owner}/{repo}/forks'],
        createInOrg: ['POST /orgs/{org}/repos'],
        createOrUpdateCustomPropertiesValues: [
          'PATCH /repos/{owner}/{repo}/properties/values'
        ],
        createOrUpdateEnvironment: [
          'PUT /repos/{owner}/{repo}/environments/{environment_name}'
        ],
        createOrUpdateFileContents: [
          'PUT /repos/{owner}/{repo}/contents/{path}'
        ],
        createOrgRuleset: ['POST /orgs/{org}/rulesets'],
        createPagesDeployment: ['POST /repos/{owner}/{repo}/pages/deployments'],
        createPagesSite: ['POST /repos/{owner}/{repo}/pages'],
        createRelease: ['POST /repos/{owner}/{repo}/releases'],
        createRepoRuleset: ['POST /repos/{owner}/{repo}/rulesets'],
        createTagProtection: ['POST /repos/{owner}/{repo}/tags/protection'],
        createUsingTemplate: [
          'POST /repos/{template_owner}/{template_repo}/generate'
        ],
        createWebhook: ['POST /repos/{owner}/{repo}/hooks'],
        declineInvitation: [
          'DELETE /user/repository_invitations/{invitation_id}',
          {},
          { renamed: ['repos', 'declineInvitationForAuthenticatedUser'] }
        ],
        declineInvitationForAuthenticatedUser: [
          'DELETE /user/repository_invitations/{invitation_id}'
        ],
        delete: ['DELETE /repos/{owner}/{repo}'],
        deleteAccessRestrictions: [
          'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions'
        ],
        deleteAdminBranchProtection: [
          'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'
        ],
        deleteAnEnvironment: [
          'DELETE /repos/{owner}/{repo}/environments/{environment_name}'
        ],
        deleteAutolink: [
          'DELETE /repos/{owner}/{repo}/autolinks/{autolink_id}'
        ],
        deleteBranchProtection: [
          'DELETE /repos/{owner}/{repo}/branches/{branch}/protection'
        ],
        deleteCommitComment: [
          'DELETE /repos/{owner}/{repo}/comments/{comment_id}'
        ],
        deleteCommitSignatureProtection: [
          'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'
        ],
        deleteDeployKey: ['DELETE /repos/{owner}/{repo}/keys/{key_id}'],
        deleteDeployment: [
          'DELETE /repos/{owner}/{repo}/deployments/{deployment_id}'
        ],
        deleteDeploymentBranchPolicy: [
          'DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}'
        ],
        deleteFile: ['DELETE /repos/{owner}/{repo}/contents/{path}'],
        deleteInvitation: [
          'DELETE /repos/{owner}/{repo}/invitations/{invitation_id}'
        ],
        deleteOrgRuleset: ['DELETE /orgs/{org}/rulesets/{ruleset_id}'],
        deletePagesSite: ['DELETE /repos/{owner}/{repo}/pages'],
        deletePullRequestReviewProtection: [
          'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'
        ],
        deleteRelease: ['DELETE /repos/{owner}/{repo}/releases/{release_id}'],
        deleteReleaseAsset: [
          'DELETE /repos/{owner}/{repo}/releases/assets/{asset_id}'
        ],
        deleteRepoRuleset: [
          'DELETE /repos/{owner}/{repo}/rulesets/{ruleset_id}'
        ],
        deleteTagProtection: [
          'DELETE /repos/{owner}/{repo}/tags/protection/{tag_protection_id}'
        ],
        deleteWebhook: ['DELETE /repos/{owner}/{repo}/hooks/{hook_id}'],
        disableAutomatedSecurityFixes: [
          'DELETE /repos/{owner}/{repo}/automated-security-fixes'
        ],
        disableDeploymentProtectionRule: [
          'DELETE /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}'
        ],
        disablePrivateVulnerabilityReporting: [
          'DELETE /repos/{owner}/{repo}/private-vulnerability-reporting'
        ],
        disableVulnerabilityAlerts: [
          'DELETE /repos/{owner}/{repo}/vulnerability-alerts'
        ],
        downloadArchive: [
          'GET /repos/{owner}/{repo}/zipball/{ref}',
          {},
          { renamed: ['repos', 'downloadZipballArchive'] }
        ],
        downloadTarballArchive: ['GET /repos/{owner}/{repo}/tarball/{ref}'],
        downloadZipballArchive: ['GET /repos/{owner}/{repo}/zipball/{ref}'],
        enableAutomatedSecurityFixes: [
          'PUT /repos/{owner}/{repo}/automated-security-fixes'
        ],
        enablePrivateVulnerabilityReporting: [
          'PUT /repos/{owner}/{repo}/private-vulnerability-reporting'
        ],
        enableVulnerabilityAlerts: [
          'PUT /repos/{owner}/{repo}/vulnerability-alerts'
        ],
        generateReleaseNotes: [
          'POST /repos/{owner}/{repo}/releases/generate-notes'
        ],
        get: ['GET /repos/{owner}/{repo}'],
        getAccessRestrictions: [
          'GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions'
        ],
        getAdminBranchProtection: [
          'GET /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'
        ],
        getAllDeploymentProtectionRules: [
          'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules'
        ],
        getAllEnvironments: ['GET /repos/{owner}/{repo}/environments'],
        getAllStatusCheckContexts: [
          'GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts'
        ],
        getAllTopics: ['GET /repos/{owner}/{repo}/topics'],
        getAppsWithAccessToProtectedBranch: [
          'GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps'
        ],
        getAutolink: ['GET /repos/{owner}/{repo}/autolinks/{autolink_id}'],
        getBranch: ['GET /repos/{owner}/{repo}/branches/{branch}'],
        getBranchProtection: [
          'GET /repos/{owner}/{repo}/branches/{branch}/protection'
        ],
        getBranchRules: ['GET /repos/{owner}/{repo}/rules/branches/{branch}'],
        getClones: ['GET /repos/{owner}/{repo}/traffic/clones'],
        getCodeFrequencyStats: [
          'GET /repos/{owner}/{repo}/stats/code_frequency'
        ],
        getCollaboratorPermissionLevel: [
          'GET /repos/{owner}/{repo}/collaborators/{username}/permission'
        ],
        getCombinedStatusForRef: [
          'GET /repos/{owner}/{repo}/commits/{ref}/status'
        ],
        getCommit: ['GET /repos/{owner}/{repo}/commits/{ref}'],
        getCommitActivityStats: [
          'GET /repos/{owner}/{repo}/stats/commit_activity'
        ],
        getCommitComment: ['GET /repos/{owner}/{repo}/comments/{comment_id}'],
        getCommitSignatureProtection: [
          'GET /repos/{owner}/{repo}/branches/{branch}/protection/required_signatures'
        ],
        getCommunityProfileMetrics: [
          'GET /repos/{owner}/{repo}/community/profile'
        ],
        getContent: ['GET /repos/{owner}/{repo}/contents/{path}'],
        getContributorsStats: ['GET /repos/{owner}/{repo}/stats/contributors'],
        getCustomDeploymentProtectionRule: [
          'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}'
        ],
        getCustomPropertiesValues: [
          'GET /repos/{owner}/{repo}/properties/values'
        ],
        getDeployKey: ['GET /repos/{owner}/{repo}/keys/{key_id}'],
        getDeployment: [
          'GET /repos/{owner}/{repo}/deployments/{deployment_id}'
        ],
        getDeploymentBranchPolicy: [
          'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}'
        ],
        getDeploymentStatus: [
          'GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}'
        ],
        getEnvironment: [
          'GET /repos/{owner}/{repo}/environments/{environment_name}'
        ],
        getLatestPagesBuild: ['GET /repos/{owner}/{repo}/pages/builds/latest'],
        getLatestRelease: ['GET /repos/{owner}/{repo}/releases/latest'],
        getOrgRuleSuite: [
          'GET /orgs/{org}/rulesets/rule-suites/{rule_suite_id}'
        ],
        getOrgRuleSuites: ['GET /orgs/{org}/rulesets/rule-suites'],
        getOrgRuleset: ['GET /orgs/{org}/rulesets/{ruleset_id}'],
        getOrgRulesets: ['GET /orgs/{org}/rulesets'],
        getPages: ['GET /repos/{owner}/{repo}/pages'],
        getPagesBuild: ['GET /repos/{owner}/{repo}/pages/builds/{build_id}'],
        getPagesDeployment: [
          'GET /repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}'
        ],
        getPagesHealthCheck: ['GET /repos/{owner}/{repo}/pages/health'],
        getParticipationStats: [
          'GET /repos/{owner}/{repo}/stats/participation'
        ],
        getPullRequestReviewProtection: [
          'GET /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'
        ],
        getPunchCardStats: ['GET /repos/{owner}/{repo}/stats/punch_card'],
        getReadme: ['GET /repos/{owner}/{repo}/readme'],
        getReadmeInDirectory: ['GET /repos/{owner}/{repo}/readme/{dir}'],
        getRelease: ['GET /repos/{owner}/{repo}/releases/{release_id}'],
        getReleaseAsset: [
          'GET /repos/{owner}/{repo}/releases/assets/{asset_id}'
        ],
        getReleaseByTag: ['GET /repos/{owner}/{repo}/releases/tags/{tag}'],
        getRepoRuleSuite: [
          'GET /repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}'
        ],
        getRepoRuleSuites: ['GET /repos/{owner}/{repo}/rulesets/rule-suites'],
        getRepoRuleset: ['GET /repos/{owner}/{repo}/rulesets/{ruleset_id}'],
        getRepoRulesets: ['GET /repos/{owner}/{repo}/rulesets'],
        getStatusChecksProtection: [
          'GET /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'
        ],
        getTeamsWithAccessToProtectedBranch: [
          'GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams'
        ],
        getTopPaths: ['GET /repos/{owner}/{repo}/traffic/popular/paths'],
        getTopReferrers: [
          'GET /repos/{owner}/{repo}/traffic/popular/referrers'
        ],
        getUsersWithAccessToProtectedBranch: [
          'GET /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users'
        ],
        getViews: ['GET /repos/{owner}/{repo}/traffic/views'],
        getWebhook: ['GET /repos/{owner}/{repo}/hooks/{hook_id}'],
        getWebhookConfigForRepo: [
          'GET /repos/{owner}/{repo}/hooks/{hook_id}/config'
        ],
        getWebhookDelivery: [
          'GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}'
        ],
        listActivities: ['GET /repos/{owner}/{repo}/activity'],
        listAutolinks: ['GET /repos/{owner}/{repo}/autolinks'],
        listBranches: ['GET /repos/{owner}/{repo}/branches'],
        listBranchesForHeadCommit: [
          'GET /repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head'
        ],
        listCollaborators: ['GET /repos/{owner}/{repo}/collaborators'],
        listCommentsForCommit: [
          'GET /repos/{owner}/{repo}/commits/{commit_sha}/comments'
        ],
        listCommitCommentsForRepo: ['GET /repos/{owner}/{repo}/comments'],
        listCommitStatusesForRef: [
          'GET /repos/{owner}/{repo}/commits/{ref}/statuses'
        ],
        listCommits: ['GET /repos/{owner}/{repo}/commits'],
        listContributors: ['GET /repos/{owner}/{repo}/contributors'],
        listCustomDeploymentRuleIntegrations: [
          'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps'
        ],
        listDeployKeys: ['GET /repos/{owner}/{repo}/keys'],
        listDeploymentBranchPolicies: [
          'GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies'
        ],
        listDeploymentStatuses: [
          'GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses'
        ],
        listDeployments: ['GET /repos/{owner}/{repo}/deployments'],
        listForAuthenticatedUser: ['GET /user/repos'],
        listForOrg: ['GET /orgs/{org}/repos'],
        listForUser: ['GET /users/{username}/repos'],
        listForks: ['GET /repos/{owner}/{repo}/forks'],
        listInvitations: ['GET /repos/{owner}/{repo}/invitations'],
        listInvitationsForAuthenticatedUser: [
          'GET /user/repository_invitations'
        ],
        listLanguages: ['GET /repos/{owner}/{repo}/languages'],
        listPagesBuilds: ['GET /repos/{owner}/{repo}/pages/builds'],
        listPublic: ['GET /repositories'],
        listPullRequestsAssociatedWithCommit: [
          'GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls'
        ],
        listReleaseAssets: [
          'GET /repos/{owner}/{repo}/releases/{release_id}/assets'
        ],
        listReleases: ['GET /repos/{owner}/{repo}/releases'],
        listTagProtection: ['GET /repos/{owner}/{repo}/tags/protection'],
        listTags: ['GET /repos/{owner}/{repo}/tags'],
        listTeams: ['GET /repos/{owner}/{repo}/teams'],
        listWebhookDeliveries: [
          'GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries'
        ],
        listWebhooks: ['GET /repos/{owner}/{repo}/hooks'],
        merge: ['POST /repos/{owner}/{repo}/merges'],
        mergeUpstream: ['POST /repos/{owner}/{repo}/merge-upstream'],
        pingWebhook: ['POST /repos/{owner}/{repo}/hooks/{hook_id}/pings'],
        redeliverWebhookDelivery: [
          'POST /repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts'
        ],
        removeAppAccessRestrictions: [
          'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
          {},
          { mapToData: 'apps' }
        ],
        removeCollaborator: [
          'DELETE /repos/{owner}/{repo}/collaborators/{username}'
        ],
        removeStatusCheckContexts: [
          'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
          {},
          { mapToData: 'contexts' }
        ],
        removeStatusCheckProtection: [
          'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'
        ],
        removeTeamAccessRestrictions: [
          'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
          {},
          { mapToData: 'teams' }
        ],
        removeUserAccessRestrictions: [
          'DELETE /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
          {},
          { mapToData: 'users' }
        ],
        renameBranch: ['POST /repos/{owner}/{repo}/branches/{branch}/rename'],
        replaceAllTopics: ['PUT /repos/{owner}/{repo}/topics'],
        requestPagesBuild: ['POST /repos/{owner}/{repo}/pages/builds'],
        setAdminBranchProtection: [
          'POST /repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins'
        ],
        setAppAccessRestrictions: [
          'PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
          {},
          { mapToData: 'apps' }
        ],
        setStatusCheckContexts: [
          'PUT /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
          {},
          { mapToData: 'contexts' }
        ],
        setTeamAccessRestrictions: [
          'PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
          {},
          { mapToData: 'teams' }
        ],
        setUserAccessRestrictions: [
          'PUT /repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
          {},
          { mapToData: 'users' }
        ],
        testPushWebhook: ['POST /repos/{owner}/{repo}/hooks/{hook_id}/tests'],
        transfer: ['POST /repos/{owner}/{repo}/transfer'],
        update: ['PATCH /repos/{owner}/{repo}'],
        updateBranchProtection: [
          'PUT /repos/{owner}/{repo}/branches/{branch}/protection'
        ],
        updateCommitComment: [
          'PATCH /repos/{owner}/{repo}/comments/{comment_id}'
        ],
        updateDeploymentBranchPolicy: [
          'PUT /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}'
        ],
        updateInformationAboutPagesSite: ['PUT /repos/{owner}/{repo}/pages'],
        updateInvitation: [
          'PATCH /repos/{owner}/{repo}/invitations/{invitation_id}'
        ],
        updateOrgRuleset: ['PUT /orgs/{org}/rulesets/{ruleset_id}'],
        updatePullRequestReviewProtection: [
          'PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews'
        ],
        updateRelease: ['PATCH /repos/{owner}/{repo}/releases/{release_id}'],
        updateReleaseAsset: [
          'PATCH /repos/{owner}/{repo}/releases/assets/{asset_id}'
        ],
        updateRepoRuleset: ['PUT /repos/{owner}/{repo}/rulesets/{ruleset_id}'],
        updateStatusCheckPotection: [
          'PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks',
          {},
          { renamed: ['repos', 'updateStatusCheckProtection'] }
        ],
        updateStatusCheckProtection: [
          'PATCH /repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks'
        ],
        updateWebhook: ['PATCH /repos/{owner}/{repo}/hooks/{hook_id}'],
        updateWebhookConfigForRepo: [
          'PATCH /repos/{owner}/{repo}/hooks/{hook_id}/config'
        ],
        uploadReleaseAsset: [
          'POST /repos/{owner}/{repo}/releases/{release_id}/assets{?name,label}',
          { baseUrl: 'https://uploads.github.com' }
        ]
      },
      search: {
        code: ['GET /search/code'],
        commits: ['GET /search/commits'],
        issuesAndPullRequests: ['GET /search/issues'],
        labels: ['GET /search/labels'],
        repos: ['GET /search/repositories'],
        topics: ['GET /search/topics'],
        users: ['GET /search/users']
      },
      secretScanning: {
        getAlert: [
          'GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}'
        ],
        listAlertsForEnterprise: [
          'GET /enterprises/{enterprise}/secret-scanning/alerts'
        ],
        listAlertsForOrg: ['GET /orgs/{org}/secret-scanning/alerts'],
        listAlertsForRepo: ['GET /repos/{owner}/{repo}/secret-scanning/alerts'],
        listLocationsForAlert: [
          'GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations'
        ],
        updateAlert: [
          'PATCH /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}'
        ]
      },
      securityAdvisories: {
        createFork: [
          'POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks'
        ],
        createPrivateVulnerabilityReport: [
          'POST /repos/{owner}/{repo}/security-advisories/reports'
        ],
        createRepositoryAdvisory: [
          'POST /repos/{owner}/{repo}/security-advisories'
        ],
        createRepositoryAdvisoryCveRequest: [
          'POST /repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve'
        ],
        getGlobalAdvisory: ['GET /advisories/{ghsa_id}'],
        getRepositoryAdvisory: [
          'GET /repos/{owner}/{repo}/security-advisories/{ghsa_id}'
        ],
        listGlobalAdvisories: ['GET /advisories'],
        listOrgRepositoryAdvisories: ['GET /orgs/{org}/security-advisories'],
        listRepositoryAdvisories: [
          'GET /repos/{owner}/{repo}/security-advisories'
        ],
        updateRepositoryAdvisory: [
          'PATCH /repos/{owner}/{repo}/security-advisories/{ghsa_id}'
        ]
      },
      teams: {
        addOrUpdateMembershipForUserInOrg: [
          'PUT /orgs/{org}/teams/{team_slug}/memberships/{username}'
        ],
        addOrUpdateProjectPermissionsInOrg: [
          'PUT /orgs/{org}/teams/{team_slug}/projects/{project_id}'
        ],
        addOrUpdateRepoPermissionsInOrg: [
          'PUT /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'
        ],
        checkPermissionsForProjectInOrg: [
          'GET /orgs/{org}/teams/{team_slug}/projects/{project_id}'
        ],
        checkPermissionsForRepoInOrg: [
          'GET /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'
        ],
        create: ['POST /orgs/{org}/teams'],
        createDiscussionCommentInOrg: [
          'POST /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'
        ],
        createDiscussionInOrg: [
          'POST /orgs/{org}/teams/{team_slug}/discussions'
        ],
        deleteDiscussionCommentInOrg: [
          'DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'
        ],
        deleteDiscussionInOrg: [
          'DELETE /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'
        ],
        deleteInOrg: ['DELETE /orgs/{org}/teams/{team_slug}'],
        getByName: ['GET /orgs/{org}/teams/{team_slug}'],
        getDiscussionCommentInOrg: [
          'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'
        ],
        getDiscussionInOrg: [
          'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'
        ],
        getMembershipForUserInOrg: [
          'GET /orgs/{org}/teams/{team_slug}/memberships/{username}'
        ],
        list: ['GET /orgs/{org}/teams'],
        listChildInOrg: ['GET /orgs/{org}/teams/{team_slug}/teams'],
        listDiscussionCommentsInOrg: [
          'GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments'
        ],
        listDiscussionsInOrg: ['GET /orgs/{org}/teams/{team_slug}/discussions'],
        listForAuthenticatedUser: ['GET /user/teams'],
        listMembersInOrg: ['GET /orgs/{org}/teams/{team_slug}/members'],
        listPendingInvitationsInOrg: [
          'GET /orgs/{org}/teams/{team_slug}/invitations'
        ],
        listProjectsInOrg: ['GET /orgs/{org}/teams/{team_slug}/projects'],
        listReposInOrg: ['GET /orgs/{org}/teams/{team_slug}/repos'],
        removeMembershipForUserInOrg: [
          'DELETE /orgs/{org}/teams/{team_slug}/memberships/{username}'
        ],
        removeProjectInOrg: [
          'DELETE /orgs/{org}/teams/{team_slug}/projects/{project_id}'
        ],
        removeRepoInOrg: [
          'DELETE /orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}'
        ],
        updateDiscussionCommentInOrg: [
          'PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}'
        ],
        updateDiscussionInOrg: [
          'PATCH /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}'
        ],
        updateInOrg: ['PATCH /orgs/{org}/teams/{team_slug}']
      },
      users: {
        addEmailForAuthenticated: [
          'POST /user/emails',
          {},
          { renamed: ['users', 'addEmailForAuthenticatedUser'] }
        ],
        addEmailForAuthenticatedUser: ['POST /user/emails'],
        addSocialAccountForAuthenticatedUser: ['POST /user/social_accounts'],
        block: ['PUT /user/blocks/{username}'],
        checkBlocked: ['GET /user/blocks/{username}'],
        checkFollowingForUser: [
          'GET /users/{username}/following/{target_user}'
        ],
        checkPersonIsFollowedByAuthenticated: [
          'GET /user/following/{username}'
        ],
        createGpgKeyForAuthenticated: [
          'POST /user/gpg_keys',
          {},
          { renamed: ['users', 'createGpgKeyForAuthenticatedUser'] }
        ],
        createGpgKeyForAuthenticatedUser: ['POST /user/gpg_keys'],
        createPublicSshKeyForAuthenticated: [
          'POST /user/keys',
          {},
          { renamed: ['users', 'createPublicSshKeyForAuthenticatedUser'] }
        ],
        createPublicSshKeyForAuthenticatedUser: ['POST /user/keys'],
        createSshSigningKeyForAuthenticatedUser: [
          'POST /user/ssh_signing_keys'
        ],
        deleteEmailForAuthenticated: [
          'DELETE /user/emails',
          {},
          { renamed: ['users', 'deleteEmailForAuthenticatedUser'] }
        ],
        deleteEmailForAuthenticatedUser: ['DELETE /user/emails'],
        deleteGpgKeyForAuthenticated: [
          'DELETE /user/gpg_keys/{gpg_key_id}',
          {},
          { renamed: ['users', 'deleteGpgKeyForAuthenticatedUser'] }
        ],
        deleteGpgKeyForAuthenticatedUser: [
          'DELETE /user/gpg_keys/{gpg_key_id}'
        ],
        deletePublicSshKeyForAuthenticated: [
          'DELETE /user/keys/{key_id}',
          {},
          { renamed: ['users', 'deletePublicSshKeyForAuthenticatedUser'] }
        ],
        deletePublicSshKeyForAuthenticatedUser: ['DELETE /user/keys/{key_id}'],
        deleteSocialAccountForAuthenticatedUser: [
          'DELETE /user/social_accounts'
        ],
        deleteSshSigningKeyForAuthenticatedUser: [
          'DELETE /user/ssh_signing_keys/{ssh_signing_key_id}'
        ],
        follow: ['PUT /user/following/{username}'],
        getAuthenticated: ['GET /user'],
        getByUsername: ['GET /users/{username}'],
        getContextForUser: ['GET /users/{username}/hovercard'],
        getGpgKeyForAuthenticated: [
          'GET /user/gpg_keys/{gpg_key_id}',
          {},
          { renamed: ['users', 'getGpgKeyForAuthenticatedUser'] }
        ],
        getGpgKeyForAuthenticatedUser: ['GET /user/gpg_keys/{gpg_key_id}'],
        getPublicSshKeyForAuthenticated: [
          'GET /user/keys/{key_id}',
          {},
          { renamed: ['users', 'getPublicSshKeyForAuthenticatedUser'] }
        ],
        getPublicSshKeyForAuthenticatedUser: ['GET /user/keys/{key_id}'],
        getSshSigningKeyForAuthenticatedUser: [
          'GET /user/ssh_signing_keys/{ssh_signing_key_id}'
        ],
        list: ['GET /users'],
        listBlockedByAuthenticated: [
          'GET /user/blocks',
          {},
          { renamed: ['users', 'listBlockedByAuthenticatedUser'] }
        ],
        listBlockedByAuthenticatedUser: ['GET /user/blocks'],
        listEmailsForAuthenticated: [
          'GET /user/emails',
          {},
          { renamed: ['users', 'listEmailsForAuthenticatedUser'] }
        ],
        listEmailsForAuthenticatedUser: ['GET /user/emails'],
        listFollowedByAuthenticated: [
          'GET /user/following',
          {},
          { renamed: ['users', 'listFollowedByAuthenticatedUser'] }
        ],
        listFollowedByAuthenticatedUser: ['GET /user/following'],
        listFollowersForAuthenticatedUser: ['GET /user/followers'],
        listFollowersForUser: ['GET /users/{username}/followers'],
        listFollowingForUser: ['GET /users/{username}/following'],
        listGpgKeysForAuthenticated: [
          'GET /user/gpg_keys',
          {},
          { renamed: ['users', 'listGpgKeysForAuthenticatedUser'] }
        ],
        listGpgKeysForAuthenticatedUser: ['GET /user/gpg_keys'],
        listGpgKeysForUser: ['GET /users/{username}/gpg_keys'],
        listPublicEmailsForAuthenticated: [
          'GET /user/public_emails',
          {},
          { renamed: ['users', 'listPublicEmailsForAuthenticatedUser'] }
        ],
        listPublicEmailsForAuthenticatedUser: ['GET /user/public_emails'],
        listPublicKeysForUser: ['GET /users/{username}/keys'],
        listPublicSshKeysForAuthenticated: [
          'GET /user/keys',
          {},
          { renamed: ['users', 'listPublicSshKeysForAuthenticatedUser'] }
        ],
        listPublicSshKeysForAuthenticatedUser: ['GET /user/keys'],
        listSocialAccountsForAuthenticatedUser: ['GET /user/social_accounts'],
        listSocialAccountsForUser: ['GET /users/{username}/social_accounts'],
        listSshSigningKeysForAuthenticatedUser: ['GET /user/ssh_signing_keys'],
        listSshSigningKeysForUser: ['GET /users/{username}/ssh_signing_keys'],
        setPrimaryEmailVisibilityForAuthenticated: [
          'PATCH /user/email/visibility',
          {},
          {
            renamed: ['users', 'setPrimaryEmailVisibilityForAuthenticatedUser']
          }
        ],
        setPrimaryEmailVisibilityForAuthenticatedUser: [
          'PATCH /user/email/visibility'
        ],
        unblock: ['DELETE /user/blocks/{username}'],
        unfollow: ['DELETE /user/following/{username}'],
        updateAuthenticated: ['PATCH /user']
      }
    };
    var ts = es;
    const rs = new Map();
    for (const [a, C] of Object.entries(ts)) {
      for (const [q, re] of Object.entries(C)) {
        const [C, ae, Ue] = re;
        const [lt, Pt] = C.split(/ /);
        const Wt = Object.assign({ method: lt, url: Pt }, ae);
        if (!rs.has(a)) {
          rs.set(a, new Map());
        }
        rs.get(a).set(q, {
          scope: a,
          methodName: q,
          endpointDefaults: Wt,
          decorations: Ue
        });
      }
    }
    const ss = {
      has({ scope: a }, C) {
        return rs.get(a).has(C);
      },
      getOwnPropertyDescriptor(a, C) {
        return {
          value: this.get(a, C),
          configurable: true,
          writable: true,
          enumerable: true
        };
      },
      defineProperty(a, C, q) {
        Object.defineProperty(a.cache, C, q);
        return true;
      },
      deleteProperty(a, C) {
        delete a.cache[C];
        return true;
      },
      ownKeys({ scope: a }) {
        return [...rs.get(a).keys()];
      },
      set(a, C, q) {
        return (a.cache[C] = q);
      },
      get({ octokit: a, scope: C, cache: q }, re) {
        if (q[re]) {
          return q[re];
        }
        const ae = rs.get(C).get(re);
        if (!ae) {
          return void 0;
        }
        const { endpointDefaults: Ue, decorations: lt } = ae;
        if (lt) {
          q[re] = decorate(a, C, re, Ue, lt);
        } else {
          q[re] = a.request.defaults(Ue);
        }
        return q[re];
      }
    };
    function endpointsToMethods(a) {
      const C = {};
      for (const q of rs.keys()) {
        C[q] = new Proxy({ octokit: a, scope: q, cache: {} }, ss);
      }
      return C;
    }
    function decorate(a, C, q, re, ae) {
      const Ue = a.request.defaults(re);
      function withDecorations(...re) {
        let lt = Ue.endpoint.merge(...re);
        if (ae.mapToData) {
          lt = Object.assign({}, lt, {
            data: lt[ae.mapToData],
            [ae.mapToData]: void 0
          });
          return Ue(lt);
        }
        if (ae.renamed) {
          const [re, Ue] = ae.renamed;
          a.log.warn(
            `octokit.${C}.${q}() has been renamed to octokit.${re}.${Ue}()`
          );
        }
        if (ae.deprecated) {
          a.log.warn(ae.deprecated);
        }
        if (ae.renamedParameters) {
          const lt = Ue.endpoint.merge(...re);
          for (const [re, Ue] of Object.entries(ae.renamedParameters)) {
            if (re in lt) {
              a.log.warn(
                `"${re}" parameter is deprecated for "octokit.${C}.${q}()". Use "${Ue}" instead`
              );
              if (!(Ue in lt)) {
                lt[Ue] = lt[re];
              }
              delete lt[re];
            }
          }
          return Ue(lt);
        }
        return Ue(...re);
      }
      return Object.assign(withDecorations, Ue);
    }
    function restEndpointMethods(a) {
      const C = endpointsToMethods(a);
      return { rest: C };
    }
    restEndpointMethods.VERSION = Zr;
    function legacyRestEndpointMethods(a) {
      const C = endpointsToMethods(a);
      return { ...C, rest: C };
    }
    legacyRestEndpointMethods.VERSION = Zr;
    const ns = '21.0.1';
    const os = Octokit.plugin(
      requestLog,
      legacyRestEndpointMethods,
      paginateRest
    ).defaults({ userAgent: `octokit-rest.js/${ns}` });
    class utils_repo_submit_issue_comment_options extends (null &&
      main_options) {}
    async function utils_repo_submit_issue_comment(a) {
      const { str_comment: C, with_github_token: q } = a;
      if (!q) throw new Error('GitHub token was not found');
      const re = new os({ auth: q });
      const { issue: lt, repository: Pt } = Ue.context.payload;
      if (lt && Pt) {
        await re.issues.createComment({
          owner: Pt.owner.login,
          repo: Pt.name,
          body: C,
          issue_number: lt.number
        });
      }
      (0, ae.debug)(`issue: ${lt}`);
      (0, ae.debug)(`repository: ${Pt}`);
      (0, ae.debug)(`comment: ${C}`);
    }
    var as = __nccwpck_require__(1017);
    var ls = __nccwpck_require__(6459);
    const cs = Symbol('changed');
    const As = Symbol('classList');
    const ds = Symbol('CustomElements');
    const us = Symbol('content');
    const ps = Symbol('dataset');
    const hs = Symbol('doctype');
    const ms = Symbol('DOMParser');
    const fs = Symbol('end');
    const gs = Symbol('EventTarget');
    const Es = Symbol('globals');
    const Cs = Symbol('image');
    const bs = Symbol('mime');
    const ys = Symbol('MutationObserver');
    const Is = Symbol('next');
    const ws = Symbol('ownerElement');
    const Bs = Symbol('prev');
    const Qs = Symbol('private');
    const vs = Symbol('sheet');
    const Ss = Symbol('start');
    const _s = Symbol('style');
    const Ts = Symbol('upgrade');
    const ks = Symbol('value');
    const Rs = new Uint16Array(
      'ᵁ<Õıʊҝջאٵ۞ޢߖࠏ੊ઑඡ๭༉༦჊ረዡᐕᒝᓃᓟᔥ\0\0\0\0\0\0ᕫᛍᦍᰒᷝ὾⁠↰⊍⏀⏻⑂⠤⤒ⴈ⹈⿎〖㊺㘹㞬㣾㨨㩱㫠㬮ࠀEMabcfglmnoprstu\\bfms¦³¹ÈÏlig耻Æ䃆P耻&䀦cute耻Á䃁reve;䄂Āiyx}rc耻Â䃂;䐐r;쀀𝔄rave耻À䃀pha;䎑acr;䄀d;橓Āgp¡on;䄄f;쀀𝔸plyFunction;恡ing耻Å䃅Ācs¾Ãr;쀀𝒜ign;扔ilde耻Ã䃃ml耻Ä䃄ЀaceforsuåûþėĜĢħĪĀcrêòkslash;或Ŷöø;櫧ed;挆y;䐑ƀcrtąċĔause;戵noullis;愬a;䎒r;쀀𝔅pf;쀀𝔹eve;䋘còēmpeq;扎܀HOacdefhilorsuōőŖƀƞƢƵƷƺǜȕɳɸɾcy;䐧PY耻©䂩ƀcpyŝŢźute;䄆Ā;iŧŨ拒talDifferentialD;慅leys;愭ȀaeioƉƎƔƘron;䄌dil耻Ç䃇rc;䄈nint;戰ot;䄊ĀdnƧƭilla;䂸terDot;䂷òſi;䎧rcleȀDMPTǇǋǑǖot;抙inus;抖lus;投imes;抗oĀcsǢǸkwiseContourIntegral;戲eCurlyĀDQȃȏoubleQuote;思uote;怙ȀlnpuȞȨɇɕonĀ;eȥȦ户;橴ƀgitȯȶȺruent;扡nt;戯ourIntegral;戮ĀfrɌɎ;愂oduct;成nterClockwiseContourIntegral;戳oss;樯cr;쀀𝒞pĀ;Cʄʅ拓ap;才րDJSZacefiosʠʬʰʴʸˋ˗ˡ˦̳ҍĀ;oŹʥtrahd;椑cy;䐂cy;䐅cy;䐏ƀgrsʿ˄ˇger;怡r;憡hv;櫤Āayː˕ron;䄎;䐔lĀ;t˝˞戇a;䎔r;쀀𝔇Āaf˫̧Ācm˰̢riticalȀADGT̖̜̀̆cute;䂴oŴ̋̍;䋙bleAcute;䋝rave;䁠ilde;䋜ond;拄ferentialD;慆Ѱ̽\0\0\0͔͂\0Ѕf;쀀𝔻ƀ;DE͈͉͍䂨ot;惜qual;扐blèCDLRUVͣͲ΂ϏϢϸontourIntegraìȹoɴ͹\0\0ͻ»͉nArrow;懓Āeo·ΤftƀARTΐΖΡrrow;懐ightArrow;懔eåˊngĀLRΫτeftĀARγιrrow;柸ightArrow;柺ightArrow;柹ightĀATϘϞrrow;懒ee;抨pɁϩ\0\0ϯrrow;懑ownArrow;懕erticalBar;戥ǹABLRTaВЪаўѿͼrrowƀ;BUНОТ憓ar;椓pArrow;懵reve;䌑eft˒к\0ц\0ѐightVector;楐eeVector;楞ectorĀ;Bљњ憽ar;楖ightǔѧ\0ѱeeVector;楟ectorĀ;BѺѻ懁ar;楗eeĀ;A҆҇护rrow;憧ĀctҒҗr;쀀𝒟rok;䄐ࠀNTacdfglmopqstuxҽӀӄӋӞӢӧӮӵԡԯԶՒ՝ՠեG;䅊H耻Ð䃐cute耻É䃉ƀaiyӒӗӜron;䄚rc耻Ê䃊;䐭ot;䄖r;쀀𝔈rave耻È䃈ement;戈ĀapӺӾcr;䄒tyɓԆ\0\0ԒmallSquare;旻erySmallSquare;斫ĀgpԦԪon;䄘f;쀀𝔼silon;䎕uĀaiԼՉlĀ;TՂՃ橵ilde;扂librium;懌Āci՗՚r;愰m;橳a;䎗ml耻Ë䃋Āipժկsts;戃onentialE;慇ʀcfiosօֈ֍ֲ׌y;䐤r;쀀𝔉lledɓ֗\0\0֣mallSquare;旼erySmallSquare;斪Ͱֺ\0ֿ\0\0ׄf;쀀𝔽All;戀riertrf;愱cò׋؀JTabcdfgorstר׬ׯ׺؀ؒؖ؛؝أ٬ٲcy;䐃耻>䀾mmaĀ;d׷׸䎓;䏜reve;䄞ƀeiy؇،ؐdil;䄢rc;䄜;䐓ot;䄠r;쀀𝔊;拙pf;쀀𝔾eater̀EFGLSTصلَٖٛ٦qualĀ;Lؾؿ扥ess;招ullEqual;执reater;檢ess;扷lantEqual;橾ilde;扳cr;쀀𝒢;扫ЀAacfiosuڅڋږڛڞڪھۊRDcy;䐪Āctڐڔek;䋇;䁞irc;䄤r;愌lbertSpace;愋ǰگ\0ڲf;愍izontalLine;攀Āctۃۅòکrok;䄦mpńېۘownHumðįqual;扏܀EJOacdfgmnostuۺ۾܃܇܎ܚܞܡܨ݄ݸދޏޕcy;䐕lig;䄲cy;䐁cute耻Í䃍Āiyܓܘrc耻Î䃎;䐘ot;䄰r;愑rave耻Ì䃌ƀ;apܠܯܿĀcgܴܷr;䄪inaryI;慈lieóϝǴ݉\0ݢĀ;eݍݎ戬Āgrݓݘral;戫section;拂isibleĀCTݬݲomma;恣imes;恢ƀgptݿރވon;䄮f;쀀𝕀a;䎙cr;愐ilde;䄨ǫޚ\0ޞcy;䐆l耻Ï䃏ʀcfosuެ޷޼߂ߐĀiyޱ޵rc;䄴;䐙r;쀀𝔍pf;쀀𝕁ǣ߇\0ߌr;쀀𝒥rcy;䐈kcy;䐄΀HJacfosߤߨ߽߬߱ࠂࠈcy;䐥cy;䐌ppa;䎚Āey߶߻dil;䄶;䐚r;쀀𝔎pf;쀀𝕂cr;쀀𝒦րJTaceflmostࠥࠩࠬࡐࡣ঳সে্਷ੇcy;䐉耻<䀼ʀcmnpr࠷࠼ࡁࡄࡍute;䄹bda;䎛g;柪lacetrf;愒r;憞ƀaeyࡗ࡜ࡡron;䄽dil;䄻;䐛Āfsࡨ॰tԀACDFRTUVarࡾࢩࢱࣦ࣠ࣼयज़ΐ४Ānrࢃ࢏gleBracket;柨rowƀ;BR࢙࢚࢞憐ar;懤ightArrow;懆eiling;挈oǵࢷ\0ࣃbleBracket;柦nǔࣈ\0࣒eeVector;楡ectorĀ;Bࣛࣜ懃ar;楙loor;挊ightĀAV࣯ࣵrrow;憔ector;楎Āerँगeƀ;AVउऊऐ抣rrow;憤ector;楚iangleƀ;BEतथऩ抲ar;槏qual;抴pƀDTVषूौownVector;楑eeVector;楠ectorĀ;Bॖॗ憿ar;楘ectorĀ;B॥०憼ar;楒ightáΜs̀EFGLSTॾঋকঝঢভqualGreater;拚ullEqual;扦reater;扶ess;檡lantEqual;橽ilde;扲r;쀀𝔏Ā;eঽা拘ftarrow;懚idot;䄿ƀnpw৔ਖਛgȀLRlr৞৷ਂਐeftĀAR০৬rrow;柵ightArrow;柷ightArrow;柶eftĀarγਊightáοightáϊf;쀀𝕃erĀLRਢਬeftArrow;憙ightArrow;憘ƀchtਾੀੂòࡌ;憰rok;䅁;扪Ѐacefiosuਗ਼੝੠੷੼અઋ઎p;椅y;䐜Ādl੥੯iumSpace;恟lintrf;愳r;쀀𝔐nusPlus;戓pf;쀀𝕄cò੶;䎜ҀJacefostuણધભીଔଙඑ඗ඞcy;䐊cute;䅃ƀaey઴હાron;䅇dil;䅅;䐝ƀgswે૰଎ativeƀMTV૓૟૨ediumSpace;怋hiĀcn૦૘ë૙eryThiî૙tedĀGL૸ଆreaterGreateòٳessLesóੈLine;䀊r;쀀𝔑ȀBnptଢନଷ଺reak;恠BreakingSpace;䂠f;愕ڀ;CDEGHLNPRSTV୕ୖ୪୼஡௫ఄ౞಄ದ೘ൡඅ櫬Āou୛୤ngruent;扢pCap;扭oubleVerticalBar;戦ƀlqxஃஊ஛ement;戉ualĀ;Tஒஓ扠ilde;쀀≂̸ists;戄reater΀;EFGLSTஶஷ஽௉௓௘௥扯qual;扱ullEqual;쀀≧̸reater;쀀≫̸ess;批lantEqual;쀀⩾̸ilde;扵umpń௲௽ownHump;쀀≎̸qual;쀀≏̸eĀfsఊధtTriangleƀ;BEచఛడ拪ar;쀀⧏̸qual;括s̀;EGLSTవశ఼ౄోౘ扮qual;扰reater;扸ess;쀀≪̸lantEqual;쀀⩽̸ilde;扴estedĀGL౨౹reaterGreater;쀀⪢̸essLess;쀀⪡̸recedesƀ;ESಒಓಛ技qual;쀀⪯̸lantEqual;拠ĀeiಫಹverseElement;戌ghtTriangleƀ;BEೋೌ೒拫ar;쀀⧐̸qual;拭ĀquೝഌuareSuĀbp೨೹setĀ;E೰ೳ쀀⊏̸qual;拢ersetĀ;Eഃആ쀀⊐̸qual;拣ƀbcpഓതൎsetĀ;Eഛഞ쀀⊂⃒qual;抈ceedsȀ;ESTലള഻െ抁qual;쀀⪰̸lantEqual;拡ilde;쀀≿̸ersetĀ;E൘൛쀀⊃⃒qual;抉ildeȀ;EFT൮൯൵ൿ扁qual;扄ullEqual;扇ilde;扉erticalBar;戤cr;쀀𝒩ilde耻Ñ䃑;䎝܀Eacdfgmoprstuvලෂ෉෕ෛ෠෧෼ขภยา฿ไlig;䅒cute耻Ó䃓Āiy෎ීrc耻Ô䃔;䐞blac;䅐r;쀀𝔒rave耻Ò䃒ƀaei෮ෲ෶cr;䅌ga;䎩cron;䎟pf;쀀𝕆enCurlyĀDQฎบoubleQuote;怜uote;怘;橔Āclวฬr;쀀𝒪ash耻Ø䃘iŬื฼de耻Õ䃕es;樷ml耻Ö䃖erĀBP๋๠Āar๐๓r;怾acĀek๚๜;揞et;掴arenthesis;揜Ҁacfhilors๿ງຊຏຒດຝະ໼rtialD;戂y;䐟r;쀀𝔓i;䎦;䎠usMinus;䂱Āipຢອncareplanåڝf;愙Ȁ;eio຺ູ໠໤檻cedesȀ;EST່້໏໚扺qual;檯lantEqual;扼ilde;找me;怳Ādp໩໮uct;戏ortionĀ;aȥ໹l;戝Āci༁༆r;쀀𝒫;䎨ȀUfos༑༖༛༟OT耻"䀢r;쀀𝔔pf;愚cr;쀀𝒬؀BEacefhiorsu༾གྷཇའཱིྦྷྪྭ႖ႩႴႾarr;椐G耻®䂮ƀcnrཎནབute;䅔g;柫rĀ;tཛྷཝ憠l;椖ƀaeyཧཬཱron;䅘dil;䅖;䐠Ā;vླྀཹ愜erseĀEUྂྙĀlq྇ྎement;戋uilibrium;懋pEquilibrium;楯r»ཹo;䎡ghtЀACDFTUVa࿁࿫࿳ဢဨၛႇϘĀnr࿆࿒gleBracket;柩rowƀ;BL࿜࿝࿡憒ar;懥eftArrow;懄eiling;按oǵ࿹\0စbleBracket;柧nǔည\0နeeVector;楝ectorĀ;Bဝသ懂ar;楕loor;挋Āerိ၃eƀ;AVဵံြ抢rrow;憦ector;楛iangleƀ;BEၐၑၕ抳ar;槐qual;抵pƀDTVၣၮၸownVector;楏eeVector;楜ectorĀ;Bႂႃ憾ar;楔ectorĀ;B႑႒懀ar;楓Āpuႛ႞f;愝ndImplies;楰ightarrow;懛ĀchႹႼr;愛;憱leDelayed;槴ڀHOacfhimoqstuფჱჷჽᄙᄞᅑᅖᅡᅧᆵᆻᆿĀCcჩხHcy;䐩y;䐨FTcy;䐬cute;䅚ʀ;aeiyᄈᄉᄎᄓᄗ檼ron;䅠dil;䅞rc;䅜;䐡r;쀀𝔖ortȀDLRUᄪᄴᄾᅉownArrow»ОeftArrow»࢚ightArrow»࿝pArrow;憑gma;䎣allCircle;战pf;쀀𝕊ɲᅭ\0\0ᅰt;戚areȀ;ISUᅻᅼᆉᆯ斡ntersection;抓uĀbpᆏᆞsetĀ;Eᆗᆘ抏qual;抑ersetĀ;Eᆨᆩ抐qual;抒nion;抔cr;쀀𝒮ar;拆ȀbcmpᇈᇛሉላĀ;sᇍᇎ拐etĀ;Eᇍᇕqual;抆ĀchᇠህeedsȀ;ESTᇭᇮᇴᇿ扻qual;檰lantEqual;扽ilde;承Tháྌ;我ƀ;esሒሓሣ拑rsetĀ;Eሜም抃qual;抇et»ሓրHRSacfhiorsሾቄ቉ቕ቞ቱቶኟዂወዑORN耻Þ䃞ADE;愢ĀHc቎ቒcy;䐋y;䐦Ābuቚቜ;䀉;䎤ƀaeyብቪቯron;䅤dil;䅢;䐢r;쀀𝔗Āeiቻ኉ǲኀ\0ኇefore;戴a;䎘Ācn኎ኘkSpace;쀀  Space;怉ldeȀ;EFTካኬኲኼ戼qual;扃ullEqual;扅ilde;扈pf;쀀𝕋ipleDot;惛Āctዖዛr;쀀𝒯rok;䅦ૡዷጎጚጦ\0ጬጱ\0\0\0\0\0ጸጽ፷ᎅ\0᏿ᐄᐊᐐĀcrዻጁute耻Ú䃚rĀ;oጇገ憟cir;楉rǣጓ\0጖y;䐎ve;䅬Āiyጞጣrc耻Û䃛;䐣blac;䅰r;쀀𝔘rave耻Ù䃙acr;䅪Ādiፁ፩erĀBPፈ፝Āarፍፐr;䁟acĀekፗፙ;揟et;掵arenthesis;揝onĀ;P፰፱拃lus;抎Āgp፻፿on;䅲f;쀀𝕌ЀADETadps᎕ᎮᎸᏄϨᏒᏗᏳrrowƀ;BDᅐᎠᎤar;椒ownArrow;懅ownArrow;憕quilibrium;楮eeĀ;AᏋᏌ报rrow;憥ownáϳerĀLRᏞᏨeftArrow;憖ightArrow;憗iĀ;lᏹᏺ䏒on;䎥ing;䅮cr;쀀𝒰ilde;䅨ml耻Ü䃜ҀDbcdefosvᐧᐬᐰᐳᐾᒅᒊᒐᒖash;披ar;櫫y;䐒ashĀ;lᐻᐼ抩;櫦Āerᑃᑅ;拁ƀbtyᑌᑐᑺar;怖Ā;iᑏᑕcalȀBLSTᑡᑥᑪᑴar;戣ine;䁼eparator;杘ilde;所ThinSpace;怊r;쀀𝔙pf;쀀𝕍cr;쀀𝒱dash;抪ʀcefosᒧᒬᒱᒶᒼirc;䅴dge;拀r;쀀𝔚pf;쀀𝕎cr;쀀𝒲Ȁfiosᓋᓐᓒᓘr;쀀𝔛;䎞pf;쀀𝕏cr;쀀𝒳ҀAIUacfosuᓱᓵᓹᓽᔄᔏᔔᔚᔠcy;䐯cy;䐇cy;䐮cute耻Ý䃝Āiyᔉᔍrc;䅶;䐫r;쀀𝔜pf;쀀𝕐cr;쀀𝒴ml;䅸ЀHacdefosᔵᔹᔿᕋᕏᕝᕠᕤcy;䐖cute;䅹Āayᕄᕉron;䅽;䐗ot;䅻ǲᕔ\0ᕛoWidtè૙a;䎖r;愨pf;愤cr;쀀𝒵௡ᖃᖊᖐ\0ᖰᖶᖿ\0\0\0\0ᗆᗛᗫᙟ᙭\0ᚕ᚛ᚲᚹ\0ᚾcute耻á䃡reve;䄃̀;Ediuyᖜᖝᖡᖣᖨᖭ戾;쀀∾̳;房rc耻â䃢te肻´̆;䐰lig耻æ䃦Ā;r²ᖺ;쀀𝔞rave耻à䃠ĀepᗊᗖĀfpᗏᗔsym;愵èᗓha;䎱ĀapᗟcĀclᗤᗧr;䄁g;樿ɤᗰ\0\0ᘊʀ;adsvᗺᗻᗿᘁᘇ戧nd;橕;橜lope;橘;橚΀;elmrszᘘᘙᘛᘞᘿᙏᙙ戠;榤e»ᘙsdĀ;aᘥᘦ戡ѡᘰᘲᘴᘶᘸᘺᘼᘾ;榨;榩;榪;榫;榬;榭;榮;榯tĀ;vᙅᙆ戟bĀ;dᙌᙍ抾;榝Āptᙔᙗh;戢»¹arr;捼Āgpᙣᙧon;䄅f;쀀𝕒΀;Eaeiop዁ᙻᙽᚂᚄᚇᚊ;橰cir;橯;扊d;手s;䀧roxĀ;e዁ᚒñᚃing耻å䃥ƀctyᚡᚦᚨr;쀀𝒶;䀪mpĀ;e዁ᚯñʈilde耻ã䃣ml耻ä䃤Āciᛂᛈoninôɲnt;樑ࠀNabcdefiklnoprsu᛭ᛱᜰ᜼ᝃᝈ᝸᝽០៦ᠹᡐᜍ᤽᥈ᥰot;櫭Ācrᛶ᜞kȀcepsᜀᜅᜍᜓong;扌psilon;䏶rime;怵imĀ;e᜚᜛戽q;拍Ŷᜢᜦee;抽edĀ;gᜬᜭ挅e»ᜭrkĀ;t፜᜷brk;掶Āoyᜁᝁ;䐱quo;怞ʀcmprtᝓ᝛ᝡᝤᝨausĀ;eĊĉptyv;榰séᜌnoõēƀahwᝯ᝱ᝳ;䎲;愶een;扬r;쀀𝔟g΀costuvwឍឝឳេ៕៛៞ƀaiuបពរðݠrc;旯p»፱ƀdptឤឨឭot;樀lus;樁imes;樂ɱឹ\0\0ើcup;樆ar;昅riangleĀdu៍្own;施p;斳plus;樄eåᑄåᒭarow;植ƀako៭ᠦᠵĀcn៲ᠣkƀlst៺֫᠂ozenge;槫riangleȀ;dlr᠒᠓᠘᠝斴own;斾eft;旂ight;斸k;搣Ʊᠫ\0ᠳƲᠯ\0ᠱ;斒;斑4;斓ck;斈ĀeoᠾᡍĀ;qᡃᡆ쀀=⃥uiv;쀀≡⃥t;挐Ȁptwxᡙᡞᡧᡬf;쀀𝕓Ā;tᏋᡣom»Ꮜtie;拈؀DHUVbdhmptuvᢅᢖᢪᢻᣗᣛᣬ᣿ᤅᤊᤐᤡȀLRlrᢎᢐᢒᢔ;敗;敔;敖;敓ʀ;DUduᢡᢢᢤᢦᢨ敐;敦;敩;敤;敧ȀLRlrᢳᢵᢷᢹ;敝;敚;敜;教΀;HLRhlrᣊᣋᣍᣏᣑᣓᣕ救;敬;散;敠;敫;敢;敟ox;槉ȀLRlrᣤᣦᣨᣪ;敕;敒;攐;攌ʀ;DUduڽ᣷᣹᣻᣽;敥;敨;攬;攴inus;抟lus;択imes;抠ȀLRlrᤙᤛᤝ᤟;敛;敘;攘;攔΀;HLRhlrᤰᤱᤳᤵᤷ᤻᤹攂;敪;敡;敞;攼;攤;攜Āevģ᥂bar耻¦䂦Ȁceioᥑᥖᥚᥠr;쀀𝒷mi;恏mĀ;e᜚᜜lƀ;bhᥨᥩᥫ䁜;槅sub;柈Ŭᥴ᥾lĀ;e᥹᥺怢t»᥺pƀ;Eeįᦅᦇ;檮Ā;qۜۛೡᦧ\0᧨ᨑᨕᨲ\0ᨷᩐ\0\0᪴\0\0᫁\0\0ᬡᬮ᭍᭒\0᯽\0ᰌƀcpr᦭ᦲ᧝ute;䄇̀;abcdsᦿᧀᧄ᧊᧕᧙戩nd;橄rcup;橉Āau᧏᧒p;橋p;橇ot;橀;쀀∩︀Āeo᧢᧥t;恁îړȀaeiu᧰᧻ᨁᨅǰ᧵\0᧸s;橍on;䄍dil耻ç䃧rc;䄉psĀ;sᨌᨍ橌m;橐ot;䄋ƀdmnᨛᨠᨦil肻¸ƭptyv;榲t脀¢;eᨭᨮ䂢räƲr;쀀𝔠ƀceiᨽᩀᩍy;䑇ckĀ;mᩇᩈ朓ark»ᩈ;䏇r΀;Ecefms᩟᩠ᩢᩫ᪤᪪᪮旋;槃ƀ;elᩩᩪᩭ䋆q;扗eɡᩴ\0\0᪈rrowĀlr᩼᪁eft;憺ight;憻ʀRSacd᪒᪔᪖᪚᪟»ཇ;擈st;抛irc;抚ash;抝nint;樐id;櫯cir;槂ubsĀ;u᪻᪼晣it»᪼ˬ᫇᫔᫺\0ᬊonĀ;eᫍᫎ䀺Ā;qÇÆɭ᫙\0\0᫢aĀ;t᫞᫟䀬;䁀ƀ;fl᫨᫩᫫戁îᅠeĀmx᫱᫶ent»᫩eóɍǧ᫾\0ᬇĀ;dኻᬂot;橭nôɆƀfryᬐᬔᬗ;쀀𝕔oäɔ脀©;sŕᬝr;愗Āaoᬥᬩrr;憵ss;朗Ācuᬲᬷr;쀀𝒸Ābpᬼ᭄Ā;eᭁᭂ櫏;櫑Ā;eᭉᭊ櫐;櫒dot;拯΀delprvw᭠᭬᭷ᮂᮬᯔ᯹arrĀlr᭨᭪;椸;椵ɰ᭲\0\0᭵r;拞c;拟arrĀ;p᭿ᮀ憶;椽̀;bcdosᮏᮐᮖᮡᮥᮨ截rcap;橈Āauᮛᮞp;橆p;橊ot;抍r;橅;쀀∪︀Ȁalrv᮵ᮿᯞᯣrrĀ;mᮼᮽ憷;椼yƀevwᯇᯔᯘqɰᯎ\0\0ᯒreã᭳uã᭵ee;拎edge;拏en耻¤䂤earrowĀlrᯮ᯳eft»ᮀight»ᮽeäᯝĀciᰁᰇoninôǷnt;戱lcty;挭ঀAHabcdefhijlorstuwz᰸᰻᰿ᱝᱩᱵᲊᲞᲬᲷ᳻᳿ᴍᵻᶑᶫᶻ᷆᷍rò΁ar;楥Ȁglrs᱈ᱍ᱒᱔ger;怠eth;愸òᄳhĀ;vᱚᱛ怐»ऊūᱡᱧarow;椏aã̕Āayᱮᱳron;䄏;䐴ƀ;ao̲ᱼᲄĀgrʿᲁr;懊tseq;橷ƀglmᲑᲔᲘ耻°䂰ta;䎴ptyv;榱ĀirᲣᲨsht;楿;쀀𝔡arĀlrᲳᲵ»ࣜ»သʀaegsv᳂͸᳖᳜᳠mƀ;oș᳊᳔ndĀ;ș᳑uit;晦amma;䏝in;拲ƀ;io᳧᳨᳸䃷de脀÷;o᳧ᳰntimes;拇nø᳷cy;䑒cɯᴆ\0\0ᴊrn;挞op;挍ʀlptuwᴘᴝᴢᵉᵕlar;䀤f;쀀𝕕ʀ;emps̋ᴭᴷᴽᵂqĀ;d͒ᴳot;扑inus;戸lus;戔quare;抡blebarwedgåúnƀadhᄮᵝᵧownarrowóᲃarpoonĀlrᵲᵶefôᲴighôᲶŢᵿᶅkaro÷གɯᶊ\0\0ᶎrn;挟op;挌ƀcotᶘᶣᶦĀryᶝᶡ;쀀𝒹;䑕l;槶rok;䄑Ādrᶰᶴot;拱iĀ;fᶺ᠖斿Āah᷀᷃ròЩaòྦangle;榦Āci᷒ᷕy;䑟grarr;柿ऀDacdefglmnopqrstuxḁḉḙḸոḼṉṡṾấắẽỡἪἷὄ὎὚ĀDoḆᴴoôᲉĀcsḎḔute耻é䃩ter;橮ȀaioyḢḧḱḶron;䄛rĀ;cḭḮ扖耻ê䃪lon;払;䑍ot;䄗ĀDrṁṅot;扒;쀀𝔢ƀ;rsṐṑṗ檚ave耻è䃨Ā;dṜṝ檖ot;檘Ȁ;ilsṪṫṲṴ檙nters;揧;愓Ā;dṹṺ檕ot;檗ƀapsẅẉẗcr;䄓tyƀ;svẒẓẕ戅et»ẓpĀ1;ẝẤĳạả;怄;怅怃ĀgsẪẬ;䅋p;怂ĀgpẴẸon;䄙f;쀀𝕖ƀalsỄỎỒrĀ;sỊị拕l;槣us;橱iƀ;lvỚớở䎵on»ớ;䏵ȀcsuvỪỳἋἣĀioữḱrc»Ḯɩỹ\0\0ỻíՈantĀglἂἆtr»ṝess»Ṻƀaeiἒ἖Ἒls;䀽st;扟vĀ;DȵἠD;橸parsl;槥ĀDaἯἳot;打rr;楱ƀcdiἾὁỸr;愯oô͒ĀahὉὋ;䎷耻ð䃰Āmrὓὗl耻ë䃫o;悬ƀcipὡὤὧl;䀡sôծĀeoὬὴctatioîՙnentialåչৡᾒ\0ᾞ\0ᾡᾧ\0\0ῆῌ\0ΐ\0ῦῪ \0 ⁚llingdotseñṄy;䑄male;晀ƀilrᾭᾳ῁lig;耀ﬃɩᾹ\0\0᾽g;耀ﬀig;耀ﬄ;쀀𝔣lig;耀ﬁlig;쀀fjƀaltῙ῜ῡt;晭ig;耀ﬂns;斱of;䆒ǰ΅\0ῳf;쀀𝕗ĀakֿῷĀ;vῼ´拔;櫙artint;樍Āao‌⁕Ācs‑⁒α‚‰‸⁅⁈\0⁐β•‥‧‪‬\0‮耻½䂽;慓耻¼䂼;慕;慙;慛Ƴ‴\0‶;慔;慖ʴ‾⁁\0\0⁃耻¾䂾;慗;慜5;慘ƶ⁌\0⁎;慚;慝8;慞l;恄wn;挢cr;쀀𝒻ࢀEabcdefgijlnorstv₂₉₟₥₰₴⃰⃵⃺⃿℃ℒℸ̗ℾ⅒↞Ā;lٍ₇;檌ƀcmpₐₕ₝ute;䇵maĀ;dₜ᳚䎳;檆reve;䄟Āiy₪₮rc;䄝;䐳ot;䄡Ȁ;lqsؾق₽⃉ƀ;qsؾٌ⃄lanô٥Ȁ;cdl٥⃒⃥⃕c;檩otĀ;o⃜⃝檀Ā;l⃢⃣檂;檄Ā;e⃪⃭쀀⋛︀s;檔r;쀀𝔤Ā;gٳ؛mel;愷cy;䑓Ȁ;Eajٚℌℎℐ;檒;檥;檤ȀEaesℛℝ℩ℴ;扩pĀ;p℣ℤ檊rox»ℤĀ;q℮ℯ檈Ā;q℮ℛim;拧pf;쀀𝕘Āci⅃ⅆr;愊mƀ;el٫ⅎ⅐;檎;檐茀>;cdlqr׮ⅠⅪⅮⅳⅹĀciⅥⅧ;檧r;橺ot;拗Par;榕uest;橼ʀadelsↄⅪ←ٖ↛ǰ↉\0↎proø₞r;楸qĀlqؿ↖lesó₈ií٫Āen↣↭rtneqq;쀀≩︀Å↪ԀAabcefkosy⇄⇇⇱⇵⇺∘∝∯≨≽ròΠȀilmr⇐⇔⇗⇛rsðᒄf»․ilôکĀdr⇠⇤cy;䑊ƀ;cwࣴ⇫⇯ir;楈;憭ar;意irc;䄥ƀalr∁∎∓rtsĀ;u∉∊晥it»∊lip;怦con;抹r;쀀𝔥sĀew∣∩arow;椥arow;椦ʀamopr∺∾≃≞≣rr;懿tht;戻kĀlr≉≓eftarrow;憩ightarrow;憪f;쀀𝕙bar;怕ƀclt≯≴≸r;쀀𝒽asè⇴rok;䄧Ābp⊂⊇ull;恃hen»ᱛૡ⊣\0⊪\0⊸⋅⋎\0⋕⋳\0\0⋸⌢⍧⍢⍿\0⎆⎪⎴cute耻í䃭ƀ;iyݱ⊰⊵rc耻î䃮;䐸Ācx⊼⊿y;䐵cl耻¡䂡ĀfrΟ⋉;쀀𝔦rave耻ì䃬Ȁ;inoܾ⋝⋩⋮Āin⋢⋦nt;樌t;戭fin;槜ta;愩lig;䄳ƀaop⋾⌚⌝ƀcgt⌅⌈⌗r;䄫ƀelpܟ⌏⌓inåގarôܠh;䄱f;抷ed;䆵ʀ;cfotӴ⌬⌱⌽⍁are;愅inĀ;t⌸⌹戞ie;槝doô⌙ʀ;celpݗ⍌⍐⍛⍡al;抺Āgr⍕⍙eróᕣã⍍arhk;樗rod;樼Ȁcgpt⍯⍲⍶⍻y;䑑on;䄯f;쀀𝕚a;䎹uest耻¿䂿Āci⎊⎏r;쀀𝒾nʀ;EdsvӴ⎛⎝⎡ӳ;拹ot;拵Ā;v⎦⎧拴;拳Ā;iݷ⎮lde;䄩ǫ⎸\0⎼cy;䑖l耻ï䃯̀cfmosu⏌⏗⏜⏡⏧⏵Āiy⏑⏕rc;䄵;䐹r;쀀𝔧ath;䈷pf;쀀𝕛ǣ⏬\0⏱r;쀀𝒿rcy;䑘kcy;䑔Ѐacfghjos␋␖␢␧␭␱␵␻ppaĀ;v␓␔䎺;䏰Āey␛␠dil;䄷;䐺r;쀀𝔨reen;䄸cy;䑅cy;䑜pf;쀀𝕜cr;쀀𝓀஀ABEHabcdefghjlmnoprstuv⑰⒁⒆⒍⒑┎┽╚▀♎♞♥♹♽⚚⚲⛘❝❨➋⟀⠁⠒ƀart⑷⑺⑼rò৆òΕail;椛arr;椎Ā;gঔ⒋;檋ar;楢ॣ⒥\0⒪\0⒱\0\0\0\0\0⒵Ⓔ\0ⓆⓈⓍ\0⓹ute;䄺mptyv;榴raîࡌbda;䎻gƀ;dlࢎⓁⓃ;榑åࢎ;檅uo耻«䂫rЀ;bfhlpst࢙ⓞⓦⓩ⓫⓮⓱⓵Ā;f࢝ⓣs;椟s;椝ë≒p;憫l;椹im;楳l;憢ƀ;ae⓿─┄檫il;椙Ā;s┉┊檭;쀀⪭︀ƀabr┕┙┝rr;椌rk;杲Āak┢┬cĀek┨┪;䁻;䁛Āes┱┳;榋lĀdu┹┻;榏;榍Ȁaeuy╆╋╖╘ron;䄾Ādi═╔il;䄼ìࢰâ┩;䐻Ȁcqrs╣╦╭╽a;椶uoĀ;rนᝆĀdu╲╷har;楧shar;楋h;憲ʀ;fgqs▋▌উ◳◿扤tʀahlrt▘▤▷◂◨rrowĀ;t࢙□aé⓶arpoonĀdu▯▴own»њp»०eftarrows;懇ightƀahs◍◖◞rrowĀ;sࣴࢧarpoonó྘quigarro÷⇰hreetimes;拋ƀ;qs▋ও◺lanôবʀ;cdgsব☊☍☝☨c;檨otĀ;o☔☕橿Ā;r☚☛檁;檃Ā;e☢☥쀀⋚︀s;檓ʀadegs☳☹☽♉♋pproøⓆot;拖qĀgq♃♅ôউgtò⒌ôছiíলƀilr♕࣡♚sht;楼;쀀𝔩Ā;Eজ♣;檑š♩♶rĀdu▲♮Ā;l॥♳;楪lk;斄cy;䑙ʀ;achtੈ⚈⚋⚑⚖rò◁orneòᴈard;楫ri;旺Āio⚟⚤dot;䅀ustĀ;a⚬⚭掰che»⚭ȀEaes⚻⚽⛉⛔;扨pĀ;p⛃⛄檉rox»⛄Ā;q⛎⛏檇Ā;q⛎⚻im;拦Ѐabnoptwz⛩⛴⛷✚✯❁❇❐Ānr⛮⛱g;柬r;懽rëࣁgƀlmr⛿✍✔eftĀar০✇ightá৲apsto;柼ightá৽parrowĀlr✥✩efô⓭ight;憬ƀafl✶✹✽r;榅;쀀𝕝us;樭imes;樴š❋❏st;戗áፎƀ;ef❗❘᠀旊nge»❘arĀ;l❤❥䀨t;榓ʀachmt❳❶❼➅➇ròࢨorneòᶌarĀ;d྘➃;業;怎ri;抿̀achiqt➘➝ੀ➢➮➻quo;怹r;쀀𝓁mƀ;egল➪➬;檍;檏Ābu┪➳oĀ;rฟ➹;怚rok;䅂萀<;cdhilqrࠫ⟒☹⟜⟠⟥⟪⟰Āci⟗⟙;檦r;橹reå◲mes;拉arr;楶uest;橻ĀPi⟵⟹ar;榖ƀ;ef⠀भ᠛旃rĀdu⠇⠍shar;楊har;楦Āen⠗⠡rtneqq;쀀≨︀Å⠞܀Dacdefhilnopsu⡀⡅⢂⢎⢓⢠⢥⢨⣚⣢⣤ઃ⣳⤂Dot;戺Ȁclpr⡎⡒⡣⡽r耻¯䂯Āet⡗⡙;時Ā;e⡞⡟朠se»⡟Ā;sျ⡨toȀ;dluျ⡳⡷⡻owîҌefôएðᏑker;斮Āoy⢇⢌mma;権;䐼ash;怔asuredangle»ᘦr;쀀𝔪o;愧ƀcdn⢯⢴⣉ro耻µ䂵Ȁ;acdᑤ⢽⣀⣄sôᚧir;櫰ot肻·Ƶusƀ;bd⣒ᤃ⣓戒Ā;uᴼ⣘;横ţ⣞⣡p;櫛ò−ðઁĀdp⣩⣮els;抧f;쀀𝕞Āct⣸⣽r;쀀𝓂pos»ᖝƀ;lm⤉⤊⤍䎼timap;抸ఀGLRVabcdefghijlmoprstuvw⥂⥓⥾⦉⦘⧚⧩⨕⨚⩘⩝⪃⪕⪤⪨⬄⬇⭄⭿⮮ⰴⱧⱼ⳩Āgt⥇⥋;쀀⋙̸Ā;v⥐௏쀀≫⃒ƀelt⥚⥲⥶ftĀar⥡⥧rrow;懍ightarrow;懎;쀀⋘̸Ā;v⥻ే쀀≪⃒ightarrow;懏ĀDd⦎⦓ash;抯ash;抮ʀbcnpt⦣⦧⦬⦱⧌la»˞ute;䅄g;쀀∠⃒ʀ;Eiop඄⦼⧀⧅⧈;쀀⩰̸d;쀀≋̸s;䅉roø඄urĀ;a⧓⧔普lĀ;s⧓ସǳ⧟\0⧣p肻 ଷmpĀ;e௹ఀʀaeouy⧴⧾⨃⨐⨓ǰ⧹\0⧻;橃on;䅈dil;䅆ngĀ;dൾ⨊ot;쀀⩭̸p;橂;䐽ash;怓΀;Aadqsxஒ⨩⨭⨻⩁⩅⩐rr;懗rĀhr⨳⨶k;椤Ā;oᏲᏰot;쀀≐̸uiöୣĀei⩊⩎ar;椨í஘istĀ;s஠டr;쀀𝔫ȀEest௅⩦⩹⩼ƀ;qs஼⩭௡ƀ;qs஼௅⩴lanô௢ií௪Ā;rஶ⪁»ஷƀAap⪊⪍⪑rò⥱rr;憮ar;櫲ƀ;svྍ⪜ྌĀ;d⪡⪢拼;拺cy;䑚΀AEadest⪷⪺⪾⫂⫅⫶⫹rò⥦;쀀≦̸rr;憚r;急Ȁ;fqs఻⫎⫣⫯tĀar⫔⫙rro÷⫁ightarro÷⪐ƀ;qs఻⪺⫪lanôౕĀ;sౕ⫴»శiíౝĀ;rవ⫾iĀ;eచథiäඐĀpt⬌⬑f;쀀𝕟膀¬;in⬙⬚⬶䂬nȀ;Edvஉ⬤⬨⬮;쀀⋹̸ot;쀀⋵̸ǡஉ⬳⬵;拷;拶iĀ;vಸ⬼ǡಸ⭁⭃;拾;拽ƀaor⭋⭣⭩rȀ;ast୻⭕⭚⭟lleì୻l;쀀⫽⃥;쀀∂̸lint;樔ƀ;ceಒ⭰⭳uåಥĀ;cಘ⭸Ā;eಒ⭽ñಘȀAait⮈⮋⮝⮧rò⦈rrƀ;cw⮔⮕⮙憛;쀀⤳̸;쀀↝̸ghtarrow»⮕riĀ;eೋೖ΀chimpqu⮽⯍⯙⬄୸⯤⯯Ȁ;cerല⯆ഷ⯉uå൅;쀀𝓃ortɭ⬅\0\0⯖ará⭖mĀ;e൮⯟Ā;q൴൳suĀbp⯫⯭å೸åഋƀbcp⯶ⰑⰙȀ;Ees⯿ⰀഢⰄ抄;쀀⫅̸etĀ;eഛⰋqĀ;qണⰀcĀ;eലⰗñസȀ;EesⰢⰣൟⰧ抅;쀀⫆̸etĀ;e൘ⰮqĀ;qൠⰣȀgilrⰽⰿⱅⱇìௗlde耻ñ䃱çృiangleĀlrⱒⱜeftĀ;eచⱚñదightĀ;eೋⱥñ೗Ā;mⱬⱭ䎽ƀ;esⱴⱵⱹ䀣ro;愖p;怇ҀDHadgilrsⲏⲔⲙⲞⲣⲰⲶⳓⳣash;抭arr;椄p;쀀≍⃒ash;抬ĀetⲨⲬ;쀀≥⃒;쀀>⃒nfin;槞ƀAetⲽⳁⳅrr;椂;쀀≤⃒Ā;rⳊⳍ쀀<⃒ie;쀀⊴⃒ĀAtⳘⳜrr;椃rie;쀀⊵⃒im;쀀∼⃒ƀAan⳰⳴ⴂrr;懖rĀhr⳺⳽k;椣Ā;oᏧᏥear;椧ቓ᪕\0\0\0\0\0\0\0\0\0\0\0\0\0ⴭ\0ⴸⵈⵠⵥ⵲ⶄᬇ\0\0ⶍⶫ\0ⷈⷎ\0ⷜ⸙⸫⸾⹃Ācsⴱ᪗ute耻ó䃳ĀiyⴼⵅrĀ;c᪞ⵂ耻ô䃴;䐾ʀabios᪠ⵒⵗǈⵚlac;䅑v;樸old;榼lig;䅓Ācr⵩⵭ir;榿;쀀𝔬ͯ⵹\0\0⵼\0ⶂn;䋛ave耻ò䃲;槁Ābmⶈ෴ar;榵Ȁacitⶕ⶘ⶥⶨrò᪀Āir⶝ⶠr;榾oss;榻nå๒;槀ƀaeiⶱⶵⶹcr;䅍ga;䏉ƀcdnⷀⷅǍron;䎿;榶pf;쀀𝕠ƀaelⷔ⷗ǒr;榷rp;榹΀;adiosvⷪⷫⷮ⸈⸍⸐⸖戨rò᪆Ȁ;efmⷷⷸ⸂⸅橝rĀ;oⷾⷿ愴f»ⷿ耻ª䂪耻º䂺gof;抶r;橖lope;橗;橛ƀclo⸟⸡⸧ò⸁ash耻ø䃸l;折iŬⸯ⸴de耻õ䃵esĀ;aǛ⸺s;樶ml耻ö䃶bar;挽ૡ⹞\0⹽\0⺀⺝\0⺢⺹\0\0⻋ຜ\0⼓\0\0⼫⾼\0⿈rȀ;astЃ⹧⹲຅脀¶;l⹭⹮䂶leìЃɩ⹸\0\0⹻m;櫳;櫽y;䐿rʀcimpt⺋⺏⺓ᡥ⺗nt;䀥od;䀮il;怰enk;怱r;쀀𝔭ƀimo⺨⺰⺴Ā;v⺭⺮䏆;䏕maô੶ne;明ƀ;tv⺿⻀⻈䏀chfork»´;䏖Āau⻏⻟nĀck⻕⻝kĀ;h⇴⻛;愎ö⇴sҀ;abcdemst⻳⻴ᤈ⻹⻽⼄⼆⼊⼎䀫cir;樣ir;樢Āouᵀ⼂;樥;橲n肻±ຝim;樦wo;樧ƀipu⼙⼠⼥ntint;樕f;쀀𝕡nd耻£䂣Ԁ;Eaceinosu່⼿⽁⽄⽇⾁⾉⾒⽾⾶;檳p;檷uå໙Ā;c໎⽌̀;acens່⽙⽟⽦⽨⽾pproø⽃urlyeñ໙ñ໎ƀaes⽯⽶⽺pprox;檹qq;檵im;拨iíໟmeĀ;s⾈ຮ怲ƀEas⽸⾐⽺ð⽵ƀdfp໬⾙⾯ƀals⾠⾥⾪lar;挮ine;挒urf;挓Ā;t໻⾴ï໻rel;抰Āci⿀⿅r;쀀𝓅;䏈ncsp;怈̀fiopsu⿚⋢⿟⿥⿫⿱r;쀀𝔮pf;쀀𝕢rime;恗cr;쀀𝓆ƀaeo⿸〉〓tĀei⿾々rnionóڰnt;樖stĀ;e【】䀿ñἙô༔઀ABHabcdefhilmnoprstux぀けさすムㄎㄫㅇㅢㅲㆎ㈆㈕㈤㈩㉘㉮㉲㊐㊰㊷ƀartぇおがròႳòϝail;検aròᱥar;楤΀cdenqrtとふへみわゔヌĀeuねぱ;쀀∽̱te;䅕iãᅮmptyv;榳gȀ;del࿑らるろ;榒;榥å࿑uo耻»䂻rր;abcfhlpstw࿜ガクシスゼゾダッデナp;極Ā;f࿠ゴs;椠;椳s;椞ë≝ð✮l;楅im;楴l;憣;憝Āaiパフil;椚oĀ;nホボ戶aló༞ƀabrョリヮrò៥rk;杳ĀakンヽcĀekヹ・;䁽;䁝Āes㄂㄄;榌lĀduㄊㄌ;榎;榐Ȁaeuyㄗㄜㄧㄩron;䅙Ādiㄡㄥil;䅗ì࿲âヺ;䑀Ȁclqsㄴㄷㄽㅄa;椷dhar;楩uoĀ;rȎȍh;憳ƀacgㅎㅟངlȀ;ipsླྀㅘㅛႜnåႻarôྩt;断ƀilrㅩဣㅮsht;楽;쀀𝔯ĀaoㅷㆆrĀduㅽㅿ»ѻĀ;l႑ㆄ;楬Ā;vㆋㆌ䏁;䏱ƀgns㆕ㇹㇼht̀ahlrstㆤㆰ㇂㇘㇤㇮rrowĀ;t࿜ㆭaéトarpoonĀduㆻㆿowîㅾp»႒eftĀah㇊㇐rrowó࿪arpoonóՑightarrows;應quigarro÷ニhreetimes;拌g;䋚ingdotseñἲƀahm㈍㈐㈓rò࿪aòՑ;怏oustĀ;a㈞㈟掱che»㈟mid;櫮Ȁabpt㈲㈽㉀㉒Ānr㈷㈺g;柭r;懾rëဃƀafl㉇㉊㉎r;榆;쀀𝕣us;樮imes;樵Āap㉝㉧rĀ;g㉣㉤䀩t;榔olint;樒arò㇣Ȁachq㉻㊀Ⴜ㊅quo;怺r;쀀𝓇Ābu・㊊oĀ;rȔȓƀhir㊗㊛㊠reåㇸmes;拊iȀ;efl㊪ၙᠡ㊫方tri;槎luhar;楨;愞ൡ㋕㋛㋟㌬㌸㍱\0㍺㎤\0\0㏬㏰\0㐨㑈㑚㒭㒱㓊㓱\0㘖\0\0㘳cute;䅛quï➺Ԁ;Eaceinpsyᇭ㋳㋵㋿㌂㌋㌏㌟㌦㌩;檴ǰ㋺\0㋼;檸on;䅡uåᇾĀ;dᇳ㌇il;䅟rc;䅝ƀEas㌖㌘㌛;檶p;檺im;择olint;樓iíሄ;䑁otƀ;be㌴ᵇ㌵担;橦΀Aacmstx㍆㍊㍗㍛㍞㍣㍭rr;懘rĀhr㍐㍒ë∨Ā;oਸ਼਴t耻§䂧i;䀻war;椩mĀin㍩ðnuóñt;朶rĀ;o㍶⁕쀀𝔰Ȁacoy㎂㎆㎑㎠rp;景Āhy㎋㎏cy;䑉;䑈rtɭ㎙\0\0㎜iäᑤaraì⹯耻­䂭Āgm㎨㎴maƀ;fv㎱㎲㎲䏃;䏂Ѐ;deglnprካ㏅㏉㏎㏖㏞㏡㏦ot;橪Ā;q኱ኰĀ;E㏓㏔檞;檠Ā;E㏛㏜檝;檟e;扆lus;樤arr;楲aròᄽȀaeit㏸㐈㐏㐗Āls㏽㐄lsetmé㍪hp;樳parsl;槤Ādlᑣ㐔e;挣Ā;e㐜㐝檪Ā;s㐢㐣檬;쀀⪬︀ƀflp㐮㐳㑂tcy;䑌Ā;b㐸㐹䀯Ā;a㐾㐿槄r;挿f;쀀𝕤aĀdr㑍ЂesĀ;u㑔㑕晠it»㑕ƀcsu㑠㑹㒟Āau㑥㑯pĀ;sᆈ㑫;쀀⊓︀pĀ;sᆴ㑵;쀀⊔︀uĀbp㑿㒏ƀ;esᆗᆜ㒆etĀ;eᆗ㒍ñᆝƀ;esᆨᆭ㒖etĀ;eᆨ㒝ñᆮƀ;afᅻ㒦ְrť㒫ֱ»ᅼaròᅈȀcemt㒹㒾㓂㓅r;쀀𝓈tmîñiì㐕aræᆾĀar㓎㓕rĀ;f㓔ឿ昆Āan㓚㓭ightĀep㓣㓪psiloîỠhé⺯s»⡒ʀbcmnp㓻㕞ሉ㖋㖎Ҁ;Edemnprs㔎㔏㔑㔕㔞㔣㔬㔱㔶抂;櫅ot;檽Ā;dᇚ㔚ot;櫃ult;櫁ĀEe㔨㔪;櫋;把lus;檿arr;楹ƀeiu㔽㕒㕕tƀ;en㔎㕅㕋qĀ;qᇚ㔏eqĀ;q㔫㔨m;櫇Ābp㕚㕜;櫕;櫓c̀;acensᇭ㕬㕲㕹㕻㌦pproø㋺urlyeñᇾñᇳƀaes㖂㖈㌛pproø㌚qñ㌗g;晪ڀ123;Edehlmnps㖩㖬㖯ሜ㖲㖴㗀㗉㗕㗚㗟㗨㗭耻¹䂹耻²䂲耻³䂳;櫆Āos㖹㖼t;檾ub;櫘Ā;dሢ㗅ot;櫄sĀou㗏㗒l;柉b;櫗arr;楻ult;櫂ĀEe㗤㗦;櫌;抋lus;櫀ƀeiu㗴㘉㘌tƀ;enሜ㗼㘂qĀ;qሢ㖲eqĀ;q㗧㗤m;櫈Ābp㘑㘓;櫔;櫖ƀAan㘜㘠㘭rr;懙rĀhr㘦㘨ë∮Ā;oਫ਩war;椪lig耻ß䃟௡㙑㙝㙠ዎ㙳㙹\0㙾㛂\0\0\0\0\0㛛㜃\0㜉㝬\0\0\0㞇ɲ㙖\0\0㙛get;挖;䏄rë๟ƀaey㙦㙫㙰ron;䅥dil;䅣;䑂lrec;挕r;쀀𝔱Ȁeiko㚆㚝㚵㚼ǲ㚋\0㚑eĀ4fኄኁaƀ;sv㚘㚙㚛䎸ym;䏑Ācn㚢㚲kĀas㚨㚮pproø዁im»ኬsðኞĀas㚺㚮ð዁rn耻þ䃾Ǭ̟㛆⋧es膀×;bd㛏㛐㛘䃗Ā;aᤏ㛕r;樱;樰ƀeps㛡㛣㜀á⩍Ȁ;bcf҆㛬㛰㛴ot;挶ir;櫱Ā;o㛹㛼쀀𝕥rk;櫚á㍢rime;怴ƀaip㜏㜒㝤dåቈ΀adempst㜡㝍㝀㝑㝗㝜㝟ngleʀ;dlqr㜰㜱㜶㝀㝂斵own»ᶻeftĀ;e⠀㜾ñम;扜ightĀ;e㊪㝋ñၚot;旬inus;樺lus;樹b;槍ime;樻ezium;揢ƀcht㝲㝽㞁Āry㝷㝻;쀀𝓉;䑆cy;䑛rok;䅧Āio㞋㞎xô᝷headĀlr㞗㞠eftarro÷ࡏightarrow»ཝऀAHabcdfghlmoprstuw㟐㟓㟗㟤㟰㟼㠎㠜㠣㠴㡑㡝㡫㢩㣌㣒㣪㣶ròϭar;楣Ācr㟜㟢ute耻ú䃺òᅐrǣ㟪\0㟭y;䑞ve;䅭Āiy㟵㟺rc耻û䃻;䑃ƀabh㠃㠆㠋ròᎭlac;䅱aòᏃĀir㠓㠘sht;楾;쀀𝔲rave耻ù䃹š㠧㠱rĀlr㠬㠮»ॗ»ႃlk;斀Āct㠹㡍ɯ㠿\0\0㡊rnĀ;e㡅㡆挜r»㡆op;挏ri;旸Āal㡖㡚cr;䅫肻¨͉Āgp㡢㡦on;䅳f;쀀𝕦̀adhlsuᅋ㡸㡽፲㢑㢠ownáᎳarpoonĀlr㢈㢌efô㠭ighô㠯iƀ;hl㢙㢚㢜䏅»ᏺon»㢚parrows;懈ƀcit㢰㣄㣈ɯ㢶\0\0㣁rnĀ;e㢼㢽挝r»㢽op;挎ng;䅯ri;旹cr;쀀𝓊ƀdir㣙㣝㣢ot;拰lde;䅩iĀ;f㜰㣨»᠓Āam㣯㣲rò㢨l耻ü䃼angle;榧ހABDacdeflnoprsz㤜㤟㤩㤭㦵㦸㦽㧟㧤㧨㧳㧹㧽㨁㨠ròϷarĀ;v㤦㤧櫨;櫩asèϡĀnr㤲㤷grt;榜΀eknprst㓣㥆㥋㥒㥝㥤㦖appá␕othinçẖƀhir㓫⻈㥙opô⾵Ā;hᎷ㥢ïㆍĀiu㥩㥭gmá㎳Ābp㥲㦄setneqĀ;q㥽㦀쀀⊊︀;쀀⫋︀setneqĀ;q㦏㦒쀀⊋︀;쀀⫌︀Āhr㦛㦟etá㚜iangleĀlr㦪㦯eft»थight»ၑy;䐲ash»ံƀelr㧄㧒㧗ƀ;beⷪ㧋㧏ar;抻q;扚lip;拮Ābt㧜ᑨaòᑩr;쀀𝔳tré㦮suĀbp㧯㧱»ജ»൙pf;쀀𝕧roð໻tré㦴Ācu㨆㨋r;쀀𝓋Ābp㨐㨘nĀEe㦀㨖»㥾nĀEe㦒㨞»㦐igzag;榚΀cefoprs㨶㨻㩖㩛㩔㩡㩪irc;䅵Ādi㩀㩑Ābg㩅㩉ar;機eĀ;qᗺ㩏;扙erp;愘r;쀀𝔴pf;쀀𝕨Ā;eᑹ㩦atèᑹcr;쀀𝓌ૣណ㪇\0㪋\0㪐㪛\0\0㪝㪨㪫㪯\0\0㫃㫎\0㫘ៜ៟tré៑r;쀀𝔵ĀAa㪔㪗ròσrò৶;䎾ĀAa㪡㪤ròθrò৫að✓is;拻ƀdptឤ㪵㪾Āfl㪺ឩ;쀀𝕩imåឲĀAa㫇㫊ròώròਁĀcq㫒ីr;쀀𝓍Āpt៖㫜ré។Ѐacefiosu㫰㫽㬈㬌㬑㬕㬛㬡cĀuy㫶㫻te耻ý䃽;䑏Āiy㬂㬆rc;䅷;䑋n耻¥䂥r;쀀𝔶cy;䑗pf;쀀𝕪cr;쀀𝓎Ācm㬦㬩y;䑎l耻ÿ䃿Ԁacdefhiosw㭂㭈㭔㭘㭤㭩㭭㭴㭺㮀cute;䅺Āay㭍㭒ron;䅾;䐷ot;䅼Āet㭝㭡træᕟa;䎶r;쀀𝔷cy;䐶grarr;懝pf;쀀𝕫cr;쀀𝓏Ājn㮅㮇;怍j;怌'
        .split('')
        .map((a) => a.charCodeAt(0))
    );
    const Ds = new Uint16Array(
      'Ȁaglq\tɭ\0\0p;䀦os;䀧t;䀾t;䀼uot;䀢'
        .split('')
        .map((a) => a.charCodeAt(0))
    );
    var Ns;
    const Ls = new Map([
      [0, 65533],
      [128, 8364],
      [130, 8218],
      [131, 402],
      [132, 8222],
      [133, 8230],
      [134, 8224],
      [135, 8225],
      [136, 710],
      [137, 8240],
      [138, 352],
      [139, 8249],
      [140, 338],
      [142, 381],
      [145, 8216],
      [146, 8217],
      [147, 8220],
      [148, 8221],
      [149, 8226],
      [150, 8211],
      [151, 8212],
      [152, 732],
      [153, 8482],
      [154, 353],
      [155, 8250],
      [156, 339],
      [158, 382],
      [159, 376]
    ]);
    const Fs =
      (Ns = String.fromCodePoint) !== null && Ns !== void 0
        ? Ns
        : function (a) {
            let C = '';
            if (a > 65535) {
              a -= 65536;
              C += String.fromCharCode(((a >>> 10) & 1023) | 55296);
              a = 56320 | (a & 1023);
            }
            C += String.fromCharCode(a);
            return C;
          };
    function replaceCodePoint(a) {
      var C;
      if ((a >= 55296 && a <= 57343) || a > 1114111) {
        return 65533;
      }
      return (C = Ls.get(a)) !== null && C !== void 0 ? C : a;
    }
    function decodeCodePoint(a) {
      return Fs(replaceCodePoint(a));
    }
    var Ms;
    (function (a) {
      a[(a['NUM'] = 35)] = 'NUM';
      a[(a['SEMI'] = 59)] = 'SEMI';
      a[(a['EQUALS'] = 61)] = 'EQUALS';
      a[(a['ZERO'] = 48)] = 'ZERO';
      a[(a['NINE'] = 57)] = 'NINE';
      a[(a['LOWER_A'] = 97)] = 'LOWER_A';
      a[(a['LOWER_F'] = 102)] = 'LOWER_F';
      a[(a['LOWER_X'] = 120)] = 'LOWER_X';
      a[(a['LOWER_Z'] = 122)] = 'LOWER_Z';
      a[(a['UPPER_A'] = 65)] = 'UPPER_A';
      a[(a['UPPER_F'] = 70)] = 'UPPER_F';
      a[(a['UPPER_Z'] = 90)] = 'UPPER_Z';
    })(Ms || (Ms = {}));
    const Ps = 32;
    var Os;
    (function (a) {
      a[(a['VALUE_LENGTH'] = 49152)] = 'VALUE_LENGTH';
      a[(a['BRANCH_LENGTH'] = 16256)] = 'BRANCH_LENGTH';
      a[(a['JUMP_TABLE'] = 127)] = 'JUMP_TABLE';
    })(Os || (Os = {}));
    function isNumber(a) {
      return a >= Ms.ZERO && a <= Ms.NINE;
    }
    function isHexadecimalCharacter(a) {
      return (
        (a >= Ms.UPPER_A && a <= Ms.UPPER_F) ||
        (a >= Ms.LOWER_A && a <= Ms.LOWER_F)
      );
    }
    function isAsciiAlphaNumeric(a) {
      return (
        (a >= Ms.UPPER_A && a <= Ms.UPPER_Z) ||
        (a >= Ms.LOWER_A && a <= Ms.LOWER_Z) ||
        isNumber(a)
      );
    }
    function isEntityInAttributeInvalidEnd(a) {
      return a === Ms.EQUALS || isAsciiAlphaNumeric(a);
    }
    var xs;
    (function (a) {
      a[(a['EntityStart'] = 0)] = 'EntityStart';
      a[(a['NumericStart'] = 1)] = 'NumericStart';
      a[(a['NumericDecimal'] = 2)] = 'NumericDecimal';
      a[(a['NumericHex'] = 3)] = 'NumericHex';
      a[(a['NamedEntity'] = 4)] = 'NamedEntity';
    })(xs || (xs = {}));
    var Us;
    (function (a) {
      a[(a['Legacy'] = 0)] = 'Legacy';
      a[(a['Strict'] = 1)] = 'Strict';
      a[(a['Attribute'] = 2)] = 'Attribute';
    })(Us || (Us = {}));
    class EntityDecoder {
      constructor(a, C, q) {
        this.decodeTree = a;
        this.emitCodePoint = C;
        this.errors = q;
        this.state = xs.EntityStart;
        this.consumed = 1;
        this.result = 0;
        this.treeIndex = 0;
        this.excess = 1;
        this.decodeMode = Us.Strict;
      }
      startEntity(a) {
        this.decodeMode = a;
        this.state = xs.EntityStart;
        this.result = 0;
        this.treeIndex = 0;
        this.excess = 1;
        this.consumed = 1;
      }
      write(a, C) {
        switch (this.state) {
          case xs.EntityStart: {
            if (a.charCodeAt(C) === Ms.NUM) {
              this.state = xs.NumericStart;
              this.consumed += 1;
              return this.stateNumericStart(a, C + 1);
            }
            this.state = xs.NamedEntity;
            return this.stateNamedEntity(a, C);
          }
          case xs.NumericStart: {
            return this.stateNumericStart(a, C);
          }
          case xs.NumericDecimal: {
            return this.stateNumericDecimal(a, C);
          }
          case xs.NumericHex: {
            return this.stateNumericHex(a, C);
          }
          case xs.NamedEntity: {
            return this.stateNamedEntity(a, C);
          }
        }
      }
      stateNumericStart(a, C) {
        if (C >= a.length) {
          return -1;
        }
        if ((a.charCodeAt(C) | Ps) === Ms.LOWER_X) {
          this.state = xs.NumericHex;
          this.consumed += 1;
          return this.stateNumericHex(a, C + 1);
        }
        this.state = xs.NumericDecimal;
        return this.stateNumericDecimal(a, C);
      }
      addToNumericResult(a, C, q, re) {
        if (C !== q) {
          const ae = q - C;
          this.result =
            this.result * Math.pow(re, ae) + parseInt(a.substr(C, ae), re);
          this.consumed += ae;
        }
      }
      stateNumericHex(a, C) {
        const q = C;
        while (C < a.length) {
          const re = a.charCodeAt(C);
          if (isNumber(re) || isHexadecimalCharacter(re)) {
            C += 1;
          } else {
            this.addToNumericResult(a, q, C, 16);
            return this.emitNumericEntity(re, 3);
          }
        }
        this.addToNumericResult(a, q, C, 16);
        return -1;
      }
      stateNumericDecimal(a, C) {
        const q = C;
        while (C < a.length) {
          const re = a.charCodeAt(C);
          if (isNumber(re)) {
            C += 1;
          } else {
            this.addToNumericResult(a, q, C, 10);
            return this.emitNumericEntity(re, 2);
          }
        }
        this.addToNumericResult(a, q, C, 10);
        return -1;
      }
      emitNumericEntity(a, C) {
        var q;
        if (this.consumed <= C) {
          (q = this.errors) === null || q === void 0
            ? void 0
            : q.absenceOfDigitsInNumericCharacterReference(this.consumed);
          return 0;
        }
        if (a === Ms.SEMI) {
          this.consumed += 1;
        } else if (this.decodeMode === Us.Strict) {
          return 0;
        }
        this.emitCodePoint(replaceCodePoint(this.result), this.consumed);
        if (this.errors) {
          if (a !== Ms.SEMI) {
            this.errors.missingSemicolonAfterCharacterReference();
          }
          this.errors.validateNumericCharacterReference(this.result);
        }
        return this.consumed;
      }
      stateNamedEntity(a, C) {
        const { decodeTree: q } = this;
        let re = q[this.treeIndex];
        let ae = (re & Os.VALUE_LENGTH) >> 14;
        for (; C < a.length; C++, this.excess++) {
          const Ue = a.charCodeAt(C);
          this.treeIndex = determineBranch(
            q,
            re,
            this.treeIndex + Math.max(1, ae),
            Ue
          );
          if (this.treeIndex < 0) {
            return this.result === 0 ||
              (this.decodeMode === Us.Attribute &&
                (ae === 0 || isEntityInAttributeInvalidEnd(Ue)))
              ? 0
              : this.emitNotTerminatedNamedEntity();
          }
          re = q[this.treeIndex];
          ae = (re & Os.VALUE_LENGTH) >> 14;
          if (ae !== 0) {
            if (Ue === Ms.SEMI) {
              return this.emitNamedEntityData(
                this.treeIndex,
                ae,
                this.consumed + this.excess
              );
            }
            if (this.decodeMode !== Us.Strict) {
              this.result = this.treeIndex;
              this.consumed += this.excess;
              this.excess = 0;
            }
          }
        }
        return -1;
      }
      emitNotTerminatedNamedEntity() {
        var a;
        const { result: C, decodeTree: q } = this;
        const re = (q[C] & Os.VALUE_LENGTH) >> 14;
        this.emitNamedEntityData(C, re, this.consumed);
        (a = this.errors) === null || a === void 0
          ? void 0
          : a.missingSemicolonAfterCharacterReference();
        return this.consumed;
      }
      emitNamedEntityData(a, C, q) {
        const { decodeTree: re } = this;
        this.emitCodePoint(C === 1 ? re[a] & ~Os.VALUE_LENGTH : re[a + 1], q);
        if (C === 3) {
          this.emitCodePoint(re[a + 2], q);
        }
        return q;
      }
      end() {
        var a;
        switch (this.state) {
          case xs.NamedEntity: {
            return this.result !== 0 &&
              (this.decodeMode !== Us.Attribute ||
                this.result === this.treeIndex)
              ? this.emitNotTerminatedNamedEntity()
              : 0;
          }
          case xs.NumericDecimal: {
            return this.emitNumericEntity(0, 2);
          }
          case xs.NumericHex: {
            return this.emitNumericEntity(0, 3);
          }
          case xs.NumericStart: {
            (a = this.errors) === null || a === void 0
              ? void 0
              : a.absenceOfDigitsInNumericCharacterReference(this.consumed);
            return 0;
          }
          case xs.EntityStart: {
            return 0;
          }
        }
      }
    }
    function getDecoder(a) {
      let C = '';
      const q = new EntityDecoder(a, (a) => (C += Fs(a)));
      return function decodeWithTrie(a, re) {
        let ae = 0;
        let Ue = 0;
        while ((Ue = a.indexOf('&', Ue)) >= 0) {
          C += a.slice(ae, Ue);
          q.startEntity(re);
          const lt = q.write(a, Ue + 1);
          if (lt < 0) {
            ae = Ue + q.end();
            break;
          }
          ae = Ue + lt;
          Ue = lt === 0 ? ae + 1 : ae;
        }
        const lt = C + a.slice(ae);
        C = '';
        return lt;
      };
    }
    function determineBranch(a, C, q, re) {
      const ae = (C & Os.BRANCH_LENGTH) >> 7;
      const Ue = C & Os.JUMP_TABLE;
      if (ae === 0) {
        return Ue !== 0 && re === Ue ? q : -1;
      }
      if (Ue) {
        const C = re - Ue;
        return C < 0 || C >= ae ? -1 : a[q + C] - 1;
      }
      let lt = q;
      let Pt = lt + ae - 1;
      while (lt <= Pt) {
        const C = (lt + Pt) >>> 1;
        const q = a[C];
        if (q < re) {
          lt = C + 1;
        } else if (q > re) {
          Pt = C - 1;
        } else {
          return a[C + ae];
        }
      }
      return -1;
    }
    const Gs = getDecoder(Rs);
    const Hs = getDecoder(Ds);
    function decode_decodeHTML(a, C = Us.Legacy) {
      return Gs(a, C);
    }
    function decodeHTMLAttribute(a) {
      return Gs(a, Us.Attribute);
    }
    function decodeHTMLStrict(a) {
      return Gs(a, Us.Strict);
    }
    function decode_decodeXML(a) {
      return Hs(a, Us.Strict);
    }
    var qs;
    (function (a) {
      a[(a['Tab'] = 9)] = 'Tab';
      a[(a['NewLine'] = 10)] = 'NewLine';
      a[(a['FormFeed'] = 12)] = 'FormFeed';
      a[(a['CarriageReturn'] = 13)] = 'CarriageReturn';
      a[(a['Space'] = 32)] = 'Space';
      a[(a['ExclamationMark'] = 33)] = 'ExclamationMark';
      a[(a['Number'] = 35)] = 'Number';
      a[(a['Amp'] = 38)] = 'Amp';
      a[(a['SingleQuote'] = 39)] = 'SingleQuote';
      a[(a['DoubleQuote'] = 34)] = 'DoubleQuote';
      a[(a['Dash'] = 45)] = 'Dash';
      a[(a['Slash'] = 47)] = 'Slash';
      a[(a['Zero'] = 48)] = 'Zero';
      a[(a['Nine'] = 57)] = 'Nine';
      a[(a['Semi'] = 59)] = 'Semi';
      a[(a['Lt'] = 60)] = 'Lt';
      a[(a['Eq'] = 61)] = 'Eq';
      a[(a['Gt'] = 62)] = 'Gt';
      a[(a['Questionmark'] = 63)] = 'Questionmark';
      a[(a['UpperA'] = 65)] = 'UpperA';
      a[(a['LowerA'] = 97)] = 'LowerA';
      a[(a['UpperF'] = 70)] = 'UpperF';
      a[(a['LowerF'] = 102)] = 'LowerF';
      a[(a['UpperZ'] = 90)] = 'UpperZ';
      a[(a['LowerZ'] = 122)] = 'LowerZ';
      a[(a['LowerX'] = 120)] = 'LowerX';
      a[(a['OpeningSquareBracket'] = 91)] = 'OpeningSquareBracket';
    })(qs || (qs = {}));
    var Vs;
    (function (a) {
      a[(a['Text'] = 1)] = 'Text';
      a[(a['BeforeTagName'] = 2)] = 'BeforeTagName';
      a[(a['InTagName'] = 3)] = 'InTagName';
      a[(a['InSelfClosingTag'] = 4)] = 'InSelfClosingTag';
      a[(a['BeforeClosingTagName'] = 5)] = 'BeforeClosingTagName';
      a[(a['InClosingTagName'] = 6)] = 'InClosingTagName';
      a[(a['AfterClosingTagName'] = 7)] = 'AfterClosingTagName';
      a[(a['BeforeAttributeName'] = 8)] = 'BeforeAttributeName';
      a[(a['InAttributeName'] = 9)] = 'InAttributeName';
      a[(a['AfterAttributeName'] = 10)] = 'AfterAttributeName';
      a[(a['BeforeAttributeValue'] = 11)] = 'BeforeAttributeValue';
      a[(a['InAttributeValueDq'] = 12)] = 'InAttributeValueDq';
      a[(a['InAttributeValueSq'] = 13)] = 'InAttributeValueSq';
      a[(a['InAttributeValueNq'] = 14)] = 'InAttributeValueNq';
      a[(a['BeforeDeclaration'] = 15)] = 'BeforeDeclaration';
      a[(a['InDeclaration'] = 16)] = 'InDeclaration';
      a[(a['InProcessingInstruction'] = 17)] = 'InProcessingInstruction';
      a[(a['BeforeComment'] = 18)] = 'BeforeComment';
      a[(a['CDATASequence'] = 19)] = 'CDATASequence';
      a[(a['InSpecialComment'] = 20)] = 'InSpecialComment';
      a[(a['InCommentLike'] = 21)] = 'InCommentLike';
      a[(a['BeforeSpecialS'] = 22)] = 'BeforeSpecialS';
      a[(a['BeforeSpecialT'] = 23)] = 'BeforeSpecialT';
      a[(a['SpecialStartSequence'] = 24)] = 'SpecialStartSequence';
      a[(a['InSpecialTag'] = 25)] = 'InSpecialTag';
      a[(a['InEntity'] = 26)] = 'InEntity';
    })(Vs || (Vs = {}));
    function isWhitespace(a) {
      return (
        a === qs.Space ||
        a === qs.NewLine ||
        a === qs.Tab ||
        a === qs.FormFeed ||
        a === qs.CarriageReturn
      );
    }
    function isEndOfTagSection(a) {
      return a === qs.Slash || a === qs.Gt || isWhitespace(a);
    }
    function isASCIIAlpha(a) {
      return (
        (a >= qs.LowerA && a <= qs.LowerZ) || (a >= qs.UpperA && a <= qs.UpperZ)
      );
    }
    var Ws;
    (function (a) {
      a[(a['NoValue'] = 0)] = 'NoValue';
      a[(a['Unquoted'] = 1)] = 'Unquoted';
      a[(a['Single'] = 2)] = 'Single';
      a[(a['Double'] = 3)] = 'Double';
    })(Ws || (Ws = {}));
    const Ys = {
      Cdata: new Uint8Array([67, 68, 65, 84, 65, 91]),
      CdataEnd: new Uint8Array([93, 93, 62]),
      CommentEnd: new Uint8Array([45, 45, 62]),
      ScriptEnd: new Uint8Array([60, 47, 115, 99, 114, 105, 112, 116]),
      StyleEnd: new Uint8Array([60, 47, 115, 116, 121, 108, 101]),
      TitleEnd: new Uint8Array([60, 47, 116, 105, 116, 108, 101]),
      TextareaEnd: new Uint8Array([
        60, 47, 116, 101, 120, 116, 97, 114, 101, 97
      ])
    };
    class Tokenizer {
      constructor({ xmlMode: a = false, decodeEntities: C = true }, q) {
        this.cbs = q;
        this.state = Vs.Text;
        this.buffer = '';
        this.sectionStart = 0;
        this.index = 0;
        this.entityStart = 0;
        this.baseState = Vs.Text;
        this.isSpecial = false;
        this.running = true;
        this.offset = 0;
        this.currentSequence = undefined;
        this.sequenceIndex = 0;
        this.xmlMode = a;
        this.decodeEntities = C;
        this.entityDecoder = new EntityDecoder(a ? Ds : Rs, (a, C) =>
          this.emitCodePoint(a, C)
        );
      }
      reset() {
        this.state = Vs.Text;
        this.buffer = '';
        this.sectionStart = 0;
        this.index = 0;
        this.baseState = Vs.Text;
        this.currentSequence = undefined;
        this.running = true;
        this.offset = 0;
      }
      write(a) {
        this.offset += this.buffer.length;
        this.buffer = a;
        this.parse();
      }
      end() {
        if (this.running) this.finish();
      }
      pause() {
        this.running = false;
      }
      resume() {
        this.running = true;
        if (this.index < this.buffer.length + this.offset) {
          this.parse();
        }
      }
      stateText(a) {
        if (
          a === qs.Lt ||
          (!this.decodeEntities && this.fastForwardTo(qs.Lt))
        ) {
          if (this.index > this.sectionStart) {
            this.cbs.ontext(this.sectionStart, this.index);
          }
          this.state = Vs.BeforeTagName;
          this.sectionStart = this.index;
        } else if (this.decodeEntities && a === qs.Amp) {
          this.startEntity();
        }
      }
      stateSpecialStartSequence(a) {
        const C = this.sequenceIndex === this.currentSequence.length;
        const q = C
          ? isEndOfTagSection(a)
          : (a | 32) === this.currentSequence[this.sequenceIndex];
        if (!q) {
          this.isSpecial = false;
        } else if (!C) {
          this.sequenceIndex++;
          return;
        }
        this.sequenceIndex = 0;
        this.state = Vs.InTagName;
        this.stateInTagName(a);
      }
      stateInSpecialTag(a) {
        if (this.sequenceIndex === this.currentSequence.length) {
          if (a === qs.Gt || isWhitespace(a)) {
            const C = this.index - this.currentSequence.length;
            if (this.sectionStart < C) {
              const a = this.index;
              this.index = C;
              this.cbs.ontext(this.sectionStart, C);
              this.index = a;
            }
            this.isSpecial = false;
            this.sectionStart = C + 2;
            this.stateInClosingTagName(a);
            return;
          }
          this.sequenceIndex = 0;
        }
        if ((a | 32) === this.currentSequence[this.sequenceIndex]) {
          this.sequenceIndex += 1;
        } else if (this.sequenceIndex === 0) {
          if (this.currentSequence === Ys.TitleEnd) {
            if (this.decodeEntities && a === qs.Amp) {
              this.startEntity();
            }
          } else if (this.fastForwardTo(qs.Lt)) {
            this.sequenceIndex = 1;
          }
        } else {
          this.sequenceIndex = Number(a === qs.Lt);
        }
      }
      stateCDATASequence(a) {
        if (a === Ys.Cdata[this.sequenceIndex]) {
          if (++this.sequenceIndex === Ys.Cdata.length) {
            this.state = Vs.InCommentLike;
            this.currentSequence = Ys.CdataEnd;
            this.sequenceIndex = 0;
            this.sectionStart = this.index + 1;
          }
        } else {
          this.sequenceIndex = 0;
          this.state = Vs.InDeclaration;
          this.stateInDeclaration(a);
        }
      }
      fastForwardTo(a) {
        while (++this.index < this.buffer.length + this.offset) {
          if (this.buffer.charCodeAt(this.index - this.offset) === a) {
            return true;
          }
        }
        this.index = this.buffer.length + this.offset - 1;
        return false;
      }
      stateInCommentLike(a) {
        if (a === this.currentSequence[this.sequenceIndex]) {
          if (++this.sequenceIndex === this.currentSequence.length) {
            if (this.currentSequence === Ys.CdataEnd) {
              this.cbs.oncdata(this.sectionStart, this.index, 2);
            } else {
              this.cbs.oncomment(this.sectionStart, this.index, 2);
            }
            this.sequenceIndex = 0;
            this.sectionStart = this.index + 1;
            this.state = Vs.Text;
          }
        } else if (this.sequenceIndex === 0) {
          if (this.fastForwardTo(this.currentSequence[0])) {
            this.sequenceIndex = 1;
          }
        } else if (a !== this.currentSequence[this.sequenceIndex - 1]) {
          this.sequenceIndex = 0;
        }
      }
      isTagStartChar(a) {
        return this.xmlMode ? !isEndOfTagSection(a) : isASCIIAlpha(a);
      }
      startSpecial(a, C) {
        this.isSpecial = true;
        this.currentSequence = a;
        this.sequenceIndex = C;
        this.state = Vs.SpecialStartSequence;
      }
      stateBeforeTagName(a) {
        if (a === qs.ExclamationMark) {
          this.state = Vs.BeforeDeclaration;
          this.sectionStart = this.index + 1;
        } else if (a === qs.Questionmark) {
          this.state = Vs.InProcessingInstruction;
          this.sectionStart = this.index + 1;
        } else if (this.isTagStartChar(a)) {
          const C = a | 32;
          this.sectionStart = this.index;
          if (this.xmlMode) {
            this.state = Vs.InTagName;
          } else if (C === Ys.ScriptEnd[2]) {
            this.state = Vs.BeforeSpecialS;
          } else if (C === Ys.TitleEnd[2]) {
            this.state = Vs.BeforeSpecialT;
          } else {
            this.state = Vs.InTagName;
          }
        } else if (a === qs.Slash) {
          this.state = Vs.BeforeClosingTagName;
        } else {
          this.state = Vs.Text;
          this.stateText(a);
        }
      }
      stateInTagName(a) {
        if (isEndOfTagSection(a)) {
          this.cbs.onopentagname(this.sectionStart, this.index);
          this.sectionStart = -1;
          this.state = Vs.BeforeAttributeName;
          this.stateBeforeAttributeName(a);
        }
      }
      stateBeforeClosingTagName(a) {
        if (isWhitespace(a)) {
        } else if (a === qs.Gt) {
          this.state = Vs.Text;
        } else {
          this.state = this.isTagStartChar(a)
            ? Vs.InClosingTagName
            : Vs.InSpecialComment;
          this.sectionStart = this.index;
        }
      }
      stateInClosingTagName(a) {
        if (a === qs.Gt || isWhitespace(a)) {
          this.cbs.onclosetag(this.sectionStart, this.index);
          this.sectionStart = -1;
          this.state = Vs.AfterClosingTagName;
          this.stateAfterClosingTagName(a);
        }
      }
      stateAfterClosingTagName(a) {
        if (a === qs.Gt || this.fastForwardTo(qs.Gt)) {
          this.state = Vs.Text;
          this.sectionStart = this.index + 1;
        }
      }
      stateBeforeAttributeName(a) {
        if (a === qs.Gt) {
          this.cbs.onopentagend(this.index);
          if (this.isSpecial) {
            this.state = Vs.InSpecialTag;
            this.sequenceIndex = 0;
          } else {
            this.state = Vs.Text;
          }
          this.sectionStart = this.index + 1;
        } else if (a === qs.Slash) {
          this.state = Vs.InSelfClosingTag;
        } else if (!isWhitespace(a)) {
          this.state = Vs.InAttributeName;
          this.sectionStart = this.index;
        }
      }
      stateInSelfClosingTag(a) {
        if (a === qs.Gt) {
          this.cbs.onselfclosingtag(this.index);
          this.state = Vs.Text;
          this.sectionStart = this.index + 1;
          this.isSpecial = false;
        } else if (!isWhitespace(a)) {
          this.state = Vs.BeforeAttributeName;
          this.stateBeforeAttributeName(a);
        }
      }
      stateInAttributeName(a) {
        if (a === qs.Eq || isEndOfTagSection(a)) {
          this.cbs.onattribname(this.sectionStart, this.index);
          this.sectionStart = this.index;
          this.state = Vs.AfterAttributeName;
          this.stateAfterAttributeName(a);
        }
      }
      stateAfterAttributeName(a) {
        if (a === qs.Eq) {
          this.state = Vs.BeforeAttributeValue;
        } else if (a === qs.Slash || a === qs.Gt) {
          this.cbs.onattribend(Ws.NoValue, this.sectionStart);
          this.sectionStart = -1;
          this.state = Vs.BeforeAttributeName;
          this.stateBeforeAttributeName(a);
        } else if (!isWhitespace(a)) {
          this.cbs.onattribend(Ws.NoValue, this.sectionStart);
          this.state = Vs.InAttributeName;
          this.sectionStart = this.index;
        }
      }
      stateBeforeAttributeValue(a) {
        if (a === qs.DoubleQuote) {
          this.state = Vs.InAttributeValueDq;
          this.sectionStart = this.index + 1;
        } else if (a === qs.SingleQuote) {
          this.state = Vs.InAttributeValueSq;
          this.sectionStart = this.index + 1;
        } else if (!isWhitespace(a)) {
          this.sectionStart = this.index;
          this.state = Vs.InAttributeValueNq;
          this.stateInAttributeValueNoQuotes(a);
        }
      }
      handleInAttributeValue(a, C) {
        if (a === C || (!this.decodeEntities && this.fastForwardTo(C))) {
          this.cbs.onattribdata(this.sectionStart, this.index);
          this.sectionStart = -1;
          this.cbs.onattribend(
            C === qs.DoubleQuote ? Ws.Double : Ws.Single,
            this.index + 1
          );
          this.state = Vs.BeforeAttributeName;
        } else if (this.decodeEntities && a === qs.Amp) {
          this.startEntity();
        }
      }
      stateInAttributeValueDoubleQuotes(a) {
        this.handleInAttributeValue(a, qs.DoubleQuote);
      }
      stateInAttributeValueSingleQuotes(a) {
        this.handleInAttributeValue(a, qs.SingleQuote);
      }
      stateInAttributeValueNoQuotes(a) {
        if (isWhitespace(a) || a === qs.Gt) {
          this.cbs.onattribdata(this.sectionStart, this.index);
          this.sectionStart = -1;
          this.cbs.onattribend(Ws.Unquoted, this.index);
          this.state = Vs.BeforeAttributeName;
          this.stateBeforeAttributeName(a);
        } else if (this.decodeEntities && a === qs.Amp) {
          this.startEntity();
        }
      }
      stateBeforeDeclaration(a) {
        if (a === qs.OpeningSquareBracket) {
          this.state = Vs.CDATASequence;
          this.sequenceIndex = 0;
        } else {
          this.state = a === qs.Dash ? Vs.BeforeComment : Vs.InDeclaration;
        }
      }
      stateInDeclaration(a) {
        if (a === qs.Gt || this.fastForwardTo(qs.Gt)) {
          this.cbs.ondeclaration(this.sectionStart, this.index);
          this.state = Vs.Text;
          this.sectionStart = this.index + 1;
        }
      }
      stateInProcessingInstruction(a) {
        if (a === qs.Gt || this.fastForwardTo(qs.Gt)) {
          this.cbs.onprocessinginstruction(this.sectionStart, this.index);
          this.state = Vs.Text;
          this.sectionStart = this.index + 1;
        }
      }
      stateBeforeComment(a) {
        if (a === qs.Dash) {
          this.state = Vs.InCommentLike;
          this.currentSequence = Ys.CommentEnd;
          this.sequenceIndex = 2;
          this.sectionStart = this.index + 1;
        } else {
          this.state = Vs.InDeclaration;
        }
      }
      stateInSpecialComment(a) {
        if (a === qs.Gt || this.fastForwardTo(qs.Gt)) {
          this.cbs.oncomment(this.sectionStart, this.index, 0);
          this.state = Vs.Text;
          this.sectionStart = this.index + 1;
        }
      }
      stateBeforeSpecialS(a) {
        const C = a | 32;
        if (C === Ys.ScriptEnd[3]) {
          this.startSpecial(Ys.ScriptEnd, 4);
        } else if (C === Ys.StyleEnd[3]) {
          this.startSpecial(Ys.StyleEnd, 4);
        } else {
          this.state = Vs.InTagName;
          this.stateInTagName(a);
        }
      }
      stateBeforeSpecialT(a) {
        const C = a | 32;
        if (C === Ys.TitleEnd[3]) {
          this.startSpecial(Ys.TitleEnd, 4);
        } else if (C === Ys.TextareaEnd[3]) {
          this.startSpecial(Ys.TextareaEnd, 4);
        } else {
          this.state = Vs.InTagName;
          this.stateInTagName(a);
        }
      }
      startEntity() {
        this.baseState = this.state;
        this.state = Vs.InEntity;
        this.entityStart = this.index;
        this.entityDecoder.startEntity(
          this.xmlMode
            ? Us.Strict
            : this.baseState === Vs.Text || this.baseState === Vs.InSpecialTag
              ? Us.Legacy
              : Us.Attribute
        );
      }
      stateInEntity() {
        const a = this.entityDecoder.write(
          this.buffer,
          this.index - this.offset
        );
        if (a >= 0) {
          this.state = this.baseState;
          if (a === 0) {
            this.index = this.entityStart;
          }
        } else {
          this.index = this.offset + this.buffer.length - 1;
        }
      }
      cleanup() {
        if (this.running && this.sectionStart !== this.index) {
          if (
            this.state === Vs.Text ||
            (this.state === Vs.InSpecialTag && this.sequenceIndex === 0)
          ) {
            this.cbs.ontext(this.sectionStart, this.index);
            this.sectionStart = this.index;
          } else if (
            this.state === Vs.InAttributeValueDq ||
            this.state === Vs.InAttributeValueSq ||
            this.state === Vs.InAttributeValueNq
          ) {
            this.cbs.onattribdata(this.sectionStart, this.index);
            this.sectionStart = this.index;
          }
        }
      }
      shouldContinue() {
        return this.index < this.buffer.length + this.offset && this.running;
      }
      parse() {
        while (this.shouldContinue()) {
          const a = this.buffer.charCodeAt(this.index - this.offset);
          switch (this.state) {
            case Vs.Text: {
              this.stateText(a);
              break;
            }
            case Vs.SpecialStartSequence: {
              this.stateSpecialStartSequence(a);
              break;
            }
            case Vs.InSpecialTag: {
              this.stateInSpecialTag(a);
              break;
            }
            case Vs.CDATASequence: {
              this.stateCDATASequence(a);
              break;
            }
            case Vs.InAttributeValueDq: {
              this.stateInAttributeValueDoubleQuotes(a);
              break;
            }
            case Vs.InAttributeName: {
              this.stateInAttributeName(a);
              break;
            }
            case Vs.InCommentLike: {
              this.stateInCommentLike(a);
              break;
            }
            case Vs.InSpecialComment: {
              this.stateInSpecialComment(a);
              break;
            }
            case Vs.BeforeAttributeName: {
              this.stateBeforeAttributeName(a);
              break;
            }
            case Vs.InTagName: {
              this.stateInTagName(a);
              break;
            }
            case Vs.InClosingTagName: {
              this.stateInClosingTagName(a);
              break;
            }
            case Vs.BeforeTagName: {
              this.stateBeforeTagName(a);
              break;
            }
            case Vs.AfterAttributeName: {
              this.stateAfterAttributeName(a);
              break;
            }
            case Vs.InAttributeValueSq: {
              this.stateInAttributeValueSingleQuotes(a);
              break;
            }
            case Vs.BeforeAttributeValue: {
              this.stateBeforeAttributeValue(a);
              break;
            }
            case Vs.BeforeClosingTagName: {
              this.stateBeforeClosingTagName(a);
              break;
            }
            case Vs.AfterClosingTagName: {
              this.stateAfterClosingTagName(a);
              break;
            }
            case Vs.BeforeSpecialS: {
              this.stateBeforeSpecialS(a);
              break;
            }
            case Vs.BeforeSpecialT: {
              this.stateBeforeSpecialT(a);
              break;
            }
            case Vs.InAttributeValueNq: {
              this.stateInAttributeValueNoQuotes(a);
              break;
            }
            case Vs.InSelfClosingTag: {
              this.stateInSelfClosingTag(a);
              break;
            }
            case Vs.InDeclaration: {
              this.stateInDeclaration(a);
              break;
            }
            case Vs.BeforeDeclaration: {
              this.stateBeforeDeclaration(a);
              break;
            }
            case Vs.BeforeComment: {
              this.stateBeforeComment(a);
              break;
            }
            case Vs.InProcessingInstruction: {
              this.stateInProcessingInstruction(a);
              break;
            }
            case Vs.InEntity: {
              this.stateInEntity();
              break;
            }
          }
          this.index++;
        }
        this.cleanup();
      }
      finish() {
        if (this.state === Vs.InEntity) {
          this.entityDecoder.end();
          this.state = this.baseState;
        }
        this.handleTrailingData();
        this.cbs.onend();
      }
      handleTrailingData() {
        const a = this.buffer.length + this.offset;
        if (this.sectionStart >= a) {
          return;
        }
        if (this.state === Vs.InCommentLike) {
          if (this.currentSequence === Ys.CdataEnd) {
            this.cbs.oncdata(this.sectionStart, a, 0);
          } else {
            this.cbs.oncomment(this.sectionStart, a, 0);
          }
        } else if (
          this.state === Vs.InTagName ||
          this.state === Vs.BeforeAttributeName ||
          this.state === Vs.BeforeAttributeValue ||
          this.state === Vs.AfterAttributeName ||
          this.state === Vs.InAttributeName ||
          this.state === Vs.InAttributeValueSq ||
          this.state === Vs.InAttributeValueDq ||
          this.state === Vs.InAttributeValueNq ||
          this.state === Vs.InClosingTagName
        ) {
        } else {
          this.cbs.ontext(this.sectionStart, a);
        }
      }
      emitCodePoint(a, C) {
        if (this.baseState !== Vs.Text && this.baseState !== Vs.InSpecialTag) {
          if (this.sectionStart < this.entityStart) {
            this.cbs.onattribdata(this.sectionStart, this.entityStart);
          }
          this.sectionStart = this.entityStart + C;
          this.index = this.sectionStart - 1;
          this.cbs.onattribentity(a);
        } else {
          if (this.sectionStart < this.entityStart) {
            this.cbs.ontext(this.sectionStart, this.entityStart);
          }
          this.sectionStart = this.entityStart + C;
          this.index = this.sectionStart - 1;
          this.cbs.ontextentity(a, this.sectionStart);
        }
      }
    }
    const js = new Set([
      'input',
      'option',
      'optgroup',
      'select',
      'button',
      'datalist',
      'textarea'
    ]);
    const Js = new Set(['p']);
    const zs = new Set(['thead', 'tbody']);
    const $s = new Set(['dd', 'dt']);
    const Ks = new Set(['rt', 'rp']);
    const Xs = new Map([
      ['tr', new Set(['tr', 'th', 'td'])],
      ['th', new Set(['th'])],
      ['td', new Set(['thead', 'th', 'td'])],
      ['body', new Set(['head', 'link', 'script'])],
      ['li', new Set(['li'])],
      ['p', Js],
      ['h1', Js],
      ['h2', Js],
      ['h3', Js],
      ['h4', Js],
      ['h5', Js],
      ['h6', Js],
      ['select', js],
      ['input', js],
      ['output', js],
      ['button', js],
      ['datalist', js],
      ['textarea', js],
      ['option', new Set(['option'])],
      ['optgroup', new Set(['optgroup', 'option'])],
      ['dd', $s],
      ['dt', $s],
      ['address', Js],
      ['article', Js],
      ['aside', Js],
      ['blockquote', Js],
      ['details', Js],
      ['div', Js],
      ['dl', Js],
      ['fieldset', Js],
      ['figcaption', Js],
      ['figure', Js],
      ['footer', Js],
      ['form', Js],
      ['header', Js],
      ['hr', Js],
      ['main', Js],
      ['nav', Js],
      ['ol', Js],
      ['pre', Js],
      ['section', Js],
      ['table', Js],
      ['ul', Js],
      ['rt', Ks],
      ['rp', Ks],
      ['tbody', zs],
      ['tfoot', zs]
    ]);
    const Zs = new Set([
      'area',
      'base',
      'basefont',
      'br',
      'col',
      'command',
      'embed',
      'frame',
      'hr',
      'img',
      'input',
      'isindex',
      'keygen',
      'link',
      'meta',
      'param',
      'source',
      'track',
      'wbr'
    ]);
    const en = new Set(['math', 'svg']);
    const tn = new Set([
      'mi',
      'mo',
      'mn',
      'ms',
      'mtext',
      'annotation-xml',
      'foreignobject',
      'desc',
      'title'
    ]);
    const rn = /\s|\//;
    class Parser {
      constructor(a, C = {}) {
        var q, re, ae, Ue, lt, Pt;
        this.options = C;
        this.startIndex = 0;
        this.endIndex = 0;
        this.openTagStart = 0;
        this.tagname = '';
        this.attribname = '';
        this.attribvalue = '';
        this.attribs = null;
        this.stack = [];
        this.buffers = [];
        this.bufferOffset = 0;
        this.writeIndex = 0;
        this.ended = false;
        this.cbs = a !== null && a !== void 0 ? a : {};
        this.htmlMode = !this.options.xmlMode;
        this.lowerCaseTagNames =
          (q = C.lowerCaseTags) !== null && q !== void 0 ? q : this.htmlMode;
        this.lowerCaseAttributeNames =
          (re = C.lowerCaseAttributeNames) !== null && re !== void 0
            ? re
            : this.htmlMode;
        this.recognizeSelfClosing =
          (ae = C.recognizeSelfClosing) !== null && ae !== void 0
            ? ae
            : !this.htmlMode;
        this.tokenizer = new (
          (Ue = C.Tokenizer) !== null && Ue !== void 0 ? Ue : Tokenizer
        )(this.options, this);
        this.foreignContext = [!this.htmlMode];
        (Pt = (lt = this.cbs).onparserinit) === null || Pt === void 0
          ? void 0
          : Pt.call(lt, this);
      }
      ontext(a, C) {
        var q, re;
        const ae = this.getSlice(a, C);
        this.endIndex = C - 1;
        (re = (q = this.cbs).ontext) === null || re === void 0
          ? void 0
          : re.call(q, ae);
        this.startIndex = C;
      }
      ontextentity(a, C) {
        var q, re;
        this.endIndex = C - 1;
        (re = (q = this.cbs).ontext) === null || re === void 0
          ? void 0
          : re.call(q, Fs(a));
        this.startIndex = C;
      }
      isVoidElement(a) {
        return this.htmlMode && Zs.has(a);
      }
      onopentagname(a, C) {
        this.endIndex = C;
        let q = this.getSlice(a, C);
        if (this.lowerCaseTagNames) {
          q = q.toLowerCase();
        }
        this.emitOpenTag(q);
      }
      emitOpenTag(a) {
        var C, q, re, ae;
        this.openTagStart = this.startIndex;
        this.tagname = a;
        const Ue = this.htmlMode && Xs.get(a);
        if (Ue) {
          while (this.stack.length > 0 && Ue.has(this.stack[0])) {
            const a = this.stack.shift();
            (q = (C = this.cbs).onclosetag) === null || q === void 0
              ? void 0
              : q.call(C, a, true);
          }
        }
        if (!this.isVoidElement(a)) {
          this.stack.unshift(a);
          if (this.htmlMode) {
            if (en.has(a)) {
              this.foreignContext.unshift(true);
            } else if (tn.has(a)) {
              this.foreignContext.unshift(false);
            }
          }
        }
        (ae = (re = this.cbs).onopentagname) === null || ae === void 0
          ? void 0
          : ae.call(re, a);
        if (this.cbs.onopentag) this.attribs = {};
      }
      endOpenTag(a) {
        var C, q;
        this.startIndex = this.openTagStart;
        if (this.attribs) {
          (q = (C = this.cbs).onopentag) === null || q === void 0
            ? void 0
            : q.call(C, this.tagname, this.attribs, a);
          this.attribs = null;
        }
        if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
          this.cbs.onclosetag(this.tagname, true);
        }
        this.tagname = '';
      }
      onopentagend(a) {
        this.endIndex = a;
        this.endOpenTag(false);
        this.startIndex = a + 1;
      }
      onclosetag(a, C) {
        var q, re, ae, Ue, lt, Pt, Wt, Ar;
        this.endIndex = C;
        let Er = this.getSlice(a, C);
        if (this.lowerCaseTagNames) {
          Er = Er.toLowerCase();
        }
        if (this.htmlMode && (en.has(Er) || tn.has(Er))) {
          this.foreignContext.shift();
        }
        if (!this.isVoidElement(Er)) {
          const a = this.stack.indexOf(Er);
          if (a !== -1) {
            for (let C = 0; C <= a; C++) {
              const ae = this.stack.shift();
              (re = (q = this.cbs).onclosetag) === null || re === void 0
                ? void 0
                : re.call(q, ae, C !== a);
            }
          } else if (this.htmlMode && Er === 'p') {
            this.emitOpenTag('p');
            this.closeCurrentTag(true);
          }
        } else if (this.htmlMode && Er === 'br') {
          (Ue = (ae = this.cbs).onopentagname) === null || Ue === void 0
            ? void 0
            : Ue.call(ae, 'br');
          (Pt = (lt = this.cbs).onopentag) === null || Pt === void 0
            ? void 0
            : Pt.call(lt, 'br', {}, true);
          (Ar = (Wt = this.cbs).onclosetag) === null || Ar === void 0
            ? void 0
            : Ar.call(Wt, 'br', false);
        }
        this.startIndex = C + 1;
      }
      onselfclosingtag(a) {
        this.endIndex = a;
        if (this.recognizeSelfClosing || this.foreignContext[0]) {
          this.closeCurrentTag(false);
          this.startIndex = a + 1;
        } else {
          this.onopentagend(a);
        }
      }
      closeCurrentTag(a) {
        var C, q;
        const re = this.tagname;
        this.endOpenTag(a);
        if (this.stack[0] === re) {
          (q = (C = this.cbs).onclosetag) === null || q === void 0
            ? void 0
            : q.call(C, re, !a);
          this.stack.shift();
        }
      }
      onattribname(a, C) {
        this.startIndex = a;
        const q = this.getSlice(a, C);
        this.attribname = this.lowerCaseAttributeNames ? q.toLowerCase() : q;
      }
      onattribdata(a, C) {
        this.attribvalue += this.getSlice(a, C);
      }
      onattribentity(a) {
        this.attribvalue += Fs(a);
      }
      onattribend(a, C) {
        var q, re;
        this.endIndex = C;
        (re = (q = this.cbs).onattribute) === null || re === void 0
          ? void 0
          : re.call(
              q,
              this.attribname,
              this.attribvalue,
              a === Ws.Double
                ? '"'
                : a === Ws.Single
                  ? "'"
                  : a === Ws.NoValue
                    ? undefined
                    : null
            );
        if (
          this.attribs &&
          !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)
        ) {
          this.attribs[this.attribname] = this.attribvalue;
        }
        this.attribvalue = '';
      }
      getInstructionName(a) {
        const C = a.search(rn);
        let q = C < 0 ? a : a.substr(0, C);
        if (this.lowerCaseTagNames) {
          q = q.toLowerCase();
        }
        return q;
      }
      ondeclaration(a, C) {
        this.endIndex = C;
        const q = this.getSlice(a, C);
        if (this.cbs.onprocessinginstruction) {
          const a = this.getInstructionName(q);
          this.cbs.onprocessinginstruction(`!${a}`, `!${q}`);
        }
        this.startIndex = C + 1;
      }
      onprocessinginstruction(a, C) {
        this.endIndex = C;
        const q = this.getSlice(a, C);
        if (this.cbs.onprocessinginstruction) {
          const a = this.getInstructionName(q);
          this.cbs.onprocessinginstruction(`?${a}`, `?${q}`);
        }
        this.startIndex = C + 1;
      }
      oncomment(a, C, q) {
        var re, ae, Ue, lt;
        this.endIndex = C;
        (ae = (re = this.cbs).oncomment) === null || ae === void 0
          ? void 0
          : ae.call(re, this.getSlice(a, C - q));
        (lt = (Ue = this.cbs).oncommentend) === null || lt === void 0
          ? void 0
          : lt.call(Ue);
        this.startIndex = C + 1;
      }
      oncdata(a, C, q) {
        var re, ae, Ue, lt, Pt, Wt, Ar, Er, Ir, Br;
        this.endIndex = C;
        const Qr = this.getSlice(a, C - q);
        if (!this.htmlMode || this.options.recognizeCDATA) {
          (ae = (re = this.cbs).oncdatastart) === null || ae === void 0
            ? void 0
            : ae.call(re);
          (lt = (Ue = this.cbs).ontext) === null || lt === void 0
            ? void 0
            : lt.call(Ue, Qr);
          (Wt = (Pt = this.cbs).oncdataend) === null || Wt === void 0
            ? void 0
            : Wt.call(Pt);
        } else {
          (Er = (Ar = this.cbs).oncomment) === null || Er === void 0
            ? void 0
            : Er.call(Ar, `[CDATA[${Qr}]]`);
          (Br = (Ir = this.cbs).oncommentend) === null || Br === void 0
            ? void 0
            : Br.call(Ir);
        }
        this.startIndex = C + 1;
      }
      onend() {
        var a, C;
        if (this.cbs.onclosetag) {
          this.endIndex = this.startIndex;
          for (let a = 0; a < this.stack.length; a++) {
            this.cbs.onclosetag(this.stack[a], true);
          }
        }
        (C = (a = this.cbs).onend) === null || C === void 0
          ? void 0
          : C.call(a);
      }
      reset() {
        var a, C, q, re;
        (C = (a = this.cbs).onreset) === null || C === void 0
          ? void 0
          : C.call(a);
        this.tokenizer.reset();
        this.tagname = '';
        this.attribname = '';
        this.attribs = null;
        this.stack.length = 0;
        this.startIndex = 0;
        this.endIndex = 0;
        (re = (q = this.cbs).onparserinit) === null || re === void 0
          ? void 0
          : re.call(q, this);
        this.buffers.length = 0;
        this.foreignContext.length = 0;
        this.foreignContext.unshift(!this.htmlMode);
        this.bufferOffset = 0;
        this.writeIndex = 0;
        this.ended = false;
      }
      parseComplete(a) {
        this.reset();
        this.end(a);
      }
      getSlice(a, C) {
        while (a - this.bufferOffset >= this.buffers[0].length) {
          this.shiftBuffer();
        }
        let q = this.buffers[0].slice(
          a - this.bufferOffset,
          C - this.bufferOffset
        );
        while (C - this.bufferOffset > this.buffers[0].length) {
          this.shiftBuffer();
          q += this.buffers[0].slice(0, C - this.bufferOffset);
        }
        return q;
      }
      shiftBuffer() {
        this.bufferOffset += this.buffers[0].length;
        this.writeIndex--;
        this.buffers.shift();
      }
      write(a) {
        var C, q;
        if (this.ended) {
          (q = (C = this.cbs).onerror) === null || q === void 0
            ? void 0
            : q.call(C, new Error('.write() after done!'));
          return;
        }
        this.buffers.push(a);
        if (this.tokenizer.running) {
          this.tokenizer.write(a);
          this.writeIndex++;
        }
      }
      end(a) {
        var C, q;
        if (this.ended) {
          (q = (C = this.cbs).onerror) === null || q === void 0
            ? void 0
            : q.call(C, new Error('.end() after done!'));
          return;
        }
        if (a) this.write(a);
        this.ended = true;
        this.tokenizer.end();
      }
      pause() {
        this.tokenizer.pause();
      }
      resume() {
        this.tokenizer.resume();
        while (
          this.tokenizer.running &&
          this.writeIndex < this.buffers.length
        ) {
          this.tokenizer.write(this.buffers[this.writeIndex++]);
        }
        if (this.ended) this.tokenizer.end();
      }
      parseChunk(a) {
        this.write(a);
      }
      done(a) {
        this.end(a);
      }
    }
    var sn;
    (function (a) {
      a['Root'] = 'root';
      a['Text'] = 'text';
      a['Directive'] = 'directive';
      a['Comment'] = 'comment';
      a['Script'] = 'script';
      a['Style'] = 'style';
      a['Tag'] = 'tag';
      a['CDATA'] = 'cdata';
      a['Doctype'] = 'doctype';
    })(sn || (sn = {}));
    function isTag(a) {
      return a.type === sn.Tag || a.type === sn.Script || a.type === sn.Style;
    }
    const nn = sn.Root;
    const on = sn.Text;
    const an = sn.Directive;
    const ln = sn.Comment;
    const cn = sn.Script;
    const An = sn.Style;
    const dn = sn.Tag;
    const un = sn.CDATA;
    const pn = sn.Doctype;
    class Node {
      constructor() {
        this.parent = null;
        this.prev = null;
        this.next = null;
        this.startIndex = null;
        this.endIndex = null;
      }
      get parentNode() {
        return this.parent;
      }
      set parentNode(a) {
        this.parent = a;
      }
      get previousSibling() {
        return this.prev;
      }
      set previousSibling(a) {
        this.prev = a;
      }
      get nextSibling() {
        return this.next;
      }
      set nextSibling(a) {
        this.next = a;
      }
      cloneNode(a = false) {
        return cloneNode(this, a);
      }
    }
    class DataNode extends Node {
      constructor(a) {
        super();
        this.data = a;
      }
      get nodeValue() {
        return this.data;
      }
      set nodeValue(a) {
        this.data = a;
      }
    }
    class node_Text extends DataNode {
      constructor() {
        super(...arguments);
        this.type = sn.Text;
      }
      get nodeType() {
        return 3;
      }
    }
    class node_Comment extends DataNode {
      constructor() {
        super(...arguments);
        this.type = sn.Comment;
      }
      get nodeType() {
        return 8;
      }
    }
    class ProcessingInstruction extends DataNode {
      constructor(a, C) {
        super(C);
        this.name = a;
        this.type = sn.Directive;
      }
      get nodeType() {
        return 1;
      }
    }
    class NodeWithChildren extends Node {
      constructor(a) {
        super();
        this.children = a;
      }
      get firstChild() {
        var a;
        return (a = this.children[0]) !== null && a !== void 0 ? a : null;
      }
      get lastChild() {
        return this.children.length > 0
          ? this.children[this.children.length - 1]
          : null;
      }
      get childNodes() {
        return this.children;
      }
      set childNodes(a) {
        this.children = a;
      }
    }
    class node_CDATA extends NodeWithChildren {
      constructor() {
        super(...arguments);
        this.type = sn.CDATA;
      }
      get nodeType() {
        return 4;
      }
    }
    class Document extends NodeWithChildren {
      constructor() {
        super(...arguments);
        this.type = sn.Root;
      }
      get nodeType() {
        return 9;
      }
    }
    class Element extends NodeWithChildren {
      constructor(
        a,
        C,
        q = [],
        re = a === 'script' ? sn.Script : a === 'style' ? sn.Style : sn.Tag
      ) {
        super(q);
        this.name = a;
        this.attribs = C;
        this.type = re;
      }
      get nodeType() {
        return 1;
      }
      get tagName() {
        return this.name;
      }
      set tagName(a) {
        this.name = a;
      }
      get attributes() {
        return Object.keys(this.attribs).map((a) => {
          var C, q;
          return {
            name: a,
            value: this.attribs[a],
            namespace:
              (C = this['x-attribsNamespace']) === null || C === void 0
                ? void 0
                : C[a],
            prefix:
              (q = this['x-attribsPrefix']) === null || q === void 0
                ? void 0
                : q[a]
          };
        });
      }
    }
    function node_isTag(a) {
      return isTag(a);
    }
    function isCDATA(a) {
      return a.type === sn.CDATA;
    }
    function isText(a) {
      return a.type === sn.Text;
    }
    function isComment(a) {
      return a.type === sn.Comment;
    }
    function isDirective(a) {
      return a.type === sn.Directive;
    }
    function isDocument(a) {
      return a.type === sn.Root;
    }
    function hasChildren(a) {
      return Object.prototype.hasOwnProperty.call(a, 'children');
    }
    function cloneNode(a, C = false) {
      let q;
      if (isText(a)) {
        q = new node_Text(a.data);
      } else if (isComment(a)) {
        q = new node_Comment(a.data);
      } else if (node_isTag(a)) {
        const re = C ? cloneChildren(a.children) : [];
        const ae = new Element(a.name, { ...a.attribs }, re);
        re.forEach((a) => (a.parent = ae));
        if (a.namespace != null) {
          ae.namespace = a.namespace;
        }
        if (a['x-attribsNamespace']) {
          ae['x-attribsNamespace'] = { ...a['x-attribsNamespace'] };
        }
        if (a['x-attribsPrefix']) {
          ae['x-attribsPrefix'] = { ...a['x-attribsPrefix'] };
        }
        q = ae;
      } else if (isCDATA(a)) {
        const re = C ? cloneChildren(a.children) : [];
        const ae = new node_CDATA(re);
        re.forEach((a) => (a.parent = ae));
        q = ae;
      } else if (isDocument(a)) {
        const re = C ? cloneChildren(a.children) : [];
        const ae = new Document(re);
        re.forEach((a) => (a.parent = ae));
        if (a['x-mode']) {
          ae['x-mode'] = a['x-mode'];
        }
        q = ae;
      } else if (isDirective(a)) {
        const C = new ProcessingInstruction(a.name, a.data);
        if (a['x-name'] != null) {
          C['x-name'] = a['x-name'];
          C['x-publicId'] = a['x-publicId'];
          C['x-systemId'] = a['x-systemId'];
        }
        q = C;
      } else {
        throw new Error(`Not implemented yet: ${a.type}`);
      }
      q.startIndex = a.startIndex;
      q.endIndex = a.endIndex;
      if (a.sourceCodeLocation != null) {
        q.sourceCodeLocation = a.sourceCodeLocation;
      }
      return q;
    }
    function cloneChildren(a) {
      const C = a.map((a) => cloneNode(a, true));
      for (let a = 1; a < C.length; a++) {
        C[a].prev = C[a - 1];
        C[a - 1].next = C[a];
      }
      return C;
    }
    const hn = {
      withStartIndices: false,
      withEndIndices: false,
      xmlMode: false
    };
    class DomHandler {
      constructor(a, C, q) {
        this.dom = [];
        this.root = new Document(this.dom);
        this.done = false;
        this.tagStack = [this.root];
        this.lastNode = null;
        this.parser = null;
        if (typeof C === 'function') {
          q = C;
          C = hn;
        }
        if (typeof a === 'object') {
          C = a;
          a = undefined;
        }
        this.callback = a !== null && a !== void 0 ? a : null;
        this.options = C !== null && C !== void 0 ? C : hn;
        this.elementCB = q !== null && q !== void 0 ? q : null;
      }
      onparserinit(a) {
        this.parser = a;
      }
      onreset() {
        this.dom = [];
        this.root = new Document(this.dom);
        this.done = false;
        this.tagStack = [this.root];
        this.lastNode = null;
        this.parser = null;
      }
      onend() {
        if (this.done) return;
        this.done = true;
        this.parser = null;
        this.handleCallback(null);
      }
      onerror(a) {
        this.handleCallback(a);
      }
      onclosetag() {
        this.lastNode = null;
        const a = this.tagStack.pop();
        if (this.options.withEndIndices) {
          a.endIndex = this.parser.endIndex;
        }
        if (this.elementCB) this.elementCB(a);
      }
      onopentag(a, C) {
        const q = this.options.xmlMode ? sn.Tag : undefined;
        const re = new Element(a, C, undefined, q);
        this.addNode(re);
        this.tagStack.push(re);
      }
      ontext(a) {
        const { lastNode: C } = this;
        if (C && C.type === sn.Text) {
          C.data += a;
          if (this.options.withEndIndices) {
            C.endIndex = this.parser.endIndex;
          }
        } else {
          const C = new node_Text(a);
          this.addNode(C);
          this.lastNode = C;
        }
      }
      oncomment(a) {
        if (this.lastNode && this.lastNode.type === sn.Comment) {
          this.lastNode.data += a;
          return;
        }
        const C = new node_Comment(a);
        this.addNode(C);
        this.lastNode = C;
      }
      oncommentend() {
        this.lastNode = null;
      }
      oncdatastart() {
        const a = new node_Text('');
        const C = new node_CDATA([a]);
        this.addNode(C);
        a.parent = C;
        this.lastNode = a;
      }
      oncdataend() {
        this.lastNode = null;
      }
      onprocessinginstruction(a, C) {
        const q = new ProcessingInstruction(a, C);
        this.addNode(q);
      }
      handleCallback(a) {
        if (typeof this.callback === 'function') {
          this.callback(a, this.dom);
        } else if (a) {
          throw a;
        }
      }
      addNode(a) {
        const C = this.tagStack[this.tagStack.length - 1];
        const q = C.children[C.children.length - 1];
        if (this.options.withStartIndices) {
          a.startIndex = this.parser.startIndex;
        }
        if (this.options.withEndIndices) {
          a.endIndex = this.parser.endIndex;
        }
        C.children.push(a);
        if (q) {
          a.prev = q;
          q.next = a;
        }
        a.parent = C;
        this.lastNode = null;
      }
    }
    const mn = null && DomHandler;
    function restoreDiff(a) {
      for (let C = 1; C < a.length; C++) {
        a[C][0] += a[C - 1][0] + 1;
      }
      return a;
    }
    const fn = new Map(
      restoreDiff([
        [9, '&Tab;'],
        [0, '&NewLine;'],
        [22, '&excl;'],
        [0, '&quot;'],
        [0, '&num;'],
        [0, '&dollar;'],
        [0, '&percnt;'],
        [0, '&amp;'],
        [0, '&apos;'],
        [0, '&lpar;'],
        [0, '&rpar;'],
        [0, '&ast;'],
        [0, '&plus;'],
        [0, '&comma;'],
        [1, '&period;'],
        [0, '&sol;'],
        [10, '&colon;'],
        [0, '&semi;'],
        [0, { v: '&lt;', n: 8402, o: '&nvlt;' }],
        [0, { v: '&equals;', n: 8421, o: '&bne;' }],
        [0, { v: '&gt;', n: 8402, o: '&nvgt;' }],
        [0, '&quest;'],
        [0, '&commat;'],
        [26, '&lbrack;'],
        [0, '&bsol;'],
        [0, '&rbrack;'],
        [0, '&Hat;'],
        [0, '&lowbar;'],
        [0, '&DiacriticalGrave;'],
        [5, { n: 106, o: '&fjlig;' }],
        [20, '&lbrace;'],
        [0, '&verbar;'],
        [0, '&rbrace;'],
        [34, '&nbsp;'],
        [0, '&iexcl;'],
        [0, '&cent;'],
        [0, '&pound;'],
        [0, '&curren;'],
        [0, '&yen;'],
        [0, '&brvbar;'],
        [0, '&sect;'],
        [0, '&die;'],
        [0, '&copy;'],
        [0, '&ordf;'],
        [0, '&laquo;'],
        [0, '&not;'],
        [0, '&shy;'],
        [0, '&circledR;'],
        [0, '&macr;'],
        [0, '&deg;'],
        [0, '&PlusMinus;'],
        [0, '&sup2;'],
        [0, '&sup3;'],
        [0, '&acute;'],
        [0, '&micro;'],
        [0, '&para;'],
        [0, '&centerdot;'],
        [0, '&cedil;'],
        [0, '&sup1;'],
        [0, '&ordm;'],
        [0, '&raquo;'],
        [0, '&frac14;'],
        [0, '&frac12;'],
        [0, '&frac34;'],
        [0, '&iquest;'],
        [0, '&Agrave;'],
        [0, '&Aacute;'],
        [0, '&Acirc;'],
        [0, '&Atilde;'],
        [0, '&Auml;'],
        [0, '&angst;'],
        [0, '&AElig;'],
        [0, '&Ccedil;'],
        [0, '&Egrave;'],
        [0, '&Eacute;'],
        [0, '&Ecirc;'],
        [0, '&Euml;'],
        [0, '&Igrave;'],
        [0, '&Iacute;'],
        [0, '&Icirc;'],
        [0, '&Iuml;'],
        [0, '&ETH;'],
        [0, '&Ntilde;'],
        [0, '&Ograve;'],
        [0, '&Oacute;'],
        [0, '&Ocirc;'],
        [0, '&Otilde;'],
        [0, '&Ouml;'],
        [0, '&times;'],
        [0, '&Oslash;'],
        [0, '&Ugrave;'],
        [0, '&Uacute;'],
        [0, '&Ucirc;'],
        [0, '&Uuml;'],
        [0, '&Yacute;'],
        [0, '&THORN;'],
        [0, '&szlig;'],
        [0, '&agrave;'],
        [0, '&aacute;'],
        [0, '&acirc;'],
        [0, '&atilde;'],
        [0, '&auml;'],
        [0, '&aring;'],
        [0, '&aelig;'],
        [0, '&ccedil;'],
        [0, '&egrave;'],
        [0, '&eacute;'],
        [0, '&ecirc;'],
        [0, '&euml;'],
        [0, '&igrave;'],
        [0, '&iacute;'],
        [0, '&icirc;'],
        [0, '&iuml;'],
        [0, '&eth;'],
        [0, '&ntilde;'],
        [0, '&ograve;'],
        [0, '&oacute;'],
        [0, '&ocirc;'],
        [0, '&otilde;'],
        [0, '&ouml;'],
        [0, '&div;'],
        [0, '&oslash;'],
        [0, '&ugrave;'],
        [0, '&uacute;'],
        [0, '&ucirc;'],
        [0, '&uuml;'],
        [0, '&yacute;'],
        [0, '&thorn;'],
        [0, '&yuml;'],
        [0, '&Amacr;'],
        [0, '&amacr;'],
        [0, '&Abreve;'],
        [0, '&abreve;'],
        [0, '&Aogon;'],
        [0, '&aogon;'],
        [0, '&Cacute;'],
        [0, '&cacute;'],
        [0, '&Ccirc;'],
        [0, '&ccirc;'],
        [0, '&Cdot;'],
        [0, '&cdot;'],
        [0, '&Ccaron;'],
        [0, '&ccaron;'],
        [0, '&Dcaron;'],
        [0, '&dcaron;'],
        [0, '&Dstrok;'],
        [0, '&dstrok;'],
        [0, '&Emacr;'],
        [0, '&emacr;'],
        [2, '&Edot;'],
        [0, '&edot;'],
        [0, '&Eogon;'],
        [0, '&eogon;'],
        [0, '&Ecaron;'],
        [0, '&ecaron;'],
        [0, '&Gcirc;'],
        [0, '&gcirc;'],
        [0, '&Gbreve;'],
        [0, '&gbreve;'],
        [0, '&Gdot;'],
        [0, '&gdot;'],
        [0, '&Gcedil;'],
        [1, '&Hcirc;'],
        [0, '&hcirc;'],
        [0, '&Hstrok;'],
        [0, '&hstrok;'],
        [0, '&Itilde;'],
        [0, '&itilde;'],
        [0, '&Imacr;'],
        [0, '&imacr;'],
        [2, '&Iogon;'],
        [0, '&iogon;'],
        [0, '&Idot;'],
        [0, '&imath;'],
        [0, '&IJlig;'],
        [0, '&ijlig;'],
        [0, '&Jcirc;'],
        [0, '&jcirc;'],
        [0, '&Kcedil;'],
        [0, '&kcedil;'],
        [0, '&kgreen;'],
        [0, '&Lacute;'],
        [0, '&lacute;'],
        [0, '&Lcedil;'],
        [0, '&lcedil;'],
        [0, '&Lcaron;'],
        [0, '&lcaron;'],
        [0, '&Lmidot;'],
        [0, '&lmidot;'],
        [0, '&Lstrok;'],
        [0, '&lstrok;'],
        [0, '&Nacute;'],
        [0, '&nacute;'],
        [0, '&Ncedil;'],
        [0, '&ncedil;'],
        [0, '&Ncaron;'],
        [0, '&ncaron;'],
        [0, '&napos;'],
        [0, '&ENG;'],
        [0, '&eng;'],
        [0, '&Omacr;'],
        [0, '&omacr;'],
        [2, '&Odblac;'],
        [0, '&odblac;'],
        [0, '&OElig;'],
        [0, '&oelig;'],
        [0, '&Racute;'],
        [0, '&racute;'],
        [0, '&Rcedil;'],
        [0, '&rcedil;'],
        [0, '&Rcaron;'],
        [0, '&rcaron;'],
        [0, '&Sacute;'],
        [0, '&sacute;'],
        [0, '&Scirc;'],
        [0, '&scirc;'],
        [0, '&Scedil;'],
        [0, '&scedil;'],
        [0, '&Scaron;'],
        [0, '&scaron;'],
        [0, '&Tcedil;'],
        [0, '&tcedil;'],
        [0, '&Tcaron;'],
        [0, '&tcaron;'],
        [0, '&Tstrok;'],
        [0, '&tstrok;'],
        [0, '&Utilde;'],
        [0, '&utilde;'],
        [0, '&Umacr;'],
        [0, '&umacr;'],
        [0, '&Ubreve;'],
        [0, '&ubreve;'],
        [0, '&Uring;'],
        [0, '&uring;'],
        [0, '&Udblac;'],
        [0, '&udblac;'],
        [0, '&Uogon;'],
        [0, '&uogon;'],
        [0, '&Wcirc;'],
        [0, '&wcirc;'],
        [0, '&Ycirc;'],
        [0, '&ycirc;'],
        [0, '&Yuml;'],
        [0, '&Zacute;'],
        [0, '&zacute;'],
        [0, '&Zdot;'],
        [0, '&zdot;'],
        [0, '&Zcaron;'],
        [0, '&zcaron;'],
        [19, '&fnof;'],
        [34, '&imped;'],
        [63, '&gacute;'],
        [65, '&jmath;'],
        [142, '&circ;'],
        [0, '&caron;'],
        [16, '&breve;'],
        [0, '&DiacriticalDot;'],
        [0, '&ring;'],
        [0, '&ogon;'],
        [0, '&DiacriticalTilde;'],
        [0, '&dblac;'],
        [51, '&DownBreve;'],
        [127, '&Alpha;'],
        [0, '&Beta;'],
        [0, '&Gamma;'],
        [0, '&Delta;'],
        [0, '&Epsilon;'],
        [0, '&Zeta;'],
        [0, '&Eta;'],
        [0, '&Theta;'],
        [0, '&Iota;'],
        [0, '&Kappa;'],
        [0, '&Lambda;'],
        [0, '&Mu;'],
        [0, '&Nu;'],
        [0, '&Xi;'],
        [0, '&Omicron;'],
        [0, '&Pi;'],
        [0, '&Rho;'],
        [1, '&Sigma;'],
        [0, '&Tau;'],
        [0, '&Upsilon;'],
        [0, '&Phi;'],
        [0, '&Chi;'],
        [0, '&Psi;'],
        [0, '&ohm;'],
        [7, '&alpha;'],
        [0, '&beta;'],
        [0, '&gamma;'],
        [0, '&delta;'],
        [0, '&epsi;'],
        [0, '&zeta;'],
        [0, '&eta;'],
        [0, '&theta;'],
        [0, '&iota;'],
        [0, '&kappa;'],
        [0, '&lambda;'],
        [0, '&mu;'],
        [0, '&nu;'],
        [0, '&xi;'],
        [0, '&omicron;'],
        [0, '&pi;'],
        [0, '&rho;'],
        [0, '&sigmaf;'],
        [0, '&sigma;'],
        [0, '&tau;'],
        [0, '&upsi;'],
        [0, '&phi;'],
        [0, '&chi;'],
        [0, '&psi;'],
        [0, '&omega;'],
        [7, '&thetasym;'],
        [0, '&Upsi;'],
        [2, '&phiv;'],
        [0, '&piv;'],
        [5, '&Gammad;'],
        [0, '&digamma;'],
        [18, '&kappav;'],
        [0, '&rhov;'],
        [3, '&epsiv;'],
        [0, '&backepsilon;'],
        [10, '&IOcy;'],
        [0, '&DJcy;'],
        [0, '&GJcy;'],
        [0, '&Jukcy;'],
        [0, '&DScy;'],
        [0, '&Iukcy;'],
        [0, '&YIcy;'],
        [0, '&Jsercy;'],
        [0, '&LJcy;'],
        [0, '&NJcy;'],
        [0, '&TSHcy;'],
        [0, '&KJcy;'],
        [1, '&Ubrcy;'],
        [0, '&DZcy;'],
        [0, '&Acy;'],
        [0, '&Bcy;'],
        [0, '&Vcy;'],
        [0, '&Gcy;'],
        [0, '&Dcy;'],
        [0, '&IEcy;'],
        [0, '&ZHcy;'],
        [0, '&Zcy;'],
        [0, '&Icy;'],
        [0, '&Jcy;'],
        [0, '&Kcy;'],
        [0, '&Lcy;'],
        [0, '&Mcy;'],
        [0, '&Ncy;'],
        [0, '&Ocy;'],
        [0, '&Pcy;'],
        [0, '&Rcy;'],
        [0, '&Scy;'],
        [0, '&Tcy;'],
        [0, '&Ucy;'],
        [0, '&Fcy;'],
        [0, '&KHcy;'],
        [0, '&TScy;'],
        [0, '&CHcy;'],
        [0, '&SHcy;'],
        [0, '&SHCHcy;'],
        [0, '&HARDcy;'],
        [0, '&Ycy;'],
        [0, '&SOFTcy;'],
        [0, '&Ecy;'],
        [0, '&YUcy;'],
        [0, '&YAcy;'],
        [0, '&acy;'],
        [0, '&bcy;'],
        [0, '&vcy;'],
        [0, '&gcy;'],
        [0, '&dcy;'],
        [0, '&iecy;'],
        [0, '&zhcy;'],
        [0, '&zcy;'],
        [0, '&icy;'],
        [0, '&jcy;'],
        [0, '&kcy;'],
        [0, '&lcy;'],
        [0, '&mcy;'],
        [0, '&ncy;'],
        [0, '&ocy;'],
        [0, '&pcy;'],
        [0, '&rcy;'],
        [0, '&scy;'],
        [0, '&tcy;'],
        [0, '&ucy;'],
        [0, '&fcy;'],
        [0, '&khcy;'],
        [0, '&tscy;'],
        [0, '&chcy;'],
        [0, '&shcy;'],
        [0, '&shchcy;'],
        [0, '&hardcy;'],
        [0, '&ycy;'],
        [0, '&softcy;'],
        [0, '&ecy;'],
        [0, '&yucy;'],
        [0, '&yacy;'],
        [1, '&iocy;'],
        [0, '&djcy;'],
        [0, '&gjcy;'],
        [0, '&jukcy;'],
        [0, '&dscy;'],
        [0, '&iukcy;'],
        [0, '&yicy;'],
        [0, '&jsercy;'],
        [0, '&ljcy;'],
        [0, '&njcy;'],
        [0, '&tshcy;'],
        [0, '&kjcy;'],
        [1, '&ubrcy;'],
        [0, '&dzcy;'],
        [7074, '&ensp;'],
        [0, '&emsp;'],
        [0, '&emsp13;'],
        [0, '&emsp14;'],
        [1, '&numsp;'],
        [0, '&puncsp;'],
        [0, '&ThinSpace;'],
        [0, '&hairsp;'],
        [0, '&NegativeMediumSpace;'],
        [0, '&zwnj;'],
        [0, '&zwj;'],
        [0, '&lrm;'],
        [0, '&rlm;'],
        [0, '&dash;'],
        [2, '&ndash;'],
        [0, '&mdash;'],
        [0, '&horbar;'],
        [0, '&Verbar;'],
        [1, '&lsquo;'],
        [0, '&CloseCurlyQuote;'],
        [0, '&lsquor;'],
        [1, '&ldquo;'],
        [0, '&CloseCurlyDoubleQuote;'],
        [0, '&bdquo;'],
        [1, '&dagger;'],
        [0, '&Dagger;'],
        [0, '&bull;'],
        [2, '&nldr;'],
        [0, '&hellip;'],
        [9, '&permil;'],
        [0, '&pertenk;'],
        [0, '&prime;'],
        [0, '&Prime;'],
        [0, '&tprime;'],
        [0, '&backprime;'],
        [3, '&lsaquo;'],
        [0, '&rsaquo;'],
        [3, '&oline;'],
        [2, '&caret;'],
        [1, '&hybull;'],
        [0, '&frasl;'],
        [10, '&bsemi;'],
        [7, '&qprime;'],
        [7, { v: '&MediumSpace;', n: 8202, o: '&ThickSpace;' }],
        [0, '&NoBreak;'],
        [0, '&af;'],
        [0, '&InvisibleTimes;'],
        [0, '&ic;'],
        [72, '&euro;'],
        [46, '&tdot;'],
        [0, '&DotDot;'],
        [37, '&complexes;'],
        [2, '&incare;'],
        [4, '&gscr;'],
        [0, '&hamilt;'],
        [0, '&Hfr;'],
        [0, '&Hopf;'],
        [0, '&planckh;'],
        [0, '&hbar;'],
        [0, '&imagline;'],
        [0, '&Ifr;'],
        [0, '&lagran;'],
        [0, '&ell;'],
        [1, '&naturals;'],
        [0, '&numero;'],
        [0, '&copysr;'],
        [0, '&weierp;'],
        [0, '&Popf;'],
        [0, '&Qopf;'],
        [0, '&realine;'],
        [0, '&real;'],
        [0, '&reals;'],
        [0, '&rx;'],
        [3, '&trade;'],
        [1, '&integers;'],
        [2, '&mho;'],
        [0, '&zeetrf;'],
        [0, '&iiota;'],
        [2, '&bernou;'],
        [0, '&Cayleys;'],
        [1, '&escr;'],
        [0, '&Escr;'],
        [0, '&Fouriertrf;'],
        [1, '&Mellintrf;'],
        [0, '&order;'],
        [0, '&alefsym;'],
        [0, '&beth;'],
        [0, '&gimel;'],
        [0, '&daleth;'],
        [12, '&CapitalDifferentialD;'],
        [0, '&dd;'],
        [0, '&ee;'],
        [0, '&ii;'],
        [10, '&frac13;'],
        [0, '&frac23;'],
        [0, '&frac15;'],
        [0, '&frac25;'],
        [0, '&frac35;'],
        [0, '&frac45;'],
        [0, '&frac16;'],
        [0, '&frac56;'],
        [0, '&frac18;'],
        [0, '&frac38;'],
        [0, '&frac58;'],
        [0, '&frac78;'],
        [49, '&larr;'],
        [0, '&ShortUpArrow;'],
        [0, '&rarr;'],
        [0, '&darr;'],
        [0, '&harr;'],
        [0, '&updownarrow;'],
        [0, '&nwarr;'],
        [0, '&nearr;'],
        [0, '&LowerRightArrow;'],
        [0, '&LowerLeftArrow;'],
        [0, '&nlarr;'],
        [0, '&nrarr;'],
        [1, { v: '&rarrw;', n: 824, o: '&nrarrw;' }],
        [0, '&Larr;'],
        [0, '&Uarr;'],
        [0, '&Rarr;'],
        [0, '&Darr;'],
        [0, '&larrtl;'],
        [0, '&rarrtl;'],
        [0, '&LeftTeeArrow;'],
        [0, '&mapstoup;'],
        [0, '&map;'],
        [0, '&DownTeeArrow;'],
        [1, '&hookleftarrow;'],
        [0, '&hookrightarrow;'],
        [0, '&larrlp;'],
        [0, '&looparrowright;'],
        [0, '&harrw;'],
        [0, '&nharr;'],
        [1, '&lsh;'],
        [0, '&rsh;'],
        [0, '&ldsh;'],
        [0, '&rdsh;'],
        [1, '&crarr;'],
        [0, '&cularr;'],
        [0, '&curarr;'],
        [2, '&circlearrowleft;'],
        [0, '&circlearrowright;'],
        [0, '&leftharpoonup;'],
        [0, '&DownLeftVector;'],
        [0, '&RightUpVector;'],
        [0, '&LeftUpVector;'],
        [0, '&rharu;'],
        [0, '&DownRightVector;'],
        [0, '&dharr;'],
        [0, '&dharl;'],
        [0, '&RightArrowLeftArrow;'],
        [0, '&udarr;'],
        [0, '&LeftArrowRightArrow;'],
        [0, '&leftleftarrows;'],
        [0, '&upuparrows;'],
        [0, '&rightrightarrows;'],
        [0, '&ddarr;'],
        [0, '&leftrightharpoons;'],
        [0, '&Equilibrium;'],
        [0, '&nlArr;'],
        [0, '&nhArr;'],
        [0, '&nrArr;'],
        [0, '&DoubleLeftArrow;'],
        [0, '&DoubleUpArrow;'],
        [0, '&DoubleRightArrow;'],
        [0, '&dArr;'],
        [0, '&DoubleLeftRightArrow;'],
        [0, '&DoubleUpDownArrow;'],
        [0, '&nwArr;'],
        [0, '&neArr;'],
        [0, '&seArr;'],
        [0, '&swArr;'],
        [0, '&lAarr;'],
        [0, '&rAarr;'],
        [1, '&zigrarr;'],
        [6, '&larrb;'],
        [0, '&rarrb;'],
        [15, '&DownArrowUpArrow;'],
        [7, '&loarr;'],
        [0, '&roarr;'],
        [0, '&hoarr;'],
        [0, '&forall;'],
        [0, '&comp;'],
        [0, { v: '&part;', n: 824, o: '&npart;' }],
        [0, '&exist;'],
        [0, '&nexist;'],
        [0, '&empty;'],
        [1, '&Del;'],
        [0, '&Element;'],
        [0, '&NotElement;'],
        [1, '&ni;'],
        [0, '&notni;'],
        [2, '&prod;'],
        [0, '&coprod;'],
        [0, '&sum;'],
        [0, '&minus;'],
        [0, '&MinusPlus;'],
        [0, '&dotplus;'],
        [1, '&Backslash;'],
        [0, '&lowast;'],
        [0, '&compfn;'],
        [1, '&radic;'],
        [2, '&prop;'],
        [0, '&infin;'],
        [0, '&angrt;'],
        [0, { v: '&ang;', n: 8402, o: '&nang;' }],
        [0, '&angmsd;'],
        [0, '&angsph;'],
        [0, '&mid;'],
        [0, '&nmid;'],
        [0, '&DoubleVerticalBar;'],
        [0, '&NotDoubleVerticalBar;'],
        [0, '&and;'],
        [0, '&or;'],
        [0, { v: '&cap;', n: 65024, o: '&caps;' }],
        [0, { v: '&cup;', n: 65024, o: '&cups;' }],
        [0, '&int;'],
        [0, '&Int;'],
        [0, '&iiint;'],
        [0, '&conint;'],
        [0, '&Conint;'],
        [0, '&Cconint;'],
        [0, '&cwint;'],
        [0, '&ClockwiseContourIntegral;'],
        [0, '&awconint;'],
        [0, '&there4;'],
        [0, '&becaus;'],
        [0, '&ratio;'],
        [0, '&Colon;'],
        [0, '&dotminus;'],
        [1, '&mDDot;'],
        [0, '&homtht;'],
        [0, { v: '&sim;', n: 8402, o: '&nvsim;' }],
        [0, { v: '&backsim;', n: 817, o: '&race;' }],
        [0, { v: '&ac;', n: 819, o: '&acE;' }],
        [0, '&acd;'],
        [0, '&VerticalTilde;'],
        [0, '&NotTilde;'],
        [0, { v: '&eqsim;', n: 824, o: '&nesim;' }],
        [0, '&sime;'],
        [0, '&NotTildeEqual;'],
        [0, '&cong;'],
        [0, '&simne;'],
        [0, '&ncong;'],
        [0, '&ap;'],
        [0, '&nap;'],
        [0, '&ape;'],
        [0, { v: '&apid;', n: 824, o: '&napid;' }],
        [0, '&backcong;'],
        [0, { v: '&asympeq;', n: 8402, o: '&nvap;' }],
        [0, { v: '&bump;', n: 824, o: '&nbump;' }],
        [0, { v: '&bumpe;', n: 824, o: '&nbumpe;' }],
        [0, { v: '&doteq;', n: 824, o: '&nedot;' }],
        [0, '&doteqdot;'],
        [0, '&efDot;'],
        [0, '&erDot;'],
        [0, '&Assign;'],
        [0, '&ecolon;'],
        [0, '&ecir;'],
        [0, '&circeq;'],
        [1, '&wedgeq;'],
        [0, '&veeeq;'],
        [1, '&triangleq;'],
        [2, '&equest;'],
        [0, '&ne;'],
        [0, { v: '&Congruent;', n: 8421, o: '&bnequiv;' }],
        [0, '&nequiv;'],
        [1, { v: '&le;', n: 8402, o: '&nvle;' }],
        [0, { v: '&ge;', n: 8402, o: '&nvge;' }],
        [0, { v: '&lE;', n: 824, o: '&nlE;' }],
        [0, { v: '&gE;', n: 824, o: '&ngE;' }],
        [0, { v: '&lnE;', n: 65024, o: '&lvertneqq;' }],
        [0, { v: '&gnE;', n: 65024, o: '&gvertneqq;' }],
        [
          0,
          {
            v: '&ll;',
            n: new Map(
              restoreDiff([
                [824, '&nLtv;'],
                [7577, '&nLt;']
              ])
            )
          }
        ],
        [
          0,
          {
            v: '&gg;',
            n: new Map(
              restoreDiff([
                [824, '&nGtv;'],
                [7577, '&nGt;']
              ])
            )
          }
        ],
        [0, '&between;'],
        [0, '&NotCupCap;'],
        [0, '&nless;'],
        [0, '&ngt;'],
        [0, '&nle;'],
        [0, '&nge;'],
        [0, '&lesssim;'],
        [0, '&GreaterTilde;'],
        [0, '&nlsim;'],
        [0, '&ngsim;'],
        [0, '&LessGreater;'],
        [0, '&gl;'],
        [0, '&NotLessGreater;'],
        [0, '&NotGreaterLess;'],
        [0, '&pr;'],
        [0, '&sc;'],
        [0, '&prcue;'],
        [0, '&sccue;'],
        [0, '&PrecedesTilde;'],
        [0, { v: '&scsim;', n: 824, o: '&NotSucceedsTilde;' }],
        [0, '&NotPrecedes;'],
        [0, '&NotSucceeds;'],
        [0, { v: '&sub;', n: 8402, o: '&NotSubset;' }],
        [0, { v: '&sup;', n: 8402, o: '&NotSuperset;' }],
        [0, '&nsub;'],
        [0, '&nsup;'],
        [0, '&sube;'],
        [0, '&supe;'],
        [0, '&NotSubsetEqual;'],
        [0, '&NotSupersetEqual;'],
        [0, { v: '&subne;', n: 65024, o: '&varsubsetneq;' }],
        [0, { v: '&supne;', n: 65024, o: '&varsupsetneq;' }],
        [1, '&cupdot;'],
        [0, '&UnionPlus;'],
        [0, { v: '&sqsub;', n: 824, o: '&NotSquareSubset;' }],
        [0, { v: '&sqsup;', n: 824, o: '&NotSquareSuperset;' }],
        [0, '&sqsube;'],
        [0, '&sqsupe;'],
        [0, { v: '&sqcap;', n: 65024, o: '&sqcaps;' }],
        [0, { v: '&sqcup;', n: 65024, o: '&sqcups;' }],
        [0, '&CirclePlus;'],
        [0, '&CircleMinus;'],
        [0, '&CircleTimes;'],
        [0, '&osol;'],
        [0, '&CircleDot;'],
        [0, '&circledcirc;'],
        [0, '&circledast;'],
        [1, '&circleddash;'],
        [0, '&boxplus;'],
        [0, '&boxminus;'],
        [0, '&boxtimes;'],
        [0, '&dotsquare;'],
        [0, '&RightTee;'],
        [0, '&dashv;'],
        [0, '&DownTee;'],
        [0, '&bot;'],
        [1, '&models;'],
        [0, '&DoubleRightTee;'],
        [0, '&Vdash;'],
        [0, '&Vvdash;'],
        [0, '&VDash;'],
        [0, '&nvdash;'],
        [0, '&nvDash;'],
        [0, '&nVdash;'],
        [0, '&nVDash;'],
        [0, '&prurel;'],
        [1, '&LeftTriangle;'],
        [0, '&RightTriangle;'],
        [0, { v: '&LeftTriangleEqual;', n: 8402, o: '&nvltrie;' }],
        [0, { v: '&RightTriangleEqual;', n: 8402, o: '&nvrtrie;' }],
        [0, '&origof;'],
        [0, '&imof;'],
        [0, '&multimap;'],
        [0, '&hercon;'],
        [0, '&intcal;'],
        [0, '&veebar;'],
        [1, '&barvee;'],
        [0, '&angrtvb;'],
        [0, '&lrtri;'],
        [0, '&bigwedge;'],
        [0, '&bigvee;'],
        [0, '&bigcap;'],
        [0, '&bigcup;'],
        [0, '&diam;'],
        [0, '&sdot;'],
        [0, '&sstarf;'],
        [0, '&divideontimes;'],
        [0, '&bowtie;'],
        [0, '&ltimes;'],
        [0, '&rtimes;'],
        [0, '&leftthreetimes;'],
        [0, '&rightthreetimes;'],
        [0, '&backsimeq;'],
        [0, '&curlyvee;'],
        [0, '&curlywedge;'],
        [0, '&Sub;'],
        [0, '&Sup;'],
        [0, '&Cap;'],
        [0, '&Cup;'],
        [0, '&fork;'],
        [0, '&epar;'],
        [0, '&lessdot;'],
        [0, '&gtdot;'],
        [0, { v: '&Ll;', n: 824, o: '&nLl;' }],
        [0, { v: '&Gg;', n: 824, o: '&nGg;' }],
        [0, { v: '&leg;', n: 65024, o: '&lesg;' }],
        [0, { v: '&gel;', n: 65024, o: '&gesl;' }],
        [2, '&cuepr;'],
        [0, '&cuesc;'],
        [0, '&NotPrecedesSlantEqual;'],
        [0, '&NotSucceedsSlantEqual;'],
        [0, '&NotSquareSubsetEqual;'],
        [0, '&NotSquareSupersetEqual;'],
        [2, '&lnsim;'],
        [0, '&gnsim;'],
        [0, '&precnsim;'],
        [0, '&scnsim;'],
        [0, '&nltri;'],
        [0, '&NotRightTriangle;'],
        [0, '&nltrie;'],
        [0, '&NotRightTriangleEqual;'],
        [0, '&vellip;'],
        [0, '&ctdot;'],
        [0, '&utdot;'],
        [0, '&dtdot;'],
        [0, '&disin;'],
        [0, '&isinsv;'],
        [0, '&isins;'],
        [0, { v: '&isindot;', n: 824, o: '&notindot;' }],
        [0, '&notinvc;'],
        [0, '&notinvb;'],
        [1, { v: '&isinE;', n: 824, o: '&notinE;' }],
        [0, '&nisd;'],
        [0, '&xnis;'],
        [0, '&nis;'],
        [0, '&notnivc;'],
        [0, '&notnivb;'],
        [6, '&barwed;'],
        [0, '&Barwed;'],
        [1, '&lceil;'],
        [0, '&rceil;'],
        [0, '&LeftFloor;'],
        [0, '&rfloor;'],
        [0, '&drcrop;'],
        [0, '&dlcrop;'],
        [0, '&urcrop;'],
        [0, '&ulcrop;'],
        [0, '&bnot;'],
        [1, '&profline;'],
        [0, '&profsurf;'],
        [1, '&telrec;'],
        [0, '&target;'],
        [5, '&ulcorn;'],
        [0, '&urcorn;'],
        [0, '&dlcorn;'],
        [0, '&drcorn;'],
        [2, '&frown;'],
        [0, '&smile;'],
        [9, '&cylcty;'],
        [0, '&profalar;'],
        [7, '&topbot;'],
        [6, '&ovbar;'],
        [1, '&solbar;'],
        [60, '&angzarr;'],
        [51, '&lmoustache;'],
        [0, '&rmoustache;'],
        [2, '&OverBracket;'],
        [0, '&bbrk;'],
        [0, '&bbrktbrk;'],
        [37, '&OverParenthesis;'],
        [0, '&UnderParenthesis;'],
        [0, '&OverBrace;'],
        [0, '&UnderBrace;'],
        [2, '&trpezium;'],
        [4, '&elinters;'],
        [59, '&blank;'],
        [164, '&circledS;'],
        [55, '&boxh;'],
        [1, '&boxv;'],
        [9, '&boxdr;'],
        [3, '&boxdl;'],
        [3, '&boxur;'],
        [3, '&boxul;'],
        [3, '&boxvr;'],
        [7, '&boxvl;'],
        [7, '&boxhd;'],
        [7, '&boxhu;'],
        [7, '&boxvh;'],
        [19, '&boxH;'],
        [0, '&boxV;'],
        [0, '&boxdR;'],
        [0, '&boxDr;'],
        [0, '&boxDR;'],
        [0, '&boxdL;'],
        [0, '&boxDl;'],
        [0, '&boxDL;'],
        [0, '&boxuR;'],
        [0, '&boxUr;'],
        [0, '&boxUR;'],
        [0, '&boxuL;'],
        [0, '&boxUl;'],
        [0, '&boxUL;'],
        [0, '&boxvR;'],
        [0, '&boxVr;'],
        [0, '&boxVR;'],
        [0, '&boxvL;'],
        [0, '&boxVl;'],
        [0, '&boxVL;'],
        [0, '&boxHd;'],
        [0, '&boxhD;'],
        [0, '&boxHD;'],
        [0, '&boxHu;'],
        [0, '&boxhU;'],
        [0, '&boxHU;'],
        [0, '&boxvH;'],
        [0, '&boxVh;'],
        [0, '&boxVH;'],
        [19, '&uhblk;'],
        [3, '&lhblk;'],
        [3, '&block;'],
        [8, '&blk14;'],
        [0, '&blk12;'],
        [0, '&blk34;'],
        [13, '&square;'],
        [8, '&blacksquare;'],
        [0, '&EmptyVerySmallSquare;'],
        [1, '&rect;'],
        [0, '&marker;'],
        [2, '&fltns;'],
        [1, '&bigtriangleup;'],
        [0, '&blacktriangle;'],
        [0, '&triangle;'],
        [2, '&blacktriangleright;'],
        [0, '&rtri;'],
        [3, '&bigtriangledown;'],
        [0, '&blacktriangledown;'],
        [0, '&dtri;'],
        [2, '&blacktriangleleft;'],
        [0, '&ltri;'],
        [6, '&loz;'],
        [0, '&cir;'],
        [32, '&tridot;'],
        [2, '&bigcirc;'],
        [8, '&ultri;'],
        [0, '&urtri;'],
        [0, '&lltri;'],
        [0, '&EmptySmallSquare;'],
        [0, '&FilledSmallSquare;'],
        [8, '&bigstar;'],
        [0, '&star;'],
        [7, '&phone;'],
        [49, '&female;'],
        [1, '&male;'],
        [29, '&spades;'],
        [2, '&clubs;'],
        [1, '&hearts;'],
        [0, '&diamondsuit;'],
        [3, '&sung;'],
        [2, '&flat;'],
        [0, '&natural;'],
        [0, '&sharp;'],
        [163, '&check;'],
        [3, '&cross;'],
        [8, '&malt;'],
        [21, '&sext;'],
        [33, '&VerticalSeparator;'],
        [25, '&lbbrk;'],
        [0, '&rbbrk;'],
        [84, '&bsolhsub;'],
        [0, '&suphsol;'],
        [28, '&LeftDoubleBracket;'],
        [0, '&RightDoubleBracket;'],
        [0, '&lang;'],
        [0, '&rang;'],
        [0, '&Lang;'],
        [0, '&Rang;'],
        [0, '&loang;'],
        [0, '&roang;'],
        [7, '&longleftarrow;'],
        [0, '&longrightarrow;'],
        [0, '&longleftrightarrow;'],
        [0, '&DoubleLongLeftArrow;'],
        [0, '&DoubleLongRightArrow;'],
        [0, '&DoubleLongLeftRightArrow;'],
        [1, '&longmapsto;'],
        [2, '&dzigrarr;'],
        [258, '&nvlArr;'],
        [0, '&nvrArr;'],
        [0, '&nvHarr;'],
        [0, '&Map;'],
        [6, '&lbarr;'],
        [0, '&bkarow;'],
        [0, '&lBarr;'],
        [0, '&dbkarow;'],
        [0, '&drbkarow;'],
        [0, '&DDotrahd;'],
        [0, '&UpArrowBar;'],
        [0, '&DownArrowBar;'],
        [2, '&Rarrtl;'],
        [2, '&latail;'],
        [0, '&ratail;'],
        [0, '&lAtail;'],
        [0, '&rAtail;'],
        [0, '&larrfs;'],
        [0, '&rarrfs;'],
        [0, '&larrbfs;'],
        [0, '&rarrbfs;'],
        [2, '&nwarhk;'],
        [0, '&nearhk;'],
        [0, '&hksearow;'],
        [0, '&hkswarow;'],
        [0, '&nwnear;'],
        [0, '&nesear;'],
        [0, '&seswar;'],
        [0, '&swnwar;'],
        [8, { v: '&rarrc;', n: 824, o: '&nrarrc;' }],
        [1, '&cudarrr;'],
        [0, '&ldca;'],
        [0, '&rdca;'],
        [0, '&cudarrl;'],
        [0, '&larrpl;'],
        [2, '&curarrm;'],
        [0, '&cularrp;'],
        [7, '&rarrpl;'],
        [2, '&harrcir;'],
        [0, '&Uarrocir;'],
        [0, '&lurdshar;'],
        [0, '&ldrushar;'],
        [2, '&LeftRightVector;'],
        [0, '&RightUpDownVector;'],
        [0, '&DownLeftRightVector;'],
        [0, '&LeftUpDownVector;'],
        [0, '&LeftVectorBar;'],
        [0, '&RightVectorBar;'],
        [0, '&RightUpVectorBar;'],
        [0, '&RightDownVectorBar;'],
        [0, '&DownLeftVectorBar;'],
        [0, '&DownRightVectorBar;'],
        [0, '&LeftUpVectorBar;'],
        [0, '&LeftDownVectorBar;'],
        [0, '&LeftTeeVector;'],
        [0, '&RightTeeVector;'],
        [0, '&RightUpTeeVector;'],
        [0, '&RightDownTeeVector;'],
        [0, '&DownLeftTeeVector;'],
        [0, '&DownRightTeeVector;'],
        [0, '&LeftUpTeeVector;'],
        [0, '&LeftDownTeeVector;'],
        [0, '&lHar;'],
        [0, '&uHar;'],
        [0, '&rHar;'],
        [0, '&dHar;'],
        [0, '&luruhar;'],
        [0, '&ldrdhar;'],
        [0, '&ruluhar;'],
        [0, '&rdldhar;'],
        [0, '&lharul;'],
        [0, '&llhard;'],
        [0, '&rharul;'],
        [0, '&lrhard;'],
        [0, '&udhar;'],
        [0, '&duhar;'],
        [0, '&RoundImplies;'],
        [0, '&erarr;'],
        [0, '&simrarr;'],
        [0, '&larrsim;'],
        [0, '&rarrsim;'],
        [0, '&rarrap;'],
        [0, '&ltlarr;'],
        [1, '&gtrarr;'],
        [0, '&subrarr;'],
        [1, '&suplarr;'],
        [0, '&lfisht;'],
        [0, '&rfisht;'],
        [0, '&ufisht;'],
        [0, '&dfisht;'],
        [5, '&lopar;'],
        [0, '&ropar;'],
        [4, '&lbrke;'],
        [0, '&rbrke;'],
        [0, '&lbrkslu;'],
        [0, '&rbrksld;'],
        [0, '&lbrksld;'],
        [0, '&rbrkslu;'],
        [0, '&langd;'],
        [0, '&rangd;'],
        [0, '&lparlt;'],
        [0, '&rpargt;'],
        [0, '&gtlPar;'],
        [0, '&ltrPar;'],
        [3, '&vzigzag;'],
        [1, '&vangrt;'],
        [0, '&angrtvbd;'],
        [6, '&ange;'],
        [0, '&range;'],
        [0, '&dwangle;'],
        [0, '&uwangle;'],
        [0, '&angmsdaa;'],
        [0, '&angmsdab;'],
        [0, '&angmsdac;'],
        [0, '&angmsdad;'],
        [0, '&angmsdae;'],
        [0, '&angmsdaf;'],
        [0, '&angmsdag;'],
        [0, '&angmsdah;'],
        [0, '&bemptyv;'],
        [0, '&demptyv;'],
        [0, '&cemptyv;'],
        [0, '&raemptyv;'],
        [0, '&laemptyv;'],
        [0, '&ohbar;'],
        [0, '&omid;'],
        [0, '&opar;'],
        [1, '&operp;'],
        [1, '&olcross;'],
        [0, '&odsold;'],
        [1, '&olcir;'],
        [0, '&ofcir;'],
        [0, '&olt;'],
        [0, '&ogt;'],
        [0, '&cirscir;'],
        [0, '&cirE;'],
        [0, '&solb;'],
        [0, '&bsolb;'],
        [3, '&boxbox;'],
        [3, '&trisb;'],
        [0, '&rtriltri;'],
        [0, { v: '&LeftTriangleBar;', n: 824, o: '&NotLeftTriangleBar;' }],
        [0, { v: '&RightTriangleBar;', n: 824, o: '&NotRightTriangleBar;' }],
        [11, '&iinfin;'],
        [0, '&infintie;'],
        [0, '&nvinfin;'],
        [4, '&eparsl;'],
        [0, '&smeparsl;'],
        [0, '&eqvparsl;'],
        [5, '&blacklozenge;'],
        [8, '&RuleDelayed;'],
        [1, '&dsol;'],
        [9, '&bigodot;'],
        [0, '&bigoplus;'],
        [0, '&bigotimes;'],
        [1, '&biguplus;'],
        [1, '&bigsqcup;'],
        [5, '&iiiint;'],
        [0, '&fpartint;'],
        [2, '&cirfnint;'],
        [0, '&awint;'],
        [0, '&rppolint;'],
        [0, '&scpolint;'],
        [0, '&npolint;'],
        [0, '&pointint;'],
        [0, '&quatint;'],
        [0, '&intlarhk;'],
        [10, '&pluscir;'],
        [0, '&plusacir;'],
        [0, '&simplus;'],
        [0, '&plusdu;'],
        [0, '&plussim;'],
        [0, '&plustwo;'],
        [1, '&mcomma;'],
        [0, '&minusdu;'],
        [2, '&loplus;'],
        [0, '&roplus;'],
        [0, '&Cross;'],
        [0, '&timesd;'],
        [0, '&timesbar;'],
        [1, '&smashp;'],
        [0, '&lotimes;'],
        [0, '&rotimes;'],
        [0, '&otimesas;'],
        [0, '&Otimes;'],
        [0, '&odiv;'],
        [0, '&triplus;'],
        [0, '&triminus;'],
        [0, '&tritime;'],
        [0, '&intprod;'],
        [2, '&amalg;'],
        [0, '&capdot;'],
        [1, '&ncup;'],
        [0, '&ncap;'],
        [0, '&capand;'],
        [0, '&cupor;'],
        [0, '&cupcap;'],
        [0, '&capcup;'],
        [0, '&cupbrcap;'],
        [0, '&capbrcup;'],
        [0, '&cupcup;'],
        [0, '&capcap;'],
        [0, '&ccups;'],
        [0, '&ccaps;'],
        [2, '&ccupssm;'],
        [2, '&And;'],
        [0, '&Or;'],
        [0, '&andand;'],
        [0, '&oror;'],
        [0, '&orslope;'],
        [0, '&andslope;'],
        [1, '&andv;'],
        [0, '&orv;'],
        [0, '&andd;'],
        [0, '&ord;'],
        [1, '&wedbar;'],
        [6, '&sdote;'],
        [3, '&simdot;'],
        [2, { v: '&congdot;', n: 824, o: '&ncongdot;' }],
        [0, '&easter;'],
        [0, '&apacir;'],
        [0, { v: '&apE;', n: 824, o: '&napE;' }],
        [0, '&eplus;'],
        [0, '&pluse;'],
        [0, '&Esim;'],
        [0, '&Colone;'],
        [0, '&Equal;'],
        [1, '&ddotseq;'],
        [0, '&equivDD;'],
        [0, '&ltcir;'],
        [0, '&gtcir;'],
        [0, '&ltquest;'],
        [0, '&gtquest;'],
        [0, { v: '&leqslant;', n: 824, o: '&nleqslant;' }],
        [0, { v: '&geqslant;', n: 824, o: '&ngeqslant;' }],
        [0, '&lesdot;'],
        [0, '&gesdot;'],
        [0, '&lesdoto;'],
        [0, '&gesdoto;'],
        [0, '&lesdotor;'],
        [0, '&gesdotol;'],
        [0, '&lap;'],
        [0, '&gap;'],
        [0, '&lne;'],
        [0, '&gne;'],
        [0, '&lnap;'],
        [0, '&gnap;'],
        [0, '&lEg;'],
        [0, '&gEl;'],
        [0, '&lsime;'],
        [0, '&gsime;'],
        [0, '&lsimg;'],
        [0, '&gsiml;'],
        [0, '&lgE;'],
        [0, '&glE;'],
        [0, '&lesges;'],
        [0, '&gesles;'],
        [0, '&els;'],
        [0, '&egs;'],
        [0, '&elsdot;'],
        [0, '&egsdot;'],
        [0, '&el;'],
        [0, '&eg;'],
        [2, '&siml;'],
        [0, '&simg;'],
        [0, '&simlE;'],
        [0, '&simgE;'],
        [0, { v: '&LessLess;', n: 824, o: '&NotNestedLessLess;' }],
        [0, { v: '&GreaterGreater;', n: 824, o: '&NotNestedGreaterGreater;' }],
        [1, '&glj;'],
        [0, '&gla;'],
        [0, '&ltcc;'],
        [0, '&gtcc;'],
        [0, '&lescc;'],
        [0, '&gescc;'],
        [0, '&smt;'],
        [0, '&lat;'],
        [0, { v: '&smte;', n: 65024, o: '&smtes;' }],
        [0, { v: '&late;', n: 65024, o: '&lates;' }],
        [0, '&bumpE;'],
        [0, { v: '&PrecedesEqual;', n: 824, o: '&NotPrecedesEqual;' }],
        [0, { v: '&sce;', n: 824, o: '&NotSucceedsEqual;' }],
        [2, '&prE;'],
        [0, '&scE;'],
        [0, '&precneqq;'],
        [0, '&scnE;'],
        [0, '&prap;'],
        [0, '&scap;'],
        [0, '&precnapprox;'],
        [0, '&scnap;'],
        [0, '&Pr;'],
        [0, '&Sc;'],
        [0, '&subdot;'],
        [0, '&supdot;'],
        [0, '&subplus;'],
        [0, '&supplus;'],
        [0, '&submult;'],
        [0, '&supmult;'],
        [0, '&subedot;'],
        [0, '&supedot;'],
        [0, { v: '&subE;', n: 824, o: '&nsubE;' }],
        [0, { v: '&supE;', n: 824, o: '&nsupE;' }],
        [0, '&subsim;'],
        [0, '&supsim;'],
        [2, { v: '&subnE;', n: 65024, o: '&varsubsetneqq;' }],
        [0, { v: '&supnE;', n: 65024, o: '&varsupsetneqq;' }],
        [2, '&csub;'],
        [0, '&csup;'],
        [0, '&csube;'],
        [0, '&csupe;'],
        [0, '&subsup;'],
        [0, '&supsub;'],
        [0, '&subsub;'],
        [0, '&supsup;'],
        [0, '&suphsub;'],
        [0, '&supdsub;'],
        [0, '&forkv;'],
        [0, '&topfork;'],
        [0, '&mlcp;'],
        [8, '&Dashv;'],
        [1, '&Vdashl;'],
        [0, '&Barv;'],
        [0, '&vBar;'],
        [0, '&vBarv;'],
        [1, '&Vbar;'],
        [0, '&Not;'],
        [0, '&bNot;'],
        [0, '&rnmid;'],
        [0, '&cirmid;'],
        [0, '&midcir;'],
        [0, '&topcir;'],
        [0, '&nhpar;'],
        [0, '&parsim;'],
        [9, { v: '&parsl;', n: 8421, o: '&nparsl;' }],
        [
          44343,
          {
            n: new Map(
              restoreDiff([
                [56476, '&Ascr;'],
                [1, '&Cscr;'],
                [0, '&Dscr;'],
                [2, '&Gscr;'],
                [2, '&Jscr;'],
                [0, '&Kscr;'],
                [2, '&Nscr;'],
                [0, '&Oscr;'],
                [0, '&Pscr;'],
                [0, '&Qscr;'],
                [1, '&Sscr;'],
                [0, '&Tscr;'],
                [0, '&Uscr;'],
                [0, '&Vscr;'],
                [0, '&Wscr;'],
                [0, '&Xscr;'],
                [0, '&Yscr;'],
                [0, '&Zscr;'],
                [0, '&ascr;'],
                [0, '&bscr;'],
                [0, '&cscr;'],
                [0, '&dscr;'],
                [1, '&fscr;'],
                [1, '&hscr;'],
                [0, '&iscr;'],
                [0, '&jscr;'],
                [0, '&kscr;'],
                [0, '&lscr;'],
                [0, '&mscr;'],
                [0, '&nscr;'],
                [1, '&pscr;'],
                [0, '&qscr;'],
                [0, '&rscr;'],
                [0, '&sscr;'],
                [0, '&tscr;'],
                [0, '&uscr;'],
                [0, '&vscr;'],
                [0, '&wscr;'],
                [0, '&xscr;'],
                [0, '&yscr;'],
                [0, '&zscr;'],
                [52, '&Afr;'],
                [0, '&Bfr;'],
                [1, '&Dfr;'],
                [0, '&Efr;'],
                [0, '&Ffr;'],
                [0, '&Gfr;'],
                [2, '&Jfr;'],
                [0, '&Kfr;'],
                [0, '&Lfr;'],
                [0, '&Mfr;'],
                [0, '&Nfr;'],
                [0, '&Ofr;'],
                [0, '&Pfr;'],
                [0, '&Qfr;'],
                [1, '&Sfr;'],
                [0, '&Tfr;'],
                [0, '&Ufr;'],
                [0, '&Vfr;'],
                [0, '&Wfr;'],
                [0, '&Xfr;'],
                [0, '&Yfr;'],
                [1, '&afr;'],
                [0, '&bfr;'],
                [0, '&cfr;'],
                [0, '&dfr;'],
                [0, '&efr;'],
                [0, '&ffr;'],
                [0, '&gfr;'],
                [0, '&hfr;'],
                [0, '&ifr;'],
                [0, '&jfr;'],
                [0, '&kfr;'],
                [0, '&lfr;'],
                [0, '&mfr;'],
                [0, '&nfr;'],
                [0, '&ofr;'],
                [0, '&pfr;'],
                [0, '&qfr;'],
                [0, '&rfr;'],
                [0, '&sfr;'],
                [0, '&tfr;'],
                [0, '&ufr;'],
                [0, '&vfr;'],
                [0, '&wfr;'],
                [0, '&xfr;'],
                [0, '&yfr;'],
                [0, '&zfr;'],
                [0, '&Aopf;'],
                [0, '&Bopf;'],
                [1, '&Dopf;'],
                [0, '&Eopf;'],
                [0, '&Fopf;'],
                [0, '&Gopf;'],
                [1, '&Iopf;'],
                [0, '&Jopf;'],
                [0, '&Kopf;'],
                [0, '&Lopf;'],
                [0, '&Mopf;'],
                [1, '&Oopf;'],
                [3, '&Sopf;'],
                [0, '&Topf;'],
                [0, '&Uopf;'],
                [0, '&Vopf;'],
                [0, '&Wopf;'],
                [0, '&Xopf;'],
                [0, '&Yopf;'],
                [1, '&aopf;'],
                [0, '&bopf;'],
                [0, '&copf;'],
                [0, '&dopf;'],
                [0, '&eopf;'],
                [0, '&fopf;'],
                [0, '&gopf;'],
                [0, '&hopf;'],
                [0, '&iopf;'],
                [0, '&jopf;'],
                [0, '&kopf;'],
                [0, '&lopf;'],
                [0, '&mopf;'],
                [0, '&nopf;'],
                [0, '&oopf;'],
                [0, '&popf;'],
                [0, '&qopf;'],
                [0, '&ropf;'],
                [0, '&sopf;'],
                [0, '&topf;'],
                [0, '&uopf;'],
                [0, '&vopf;'],
                [0, '&wopf;'],
                [0, '&xopf;'],
                [0, '&yopf;'],
                [0, '&zopf;']
              ])
            )
          }
        ],
        [8906, '&fflig;'],
        [0, '&filig;'],
        [0, '&fllig;'],
        [0, '&ffilig;'],
        [0, '&ffllig;']
      ])
    );
    const gn = /["&'<>$\x80-\uFFFF]/g;
    const En = new Map([
      [34, '&quot;'],
      [38, '&amp;'],
      [39, '&apos;'],
      [60, '&lt;'],
      [62, '&gt;']
    ]);
    const Cn =
      String.prototype.codePointAt != null
        ? (a, C) => a.codePointAt(C)
        : (a, C) =>
            (a.charCodeAt(C) & 64512) === 55296
              ? (a.charCodeAt(C) - 55296) * 1024 +
                a.charCodeAt(C + 1) -
                56320 +
                65536
              : a.charCodeAt(C);
    function escape_encodeXML(a) {
      let C = '';
      let q = 0;
      let re;
      while ((re = gn.exec(a)) !== null) {
        const ae = re.index;
        const Ue = a.charCodeAt(ae);
        const lt = En.get(Ue);
        if (lt !== undefined) {
          C += a.substring(q, ae) + lt;
          q = ae + 1;
        } else {
          C += `${a.substring(q, ae)}&#x${Cn(a, ae).toString(16)};`;
          q = gn.lastIndex += Number((Ue & 64512) === 55296);
        }
      }
      return C + a.substr(q);
    }
    const bn = null && escape_encodeXML;
    function getEscaper(a, C) {
      return function escape(q) {
        let re;
        let ae = 0;
        let Ue = '';
        while ((re = a.exec(q))) {
          if (ae !== re.index) {
            Ue += q.substring(ae, re.index);
          }
          Ue += C.get(re[0].charCodeAt(0));
          ae = re.index + 1;
        }
        return Ue + q.substring(ae);
      };
    }
    const yn = getEscaper(/[&<>'"]/g, En);
    const In = getEscaper(
      /["&\u00A0]/g,
      new Map([
        [34, '&quot;'],
        [38, '&amp;'],
        [160, '&nbsp;']
      ])
    );
    const wn = getEscaper(
      /[&<>\u00A0]/g,
      new Map([
        [38, '&amp;'],
        [60, '&lt;'],
        [62, '&gt;'],
        [160, '&nbsp;']
      ])
    );
    const Bn = /[\t\n!-,./:-@[-`\f{-}$\x80-\uFFFF]/g;
    function encode_encodeHTML(a) {
      return encodeHTMLTrieRe(Bn, a);
    }
    function encode_encodeNonAsciiHTML(a) {
      return encodeHTMLTrieRe(xmlReplacer, a);
    }
    function encodeHTMLTrieRe(a, C) {
      let q = '';
      let re = 0;
      let ae;
      while ((ae = a.exec(C)) !== null) {
        const Ue = ae.index;
        q += C.substring(re, Ue);
        const lt = C.charCodeAt(Ue);
        let Pt = htmlTrie.get(lt);
        if (typeof Pt === 'object') {
          if (Ue + 1 < C.length) {
            const ae = C.charCodeAt(Ue + 1);
            const lt =
              typeof Pt.n === 'number'
                ? Pt.n === ae
                  ? Pt.o
                  : undefined
                : Pt.n.get(ae);
            if (lt !== undefined) {
              q += lt;
              re = a.lastIndex += 1;
              continue;
            }
          }
          Pt = Pt.v;
        }
        if (Pt !== undefined) {
          q += Pt;
          re = Ue + 1;
        } else {
          const ae = getCodePoint(C, Ue);
          q += `&#x${ae.toString(16)};`;
          re = a.lastIndex += Number(ae !== lt);
        }
      }
      return q + C.substr(re);
    }
    var Qn;
    (function (a) {
      a[(a['XML'] = 0)] = 'XML';
      a[(a['HTML'] = 1)] = 'HTML';
    })(Qn || (Qn = {}));
    var vn;
    (function (a) {
      a[(a['UTF8'] = 0)] = 'UTF8';
      a[(a['ASCII'] = 1)] = 'ASCII';
      a[(a['Extensive'] = 2)] = 'Extensive';
      a[(a['Attribute'] = 3)] = 'Attribute';
      a[(a['Text'] = 4)] = 'Text';
    })(vn || (vn = {}));
    function decode(a, C = Qn.XML) {
      const q = typeof C === 'number' ? C : C.level;
      if (q === Qn.HTML) {
        const q = typeof C === 'object' ? C.mode : undefined;
        return decodeHTML(a, q);
      }
      return decodeXML(a);
    }
    function decodeStrict(a, C = Qn.XML) {
      var q;
      const re = typeof C === 'number' ? { level: C } : C;
      (q = re.mode) !== null && q !== void 0
        ? q
        : (re.mode = DecodingMode.Strict);
      return decode(a, re);
    }
    function encode(a, C = Qn.XML) {
      const q = typeof C === 'number' ? { level: C } : C;
      if (q.mode === vn.UTF8) return escapeUTF8(a);
      if (q.mode === vn.Attribute) return escapeAttribute(a);
      if (q.mode === vn.Text) return escapeText(a);
      if (q.level === Qn.HTML) {
        if (q.mode === vn.ASCII) {
          return encodeNonAsciiHTML(a);
        }
        return encodeHTML(a);
      }
      return encodeXML(a);
    }
    const Sn = new Map(
      [
        'altGlyph',
        'altGlyphDef',
        'altGlyphItem',
        'animateColor',
        'animateMotion',
        'animateTransform',
        'clipPath',
        'feBlend',
        'feColorMatrix',
        'feComponentTransfer',
        'feComposite',
        'feConvolveMatrix',
        'feDiffuseLighting',
        'feDisplacementMap',
        'feDistantLight',
        'feDropShadow',
        'feFlood',
        'feFuncA',
        'feFuncB',
        'feFuncG',
        'feFuncR',
        'feGaussianBlur',
        'feImage',
        'feMerge',
        'feMergeNode',
        'feMorphology',
        'feOffset',
        'fePointLight',
        'feSpecularLighting',
        'feSpotLight',
        'feTile',
        'feTurbulence',
        'foreignObject',
        'glyphRef',
        'linearGradient',
        'radialGradient',
        'textPath'
      ].map((a) => [a.toLowerCase(), a])
    );
    const _n = new Map(
      [
        'definitionURL',
        'attributeName',
        'attributeType',
        'baseFrequency',
        'baseProfile',
        'calcMode',
        'clipPathUnits',
        'diffuseConstant',
        'edgeMode',
        'filterUnits',
        'glyphRef',
        'gradientTransform',
        'gradientUnits',
        'kernelMatrix',
        'kernelUnitLength',
        'keyPoints',
        'keySplines',
        'keyTimes',
        'lengthAdjust',
        'limitingConeAngle',
        'markerHeight',
        'markerUnits',
        'markerWidth',
        'maskContentUnits',
        'maskUnits',
        'numOctaves',
        'pathLength',
        'patternContentUnits',
        'patternTransform',
        'patternUnits',
        'pointsAtX',
        'pointsAtY',
        'pointsAtZ',
        'preserveAlpha',
        'preserveAspectRatio',
        'primitiveUnits',
        'refX',
        'refY',
        'repeatCount',
        'repeatDur',
        'requiredExtensions',
        'requiredFeatures',
        'specularConstant',
        'specularExponent',
        'spreadMethod',
        'startOffset',
        'stdDeviation',
        'stitchTiles',
        'surfaceScale',
        'systemLanguage',
        'tableValues',
        'targetX',
        'targetY',
        'textLength',
        'viewBox',
        'viewTarget',
        'xChannelSelector',
        'yChannelSelector',
        'zoomAndPan'
      ].map((a) => [a.toLowerCase(), a])
    );
    const Tn = new Set([
      'style',
      'script',
      'xmp',
      'iframe',
      'noembed',
      'noframes',
      'plaintext',
      'noscript'
    ]);
    function replaceQuotes(a) {
      return a.replace(/"/g, '&quot;');
    }
    function formatAttributes(a, C) {
      var q;
      if (!a) return;
      const re =
        ((q = C.encodeEntities) !== null && q !== void 0
          ? q
          : C.decodeEntities) === false
          ? replaceQuotes
          : C.xmlMode || C.encodeEntities !== 'utf8'
            ? escape_encodeXML
            : In;
      return Object.keys(a)
        .map((q) => {
          var ae, Ue;
          const lt = (ae = a[q]) !== null && ae !== void 0 ? ae : '';
          if (C.xmlMode === 'foreign') {
            q = (Ue = _n.get(q)) !== null && Ue !== void 0 ? Ue : q;
          }
          if (!C.emptyAttrs && !C.xmlMode && lt === '') {
            return q;
          }
          return `${q}="${re(lt)}"`;
        })
        .join(' ');
    }
    const kn = new Set([
      'area',
      'base',
      'basefont',
      'br',
      'col',
      'command',
      'embed',
      'frame',
      'hr',
      'img',
      'input',
      'isindex',
      'keygen',
      'link',
      'meta',
      'param',
      'source',
      'track',
      'wbr'
    ]);
    function render(a, C = {}) {
      const q = 'length' in a ? a : [a];
      let re = '';
      for (let a = 0; a < q.length; a++) {
        re += renderNode(q[a], C);
      }
      return re;
    }
    const Rn = render;
    function renderNode(a, C) {
      switch (a.type) {
        case nn:
          return render(a.children, C);
        case pn:
        case an:
          return renderDirective(a);
        case ln:
          return renderComment(a);
        case un:
          return renderCdata(a);
        case cn:
        case An:
        case dn:
          return renderTag(a, C);
        case on:
          return renderText(a, C);
      }
    }
    const Dn = new Set([
      'mi',
      'mo',
      'mn',
      'ms',
      'mtext',
      'annotation-xml',
      'foreignObject',
      'desc',
      'title'
    ]);
    const Nn = new Set(['svg', 'math']);
    function renderTag(a, C) {
      var q;
      if (C.xmlMode === 'foreign') {
        a.name = (q = Sn.get(a.name)) !== null && q !== void 0 ? q : a.name;
        if (a.parent && Dn.has(a.parent.name)) {
          C = { ...C, xmlMode: false };
        }
      }
      if (!C.xmlMode && Nn.has(a.name)) {
        C = { ...C, xmlMode: 'foreign' };
      }
      let re = `<${a.name}`;
      const ae = formatAttributes(a.attribs, C);
      if (ae) {
        re += ` ${ae}`;
      }
      if (
        a.children.length === 0 &&
        (C.xmlMode
          ? C.selfClosingTags !== false
          : C.selfClosingTags && kn.has(a.name))
      ) {
        if (!C.xmlMode) re += ' ';
        re += '/>';
      } else {
        re += '>';
        if (a.children.length > 0) {
          re += render(a.children, C);
        }
        if (C.xmlMode || !kn.has(a.name)) {
          re += `</${a.name}>`;
        }
      }
      return re;
    }
    function renderDirective(a) {
      return `<${a.data}>`;
    }
    function renderText(a, C) {
      var q;
      let re = a.data || '';
      if (
        ((q = C.encodeEntities) !== null && q !== void 0
          ? q
          : C.decodeEntities) !== false &&
        !(!C.xmlMode && a.parent && Tn.has(a.parent.name))
      ) {
        re =
          C.xmlMode || C.encodeEntities !== 'utf8'
            ? escape_encodeXML(re)
            : wn(re);
      }
      return re;
    }
    function renderCdata(a) {
      return `<![CDATA[${a.children[0].data}]]>`;
    }
    function renderComment(a) {
      return `\x3c!--${a.data}--\x3e`;
    }
    function getOuterHTML(a, C) {
      return Rn(a, C);
    }
    function getInnerHTML(a, C) {
      return hasChildren(a)
        ? a.children.map((a) => getOuterHTML(a, C)).join('')
        : '';
    }
    function getText(a) {
      if (Array.isArray(a)) return a.map(getText).join('');
      if (node_isTag(a)) return a.name === 'br' ? '\n' : getText(a.children);
      if (isCDATA(a)) return getText(a.children);
      if (isText(a)) return a.data;
      return '';
    }
    function textContent(a) {
      if (Array.isArray(a)) return a.map(textContent).join('');
      if (hasChildren(a) && !isComment(a)) {
        return textContent(a.children);
      }
      if (isText(a)) return a.data;
      return '';
    }
    function innerText(a) {
      if (Array.isArray(a)) return a.map(innerText).join('');
      if (hasChildren(a) && (a.type === sn.Tag || isCDATA(a))) {
        return innerText(a.children);
      }
      if (isText(a)) return a.data;
      return '';
    }
    function getChildren(a) {
      return hasChildren(a) ? a.children : [];
    }
    function getParent(a) {
      return a.parent || null;
    }
    function getSiblings(a) {
      const C = getParent(a);
      if (C != null) return getChildren(C);
      const q = [a];
      let { prev: re, next: ae } = a;
      while (re != null) {
        q.unshift(re);
        ({ prev: re } = re);
      }
      while (ae != null) {
        q.push(ae);
        ({ next: ae } = ae);
      }
      return q;
    }
    function getAttributeValue(a, C) {
      var q;
      return (q = a.attribs) === null || q === void 0 ? void 0 : q[C];
    }
    function hasAttrib(a, C) {
      return (
        a.attribs != null &&
        Object.prototype.hasOwnProperty.call(a.attribs, C) &&
        a.attribs[C] != null
      );
    }
    function getName(a) {
      return a.name;
    }
    function nextElementSibling(a) {
      let { next: C } = a;
      while (C !== null && !node_isTag(C)) ({ next: C } = C);
      return C;
    }
    function prevElementSibling(a) {
      let { prev: C } = a;
      while (C !== null && !node_isTag(C)) ({ prev: C } = C);
      return C;
    }
    function removeElement(a) {
      if (a.prev) a.prev.next = a.next;
      if (a.next) a.next.prev = a.prev;
      if (a.parent) {
        const C = a.parent.children;
        const q = C.lastIndexOf(a);
        if (q >= 0) {
          C.splice(q, 1);
        }
      }
      a.next = null;
      a.prev = null;
      a.parent = null;
    }
    function replaceElement(a, C) {
      const q = (C.prev = a.prev);
      if (q) {
        q.next = C;
      }
      const re = (C.next = a.next);
      if (re) {
        re.prev = C;
      }
      const ae = (C.parent = a.parent);
      if (ae) {
        const q = ae.children;
        q[q.lastIndexOf(a)] = C;
        a.parent = null;
      }
    }
    function appendChild(a, C) {
      removeElement(C);
      C.next = null;
      C.parent = a;
      if (a.children.push(C) > 1) {
        const q = a.children[a.children.length - 2];
        q.next = C;
        C.prev = q;
      } else {
        C.prev = null;
      }
    }
    function append(a, C) {
      removeElement(C);
      const { parent: q } = a;
      const re = a.next;
      C.next = re;
      C.prev = a;
      a.next = C;
      C.parent = q;
      if (re) {
        re.prev = C;
        if (q) {
          const a = q.children;
          a.splice(a.lastIndexOf(re), 0, C);
        }
      } else if (q) {
        q.children.push(C);
      }
    }
    function prependChild(a, C) {
      removeElement(C);
      C.parent = a;
      C.prev = null;
      if (a.children.unshift(C) !== 1) {
        const q = a.children[1];
        q.prev = C;
        C.next = q;
      } else {
        C.next = null;
      }
    }
    function prepend(a, C) {
      removeElement(C);
      const { parent: q } = a;
      if (q) {
        const re = q.children;
        re.splice(re.indexOf(a), 0, C);
      }
      if (a.prev) {
        a.prev.next = C;
      }
      C.parent = q;
      C.prev = a.prev;
      C.next = a;
      a.prev = C;
    }
    function filter(a, C, q = true, re = Infinity) {
      return find(a, Array.isArray(C) ? C : [C], q, re);
    }
    function find(a, C, q, re) {
      const ae = [];
      const Ue = [C];
      const lt = [0];
      for (;;) {
        if (lt[0] >= Ue[0].length) {
          if (lt.length === 1) {
            return ae;
          }
          Ue.shift();
          lt.shift();
          continue;
        }
        const C = Ue[0][lt[0]++];
        if (a(C)) {
          ae.push(C);
          if (--re <= 0) return ae;
        }
        if (q && hasChildren(C) && C.children.length > 0) {
          lt.unshift(0);
          Ue.unshift(C.children);
        }
      }
    }
    function findOneChild(a, C) {
      return C.find(a);
    }
    function findOne(a, C, q = true) {
      let re = null;
      for (let ae = 0; ae < C.length && !re; ae++) {
        const Ue = C[ae];
        if (!node_isTag(Ue)) {
          continue;
        } else if (a(Ue)) {
          re = Ue;
        } else if (q && Ue.children.length > 0) {
          re = findOne(a, Ue.children, true);
        }
      }
      return re;
    }
    function existsOne(a, C) {
      return C.some((C) => node_isTag(C) && (a(C) || existsOne(a, C.children)));
    }
    function findAll(a, C) {
      const q = [];
      const re = [C];
      const ae = [0];
      for (;;) {
        if (ae[0] >= re[0].length) {
          if (re.length === 1) {
            return q;
          }
          re.shift();
          ae.shift();
          continue;
        }
        const C = re[0][ae[0]++];
        if (!node_isTag(C)) continue;
        if (a(C)) q.push(C);
        if (C.children.length > 0) {
          ae.unshift(0);
          re.unshift(C.children);
        }
      }
    }
    const Ln = {
      tag_name(a) {
        if (typeof a === 'function') {
          return (C) => node_isTag(C) && a(C.name);
        } else if (a === '*') {
          return node_isTag;
        }
        return (C) => node_isTag(C) && C.name === a;
      },
      tag_type(a) {
        if (typeof a === 'function') {
          return (C) => a(C.type);
        }
        return (C) => C.type === a;
      },
      tag_contains(a) {
        if (typeof a === 'function') {
          return (C) => isText(C) && a(C.data);
        }
        return (C) => isText(C) && C.data === a;
      }
    };
    function getAttribCheck(a, C) {
      if (typeof C === 'function') {
        return (q) => node_isTag(q) && C(q.attribs[a]);
      }
      return (q) => node_isTag(q) && q.attribs[a] === C;
    }
    function combineFuncs(a, C) {
      return (q) => a(q) || C(q);
    }
    function compileTest(a) {
      const C = Object.keys(a).map((C) => {
        const q = a[C];
        return Object.prototype.hasOwnProperty.call(Ln, C)
          ? Ln[C](q)
          : getAttribCheck(C, q);
      });
      return C.length === 0 ? null : C.reduce(combineFuncs);
    }
    function testElement(a, C) {
      const q = compileTest(a);
      return q ? q(C) : true;
    }
    function getElements(a, C, q, re = Infinity) {
      const ae = compileTest(a);
      return ae ? filter(ae, C, q, re) : [];
    }
    function getElementById(a, C, q = true) {
      if (!Array.isArray(C)) C = [C];
      return findOne(getAttribCheck('id', a), C, q);
    }
    function getElementsByTagName(a, C, q = true, re = Infinity) {
      return filter(Ln['tag_name'](a), C, q, re);
    }
    function getElementsByTagType(a, C, q = true, re = Infinity) {
      return filter(Ln['tag_type'](a), C, q, re);
    }
    function removeSubsets(a) {
      let C = a.length;
      while (--C >= 0) {
        const q = a[C];
        if (C > 0 && a.lastIndexOf(q, C - 1) >= 0) {
          a.splice(C, 1);
          continue;
        }
        for (let re = q.parent; re; re = re.parent) {
          if (a.includes(re)) {
            a.splice(C, 1);
            break;
          }
        }
      }
      return a;
    }
    var Fn;
    (function (a) {
      a[(a['DISCONNECTED'] = 1)] = 'DISCONNECTED';
      a[(a['PRECEDING'] = 2)] = 'PRECEDING';
      a[(a['FOLLOWING'] = 4)] = 'FOLLOWING';
      a[(a['CONTAINS'] = 8)] = 'CONTAINS';
      a[(a['CONTAINED_BY'] = 16)] = 'CONTAINED_BY';
    })(Fn || (Fn = {}));
    function compareDocumentPosition(a, C) {
      const q = [];
      const re = [];
      if (a === C) {
        return 0;
      }
      let ae = hasChildren(a) ? a : a.parent;
      while (ae) {
        q.unshift(ae);
        ae = ae.parent;
      }
      ae = hasChildren(C) ? C : C.parent;
      while (ae) {
        re.unshift(ae);
        ae = ae.parent;
      }
      const Ue = Math.min(q.length, re.length);
      let lt = 0;
      while (lt < Ue && q[lt] === re[lt]) {
        lt++;
      }
      if (lt === 0) {
        return Fn.DISCONNECTED;
      }
      const Pt = q[lt - 1];
      const Wt = Pt.children;
      const Ar = q[lt];
      const Er = re[lt];
      if (Wt.indexOf(Ar) > Wt.indexOf(Er)) {
        if (Pt === C) {
          return Fn.FOLLOWING | Fn.CONTAINED_BY;
        }
        return Fn.FOLLOWING;
      }
      if (Pt === a) {
        return Fn.PRECEDING | Fn.CONTAINS;
      }
      return Fn.PRECEDING;
    }
    function uniqueSort(a) {
      a = a.filter((a, C, q) => !q.includes(a, C + 1));
      a.sort((a, C) => {
        const q = compareDocumentPosition(a, C);
        if (q & Fn.PRECEDING) {
          return -1;
        } else if (q & Fn.FOLLOWING) {
          return 1;
        }
        return 0;
      });
      return a;
    }
    function getFeed(a) {
      const C = getOneElement(isValidFeed, a);
      return !C ? null : C.name === 'feed' ? getAtomFeed(C) : getRssFeed(C);
    }
    function getAtomFeed(a) {
      var C;
      const q = a.children;
      const re = {
        type: 'atom',
        items: getElementsByTagName('entry', q).map((a) => {
          var C;
          const { children: q } = a;
          const re = { media: getMediaElements(q) };
          addConditionally(re, 'id', 'id', q);
          addConditionally(re, 'title', 'title', q);
          const ae =
            (C = getOneElement('link', q)) === null || C === void 0
              ? void 0
              : C.attribs['href'];
          if (ae) {
            re.link = ae;
          }
          const Ue = feeds_fetch('summary', q) || feeds_fetch('content', q);
          if (Ue) {
            re.description = Ue;
          }
          const lt = feeds_fetch('updated', q);
          if (lt) {
            re.pubDate = new Date(lt);
          }
          return re;
        })
      };
      addConditionally(re, 'id', 'id', q);
      addConditionally(re, 'title', 'title', q);
      const ae =
        (C = getOneElement('link', q)) === null || C === void 0
          ? void 0
          : C.attribs['href'];
      if (ae) {
        re.link = ae;
      }
      addConditionally(re, 'description', 'subtitle', q);
      const Ue = feeds_fetch('updated', q);
      if (Ue) {
        re.updated = new Date(Ue);
      }
      addConditionally(re, 'author', 'email', q, true);
      return re;
    }
    function getRssFeed(a) {
      var C, q;
      const re =
        (q =
          (C = getOneElement('channel', a.children)) === null || C === void 0
            ? void 0
            : C.children) !== null && q !== void 0
          ? q
          : [];
      const ae = {
        type: a.name.substr(0, 3),
        id: '',
        items: getElementsByTagName('item', a.children).map((a) => {
          const { children: C } = a;
          const q = { media: getMediaElements(C) };
          addConditionally(q, 'id', 'guid', C);
          addConditionally(q, 'title', 'title', C);
          addConditionally(q, 'link', 'link', C);
          addConditionally(q, 'description', 'description', C);
          const re = feeds_fetch('pubDate', C) || feeds_fetch('dc:date', C);
          if (re) q.pubDate = new Date(re);
          return q;
        })
      };
      addConditionally(ae, 'title', 'title', re);
      addConditionally(ae, 'link', 'link', re);
      addConditionally(ae, 'description', 'description', re);
      const Ue = feeds_fetch('lastBuildDate', re);
      if (Ue) {
        ae.updated = new Date(Ue);
      }
      addConditionally(ae, 'author', 'managingEditor', re, true);
      return ae;
    }
    const Mn = ['url', 'type', 'lang'];
    const Pn = [
      'fileSize',
      'bitrate',
      'framerate',
      'samplingrate',
      'channels',
      'duration',
      'height',
      'width'
    ];
    function getMediaElements(a) {
      return getElementsByTagName('media:content', a).map((a) => {
        const { attribs: C } = a;
        const q = { medium: C['medium'], isDefault: !!C['isDefault'] };
        for (const a of Mn) {
          if (C[a]) {
            q[a] = C[a];
          }
        }
        for (const a of Pn) {
          if (C[a]) {
            q[a] = parseInt(C[a], 10);
          }
        }
        if (C['expression']) {
          q.expression = C['expression'];
        }
        return q;
      });
    }
    function getOneElement(a, C) {
      return getElementsByTagName(a, C, true, 1)[0];
    }
    function feeds_fetch(a, C, q = false) {
      return textContent(getElementsByTagName(a, C, q, 1)).trim();
    }
    function addConditionally(a, C, q, re, ae = false) {
      const Ue = feeds_fetch(q, re, ae);
      if (Ue) a[C] = Ue;
    }
    function isValidFeed(a) {
      return a === 'rss' || a === 'feed' || a === 'rdf:RDF';
    }
    function parseDocument(a, C) {
      const q = new DomHandler(undefined, C);
      new Parser(q, C).end(a);
      return q.root;
    }
    function parseDOM(a, C) {
      return parseDocument(a, C).children;
    }
    function createDocumentStream(a, C, q) {
      const re = new DomHandler((C) => a(C, re.root), C, q);
      return new Parser(re, C);
    }
    function createDomStream(a, C, q) {
      const re = new DomHandler(a, C, q);
      return new Parser(re, C);
    }
    const On = { xmlMode: true };
    function parseFeed(a, C = On) {
      return getFeed(parseDOM(a, C));
    }
    const xn = -1;
    const Un = 1;
    const Gn = 2;
    const Hn = 3;
    const qn = 4;
    const Vn = 8;
    const Wn = 9;
    const Yn = 10;
    const jn = 11;
    const Jn = new Set([
      'ARTICLE',
      'ASIDE',
      'BLOCKQUOTE',
      'BODY',
      'BR',
      'BUTTON',
      'CANVAS',
      'CAPTION',
      'COL',
      'COLGROUP',
      'DD',
      'DIV',
      'DL',
      'DT',
      'EMBED',
      'FIELDSET',
      'FIGCAPTION',
      'FIGURE',
      'FOOTER',
      'FORM',
      'H1',
      'H2',
      'H3',
      'H4',
      'H5',
      'H6',
      'LI',
      'UL',
      'OL',
      'P'
    ]);
    const zn = -1;
    const $n = 1;
    const Kn = 4;
    const Xn = 8;
    const Zn = 128;
    const eo = 1;
    const to = 2;
    const ro = 4;
    const so = 8;
    const no = 16;
    const oo = 32;
    const ao = 'http://www.w3.org/2000/svg';
    const {
      assign: io,
      create: lo,
      defineProperties: co,
      entries: Ao,
      getOwnPropertyDescriptors: uo,
      keys: po,
      setPrototypeOf: ho
    } = Object;
    const mo = String;
    const getEnd = (a) => (a.nodeType === Un ? a[fs] : a);
    const ignoreCase = ({ ownerDocument: a }) => a[bs].ignoreCase;
    const knownAdjacent = (a, C) => {
      a[Is] = C;
      C[Bs] = a;
    };
    const utils_knownBoundaries = (a, C, q) => {
      knownAdjacent(a, C);
      knownAdjacent(getEnd(C), q);
    };
    const knownSegment = (a, C, q, re) => {
      knownAdjacent(a, C);
      knownAdjacent(getEnd(q), re);
    };
    const utils_knownSiblings = (a, C, q) => {
      knownAdjacent(a, C);
      knownAdjacent(C, q);
    };
    const localCase = ({ localName: a, ownerDocument: C }) =>
      C[bs].ignoreCase ? a.toUpperCase() : a;
    const setAdjacent = (a, C) => {
      if (a) a[Is] = C;
      if (C) C[Bs] = a;
    };
    const fo = new WeakMap();
    let go = false;
    const Eo = new WeakMap();
    const Co = new WeakMap();
    const attributeChangedCallback = (a, C, q, re) => {
      if (
        go &&
        Co.has(a) &&
        a.attributeChangedCallback &&
        a.constructor.observedAttributes.includes(C)
      ) {
        a.attributeChangedCallback(C, q, re);
      }
    };
    const createTrigger = (a, C) => (q) => {
      if (Co.has(q)) {
        const re = Co.get(q);
        if (re.connected !== C && q.isConnected === C) {
          re.connected = C;
          if (a in q) q[a]();
        }
      }
    };
    const bo = createTrigger('connectedCallback', true);
    const connectedCallback = (a) => {
      if (go) {
        bo(a);
        if (fo.has(a)) a = fo.get(a).shadowRoot;
        let { [Is]: C, [fs]: q } = a;
        while (C !== q) {
          if (C.nodeType === Un) bo(C);
          C = C[Is];
        }
      }
    };
    const yo = createTrigger('disconnectedCallback', false);
    const disconnectedCallback = (a) => {
      if (go) {
        yo(a);
        if (fo.has(a)) a = fo.get(a).shadowRoot;
        let { [Is]: C, [fs]: q } = a;
        while (C !== q) {
          if (C.nodeType === Un) yo(C);
          C = C[Is];
        }
      }
    };
    class CustomElementRegistry {
      constructor(a) {
        this.ownerDocument = a;
        this.registry = new Map();
        this.waiting = new Map();
        this.active = false;
      }
      define(a, C, q = {}) {
        const { ownerDocument: re, registry: ae, waiting: Ue } = this;
        if (ae.has(a)) throw new Error('unable to redefine ' + a);
        if (Eo.has(C))
          throw new Error('unable to redefine the same class: ' + C);
        this.active = go = true;
        const { extends: lt } = q;
        Eo.set(C, {
          ownerDocument: re,
          options: { is: lt ? a : '' },
          localName: lt || a
        });
        const Pt = lt
          ? (C) => C.localName === lt && C.getAttribute('is') === a
          : (C) => C.localName === a;
        ae.set(a, { Class: C, check: Pt });
        if (Ue.has(a)) {
          for (const q of Ue.get(a)) q(C);
          Ue.delete(a);
        }
        re.querySelectorAll(lt ? `${lt}[is="${a}"]` : a).forEach(
          this.upgrade,
          this
        );
      }
      upgrade(a) {
        if (Co.has(a)) return;
        const { ownerDocument: C, registry: q } = this;
        const re = a.getAttribute('is') || a.localName;
        if (q.has(re)) {
          const { Class: ae, check: Ue } = q.get(re);
          if (Ue(a)) {
            const { attributes: q, isConnected: Ue } = a;
            for (const C of q) a.removeAttributeNode(C);
            const lt = Ao(a);
            for (const [C] of lt) delete a[C];
            ho(a, ae.prototype);
            C[Ts] = { element: a, values: lt };
            new ae(C, re);
            Co.set(a, { connected: Ue });
            for (const C of q) a.setAttributeNode(C);
            if (Ue && a.connectedCallback) a.connectedCallback();
          }
        }
      }
      whenDefined(a) {
        const { registry: C, waiting: q } = this;
        return new Promise((re) => {
          if (C.has(a)) re(C.get(a).Class);
          else {
            if (!q.has(a)) q.set(a, []);
            q.get(a).push(re);
          }
        });
      }
      get(a) {
        const C = this.registry.get(a);
        return C && C.Class;
      }
      getName(a) {
        if (Eo.has(a)) {
          const { localName: C } = Eo.get(a);
          return C;
        }
        return null;
      }
    }
    const { Parser: Io } = q;
    let wo = true;
    const parse_from_string_append = (a, C, q) => {
      const re = a[fs];
      C.parentNode = a;
      utils_knownBoundaries(re[Bs], C, re);
      if (q && C.nodeType === Un) connectedCallback(C);
      return C;
    };
    const attribute = (a, C, q, re, ae) => {
      q[ks] = re;
      q.ownerElement = a;
      utils_knownSiblings(C[Bs], q, C);
      if (q.name === 'class') a.className = re;
      if (ae) attributeChangedCallback(a, q.name, null, re);
    };
    const isNotParsing = () => wo;
    const parseFromString = (a, C, q) => {
      const { active: re, registry: ae } = a[ds];
      let Ue = a;
      let lt = null;
      let Pt = false;
      wo = false;
      const Wt = new Io(
        {
          onprocessinginstruction(C, q) {
            if (C.toLowerCase() === '!doctype')
              a.doctype = q.slice(C.length).trim();
          },
          onopentag(q, Pt) {
            let Wt = true;
            if (C) {
              if (lt) {
                Ue = parse_from_string_append(Ue, a.createElementNS(ao, q), re);
                Ue.ownerSVGElement = lt;
                Wt = false;
              } else if (q === 'svg' || q === 'SVG') {
                lt = a.createElementNS(ao, q);
                Ue = parse_from_string_append(Ue, lt, re);
                Wt = false;
              } else if (re) {
                const a = q.includes('-') ? q : Pt.is || '';
                if (a && ae.has(a)) {
                  const { Class: C } = ae.get(a);
                  Ue = parse_from_string_append(Ue, new C(), re);
                  delete Pt.is;
                  Wt = false;
                }
              }
            }
            if (Wt)
              Ue = parse_from_string_append(Ue, a.createElement(q), false);
            let Ar = Ue[fs];
            for (const C of po(Pt))
              attribute(Ue, Ar, a.createAttribute(C), Pt[C], re);
          },
          oncomment(C) {
            parse_from_string_append(Ue, a.createComment(C), re);
          },
          ontext(C) {
            if (Pt) {
              parse_from_string_append(Ue, a.createCDATASection(C), re);
            } else {
              parse_from_string_append(Ue, a.createTextNode(C), re);
            }
          },
          oncdatastart() {
            Pt = true;
          },
          oncdataend() {
            Pt = false;
          },
          onclosetag() {
            if (C && Ue === lt) lt = null;
            Ue = Ue.parentNode;
          }
        },
        { lowerCaseAttributeNames: false, decodeEntities: true, xmlMode: !C }
      );
      Wt.write(q);
      Wt.end();
      wo = true;
      return a;
    };
    const Bo = new Map();
    const registerHTMLClass = (a, C) => {
      for (const q of [].concat(a)) {
        Bo.set(q, C);
        Bo.set(q.toUpperCase(), C);
      }
    };
    var Qo = __nccwpck_require__(551);
    const loopSegment = ({ [Is]: a, [fs]: C }, q) => {
      while (a !== C) {
        switch (a.nodeType) {
          case Gn:
            attrAsJSON(a, q);
            break;
          case Hn:
          case Vn:
          case qn:
            characterDataAsJSON(a, q);
            break;
          case Un:
            elementAsJSON(a, q);
            a = getEnd(a);
            break;
          case Yn:
            documentTypeAsJSON(a, q);
            break;
        }
        a = a[Is];
      }
      const re = q.length - 1;
      const ae = q[re];
      if (typeof ae === 'number' && ae < 0) q[re] += xn;
      else q.push(xn);
    };
    const attrAsJSON = (a, C) => {
      C.push(Gn, a.name);
      const q = a[ks].trim();
      if (q) C.push(q);
    };
    const characterDataAsJSON = (a, C) => {
      const q = a[ks];
      if (q.trim()) C.push(a.nodeType, q);
    };
    const nonElementAsJSON = (a, C) => {
      C.push(a.nodeType);
      loopSegment(a, C);
    };
    const documentTypeAsJSON = ({ name: a, publicId: C, systemId: q }, re) => {
      re.push(Yn, a);
      if (C) re.push(C);
      if (q) re.push(q);
    };
    const elementAsJSON = (a, C) => {
      C.push(Un, a.localName);
      loopSegment(a, C);
    };
    const createRecord = (a, C, q, re, ae, Ue) => ({
      type: a,
      target: C,
      addedNodes: q,
      removedNodes: re,
      attributeName: ae,
      oldValue: Ue
    });
    const queueAttribute = (a, C, q, re, ae, Ue) => {
      if (!re || re.includes(q)) {
        const { callback: re, records: lt, scheduled: Pt } = a;
        lt.push(createRecord('attributes', C, [], [], q, ae ? Ue : void 0));
        if (!Pt) {
          a.scheduled = true;
          Promise.resolve().then(() => {
            a.scheduled = false;
            re(lt.splice(0), a);
          });
        }
      }
    };
    const mutation_observer_attributeChangedCallback = (a, C, q) => {
      const { ownerDocument: re } = a;
      const { active: ae, observers: Ue } = re[ys];
      if (ae) {
        for (const ae of Ue) {
          for (const [
            Ue,
            {
              childList: lt,
              subtree: Pt,
              attributes: Wt,
              attributeFilter: Ar,
              attributeOldValue: Er
            }
          ] of ae.nodes) {
            if (lt) {
              if (
                (Pt && (Ue === re || Ue.contains(a))) ||
                (!Pt && Ue.children.includes(a))
              ) {
                queueAttribute(ae, a, C, Ar, Er, q);
                break;
              }
            } else if (Wt && Ue === a) {
              queueAttribute(ae, a, C, Ar, Er, q);
              break;
            }
          }
        }
      }
    };
    const moCallback = (a, C) => {
      const { ownerDocument: q } = a;
      const { active: re, observers: ae } = q[ys];
      if (re) {
        for (const re of ae) {
          for (const [
            ae,
            { subtree: Ue, childList: lt, characterData: Pt }
          ] of re.nodes) {
            if (lt) {
              if (
                (C && (ae === C || (Ue && ae.contains(C)))) ||
                (!C &&
                  ((Ue && (ae === q || ae.contains(a))) ||
                    (!Ue && ae[Pt ? 'childNodes' : 'children'].includes(a))))
              ) {
                const { callback: q, records: Ue, scheduled: lt } = re;
                Ue.push(
                  createRecord('childList', ae, C ? [] : [a], C ? [a] : [])
                );
                if (!lt) {
                  re.scheduled = true;
                  Promise.resolve().then(() => {
                    re.scheduled = false;
                    q(Ue.splice(0), re);
                  });
                }
                break;
              }
            }
          }
        }
      }
    };
    class MutationObserverClass {
      constructor(a) {
        const C = new Set();
        this.observers = C;
        this.active = false;
        this.class = class MutationObserver {
          constructor(a) {
            this.callback = a;
            this.nodes = new Map();
            this.records = [];
            this.scheduled = false;
          }
          disconnect() {
            this.records.splice(0);
            this.nodes.clear();
            C.delete(this);
            a[ys].active = !!C.size;
          }
          observe(
            q,
            re = {
              subtree: false,
              childList: false,
              attributes: false,
              attributeFilter: null,
              attributeOldValue: false,
              characterData: false
            }
          ) {
            if ('attributeOldValue' in re || 'attributeFilter' in re)
              re.attributes = true;
            re.childList = !!re.childList;
            re.subtree = !!re.subtree;
            this.nodes.set(q, re);
            C.add(this);
            a[ys].active = true;
          }
          takeRecords() {
            return this.records.splice(0);
          }
        };
      }
    }
    const vo = new Set([
      'allowfullscreen',
      'allowpaymentrequest',
      'async',
      'autofocus',
      'autoplay',
      'checked',
      'class',
      'contenteditable',
      'controls',
      'default',
      'defer',
      'disabled',
      'draggable',
      'formnovalidate',
      'hidden',
      'id',
      'ismap',
      'itemscope',
      'loop',
      'multiple',
      'muted',
      'nomodule',
      'novalidate',
      'open',
      'playsinline',
      'readonly',
      'required',
      'reversed',
      'selected',
      'style',
      'truespeed'
    ]);
    const setAttribute = (a, C) => {
      const { [ks]: q, name: re } = C;
      C.ownerElement = a;
      utils_knownSiblings(a, C, a[Is]);
      if (re === 'class') a.className = q;
      mutation_observer_attributeChangedCallback(a, re, null);
      attributeChangedCallback(a, re, null, q);
    };
    const removeAttribute = (a, C) => {
      const { [ks]: q, name: re } = C;
      knownAdjacent(C[Bs], C[Is]);
      C.ownerElement = C[Bs] = C[Is] = null;
      if (re === 'class') a[As] = null;
      mutation_observer_attributeChangedCallback(a, re, q);
      attributeChangedCallback(a, re, q, null);
    };
    const So = {
      get(a, C) {
        return a.hasAttribute(C);
      },
      set(a, C, q) {
        if (q) a.setAttribute(C, '');
        else a.removeAttribute(C);
      }
    };
    const _o = {
      get(a, C) {
        return parseFloat(a.getAttribute(C) || 0);
      },
      set(a, C, q) {
        a.setAttribute(C, q);
      }
    };
    const To = {
      get(a, C) {
        return a.getAttribute(C) || '';
      },
      set(a, C, q) {
        a.setAttribute(C, q);
      }
    };
    const ko = new WeakMap();
    function dispatch(a, C) {
      if (typeof C === 'function') C.call(a.target, a);
      else C.handleEvent(a);
      return a._stopImmediatePropagationFlag;
    }
    function invokeListeners({ currentTarget: a, target: C }) {
      const q = ko.get(a);
      if (q && q.has(this.type)) {
        const re = q.get(this.type);
        if (a === C) {
          this.eventPhase = this.AT_TARGET;
        } else {
          this.eventPhase = this.BUBBLING_PHASE;
        }
        this.currentTarget = a;
        this.target = C;
        for (const [a, C] of re) {
          if (C && C.once) re.delete(a);
          if (dispatch(this, a)) break;
        }
        delete this.currentTarget;
        delete this.target;
        return this.cancelBubble;
      }
    }
    class DOMEventTarget {
      constructor() {
        ko.set(this, new Map());
      }
      _getParent() {
        return null;
      }
      addEventListener(a, C, q) {
        const re = ko.get(this);
        if (!re.has(a)) re.set(a, new Map());
        re.get(a).set(C, q);
      }
      removeEventListener(a, C) {
        const q = ko.get(this);
        if (q.has(a)) {
          const re = q.get(a);
          if (re.delete(C) && !re.size) q.delete(a);
        }
      }
      dispatchEvent(a) {
        let C = this;
        a.eventPhase = a.CAPTURING_PHASE;
        while (C) {
          if (C.dispatchEvent) a._path.push({ currentTarget: C, target: this });
          C = a.bubbles && C._getParent && C._getParent();
        }
        a._path.some(invokeListeners, a);
        a._path = [];
        a.eventPhase = a.NONE;
        return !a.defaultPrevented;
      }
    }
    class NodeList extends Array {
      item(a) {
        return a < this.length ? this[a] : null;
      }
    }
    const getParentNodeCount = ({ parentNode: a }) => {
      let C = 0;
      while (a) {
        C++;
        a = a.parentNode;
      }
      return C;
    };
    class node_Node extends DOMEventTarget {
      static get ELEMENT_NODE() {
        return Un;
      }
      static get ATTRIBUTE_NODE() {
        return Gn;
      }
      static get TEXT_NODE() {
        return Hn;
      }
      static get CDATA_SECTION_NODE() {
        return qn;
      }
      static get COMMENT_NODE() {
        return Vn;
      }
      static get DOCUMENT_NODE() {
        return Wn;
      }
      static get DOCUMENT_FRAGMENT_NODE() {
        return jn;
      }
      static get DOCUMENT_TYPE_NODE() {
        return Yn;
      }
      constructor(a, C, q) {
        super();
        this.ownerDocument = a;
        this.localName = C;
        this.nodeType = q;
        this.parentNode = null;
        this[Is] = null;
        this[Bs] = null;
      }
      get ELEMENT_NODE() {
        return Un;
      }
      get ATTRIBUTE_NODE() {
        return Gn;
      }
      get TEXT_NODE() {
        return Hn;
      }
      get CDATA_SECTION_NODE() {
        return qn;
      }
      get COMMENT_NODE() {
        return Vn;
      }
      get DOCUMENT_NODE() {
        return Wn;
      }
      get DOCUMENT_FRAGMENT_NODE() {
        return jn;
      }
      get DOCUMENT_TYPE_NODE() {
        return Yn;
      }
      get baseURI() {
        const a = this.nodeType === Wn ? this : this.ownerDocument;
        if (a) {
          const C = a.querySelector('base');
          if (C) return C.getAttribute('href');
          const { location: q } = a.defaultView;
          if (q) return q.href;
        }
        return null;
      }
      get isConnected() {
        return false;
      }
      get nodeName() {
        return this.localName;
      }
      get parentElement() {
        return null;
      }
      get previousSibling() {
        return null;
      }
      get previousElementSibling() {
        return null;
      }
      get nextSibling() {
        return null;
      }
      get nextElementSibling() {
        return null;
      }
      get childNodes() {
        return new NodeList();
      }
      get firstChild() {
        return null;
      }
      get lastChild() {
        return null;
      }
      get nodeValue() {
        return null;
      }
      set nodeValue(a) {}
      get textContent() {
        return null;
      }
      set textContent(a) {}
      normalize() {}
      cloneNode() {
        return null;
      }
      contains() {
        return false;
      }
      insertBefore(a, C) {
        return a;
      }
      appendChild(a) {
        return a;
      }
      replaceChild(a, C) {
        return C;
      }
      removeChild(a) {
        return a;
      }
      toString() {
        return '';
      }
      hasChildNodes() {
        return !!this.lastChild;
      }
      isSameNode(a) {
        return this === a;
      }
      compareDocumentPosition(a) {
        let C = 0;
        if (this !== a) {
          let q = getParentNodeCount(this);
          let re = getParentNodeCount(a);
          if (q < re) {
            C += ro;
            if (this.contains(a)) C += no;
          } else if (re < q) {
            C += to;
            if (a.contains(this)) C += so;
          } else if (q && re) {
            const { childNodes: q } = this.parentNode;
            if (q.indexOf(this) < q.indexOf(a)) C += ro;
            else C += to;
          }
          if (!q || !re) {
            C += oo;
            C += eo;
          }
        }
        return C;
      }
      isEqualNode(a) {
        if (this === a) return true;
        if (this.nodeType === a.nodeType) {
          switch (this.nodeType) {
            case Wn:
            case jn: {
              const C = this.childNodes;
              const q = a.childNodes;
              return (
                C.length === q.length && C.every((a, C) => a.isEqualNode(q[C]))
              );
            }
          }
          return this.toString() === a.toString();
        }
        return false;
      }
      _getParent() {
        return this.parentNode;
      }
      getRootNode() {
        let a = this;
        while (a.parentNode) a = a.parentNode;
        return a;
      }
    }
    const { replace: Ro } = '';
    const Do = /[<>&\xA0]/g;
    const No = { ' ': '&#160;', '&': '&amp;', '<': '&lt;', '>': '&gt;' };
    const pe = (a) => No[a];
    const text_escaper_escape = (a) => Ro.call(a, Do, pe);
    const Lo = /"/g;
    class attr_Attr extends node_Node {
      constructor(a, C, q = '') {
        super(a, C, Gn);
        this.ownerElement = null;
        this.name = mo(C);
        this[ks] = mo(q);
        this[cs] = false;
      }
      get value() {
        return this[ks];
      }
      set value(a) {
        const { [ks]: C, name: q, ownerElement: re } = this;
        this[ks] = mo(a);
        this[cs] = true;
        if (re) {
          mutation_observer_attributeChangedCallback(re, q, C);
          attributeChangedCallback(re, q, C, this[ks]);
        }
      }
      cloneNode() {
        const { ownerDocument: a, name: C, [ks]: q } = this;
        return new attr_Attr(a, C, q);
      }
      toString() {
        const { name: a, [ks]: C } = this;
        if (vo.has(a) && !C) {
          return ignoreCase(this) ? a : `${a}=""`;
        }
        const q = (ignoreCase(this) ? C : text_escaper_escape(C)).replace(
          Lo,
          '&quot;'
        );
        return `${a}="${q}"`;
      }
      toJSON() {
        const a = [];
        attrAsJSON(this, a);
        return a;
      }
    }
    const isConnected = ({ ownerDocument: a, parentNode: C }) => {
      while (C) {
        if (C === a) return true;
        C = C.parentNode || C.host;
      }
      return false;
    };
    const parentElement = ({ parentNode: a }) => {
      if (a) {
        switch (a.nodeType) {
          case Wn:
          case jn:
            return null;
        }
      }
      return a;
    };
    const previousSibling = ({ [Bs]: a }) => {
      switch (a ? a.nodeType : 0) {
        case xn:
          return a[Ss];
        case Hn:
        case Vn:
        case qn:
          return a;
      }
      return null;
    };
    const nextSibling = (a) => {
      const C = getEnd(a)[Is];
      return C && (C.nodeType === xn ? null : C);
    };
    const non_document_type_child_node_nextElementSibling = (a) => {
      let C = nextSibling(a);
      while (C && C.nodeType !== Un) C = nextSibling(C);
      return C;
    };
    const previousElementSibling = (a) => {
      let C = previousSibling(a);
      while (C && C.nodeType !== Un) C = previousSibling(C);
      return C;
    };
    const asFragment = (a, C) => {
      const q = a.createDocumentFragment();
      q.append(...C);
      return q;
    };
    const before = (a, C) => {
      const { ownerDocument: q, parentNode: re } = a;
      if (re) re.insertBefore(asFragment(q, C), a);
    };
    const after = (a, C) => {
      const { ownerDocument: q, parentNode: re } = a;
      if (re) re.insertBefore(asFragment(q, C), getEnd(a)[Is]);
    };
    const replaceWith = (a, C) => {
      const { ownerDocument: q, parentNode: re } = a;
      if (re) {
        if (C.includes(a)) replaceWith(a, [(a = a.cloneNode())]);
        re.insertBefore(asFragment(q, C), a);
        a.remove();
      }
    };
    const remove = (a, C, q) => {
      const { parentNode: re, nodeType: ae } = C;
      if (a || q) {
        setAdjacent(a, q);
        C[Bs] = null;
        getEnd(C)[Is] = null;
      }
      if (re) {
        C.parentNode = null;
        moCallback(C, re);
        if (ae === Un) disconnectedCallback(C);
      }
    };
    class CharacterData extends node_Node {
      constructor(a, C, q, re) {
        super(a, C, q);
        this[ks] = mo(re);
      }
      get isConnected() {
        return isConnected(this);
      }
      get parentElement() {
        return parentElement(this);
      }
      get previousSibling() {
        return previousSibling(this);
      }
      get nextSibling() {
        return nextSibling(this);
      }
      get previousElementSibling() {
        return previousElementSibling(this);
      }
      get nextElementSibling() {
        return non_document_type_child_node_nextElementSibling(this);
      }
      before(...a) {
        before(this, a);
      }
      after(...a) {
        after(this, a);
      }
      replaceWith(...a) {
        replaceWith(this, a);
      }
      remove() {
        remove(this[Bs], this, this[Is]);
      }
      get data() {
        return this[ks];
      }
      set data(a) {
        this[ks] = mo(a);
        moCallback(this, this.parentNode);
      }
      get nodeValue() {
        return this.data;
      }
      set nodeValue(a) {
        this.data = a;
      }
      get textContent() {
        return this.data;
      }
      set textContent(a) {
        this.data = a;
      }
      get length() {
        return this.data.length;
      }
      substringData(a, C) {
        return this.data.substr(a, C);
      }
      appendData(a) {
        this.data += a;
      }
      insertData(a, C) {
        const { data: q } = this;
        this.data = q.slice(0, a) + C + q.slice(a);
      }
      deleteData(a, C) {
        const { data: q } = this;
        this.data = q.slice(0, a) + q.slice(a + C);
      }
      replaceData(a, C, q) {
        const { data: re } = this;
        this.data = re.slice(0, a) + q + re.slice(a + C);
      }
      toJSON() {
        const a = [];
        characterDataAsJSON(this, a);
        return a;
      }
    }
    class cdata_section_CDATASection extends CharacterData {
      constructor(a, C = '') {
        super(a, '#cdatasection', qn, C);
      }
      cloneNode() {
        const { ownerDocument: a, [ks]: C } = this;
        return new cdata_section_CDATASection(a, C);
      }
      toString() {
        return `<![CDATA[${this[ks]}]]>`;
      }
    }
    class comment_Comment extends CharacterData {
      constructor(a, C = '') {
        super(a, '#comment', Vn, C);
      }
      cloneNode() {
        const { ownerDocument: a, [ks]: C } = this;
        return new comment_Comment(a, C);
      }
      toString() {
        return `\x3c!--${this[ks]}--\x3e`;
      }
    }
    var Fo = __nccwpck_require__(2974);
    var Mo = __nccwpck_require__(4210);
    const Po = new Map([
      [Mo.SelectorType.Universal, 50],
      [Mo.SelectorType.Tag, 30],
      [Mo.SelectorType.Attribute, 1],
      [Mo.SelectorType.Pseudo, 0]
    ]);
    function isTraversal(a) {
      return !Po.has(a.type);
    }
    const Oo = new Map([
      [Mo.AttributeAction.Exists, 10],
      [Mo.AttributeAction.Equals, 8],
      [Mo.AttributeAction.Not, 7],
      [Mo.AttributeAction.Start, 6],
      [Mo.AttributeAction.End, 6],
      [Mo.AttributeAction.Any, 5]
    ]);
    function sortByProcedure(a) {
      const C = a.map(getProcedure);
      for (let q = 1; q < a.length; q++) {
        const re = C[q];
        if (re < 0) continue;
        for (let ae = q - 1; ae >= 0 && re < C[ae]; ae--) {
          const q = a[ae + 1];
          a[ae + 1] = a[ae];
          a[ae] = q;
          C[ae + 1] = C[ae];
          C[ae] = re;
        }
      }
    }
    function getProcedure(a) {
      var C, q;
      let re = (C = Po.get(a.type)) !== null && C !== void 0 ? C : -1;
      if (a.type === Mo.SelectorType.Attribute) {
        re = (q = Oo.get(a.action)) !== null && q !== void 0 ? q : 4;
        if (a.action === Mo.AttributeAction.Equals && a.name === 'id') {
          re = 9;
        }
        if (a.ignoreCase) {
          re >>= 1;
        }
      } else if (a.type === Mo.SelectorType.Pseudo) {
        if (!a.data) {
          re = 3;
        } else if (a.name === 'has' || a.name === 'contains') {
          re = 0;
        } else if (Array.isArray(a.data)) {
          re = Math.min(...a.data.map((a) => Math.min(...a.map(getProcedure))));
          if (re < 0) {
            re = 0;
          }
        } else {
          re = 2;
        }
      }
      return re;
    }
    const xo = /[-[\]{}()*+?.,\\^$|#\s]/g;
    function escapeRegex(a) {
      return a.replace(xo, '\\$&');
    }
    const Uo = new Set([
      'accept',
      'accept-charset',
      'align',
      'alink',
      'axis',
      'bgcolor',
      'charset',
      'checked',
      'clear',
      'codetype',
      'color',
      'compact',
      'declare',
      'defer',
      'dir',
      'direction',
      'disabled',
      'enctype',
      'face',
      'frame',
      'hreflang',
      'http-equiv',
      'lang',
      'language',
      'link',
      'media',
      'method',
      'multiple',
      'nohref',
      'noresize',
      'noshade',
      'nowrap',
      'readonly',
      'rel',
      'rev',
      'rules',
      'scope',
      'scrolling',
      'selected',
      'shape',
      'target',
      'text',
      'type',
      'valign',
      'valuetype',
      'vlink'
    ]);
    function shouldIgnoreCase(a, C) {
      return typeof a.ignoreCase === 'boolean'
        ? a.ignoreCase
        : a.ignoreCase === 'quirks'
          ? !!C.quirksMode
          : !C.xmlMode && Uo.has(a.name);
    }
    const Go = {
      equals(a, C, q) {
        const { adapter: re } = q;
        const { name: ae } = C;
        let { value: Ue } = C;
        if (shouldIgnoreCase(C, q)) {
          Ue = Ue.toLowerCase();
          return (C) => {
            const q = re.getAttributeValue(C, ae);
            return (
              q != null &&
              q.length === Ue.length &&
              q.toLowerCase() === Ue &&
              a(C)
            );
          };
        }
        return (C) => re.getAttributeValue(C, ae) === Ue && a(C);
      },
      hyphen(a, C, q) {
        const { adapter: re } = q;
        const { name: ae } = C;
        let { value: Ue } = C;
        const lt = Ue.length;
        if (shouldIgnoreCase(C, q)) {
          Ue = Ue.toLowerCase();
          return function hyphenIC(C) {
            const q = re.getAttributeValue(C, ae);
            return (
              q != null &&
              (q.length === lt || q.charAt(lt) === '-') &&
              q.substr(0, lt).toLowerCase() === Ue &&
              a(C)
            );
          };
        }
        return function hyphen(C) {
          const q = re.getAttributeValue(C, ae);
          return (
            q != null &&
            (q.length === lt || q.charAt(lt) === '-') &&
            q.substr(0, lt) === Ue &&
            a(C)
          );
        };
      },
      element(a, C, q) {
        const { adapter: re } = q;
        const { name: ae, value: Ue } = C;
        if (/\s/.test(Ue)) {
          return Fo.falseFunc;
        }
        const lt = new RegExp(
          `(?:^|\\s)${escapeRegex(Ue)}(?:$|\\s)`,
          shouldIgnoreCase(C, q) ? 'i' : ''
        );
        return function element(C) {
          const q = re.getAttributeValue(C, ae);
          return q != null && q.length >= Ue.length && lt.test(q) && a(C);
        };
      },
      exists(a, { name: C }, { adapter: q }) {
        return (re) => q.hasAttrib(re, C) && a(re);
      },
      start(a, C, q) {
        const { adapter: re } = q;
        const { name: ae } = C;
        let { value: Ue } = C;
        const lt = Ue.length;
        if (lt === 0) {
          return Fo.falseFunc;
        }
        if (shouldIgnoreCase(C, q)) {
          Ue = Ue.toLowerCase();
          return (C) => {
            const q = re.getAttributeValue(C, ae);
            return (
              q != null &&
              q.length >= lt &&
              q.substr(0, lt).toLowerCase() === Ue &&
              a(C)
            );
          };
        }
        return (C) => {
          var q;
          return (
            !!((q = re.getAttributeValue(C, ae)) === null || q === void 0
              ? void 0
              : q.startsWith(Ue)) && a(C)
          );
        };
      },
      end(a, C, q) {
        const { adapter: re } = q;
        const { name: ae } = C;
        let { value: Ue } = C;
        const lt = -Ue.length;
        if (lt === 0) {
          return Fo.falseFunc;
        }
        if (shouldIgnoreCase(C, q)) {
          Ue = Ue.toLowerCase();
          return (C) => {
            var q;
            return (
              ((q = re.getAttributeValue(C, ae)) === null || q === void 0
                ? void 0
                : q.substr(lt).toLowerCase()) === Ue && a(C)
            );
          };
        }
        return (C) => {
          var q;
          return (
            !!((q = re.getAttributeValue(C, ae)) === null || q === void 0
              ? void 0
              : q.endsWith(Ue)) && a(C)
          );
        };
      },
      any(a, C, q) {
        const { adapter: re } = q;
        const { name: ae, value: Ue } = C;
        if (Ue === '') {
          return Fo.falseFunc;
        }
        if (shouldIgnoreCase(C, q)) {
          const C = new RegExp(escapeRegex(Ue), 'i');
          return function anyIC(q) {
            const lt = re.getAttributeValue(q, ae);
            return lt != null && lt.length >= Ue.length && C.test(lt) && a(q);
          };
        }
        return (C) => {
          var q;
          return (
            !!((q = re.getAttributeValue(C, ae)) === null || q === void 0
              ? void 0
              : q.includes(Ue)) && a(C)
          );
        };
      },
      not(a, C, q) {
        const { adapter: re } = q;
        const { name: ae } = C;
        let { value: Ue } = C;
        if (Ue === '') {
          return (C) => !!re.getAttributeValue(C, ae) && a(C);
        } else if (shouldIgnoreCase(C, q)) {
          Ue = Ue.toLowerCase();
          return (C) => {
            const q = re.getAttributeValue(C, ae);
            return (
              (q == null || q.length !== Ue.length || q.toLowerCase() !== Ue) &&
              a(C)
            );
          };
        }
        return (C) => re.getAttributeValue(C, ae) !== Ue && a(C);
      }
    };
    const Ho = new Set([9, 10, 12, 13, 32]);
    const qo = '0'.charCodeAt(0);
    const Vo = '9'.charCodeAt(0);
    function parse_parse(a) {
      a = a.trim().toLowerCase();
      if (a === 'even') {
        return [2, 0];
      } else if (a === 'odd') {
        return [2, 1];
      }
      let C = 0;
      let q = 0;
      let re = readSign();
      let ae = readNumber();
      if (C < a.length && a.charAt(C) === 'n') {
        C++;
        q = re * (ae !== null && ae !== void 0 ? ae : 1);
        skipWhitespace();
        if (C < a.length) {
          re = readSign();
          skipWhitespace();
          ae = readNumber();
        } else {
          re = ae = 0;
        }
      }
      if (ae === null || C < a.length) {
        throw new Error(`n-th rule couldn't be parsed ('${a}')`);
      }
      return [q, re * ae];
      function readSign() {
        if (a.charAt(C) === '-') {
          C++;
          return -1;
        }
        if (a.charAt(C) === '+') {
          C++;
        }
        return 1;
      }
      function readNumber() {
        const q = C;
        let re = 0;
        while (C < a.length && a.charCodeAt(C) >= qo && a.charCodeAt(C) <= Vo) {
          re = re * 10 + (a.charCodeAt(C) - qo);
          C++;
        }
        return C === q ? null : re;
      }
      function skipWhitespace() {
        while (C < a.length && Ho.has(a.charCodeAt(C))) {
          C++;
        }
      }
    }
    function compile(a) {
      const C = a[0];
      const q = a[1] - 1;
      if (q < 0 && C <= 0) return Fo.falseFunc;
      if (C === -1) return (a) => a <= q;
      if (C === 0) return (a) => a === q;
      if (C === 1) return q < 0 ? Fo.trueFunc : (a) => a >= q;
      const re = Math.abs(C);
      const ae = ((q % re) + re) % re;
      return C > 1
        ? (a) => a >= q && a % re === ae
        : (a) => a <= q && a % re === ae;
    }
    function compile_generate(a) {
      const C = a[0];
      let q = a[1] - 1;
      let re = 0;
      if (C < 0) {
        const a = -C;
        const ae = ((q % a) + a) % a;
        return () => {
          const C = ae + a * re++;
          return C > q ? null : C;
        };
      }
      if (C === 0) return q < 0 ? () => null : () => (re++ === 0 ? q : null);
      if (q < 0) {
        q += C * Math.ceil(-q / C);
      }
      return () => C * re++ + q;
    }
    function nthCheck(a) {
      return compile(parse_parse(a));
    }
    function sequence(a) {
      return generate(parse(a));
    }
    function getChildFunc(a, C) {
      return (q) => {
        const re = C.getParent(q);
        return re != null && C.isTag(re) && a(q);
      };
    }
    const Wo = {
      contains(a, C, { adapter: q }) {
        return function contains(re) {
          return a(re) && q.getText(re).includes(C);
        };
      },
      icontains(a, C, { adapter: q }) {
        const re = C.toLowerCase();
        return function icontains(C) {
          return a(C) && q.getText(C).toLowerCase().includes(re);
        };
      },
      'nth-child'(a, C, { adapter: q, equals: re }) {
        const ae = nthCheck(C);
        if (ae === Fo.falseFunc) return Fo.falseFunc;
        if (ae === Fo.trueFunc) return getChildFunc(a, q);
        return function nthChild(C) {
          const Ue = q.getSiblings(C);
          let lt = 0;
          for (let a = 0; a < Ue.length; a++) {
            if (re(C, Ue[a])) break;
            if (q.isTag(Ue[a])) {
              lt++;
            }
          }
          return ae(lt) && a(C);
        };
      },
      'nth-last-child'(a, C, { adapter: q, equals: re }) {
        const ae = nthCheck(C);
        if (ae === Fo.falseFunc) return Fo.falseFunc;
        if (ae === Fo.trueFunc) return getChildFunc(a, q);
        return function nthLastChild(C) {
          const Ue = q.getSiblings(C);
          let lt = 0;
          for (let a = Ue.length - 1; a >= 0; a--) {
            if (re(C, Ue[a])) break;
            if (q.isTag(Ue[a])) {
              lt++;
            }
          }
          return ae(lt) && a(C);
        };
      },
      'nth-of-type'(a, C, { adapter: q, equals: re }) {
        const ae = nthCheck(C);
        if (ae === Fo.falseFunc) return Fo.falseFunc;
        if (ae === Fo.trueFunc) return getChildFunc(a, q);
        return function nthOfType(C) {
          const Ue = q.getSiblings(C);
          let lt = 0;
          for (let a = 0; a < Ue.length; a++) {
            const ae = Ue[a];
            if (re(C, ae)) break;
            if (q.isTag(ae) && q.getName(ae) === q.getName(C)) {
              lt++;
            }
          }
          return ae(lt) && a(C);
        };
      },
      'nth-last-of-type'(a, C, { adapter: q, equals: re }) {
        const ae = nthCheck(C);
        if (ae === Fo.falseFunc) return Fo.falseFunc;
        if (ae === Fo.trueFunc) return getChildFunc(a, q);
        return function nthLastOfType(C) {
          const Ue = q.getSiblings(C);
          let lt = 0;
          for (let a = Ue.length - 1; a >= 0; a--) {
            const ae = Ue[a];
            if (re(C, ae)) break;
            if (q.isTag(ae) && q.getName(ae) === q.getName(C)) {
              lt++;
            }
          }
          return ae(lt) && a(C);
        };
      },
      root(a, C, { adapter: q }) {
        return (C) => {
          const re = q.getParent(C);
          return (re == null || !q.isTag(re)) && a(C);
        };
      },
      scope(a, C, q, re) {
        const { equals: ae } = q;
        if (!re || re.length === 0) {
          return Wo['root'](a, C, q);
        }
        if (re.length === 1) {
          return (C) => ae(re[0], C) && a(C);
        }
        return (C) => re.includes(C) && a(C);
      },
      hover: dynamicStatePseudo('isHovered'),
      visited: dynamicStatePseudo('isVisited'),
      active: dynamicStatePseudo('isActive')
    };
    function dynamicStatePseudo(a) {
      return function dynamicPseudo(C, q, { adapter: re }) {
        const ae = re[a];
        if (typeof ae !== 'function') {
          return Fo.falseFunc;
        }
        return function active(a) {
          return ae(a) && C(a);
        };
      };
    }
    const Yo = {
      empty(a, { adapter: C }) {
        return !C.getChildren(a).some((a) => C.isTag(a) || C.getText(a) !== '');
      },
      'first-child'(a, { adapter: C, equals: q }) {
        if (C.prevElementSibling) {
          return C.prevElementSibling(a) == null;
        }
        const re = C.getSiblings(a).find((a) => C.isTag(a));
        return re != null && q(a, re);
      },
      'last-child'(a, { adapter: C, equals: q }) {
        const re = C.getSiblings(a);
        for (let ae = re.length - 1; ae >= 0; ae--) {
          if (q(a, re[ae])) return true;
          if (C.isTag(re[ae])) break;
        }
        return false;
      },
      'first-of-type'(a, { adapter: C, equals: q }) {
        const re = C.getSiblings(a);
        const ae = C.getName(a);
        for (let Ue = 0; Ue < re.length; Ue++) {
          const lt = re[Ue];
          if (q(a, lt)) return true;
          if (C.isTag(lt) && C.getName(lt) === ae) {
            break;
          }
        }
        return false;
      },
      'last-of-type'(a, { adapter: C, equals: q }) {
        const re = C.getSiblings(a);
        const ae = C.getName(a);
        for (let Ue = re.length - 1; Ue >= 0; Ue--) {
          const lt = re[Ue];
          if (q(a, lt)) return true;
          if (C.isTag(lt) && C.getName(lt) === ae) {
            break;
          }
        }
        return false;
      },
      'only-of-type'(a, { adapter: C, equals: q }) {
        const re = C.getName(a);
        return C.getSiblings(a).every(
          (ae) => q(a, ae) || !C.isTag(ae) || C.getName(ae) !== re
        );
      },
      'only-child'(a, { adapter: C, equals: q }) {
        return C.getSiblings(a).every((re) => q(a, re) || !C.isTag(re));
      }
    };
    function verifyPseudoArgs(a, C, q, re) {
      if (q === null) {
        if (a.length > re) {
          throw new Error(`Pseudo-class :${C} requires an argument`);
        }
      } else if (a.length === re) {
        throw new Error(`Pseudo-class :${C} doesn't have any arguments`);
      }
    }
    const jo = {
      'any-link': ':is(a, area, link)[href]',
      link: ':any-link:not(:visited)',
      disabled: `:is(\n        :is(button, input, select, textarea, optgroup, option)[disabled],\n        optgroup[disabled] > option,\n        fieldset[disabled]:not(fieldset[disabled] legend:first-of-type *)\n    )`,
      enabled: ':not(:disabled)',
      checked:
        ':is(:is(input[type=radio], input[type=checkbox])[checked], option:selected)',
      required: ':is(input, select, textarea)[required]',
      optional: ':is(input, select, textarea):not([required])',
      selected:
        'option:is([selected], select:not([multiple]):not(:has(> option[selected])) > :first-of-type)',
      checkbox: '[type=checkbox]',
      file: '[type=file]',
      password: '[type=password]',
      radio: '[type=radio]',
      reset: '[type=reset]',
      image: '[type=image]',
      submit: '[type=submit]',
      parent: ':not(:empty)',
      header: ':is(h1, h2, h3, h4, h5, h6)',
      button: ':is(button, input[type=button])',
      input: ':is(input, textarea, select, button)',
      text: "input:is(:not([type!='']), [type=text])"
    };
    const Jo = {};
    function ensureIsTag(a, C) {
      if (a === Fo.falseFunc) return Fo.falseFunc;
      return (q) => C.isTag(q) && a(q);
    }
    function getNextSiblings(a, C) {
      const q = C.getSiblings(a);
      if (q.length <= 1) return [];
      const re = q.indexOf(a);
      if (re < 0 || re === q.length - 1) return [];
      return q.slice(re + 1).filter(C.isTag);
    }
    function copyOptions(a) {
      return {
        xmlMode: !!a.xmlMode,
        lowerCaseAttributeNames: !!a.lowerCaseAttributeNames,
        lowerCaseTags: !!a.lowerCaseTags,
        quirksMode: !!a.quirksMode,
        cacheResults: !!a.cacheResults,
        pseudos: a.pseudos,
        adapter: a.adapter,
        equals: a.equals
      };
    }
    const is = (a, C, q, re, ae) => {
      const Ue = ae(C, copyOptions(q), re);
      return Ue === Fo.trueFunc
        ? a
        : Ue === Fo.falseFunc
          ? Fo.falseFunc
          : (C) => Ue(C) && a(C);
    };
    const zo = {
      is: is,
      matches: is,
      where: is,
      not(a, C, q, re, ae) {
        const Ue = ae(C, copyOptions(q), re);
        return Ue === Fo.falseFunc
          ? a
          : Ue === Fo.trueFunc
            ? Fo.falseFunc
            : (C) => !Ue(C) && a(C);
      },
      has(a, C, q, re, ae) {
        const { adapter: Ue } = q;
        const lt = copyOptions(q);
        lt.relativeSelector = true;
        const Pt = C.some((a) => a.some(isTraversal)) ? [Jo] : undefined;
        const Wt = ae(C, lt, Pt);
        if (Wt === Fo.falseFunc) return Fo.falseFunc;
        const Ar = ensureIsTag(Wt, Ue);
        if (Pt && Wt !== Fo.trueFunc) {
          const { shouldTestNextSiblings: C = false } = Wt;
          return (q) => {
            if (!a(q)) return false;
            Pt[0] = q;
            const re = Ue.getChildren(q);
            const ae = C ? [...re, ...getNextSiblings(q, Ue)] : re;
            return Ue.existsOne(Ar, ae);
          };
        }
        return (C) => a(C) && Ue.existsOne(Ar, Ue.getChildren(C));
      }
    };
    function compilePseudoSelector(a, C, q, re, ae) {
      var Ue;
      const { name: lt, data: Pt } = C;
      if (Array.isArray(Pt)) {
        if (!(lt in zo)) {
          throw new Error(`Unknown pseudo-class :${lt}(${Pt})`);
        }
        return zo[lt](a, Pt, q, re, ae);
      }
      const Wt = (Ue = q.pseudos) === null || Ue === void 0 ? void 0 : Ue[lt];
      const Ar = typeof Wt === 'string' ? Wt : jo[lt];
      if (typeof Ar === 'string') {
        if (Pt != null) {
          throw new Error(`Pseudo ${lt} doesn't have any arguments`);
        }
        const C = (0, Mo.parse)(Ar);
        return zo.is(a, C, q, re, ae);
      }
      if (typeof Wt === 'function') {
        verifyPseudoArgs(Wt, lt, Pt, 1);
        return (C) => Wt(C, Pt) && a(C);
      }
      if (lt in Wo) {
        return Wo[lt](a, Pt, q, re);
      }
      if (lt in Yo) {
        const C = Yo[lt];
        verifyPseudoArgs(C, lt, Pt, 2);
        return (re) => C(re, q, Pt) && a(re);
      }
      throw new Error(`Unknown pseudo-class :${lt}`);
    }
    function getElementParent(a, C) {
      const q = C.getParent(a);
      if (q && C.isTag(q)) {
        return q;
      }
      return null;
    }
    function compileGeneralSelector(a, C, q, re, ae) {
      const { adapter: Ue, equals: lt } = q;
      switch (C.type) {
        case Mo.SelectorType.PseudoElement: {
          throw new Error('Pseudo-elements are not supported by css-select');
        }
        case Mo.SelectorType.ColumnCombinator: {
          throw new Error(
            'Column combinators are not yet supported by css-select'
          );
        }
        case Mo.SelectorType.Attribute: {
          if (C.namespace != null) {
            throw new Error(
              'Namespaced attributes are not yet supported by css-select'
            );
          }
          if (!q.xmlMode || q.lowerCaseAttributeNames) {
            C.name = C.name.toLowerCase();
          }
          return Go[C.action](a, C, q);
        }
        case Mo.SelectorType.Pseudo: {
          return compilePseudoSelector(a, C, q, re, ae);
        }
        case Mo.SelectorType.Tag: {
          if (C.namespace != null) {
            throw new Error(
              'Namespaced tag names are not yet supported by css-select'
            );
          }
          let { name: re } = C;
          if (!q.xmlMode || q.lowerCaseTags) {
            re = re.toLowerCase();
          }
          return function tag(C) {
            return Ue.getName(C) === re && a(C);
          };
        }
        case Mo.SelectorType.Descendant: {
          if (q.cacheResults === false || typeof WeakSet === 'undefined') {
            return function descendant(C) {
              let q = C;
              while ((q = getElementParent(q, Ue))) {
                if (a(q)) {
                  return true;
                }
              }
              return false;
            };
          }
          const C = new WeakSet();
          return function cachedDescendant(q) {
            let re = q;
            while ((re = getElementParent(re, Ue))) {
              if (!C.has(re)) {
                if (Ue.isTag(re) && a(re)) {
                  return true;
                }
                C.add(re);
              }
            }
            return false;
          };
        }
        case '_flexibleDescendant': {
          return function flexibleDescendant(C) {
            let q = C;
            do {
              if (a(q)) return true;
            } while ((q = getElementParent(q, Ue)));
            return false;
          };
        }
        case Mo.SelectorType.Parent: {
          return function parent(C) {
            return Ue.getChildren(C).some((C) => Ue.isTag(C) && a(C));
          };
        }
        case Mo.SelectorType.Child: {
          return function child(C) {
            const q = Ue.getParent(C);
            return q != null && Ue.isTag(q) && a(q);
          };
        }
        case Mo.SelectorType.Sibling: {
          return function sibling(C) {
            const q = Ue.getSiblings(C);
            for (let re = 0; re < q.length; re++) {
              const ae = q[re];
              if (lt(C, ae)) break;
              if (Ue.isTag(ae) && a(ae)) {
                return true;
              }
            }
            return false;
          };
        }
        case Mo.SelectorType.Adjacent: {
          if (Ue.prevElementSibling) {
            return function adjacent(C) {
              const q = Ue.prevElementSibling(C);
              return q != null && a(q);
            };
          }
          return function adjacent(C) {
            const q = Ue.getSiblings(C);
            let re;
            for (let a = 0; a < q.length; a++) {
              const ae = q[a];
              if (lt(C, ae)) break;
              if (Ue.isTag(ae)) {
                re = ae;
              }
            }
            return !!re && a(re);
          };
        }
        case Mo.SelectorType.Universal: {
          if (C.namespace != null && C.namespace !== '*') {
            throw new Error(
              'Namespaced universal selectors are not yet supported by css-select'
            );
          }
          return a;
        }
      }
    }
    function compile_compile(a, C, q) {
      const re = compileUnsafe(a, C, q);
      return ensureIsTag(re, C.adapter);
    }
    function compileUnsafe(a, C, q) {
      const re = typeof a === 'string' ? (0, Mo.parse)(a) : a;
      return compileToken(re, C, q);
    }
    function includesScopePseudo(a) {
      return (
        a.type === Mo.SelectorType.Pseudo &&
        (a.name === 'scope' ||
          (Array.isArray(a.data) &&
            a.data.some((a) => a.some(includesScopePseudo))))
      );
    }
    const $o = { type: Mo.SelectorType.Descendant };
    const Ko = { type: '_flexibleDescendant' };
    const Xo = { type: Mo.SelectorType.Pseudo, name: 'scope', data: null };
    function absolutize(a, { adapter: C }, q) {
      const re = !!(q === null || q === void 0
        ? void 0
        : q.every((a) => {
            const q = C.isTag(a) && C.getParent(a);
            return a === Jo || (q && C.isTag(q));
          }));
      for (const C of a) {
        if (
          C.length > 0 &&
          isTraversal(C[0]) &&
          C[0].type !== Mo.SelectorType.Descendant
        ) {
        } else if (re && !C.some(includesScopePseudo)) {
          C.unshift($o);
        } else {
          continue;
        }
        C.unshift(Xo);
      }
    }
    function compileToken(a, C, q) {
      var re;
      a.forEach(sortByProcedure);
      q = (re = C.context) !== null && re !== void 0 ? re : q;
      const ae = Array.isArray(q);
      const Ue = q && (Array.isArray(q) ? q : [q]);
      if (C.relativeSelector !== false) {
        absolutize(a, C, Ue);
      } else if (a.some((a) => a.length > 0 && isTraversal(a[0]))) {
        throw new Error(
          'Relative selectors are not allowed when the `relativeSelector` option is disabled'
        );
      }
      let lt = false;
      const Pt = a
        .map((a) => {
          if (a.length >= 2) {
            const [C, q] = a;
            if (C.type !== Mo.SelectorType.Pseudo || C.name !== 'scope') {
            } else if (ae && q.type === Mo.SelectorType.Descendant) {
              a[1] = Ko;
            } else if (
              q.type === Mo.SelectorType.Adjacent ||
              q.type === Mo.SelectorType.Sibling
            ) {
              lt = true;
            }
          }
          return compileRules(a, C, Ue);
        })
        .reduce(reduceRules, Fo.falseFunc);
      Pt.shouldTestNextSiblings = lt;
      return Pt;
    }
    function compileRules(a, C, q) {
      var re;
      return a.reduce(
        (a, re) =>
          a === Fo.falseFunc
            ? Fo.falseFunc
            : compileGeneralSelector(a, re, C, q, compileToken),
        (re = C.rootFunc) !== null && re !== void 0 ? re : Fo.trueFunc
      );
    }
    function reduceRules(a, C) {
      if (C === Fo.falseFunc || a === Fo.trueFunc) {
        return a;
      }
      if (a === Fo.falseFunc || C === Fo.trueFunc) {
        return C;
      }
      return function combine(q) {
        return a(q) || C(q);
      };
    }
    const defaultEquals = (a, C) => a === C;
    const Zo = { adapter: C, equals: defaultEquals };
    function convertOptionFormats(a) {
      var q, re, ae, Ue;
      const lt = a !== null && a !== void 0 ? a : Zo;
      (q = lt.adapter) !== null && q !== void 0 ? q : (lt.adapter = C);
      (re = lt.equals) !== null && re !== void 0
        ? re
        : (lt.equals =
            (Ue =
              (ae = lt.adapter) === null || ae === void 0
                ? void 0
                : ae.equals) !== null && Ue !== void 0
              ? Ue
              : defaultEquals);
      return lt;
    }
    function wrapCompile(a) {
      return function addAdapter(C, q, re) {
        const ae = convertOptionFormats(q);
        return a(C, ae, re);
      };
    }
    const ea = wrapCompile(compile_compile);
    const ta = wrapCompile(compileUnsafe);
    const ra = wrapCompile(compileToken);
    function getSelectorFunc(a) {
      return function select(C, q, re) {
        const ae = convertOptionFormats(re);
        if (typeof C !== 'function') {
          C = compileUnsafe(C, ae, q);
        }
        const Ue = prepareContext(q, ae.adapter, C.shouldTestNextSiblings);
        return a(C, Ue, ae);
      };
    }
    function prepareContext(a, C, q = false) {
      if (q) {
        a = appendNextSiblings(a, C);
      }
      return Array.isArray(a) ? C.removeSubsets(a) : C.getChildren(a);
    }
    function appendNextSiblings(a, C) {
      const q = Array.isArray(a) ? a.slice(0) : [a];
      const re = q.length;
      for (let a = 0; a < re; a++) {
        const re = getNextSiblings(q[a], C);
        q.push(...re);
      }
      return q;
    }
    const sa = getSelectorFunc((a, C, q) =>
      a === Fo.falseFunc || !C || C.length === 0 ? [] : q.adapter.findAll(a, C)
    );
    const na = getSelectorFunc((a, C, q) =>
      a === Fo.falseFunc || !C || C.length === 0
        ? null
        : q.adapter.findOne(a, C)
    );
    function esm_is(a, C, q) {
      const re = convertOptionFormats(q);
      return (typeof C === 'function' ? C : compile_compile(C, re))(a);
    }
    const oa = null && sa;
    const { isArray: aa } = Array;
    const matches_isTag = ({ nodeType: a }) => a === Un;
    const matches_existsOne = (a, C) =>
      C.some(
        (C) =>
          matches_isTag(C) &&
          (a(C) || matches_existsOne(a, matches_getChildren(C)))
      );
    const matches_getAttributeValue = (a, C) =>
      C === 'class' ? a.classList.value : a.getAttribute(C);
    const matches_getChildren = ({ childNodes: a }) => a;
    const matches_getName = (a) => {
      const { localName: C } = a;
      return ignoreCase(a) ? C.toLowerCase() : C;
    };
    const matches_getParent = ({ parentNode: a }) => a;
    const matches_getSiblings = (a) => {
      const { parentNode: C } = a;
      return C ? matches_getChildren(C) : a;
    };
    const matches_getText = (a) => {
      if (aa(a)) return a.map(matches_getText).join('');
      if (matches_isTag(a)) return matches_getText(matches_getChildren(a));
      if (a.nodeType === Hn) return a.data;
      return '';
    };
    const matches_hasAttrib = (a, C) => a.hasAttribute(C);
    const matches_removeSubsets = (a) => {
      let { length: C } = a;
      while (C--) {
        const q = a[C];
        if (C && -1 < a.lastIndexOf(q, C - 1)) {
          a.splice(C, 1);
          continue;
        }
        for (let { parentNode: re } = q; re; re = re.parentNode) {
          if (a.includes(re)) {
            a.splice(C, 1);
            break;
          }
        }
      }
      return a;
    };
    const matches_findAll = (a, C) => {
      const q = [];
      for (const re of C) {
        if (matches_isTag(re)) {
          if (a(re)) q.push(re);
          q.push(...matches_findAll(a, matches_getChildren(re)));
        }
      }
      return q;
    };
    const matches_findOne = (a, C) => {
      for (let q of C)
        if (a(q) || (q = matches_findOne(a, matches_getChildren(q)))) return q;
      return null;
    };
    const ia = {
      isTag: matches_isTag,
      existsOne: matches_existsOne,
      getAttributeValue: matches_getAttributeValue,
      getChildren: matches_getChildren,
      getName: matches_getName,
      getParent: matches_getParent,
      getSiblings: matches_getSiblings,
      getText: matches_getText,
      hasAttrib: matches_hasAttrib,
      removeSubsets: matches_removeSubsets,
      findAll: matches_findAll,
      findOne: matches_findOne
    };
    const prepareMatch = (a, C) =>
      ea(C, {
        context: C.includes(':scope') ? a : void 0,
        xmlMode: !ignoreCase(a),
        adapter: ia
      });
    const matches = (a, C) =>
      esm_is(a, C, {
        strict: true,
        context: C.includes(':scope') ? a : void 0,
        xmlMode: !ignoreCase(a),
        adapter: ia
      });
    class text_Text extends CharacterData {
      constructor(a, C = '') {
        super(a, '#text', Hn, C);
      }
      get wholeText() {
        const a = [];
        let { previousSibling: C, nextSibling: q } = this;
        while (C) {
          if (C.nodeType === Hn) a.unshift(C[ks]);
          else break;
          C = C.previousSibling;
        }
        a.push(this[ks]);
        while (q) {
          if (q.nodeType === Hn) a.push(q[ks]);
          else break;
          q = q.nextSibling;
        }
        return a.join('');
      }
      cloneNode() {
        const { ownerDocument: a, [ks]: C } = this;
        return new text_Text(a, C);
      }
      toString() {
        return text_escaper_escape(this[ks]);
      }
    }
    const isNode = (a) => a instanceof node_Node;
    const insert = (a, C, q) => {
      const { ownerDocument: re } = a;
      for (const ae of q)
        a.insertBefore(isNode(ae) ? ae : new text_Text(re, ae), C);
    };
    class ParentNode extends node_Node {
      constructor(a, C, q) {
        super(a, C, q);
        this[Qs] = null;
        this[Is] = this[fs] = {
          [Is]: null,
          [Bs]: this,
          [Ss]: this,
          nodeType: xn,
          ownerDocument: this.ownerDocument,
          parentNode: null
        };
      }
      get childNodes() {
        const a = new NodeList();
        let { firstChild: C } = this;
        while (C) {
          a.push(C);
          C = nextSibling(C);
        }
        return a;
      }
      get children() {
        const a = new NodeList();
        let { firstElementChild: C } = this;
        while (C) {
          a.push(C);
          C = non_document_type_child_node_nextElementSibling(C);
        }
        return a;
      }
      get firstChild() {
        let { [Is]: a, [fs]: C } = this;
        while (a.nodeType === Gn) a = a[Is];
        return a === C ? null : a;
      }
      get firstElementChild() {
        let { firstChild: a } = this;
        while (a) {
          if (a.nodeType === Un) return a;
          a = nextSibling(a);
        }
        return null;
      }
      get lastChild() {
        const a = this[fs][Bs];
        switch (a.nodeType) {
          case xn:
            return a[Ss];
          case Gn:
            return null;
        }
        return a === this ? null : a;
      }
      get lastElementChild() {
        let { lastChild: a } = this;
        while (a) {
          if (a.nodeType === Un) return a;
          a = previousSibling(a);
        }
        return null;
      }
      get childElementCount() {
        return this.children.length;
      }
      prepend(...a) {
        insert(this, this.firstChild, a);
      }
      append(...a) {
        insert(this, this[fs], a);
      }
      replaceChildren(...a) {
        let { [Is]: C, [fs]: q } = this;
        while (C !== q && C.nodeType === Gn) C = C[Is];
        while (C !== q) {
          const a = getEnd(C)[Is];
          C.remove();
          C = a;
        }
        if (a.length) insert(this, q, a);
      }
      getElementsByClassName(a) {
        const C = new NodeList();
        let { [Is]: q, [fs]: re } = this;
        while (q !== re) {
          if (
            q.nodeType === Un &&
            q.hasAttribute('class') &&
            q.classList.has(a)
          )
            C.push(q);
          q = q[Is];
        }
        return C;
      }
      getElementsByTagName(a) {
        const C = new NodeList();
        let { [Is]: q, [fs]: re } = this;
        while (q !== re) {
          if (q.nodeType === Un && (q.localName === a || localCase(q) === a))
            C.push(q);
          q = q[Is];
        }
        return C;
      }
      querySelector(a) {
        const C = prepareMatch(this, a);
        let { [Is]: q, [fs]: re } = this;
        while (q !== re) {
          if (q.nodeType === Un && C(q)) return q;
          q = q.nodeType === Un && q.localName === 'template' ? q[fs] : q[Is];
        }
        return null;
      }
      querySelectorAll(a) {
        const C = prepareMatch(this, a);
        const q = new NodeList();
        let { [Is]: re, [fs]: ae } = this;
        while (re !== ae) {
          if (re.nodeType === Un && C(re)) q.push(re);
          re =
            re.nodeType === Un && re.localName === 'template' ? re[fs] : re[Is];
        }
        return q;
      }
      appendChild(a) {
        return this.insertBefore(a, this[fs]);
      }
      contains(a) {
        let C = a;
        while (C && C !== this) C = C.parentNode;
        return C === this;
      }
      insertBefore(a, C = null) {
        if (a === C) return a;
        if (a === this) throw new Error('unable to append a node to itself');
        const q = C || this[fs];
        switch (a.nodeType) {
          case Un:
            a.remove();
            a.parentNode = this;
            utils_knownBoundaries(q[Bs], a, q);
            moCallback(a, null);
            connectedCallback(a);
            break;
          case jn: {
            let { [Qs]: C, firstChild: re, lastChild: ae } = a;
            if (re) {
              knownSegment(q[Bs], re, ae, q);
              knownAdjacent(a, a[fs]);
              if (C) C.replaceChildren();
              do {
                re.parentNode = this;
                moCallback(re, null);
                if (re.nodeType === Un) connectedCallback(re);
              } while (re !== ae && (re = nextSibling(re)));
            }
            break;
          }
          case Hn:
          case Vn:
          case qn:
            a.remove();
          default:
            a.parentNode = this;
            utils_knownSiblings(q[Bs], a, q);
            moCallback(a, null);
            break;
        }
        return a;
      }
      normalize() {
        let { [Is]: a, [fs]: C } = this;
        while (a !== C) {
          const { [Is]: C, [Bs]: q, nodeType: re } = a;
          if (re === Hn) {
            if (!a[ks]) a.remove();
            else if (q && q.nodeType === Hn) {
              q.textContent += a.textContent;
              a.remove();
            }
          }
          a = C;
        }
      }
      removeChild(a) {
        if (a.parentNode !== this) throw new Error('node is not a child');
        a.remove();
        return a;
      }
      replaceChild(a, C) {
        const q = getEnd(C)[Is];
        C.remove();
        this.insertBefore(a, q);
        return C;
      }
    }
    class NonElementParentNode extends ParentNode {
      getElementById(a) {
        let { [Is]: C, [fs]: q } = this;
        while (C !== q) {
          if (C.nodeType === Un && C.id === a) return C;
          C = C[Is];
        }
        return null;
      }
      cloneNode(a) {
        const { ownerDocument: C, constructor: q } = this;
        const re = new q(C);
        if (a) {
          const { [fs]: C } = re;
          for (const q of this.childNodes) re.insertBefore(q.cloneNode(a), C);
        }
        return re;
      }
      toString() {
        const { childNodes: a, localName: C } = this;
        return `<${C}>${a.join('')}</${C}>`;
      }
      toJSON() {
        const a = [];
        nonElementAsJSON(this, a);
        return a;
      }
    }
    class DocumentFragment extends NonElementParentNode {
      constructor(a) {
        super(a, '#document-fragment', jn);
      }
    }
    class document_type_DocumentType extends node_Node {
      constructor(a, C, q = '', re = '') {
        super(a, '#document-type', Yn);
        this.name = C;
        this.publicId = q;
        this.systemId = re;
      }
      cloneNode() {
        const { ownerDocument: a, name: C, publicId: q, systemId: re } = this;
        return new document_type_DocumentType(a, C, q, re);
      }
      toString() {
        const { name: a, publicId: C, systemId: q } = this;
        const re = 0 < C.length;
        const ae = [a];
        if (re) ae.push('PUBLIC', `"${C}"`);
        if (q.length) {
          if (!re) ae.push('SYSTEM');
          ae.push(`"${q}"`);
        }
        return `<!DOCTYPE ${ae.join(' ')}>`;
      }
      toJSON() {
        const a = [];
        documentTypeAsJSON(this, a);
        return a;
      }
    }
    const getInnerHtml = (a) => a.childNodes.join('');
    const setInnerHtml = (a, C) => {
      const { ownerDocument: q } = a;
      const { constructor: re } = q;
      const ae = new re();
      ae[ds] = q[ds];
      const { childNodes: Ue } = parseFromString(ae, ignoreCase(a), C);
      a.replaceChildren(...Ue.map(setOwnerDocument, q));
    };
    function setOwnerDocument(a) {
      a.ownerDocument = this;
      switch (a.nodeType) {
        case Un:
        case jn:
          a.childNodes.forEach(setOwnerDocument, this);
          break;
      }
      return a;
    }
    const uhyphen_esm = (a) =>
      a
        .replace(
          /(([A-Z0-9])([A-Z0-9][a-z]))|(([a-z0-9]+)([A-Z]))/g,
          '$2$5-$3$6'
        )
        .toLowerCase();
    const la = new WeakMap();
    const key = (a) => `data-${uhyphen_esm(a)}`;
    const prop = (a) =>
      a.slice(5).replace(/-([a-z])/g, (a, C) => C.toUpperCase());
    const ca = {
      get(a, C) {
        if (C in a) return la.get(a).getAttribute(key(C));
      },
      set(a, C, q) {
        a[C] = q;
        la.get(a).setAttribute(key(C), q);
        return true;
      },
      deleteProperty(a, C) {
        if (C in a) la.get(a).removeAttribute(key(C));
        return delete a[C];
      }
    };
    class DOMStringMap {
      constructor(a) {
        for (const { name: C, value: q } of a.attributes) {
          if (/^data-/.test(C)) this[prop(C)] = q;
        }
        la.set(this, a);
        return new Proxy(this, ca);
      }
    }
    ho(DOMStringMap.prototype, null);
    const { add: Aa } = Set.prototype;
    const addTokens = (a, C) => {
      for (const q of C) {
        if (q) Aa.call(a, q);
      }
    };
    const update = ({ [ws]: a, value: C }) => {
      const q = a.getAttributeNode('class');
      if (q) q.value = C;
      else setAttribute(a, new attr_Attr(a.ownerDocument, 'class', C));
    };
    class DOMTokenList extends Set {
      constructor(a) {
        super();
        this[ws] = a;
        const C = a.getAttributeNode('class');
        if (C) addTokens(this, C.value.split(/\s+/));
      }
      get length() {
        return this.size;
      }
      get value() {
        return [...this].join(' ');
      }
      add(...a) {
        addTokens(this, a);
        update(this);
      }
      contains(a) {
        return this.has(a);
      }
      remove(...a) {
        for (const C of a) this.delete(C);
        update(this);
      }
      toggle(a, C) {
        if (this.has(a)) {
          if (C) return true;
          this.delete(a);
          update(this);
        } else if (C || arguments.length === 1) {
          super.add(a);
          update(this);
          return true;
        }
        return false;
      }
      replace(a, C) {
        if (this.has(a)) {
          this.delete(a);
          super.add(C);
          update(this);
          return true;
        }
        return false;
      }
      supports() {
        return true;
      }
    }
    const da = new WeakMap();
    const getKeys = (a) => [...a.keys()].filter((a) => a !== Qs);
    const updateKeys = (a) => {
      const C = da.get(a).getAttributeNode('style');
      if (!C || C[cs] || a.get(Qs) !== C) {
        a.clear();
        if (C) {
          a.set(Qs, C);
          for (const q of C[ks].split(/\s*;\s*/)) {
            let [C, ...re] = q.split(':');
            if (re.length > 0) {
              C = C.trim();
              const q = re.join(':').trim();
              if (C && q) a.set(C, q);
            }
          }
        }
      }
      return C;
    };
    const ua = {
      get(a, C) {
        if (C in pa) return a[C];
        updateKeys(a);
        if (C === 'length') return getKeys(a).length;
        if (/^\d+$/.test(C)) return getKeys(a)[C];
        return a.get(uhyphen_esm(C));
      },
      set(a, C, q) {
        if (C === 'cssText') a[C] = q;
        else {
          let re = updateKeys(a);
          if (q == null) a.delete(uhyphen_esm(C));
          else a.set(uhyphen_esm(C), q);
          if (!re) {
            const C = da.get(a);
            re = C.ownerDocument.createAttribute('style');
            C.setAttributeNode(re);
            a.set(Qs, re);
          }
          re[cs] = false;
          re[ks] = a.toString();
        }
        return true;
      }
    };
    class CSSStyleDeclaration extends Map {
      constructor(a) {
        super();
        da.set(this, a);
        return new Proxy(this, ua);
      }
      get cssText() {
        return this.toString();
      }
      set cssText(a) {
        da.get(this).setAttribute('style', a);
      }
      getPropertyValue(a) {
        const C = this[Qs];
        return ua.get(C, a);
      }
      setProperty(a, C) {
        const q = this[Qs];
        ua.set(q, a, C);
      }
      removeProperty(a) {
        const C = this[Qs];
        ua.set(C, a, null);
      }
      [Symbol.iterator]() {
        const a = this[Qs];
        updateKeys(a);
        const C = getKeys(a);
        const { length: q } = C;
        let re = 0;
        return {
          next() {
            const a = re === q;
            return { done: a, value: a ? null : C[re++] };
          }
        };
      }
      get [Qs]() {
        return this;
      }
      toString() {
        const a = this[Qs];
        updateKeys(a);
        const C = [];
        a.forEach(push, C);
        return C.join(';');
      }
    }
    const { prototype: pa } = CSSStyleDeclaration;
    function push(a, C) {
      if (C !== Qs) this.push(`${C}:${a}`);
    }
    const ha = 3;
    const ma = 2;
    const fa = 1;
    const ga = 0;
    function getCurrentTarget(a) {
      return a.currentTarget;
    }
    class GlobalEvent {
      static get BUBBLING_PHASE() {
        return ha;
      }
      static get AT_TARGET() {
        return ma;
      }
      static get CAPTURING_PHASE() {
        return fa;
      }
      static get NONE() {
        return ga;
      }
      constructor(a, C = {}) {
        this.type = a;
        this.bubbles = !!C.bubbles;
        this.cancelBubble = false;
        this._stopImmediatePropagationFlag = false;
        this.cancelable = !!C.cancelable;
        this.eventPhase = this.NONE;
        this.timeStamp = Date.now();
        this.defaultPrevented = false;
        this.originalTarget = null;
        this.returnValue = null;
        this.srcElement = null;
        this.target = null;
        this._path = [];
      }
      get BUBBLING_PHASE() {
        return ha;
      }
      get AT_TARGET() {
        return ma;
      }
      get CAPTURING_PHASE() {
        return fa;
      }
      get NONE() {
        return ga;
      }
      preventDefault() {
        this.defaultPrevented = true;
      }
      composedPath() {
        return this._path.map(getCurrentTarget);
      }
      stopPropagation() {
        this.cancelBubble = true;
      }
      stopImmediatePropagation() {
        this.stopPropagation();
        this._stopImmediatePropagationFlag = true;
      }
    }
    class NamedNodeMap extends Array {
      constructor(a) {
        super();
        this.ownerElement = a;
      }
      getNamedItem(a) {
        return this.ownerElement.getAttributeNode(a);
      }
      setNamedItem(a) {
        this.ownerElement.setAttributeNode(a);
        this.unshift(a);
      }
      removeNamedItem(a) {
        const C = this.getNamedItem(a);
        this.ownerElement.removeAttribute(a);
        this.splice(this.indexOf(C), 1);
      }
      item(a) {
        return a < this.length ? this[a] : null;
      }
      getNamedItemNS(a, C) {
        return this.getNamedItem(C);
      }
      setNamedItemNS(a, C) {
        return this.setNamedItem(C);
      }
      removeNamedItemNS(a, C) {
        return this.removeNamedItem(C);
      }
    }
    class ShadowRoot extends NonElementParentNode {
      constructor(a) {
        super(a.ownerDocument, '#shadow-root', jn);
        this.host = a;
      }
      get innerHTML() {
        return getInnerHtml(this);
      }
      set innerHTML(a) {
        setInnerHtml(this, a);
      }
    }
    const Ea = {
      get(a, C) {
        return C in a ? a[C] : a.find(({ name: a }) => a === C);
      }
    };
    const element_create = (a, C, q) => {
      if ('ownerSVGElement' in C) {
        const re = a.createElementNS(ao, q);
        re.ownerSVGElement = C.ownerSVGElement;
        return re;
      }
      return a.createElement(q);
    };
    const isVoid = ({ localName: a, ownerDocument: C }) =>
      C[bs].voidElements.test(a);
    class element_Element extends ParentNode {
      constructor(a, C) {
        super(a, C, Un);
        this[As] = null;
        this[ps] = null;
        this[_s] = null;
      }
      get isConnected() {
        return isConnected(this);
      }
      get parentElement() {
        return parentElement(this);
      }
      get previousSibling() {
        return previousSibling(this);
      }
      get nextSibling() {
        return nextSibling(this);
      }
      get namespaceURI() {
        return 'http://www.w3.org/1999/xhtml';
      }
      get previousElementSibling() {
        return previousElementSibling(this);
      }
      get nextElementSibling() {
        return non_document_type_child_node_nextElementSibling(this);
      }
      before(...a) {
        before(this, a);
      }
      after(...a) {
        after(this, a);
      }
      replaceWith(...a) {
        replaceWith(this, a);
      }
      remove() {
        remove(this[Bs], this, this[fs][Is]);
      }
      get id() {
        return To.get(this, 'id');
      }
      set id(a) {
        To.set(this, 'id', a);
      }
      get className() {
        return this.classList.value;
      }
      set className(a) {
        const { classList: C } = this;
        C.clear();
        C.add(...mo(a).split(/\s+/));
      }
      get nodeName() {
        return localCase(this);
      }
      get tagName() {
        return localCase(this);
      }
      get classList() {
        return this[As] || (this[As] = new DOMTokenList(this));
      }
      get dataset() {
        return this[ps] || (this[ps] = new DOMStringMap(this));
      }
      getBoundingClientRect() {
        return {
          x: 0,
          y: 0,
          bottom: 0,
          height: 0,
          left: 0,
          right: 0,
          top: 0,
          width: 0
        };
      }
      get nonce() {
        return To.get(this, 'nonce');
      }
      set nonce(a) {
        To.set(this, 'nonce', a);
      }
      get style() {
        return this[_s] || (this[_s] = new CSSStyleDeclaration(this));
      }
      get tabIndex() {
        return _o.get(this, 'tabindex') || -1;
      }
      set tabIndex(a) {
        _o.set(this, 'tabindex', a);
      }
      get slot() {
        return To.get(this, 'slot');
      }
      set slot(a) {
        To.set(this, 'slot', a);
      }
      get innerText() {
        const a = [];
        let { [Is]: C, [fs]: q } = this;
        while (C !== q) {
          if (C.nodeType === Hn) {
            a.push(C.textContent.replace(/\s+/g, ' '));
          } else if (a.length && C[Is] != q && Jn.has(C.tagName)) {
            a.push('\n');
          }
          C = C[Is];
        }
        return a.join('');
      }
      get textContent() {
        const a = [];
        let { [Is]: C, [fs]: q } = this;
        while (C !== q) {
          if (C.nodeType === Hn) a.push(C.textContent);
          C = C[Is];
        }
        return a.join('');
      }
      set textContent(a) {
        this.replaceChildren();
        if (a != null && a !== '')
          this.appendChild(new text_Text(this.ownerDocument, a));
      }
      get innerHTML() {
        return getInnerHtml(this);
      }
      set innerHTML(a) {
        setInnerHtml(this, a);
      }
      get outerHTML() {
        return this.toString();
      }
      set outerHTML(a) {
        const C = this.ownerDocument.createElement('');
        C.innerHTML = a;
        this.replaceWith(...C.childNodes);
      }
      get attributes() {
        const a = new NamedNodeMap(this);
        let C = this[Is];
        while (C.nodeType === Gn) {
          a.push(C);
          C = C[Is];
        }
        return new Proxy(a, Ea);
      }
      focus() {
        this.dispatchEvent(new GlobalEvent('focus'));
      }
      getAttribute(a) {
        if (a === 'class') return this.className;
        const C = this.getAttributeNode(a);
        return C && (ignoreCase(this) ? C.value : text_escaper_escape(C.value));
      }
      getAttributeNode(a) {
        let C = this[Is];
        while (C.nodeType === Gn) {
          if (C.name === a) return C;
          C = C[Is];
        }
        return null;
      }
      getAttributeNames() {
        const a = new NodeList();
        let C = this[Is];
        while (C.nodeType === Gn) {
          a.push(C.name);
          C = C[Is];
        }
        return a;
      }
      hasAttribute(a) {
        return !!this.getAttributeNode(a);
      }
      hasAttributes() {
        return this[Is].nodeType === Gn;
      }
      removeAttribute(a) {
        if (a === 'class' && this[As]) this[As].clear();
        let C = this[Is];
        while (C.nodeType === Gn) {
          if (C.name === a) {
            removeAttribute(this, C);
            return;
          }
          C = C[Is];
        }
      }
      removeAttributeNode(a) {
        let C = this[Is];
        while (C.nodeType === Gn) {
          if (C === a) {
            removeAttribute(this, C);
            return;
          }
          C = C[Is];
        }
      }
      setAttribute(a, C) {
        if (a === 'class') this.className = C;
        else {
          const q = this.getAttributeNode(a);
          if (q) q.value = C;
          else setAttribute(this, new attr_Attr(this.ownerDocument, a, C));
        }
      }
      setAttributeNode(a) {
        const { name: C } = a;
        const q = this.getAttributeNode(C);
        if (q !== a) {
          if (q) this.removeAttributeNode(q);
          const { ownerElement: C } = a;
          if (C) C.removeAttributeNode(a);
          setAttribute(this, a);
        }
        return q;
      }
      toggleAttribute(a, C) {
        if (this.hasAttribute(a)) {
          if (!C) {
            this.removeAttribute(a);
            return false;
          }
          return true;
        } else if (C || arguments.length === 1) {
          this.setAttribute(a, '');
          return true;
        }
        return false;
      }
      get shadowRoot() {
        if (fo.has(this)) {
          const { mode: a, shadowRoot: C } = fo.get(this);
          if (a === 'open') return C;
        }
        return null;
      }
      attachShadow(a) {
        if (fo.has(this)) throw new Error('operation not supported');
        const C = new ShadowRoot(this);
        fo.set(this, { mode: a.mode, shadowRoot: C });
        return C;
      }
      matches(a) {
        return matches(this, a);
      }
      closest(a) {
        let C = this;
        const q = prepareMatch(C, a);
        while (C && !q(C)) C = C.parentElement;
        return C;
      }
      insertAdjacentElement(a, C) {
        const { parentElement: q } = this;
        switch (a) {
          case 'beforebegin':
            if (q) {
              q.insertBefore(C, this);
              break;
            }
            return null;
          case 'afterbegin':
            this.insertBefore(C, this.firstChild);
            break;
          case 'beforeend':
            this.insertBefore(C, null);
            break;
          case 'afterend':
            if (q) {
              q.insertBefore(C, this.nextSibling);
              break;
            }
            return null;
        }
        return C;
      }
      insertAdjacentHTML(a, C) {
        const q = this.ownerDocument.createElement('template');
        q.innerHTML = C;
        this.insertAdjacentElement(a, q.content);
      }
      insertAdjacentText(a, C) {
        const q = this.ownerDocument.createTextNode(C);
        this.insertAdjacentElement(a, q);
      }
      cloneNode(a = false) {
        const { ownerDocument: C, localName: q } = this;
        const addNext = (a) => {
          a.parentNode = ae;
          knownAdjacent(Ue, a);
          Ue = a;
        };
        const re = element_create(C, this, q);
        let ae = re,
          Ue = re;
        let { [Is]: lt, [fs]: Pt } = this;
        while (lt !== Pt && (a || lt.nodeType === Gn)) {
          switch (lt.nodeType) {
            case xn:
              knownAdjacent(Ue, ae[fs]);
              Ue = ae[fs];
              ae = ae.parentNode;
              break;
            case Un: {
              const a = element_create(C, lt, lt.localName);
              addNext(a);
              ae = a;
              break;
            }
            case Gn: {
              const C = lt.cloneNode(a);
              C.ownerElement = ae;
              addNext(C);
              break;
            }
            case Hn:
            case Vn:
            case qn:
              addNext(lt.cloneNode(a));
              break;
          }
          lt = lt[Is];
        }
        knownAdjacent(Ue, re[fs]);
        return re;
      }
      toString() {
        const a = [];
        const { [fs]: C } = this;
        let q = { [Is]: this };
        let re = false;
        do {
          q = q[Is];
          switch (q.nodeType) {
            case Gn: {
              const C = ' ' + q;
              switch (C) {
                case ' id':
                case ' class':
                case ' style':
                  break;
                default:
                  a.push(C);
              }
              break;
            }
            case xn: {
              const C = q[Ss];
              if (re) {
                if ('ownerSVGElement' in C) a.push(' />');
                else if (isVoid(C)) a.push(ignoreCase(C) ? '>' : ' />');
                else a.push(`></${C.localName}>`);
                re = false;
              } else a.push(`</${C.localName}>`);
              break;
            }
            case Un:
              if (re) a.push('>');
              if (q.toString !== this.toString) {
                a.push(q.toString());
                q = q[fs];
                re = false;
              } else {
                a.push(`<${q.localName}`);
                re = true;
              }
              break;
            case Hn:
            case Vn:
            case qn:
              a.push((re ? '>' : '') + q);
              re = false;
              break;
          }
        } while (q !== C);
        return a.join('');
      }
      toJSON() {
        const a = [];
        elementAsJSON(this, a);
        return a;
      }
      getAttributeNS(a, C) {
        return this.getAttribute(C);
      }
      getElementsByTagNameNS(a, C) {
        return this.getElementsByTagName(C);
      }
      hasAttributeNS(a, C) {
        return this.hasAttribute(C);
      }
      removeAttributeNS(a, C) {
        this.removeAttribute(C);
      }
      setAttributeNS(a, C, q) {
        this.setAttribute(C, q);
      }
      setAttributeNodeNS(a) {
        return this.setAttributeNode(a);
      }
    }
    const Ca = new WeakMap();
    const ba = {
      get(a, C) {
        return a[C];
      },
      set(a, C, q) {
        a[C] = q;
        return true;
      }
    };
    class element_SVGElement extends element_Element {
      constructor(a, C, q = null) {
        super(a, C);
        this.ownerSVGElement = q;
      }
      get className() {
        if (!Ca.has(this))
          Ca.set(this, new Proxy({ baseVal: '', animVal: '' }, ba));
        return Ca.get(this);
      }
      set className(a) {
        const { classList: C } = this;
        C.clear();
        C.add(...mo(a).split(/\s+/));
      }
      get namespaceURI() {
        return 'http://www.w3.org/2000/svg';
      }
      getAttribute(a) {
        return a === 'class'
          ? [...this.classList].join(' ')
          : super.getAttribute(a);
      }
      setAttribute(a, C) {
        if (a === 'class') this.className = C;
        else if (a === 'style') {
          const { className: a } = this;
          a.baseVal = a.animVal = C;
        }
        super.setAttribute(a, C);
      }
    }
    const illegalConstructor = () => {
      throw new TypeError('Illegal constructor');
    };
    function facades_Attr() {
      illegalConstructor();
    }
    ho(facades_Attr, attr_Attr);
    facades_Attr.prototype = attr_Attr.prototype;
    function facades_CDATASection() {
      illegalConstructor();
    }
    ho(facades_CDATASection, cdata_section_CDATASection);
    facades_CDATASection.prototype = cdata_section_CDATASection.prototype;
    function facades_CharacterData() {
      illegalConstructor();
    }
    ho(facades_CharacterData, CharacterData);
    facades_CharacterData.prototype = CharacterData.prototype;
    function facades_Comment() {
      illegalConstructor();
    }
    ho(facades_Comment, comment_Comment);
    facades_Comment.prototype = comment_Comment.prototype;
    function facades_DocumentFragment() {
      illegalConstructor();
    }
    ho(facades_DocumentFragment, DocumentFragment);
    facades_DocumentFragment.prototype = DocumentFragment.prototype;
    function facades_DocumentType() {
      illegalConstructor();
    }
    ho(facades_DocumentType, document_type_DocumentType);
    facades_DocumentType.prototype = document_type_DocumentType.prototype;
    function facades_Element() {
      illegalConstructor();
    }
    ho(facades_Element, element_Element);
    facades_Element.prototype = element_Element.prototype;
    function facades_Node() {
      illegalConstructor();
    }
    ho(facades_Node, node_Node);
    facades_Node.prototype = node_Node.prototype;
    function facades_ShadowRoot() {
      illegalConstructor();
    }
    ho(facades_ShadowRoot, ShadowRoot);
    facades_ShadowRoot.prototype = ShadowRoot.prototype;
    function facades_Text() {
      illegalConstructor();
    }
    ho(facades_Text, text_Text);
    facades_Text.prototype = text_Text.prototype;
    function facades_SVGElement() {
      illegalConstructor();
    }
    ho(facades_SVGElement, element_SVGElement);
    facades_SVGElement.prototype = element_SVGElement.prototype;
    const ya = {
      Attr: facades_Attr,
      CDATASection: facades_CDATASection,
      CharacterData: facades_CharacterData,
      Comment: facades_Comment,
      DocumentFragment: facades_DocumentFragment,
      DocumentType: facades_DocumentType,
      Element: facades_Element,
      Node: facades_Node,
      ShadowRoot: facades_ShadowRoot,
      Text: facades_Text,
      SVGElement: facades_SVGElement
    };
    const Ia = new WeakMap();
    const wa = {
      get(a, C) {
        return (Ia.has(a) && Ia.get(a)[C]) || null;
      },
      set(a, C, q) {
        if (!Ia.has(a)) Ia.set(a, {});
        const re = Ia.get(a);
        const ae = C.slice(2);
        if (re[C]) a.removeEventListener(ae, re[C], false);
        if ((re[C] = q)) a.addEventListener(ae, q, false);
      }
    };
    class element_HTMLElement extends element_Element {
      static get observedAttributes() {
        return [];
      }
      constructor(a = null, C = '') {
        super(a, C);
        const q = !a;
        let re;
        if (q) {
          const { constructor: q } = this;
          if (!Eo.has(q))
            throw new Error('unable to initialize this Custom Element');
          ({ ownerDocument: a, localName: C, options: re } = Eo.get(q));
        }
        if (a[Ts]) {
          const { element: C, values: q } = a[Ts];
          a[Ts] = null;
          for (const [a, re] of q) C[a] = re;
          return C;
        }
        if (q) {
          this.ownerDocument = this[fs].ownerDocument = a;
          this.localName = C;
          Co.set(this, { connected: false });
          if (re.is) this.setAttribute('is', re.is);
        }
      }
      blur() {
        this.dispatchEvent(new GlobalEvent('blur'));
      }
      click() {
        const a = new GlobalEvent('click', { bubbles: true, cancelable: true });
        a.button = 0;
        this.dispatchEvent(a);
      }
      get accessKeyLabel() {
        const { accessKey: a } = this;
        return a && `Alt+Shift+${a}`;
      }
      get isContentEditable() {
        return this.hasAttribute('contenteditable');
      }
      get contentEditable() {
        return So.get(this, 'contenteditable');
      }
      set contentEditable(a) {
        So.set(this, 'contenteditable', a);
      }
      get draggable() {
        return So.get(this, 'draggable');
      }
      set draggable(a) {
        So.set(this, 'draggable', a);
      }
      get hidden() {
        return So.get(this, 'hidden');
      }
      set hidden(a) {
        So.set(this, 'hidden', a);
      }
      get spellcheck() {
        return So.get(this, 'spellcheck');
      }
      set spellcheck(a) {
        So.set(this, 'spellcheck', a);
      }
      get accessKey() {
        return To.get(this, 'accesskey');
      }
      set accessKey(a) {
        To.set(this, 'accesskey', a);
      }
      get dir() {
        return To.get(this, 'dir');
      }
      set dir(a) {
        To.set(this, 'dir', a);
      }
      get lang() {
        return To.get(this, 'lang');
      }
      set lang(a) {
        To.set(this, 'lang', a);
      }
      get title() {
        return To.get(this, 'title');
      }
      set title(a) {
        To.set(this, 'title', a);
      }
      get onabort() {
        return wa.get(this, 'onabort');
      }
      set onabort(a) {
        wa.set(this, 'onabort', a);
      }
      get onblur() {
        return wa.get(this, 'onblur');
      }
      set onblur(a) {
        wa.set(this, 'onblur', a);
      }
      get oncancel() {
        return wa.get(this, 'oncancel');
      }
      set oncancel(a) {
        wa.set(this, 'oncancel', a);
      }
      get oncanplay() {
        return wa.get(this, 'oncanplay');
      }
      set oncanplay(a) {
        wa.set(this, 'oncanplay', a);
      }
      get oncanplaythrough() {
        return wa.get(this, 'oncanplaythrough');
      }
      set oncanplaythrough(a) {
        wa.set(this, 'oncanplaythrough', a);
      }
      get onchange() {
        return wa.get(this, 'onchange');
      }
      set onchange(a) {
        wa.set(this, 'onchange', a);
      }
      get onclick() {
        return wa.get(this, 'onclick');
      }
      set onclick(a) {
        wa.set(this, 'onclick', a);
      }
      get onclose() {
        return wa.get(this, 'onclose');
      }
      set onclose(a) {
        wa.set(this, 'onclose', a);
      }
      get oncontextmenu() {
        return wa.get(this, 'oncontextmenu');
      }
      set oncontextmenu(a) {
        wa.set(this, 'oncontextmenu', a);
      }
      get oncuechange() {
        return wa.get(this, 'oncuechange');
      }
      set oncuechange(a) {
        wa.set(this, 'oncuechange', a);
      }
      get ondblclick() {
        return wa.get(this, 'ondblclick');
      }
      set ondblclick(a) {
        wa.set(this, 'ondblclick', a);
      }
      get ondrag() {
        return wa.get(this, 'ondrag');
      }
      set ondrag(a) {
        wa.set(this, 'ondrag', a);
      }
      get ondragend() {
        return wa.get(this, 'ondragend');
      }
      set ondragend(a) {
        wa.set(this, 'ondragend', a);
      }
      get ondragenter() {
        return wa.get(this, 'ondragenter');
      }
      set ondragenter(a) {
        wa.set(this, 'ondragenter', a);
      }
      get ondragleave() {
        return wa.get(this, 'ondragleave');
      }
      set ondragleave(a) {
        wa.set(this, 'ondragleave', a);
      }
      get ondragover() {
        return wa.get(this, 'ondragover');
      }
      set ondragover(a) {
        wa.set(this, 'ondragover', a);
      }
      get ondragstart() {
        return wa.get(this, 'ondragstart');
      }
      set ondragstart(a) {
        wa.set(this, 'ondragstart', a);
      }
      get ondrop() {
        return wa.get(this, 'ondrop');
      }
      set ondrop(a) {
        wa.set(this, 'ondrop', a);
      }
      get ondurationchange() {
        return wa.get(this, 'ondurationchange');
      }
      set ondurationchange(a) {
        wa.set(this, 'ondurationchange', a);
      }
      get onemptied() {
        return wa.get(this, 'onemptied');
      }
      set onemptied(a) {
        wa.set(this, 'onemptied', a);
      }
      get onended() {
        return wa.get(this, 'onended');
      }
      set onended(a) {
        wa.set(this, 'onended', a);
      }
      get onerror() {
        return wa.get(this, 'onerror');
      }
      set onerror(a) {
        wa.set(this, 'onerror', a);
      }
      get onfocus() {
        return wa.get(this, 'onfocus');
      }
      set onfocus(a) {
        wa.set(this, 'onfocus', a);
      }
      get oninput() {
        return wa.get(this, 'oninput');
      }
      set oninput(a) {
        wa.set(this, 'oninput', a);
      }
      get oninvalid() {
        return wa.get(this, 'oninvalid');
      }
      set oninvalid(a) {
        wa.set(this, 'oninvalid', a);
      }
      get onkeydown() {
        return wa.get(this, 'onkeydown');
      }
      set onkeydown(a) {
        wa.set(this, 'onkeydown', a);
      }
      get onkeypress() {
        return wa.get(this, 'onkeypress');
      }
      set onkeypress(a) {
        wa.set(this, 'onkeypress', a);
      }
      get onkeyup() {
        return wa.get(this, 'onkeyup');
      }
      set onkeyup(a) {
        wa.set(this, 'onkeyup', a);
      }
      get onload() {
        return wa.get(this, 'onload');
      }
      set onload(a) {
        wa.set(this, 'onload', a);
      }
      get onloadeddata() {
        return wa.get(this, 'onloadeddata');
      }
      set onloadeddata(a) {
        wa.set(this, 'onloadeddata', a);
      }
      get onloadedmetadata() {
        return wa.get(this, 'onloadedmetadata');
      }
      set onloadedmetadata(a) {
        wa.set(this, 'onloadedmetadata', a);
      }
      get onloadstart() {
        return wa.get(this, 'onloadstart');
      }
      set onloadstart(a) {
        wa.set(this, 'onloadstart', a);
      }
      get onmousedown() {
        return wa.get(this, 'onmousedown');
      }
      set onmousedown(a) {
        wa.set(this, 'onmousedown', a);
      }
      get onmouseenter() {
        return wa.get(this, 'onmouseenter');
      }
      set onmouseenter(a) {
        wa.set(this, 'onmouseenter', a);
      }
      get onmouseleave() {
        return wa.get(this, 'onmouseleave');
      }
      set onmouseleave(a) {
        wa.set(this, 'onmouseleave', a);
      }
      get onmousemove() {
        return wa.get(this, 'onmousemove');
      }
      set onmousemove(a) {
        wa.set(this, 'onmousemove', a);
      }
      get onmouseout() {
        return wa.get(this, 'onmouseout');
      }
      set onmouseout(a) {
        wa.set(this, 'onmouseout', a);
      }
      get onmouseover() {
        return wa.get(this, 'onmouseover');
      }
      set onmouseover(a) {
        wa.set(this, 'onmouseover', a);
      }
      get onmouseup() {
        return wa.get(this, 'onmouseup');
      }
      set onmouseup(a) {
        wa.set(this, 'onmouseup', a);
      }
      get onmousewheel() {
        return wa.get(this, 'onmousewheel');
      }
      set onmousewheel(a) {
        wa.set(this, 'onmousewheel', a);
      }
      get onpause() {
        return wa.get(this, 'onpause');
      }
      set onpause(a) {
        wa.set(this, 'onpause', a);
      }
      get onplay() {
        return wa.get(this, 'onplay');
      }
      set onplay(a) {
        wa.set(this, 'onplay', a);
      }
      get onplaying() {
        return wa.get(this, 'onplaying');
      }
      set onplaying(a) {
        wa.set(this, 'onplaying', a);
      }
      get onprogress() {
        return wa.get(this, 'onprogress');
      }
      set onprogress(a) {
        wa.set(this, 'onprogress', a);
      }
      get onratechange() {
        return wa.get(this, 'onratechange');
      }
      set onratechange(a) {
        wa.set(this, 'onratechange', a);
      }
      get onreset() {
        return wa.get(this, 'onreset');
      }
      set onreset(a) {
        wa.set(this, 'onreset', a);
      }
      get onresize() {
        return wa.get(this, 'onresize');
      }
      set onresize(a) {
        wa.set(this, 'onresize', a);
      }
      get onscroll() {
        return wa.get(this, 'onscroll');
      }
      set onscroll(a) {
        wa.set(this, 'onscroll', a);
      }
      get onseeked() {
        return wa.get(this, 'onseeked');
      }
      set onseeked(a) {
        wa.set(this, 'onseeked', a);
      }
      get onseeking() {
        return wa.get(this, 'onseeking');
      }
      set onseeking(a) {
        wa.set(this, 'onseeking', a);
      }
      get onselect() {
        return wa.get(this, 'onselect');
      }
      set onselect(a) {
        wa.set(this, 'onselect', a);
      }
      get onshow() {
        return wa.get(this, 'onshow');
      }
      set onshow(a) {
        wa.set(this, 'onshow', a);
      }
      get onstalled() {
        return wa.get(this, 'onstalled');
      }
      set onstalled(a) {
        wa.set(this, 'onstalled', a);
      }
      get onsubmit() {
        return wa.get(this, 'onsubmit');
      }
      set onsubmit(a) {
        wa.set(this, 'onsubmit', a);
      }
      get onsuspend() {
        return wa.get(this, 'onsuspend');
      }
      set onsuspend(a) {
        wa.set(this, 'onsuspend', a);
      }
      get ontimeupdate() {
        return wa.get(this, 'ontimeupdate');
      }
      set ontimeupdate(a) {
        wa.set(this, 'ontimeupdate', a);
      }
      get ontoggle() {
        return wa.get(this, 'ontoggle');
      }
      set ontoggle(a) {
        wa.set(this, 'ontoggle', a);
      }
      get onvolumechange() {
        return wa.get(this, 'onvolumechange');
      }
      set onvolumechange(a) {
        wa.set(this, 'onvolumechange', a);
      }
      get onwaiting() {
        return wa.get(this, 'onwaiting');
      }
      set onwaiting(a) {
        wa.set(this, 'onwaiting', a);
      }
      get onauxclick() {
        return wa.get(this, 'onauxclick');
      }
      set onauxclick(a) {
        wa.set(this, 'onauxclick', a);
      }
      get ongotpointercapture() {
        return wa.get(this, 'ongotpointercapture');
      }
      set ongotpointercapture(a) {
        wa.set(this, 'ongotpointercapture', a);
      }
      get onlostpointercapture() {
        return wa.get(this, 'onlostpointercapture');
      }
      set onlostpointercapture(a) {
        wa.set(this, 'onlostpointercapture', a);
      }
      get onpointercancel() {
        return wa.get(this, 'onpointercancel');
      }
      set onpointercancel(a) {
        wa.set(this, 'onpointercancel', a);
      }
      get onpointerdown() {
        return wa.get(this, 'onpointerdown');
      }
      set onpointerdown(a) {
        wa.set(this, 'onpointerdown', a);
      }
      get onpointerenter() {
        return wa.get(this, 'onpointerenter');
      }
      set onpointerenter(a) {
        wa.set(this, 'onpointerenter', a);
      }
      get onpointerleave() {
        return wa.get(this, 'onpointerleave');
      }
      set onpointerleave(a) {
        wa.set(this, 'onpointerleave', a);
      }
      get onpointermove() {
        return wa.get(this, 'onpointermove');
      }
      set onpointermove(a) {
        wa.set(this, 'onpointermove', a);
      }
      get onpointerout() {
        return wa.get(this, 'onpointerout');
      }
      set onpointerout(a) {
        wa.set(this, 'onpointerout', a);
      }
      get onpointerover() {
        return wa.get(this, 'onpointerover');
      }
      set onpointerover(a) {
        wa.set(this, 'onpointerover', a);
      }
      get onpointerup() {
        return wa.get(this, 'onpointerup');
      }
      set onpointerup(a) {
        wa.set(this, 'onpointerup', a);
      }
    }
    const Ba = 'template';
    class HTMLTemplateElement extends element_HTMLElement {
      constructor(a) {
        super(a, Ba);
        const C = this.ownerDocument.createDocumentFragment();
        (this[us] = C)[Qs] = this;
      }
      get content() {
        if (this.hasChildNodes() && !this[us].hasChildNodes()) {
          for (const a of this.childNodes)
            this[us].appendChild(a.cloneNode(true));
        }
        return this[us];
      }
    }
    registerHTMLClass(Ba, HTMLTemplateElement);
    class HTMLHtmlElement extends element_HTMLElement {
      constructor(a, C = 'html') {
        super(a, C);
      }
    }
    const { toString: Qa } = element_HTMLElement.prototype;
    class TextElement extends element_HTMLElement {
      get innerHTML() {
        return this.textContent;
      }
      set innerHTML(a) {
        this.textContent = a;
      }
      toString() {
        const a = Qa.call(this.cloneNode());
        return a.replace(/></, `>${this.textContent}<`);
      }
    }
    const va = 'script';
    class HTMLScriptElement extends TextElement {
      constructor(a, C = va) {
        super(a, C);
      }
      get type() {
        return To.get(this, 'type');
      }
      set type(a) {
        To.set(this, 'type', a);
      }
      get src() {
        return To.get(this, 'src');
      }
      set src(a) {
        To.set(this, 'src', a);
      }
      get defer() {
        return So.get(this, 'defer');
      }
      set defer(a) {
        So.set(this, 'defer', a);
      }
      get crossOrigin() {
        return To.get(this, 'crossorigin');
      }
      set crossOrigin(a) {
        To.set(this, 'crossorigin', a);
      }
      get nomodule() {
        return So.get(this, 'nomodule');
      }
      set nomodule(a) {
        So.set(this, 'nomodule', a);
      }
      get referrerPolicy() {
        return To.get(this, 'referrerpolicy');
      }
      set referrerPolicy(a) {
        To.set(this, 'referrerpolicy', a);
      }
      get nonce() {
        return To.get(this, 'nonce');
      }
      set nonce(a) {
        To.set(this, 'nonce', a);
      }
      get async() {
        return So.get(this, 'async');
      }
      set async(a) {
        So.set(this, 'async', a);
      }
      get text() {
        return this.textContent;
      }
      set text(a) {
        this.textContent = a;
      }
    }
    registerHTMLClass(va, HTMLScriptElement);
    class HTMLFrameElement extends element_HTMLElement {
      constructor(a, C = 'frame') {
        super(a, C);
      }
    }
    const Sa = 'iframe';
    class HTMLIFrameElement extends element_HTMLElement {
      constructor(a, C = Sa) {
        super(a, C);
      }
      get src() {
        return To.get(this, 'src');
      }
      set src(a) {
        To.set(this, 'src', a);
      }
      get srcdoc() {
        return To.get(this, 'srcdoc');
      }
      set srcdoc(a) {
        To.set(this, 'srcdoc', a);
      }
      get name() {
        return To.get(this, 'name');
      }
      set name(a) {
        To.set(this, 'name', a);
      }
      get allow() {
        return To.get(this, 'allow');
      }
      set allow(a) {
        To.set(this, 'allow', a);
      }
      get allowFullscreen() {
        return So.get(this, 'allowfullscreen');
      }
      set allowFullscreen(a) {
        So.set(this, 'allowfullscreen', a);
      }
      get referrerPolicy() {
        return To.get(this, 'referrerpolicy');
      }
      set referrerPolicy(a) {
        To.set(this, 'referrerpolicy', a);
      }
      get loading() {
        return To.get(this, 'loading');
      }
      set loading(a) {
        To.set(this, 'loading', a);
      }
    }
    registerHTMLClass(Sa, HTMLIFrameElement);
    class HTMLObjectElement extends element_HTMLElement {
      constructor(a, C = 'object') {
        super(a, C);
      }
    }
    class HTMLHeadElement extends element_HTMLElement {
      constructor(a, C = 'head') {
        super(a, C);
      }
    }
    class HTMLBodyElement extends element_HTMLElement {
      constructor(a, C = 'body') {
        super(a, C);
      }
    }
    var _a = __nccwpck_require__(7673);
    const Ta = 'style';
    class HTMLStyleElement extends TextElement {
      constructor(a, C = Ta) {
        super(a, C);
        this[vs] = null;
      }
      get sheet() {
        const a = this[vs];
        if (a !== null) {
          return a;
        }
        return (this[vs] = (0, _a.parse)(this.textContent));
      }
      get innerHTML() {
        return super.innerHTML || '';
      }
      set innerHTML(a) {
        super.textContent = a;
        this[vs] = null;
      }
      get innerText() {
        return super.innerText || '';
      }
      set innerText(a) {
        super.textContent = a;
        this[vs] = null;
      }
      get textContent() {
        return super.textContent || '';
      }
      set textContent(a) {
        super.textContent = a;
        this[vs] = null;
      }
    }
    registerHTMLClass(Ta, HTMLStyleElement);
    class HTMLTimeElement extends element_HTMLElement {
      constructor(a, C = 'time') {
        super(a, C);
      }
      get dateTime() {
        return To.get(this, 'datetime');
      }
      set dateTime(a) {
        To.set(this, 'datetime', a);
      }
    }
    registerHTMLClass('time', HTMLTimeElement);
    class HTMLFieldSetElement extends element_HTMLElement {
      constructor(a, C = 'fieldset') {
        super(a, C);
      }
    }
    class HTMLEmbedElement extends element_HTMLElement {
      constructor(a, C = 'embed') {
        super(a, C);
      }
    }
    class HTMLHRElement extends element_HTMLElement {
      constructor(a, C = 'hr') {
        super(a, C);
      }
    }
    class HTMLProgressElement extends element_HTMLElement {
      constructor(a, C = 'progress') {
        super(a, C);
      }
    }
    class HTMLParagraphElement extends element_HTMLElement {
      constructor(a, C = 'p') {
        super(a, C);
      }
    }
    class HTMLTableElement extends element_HTMLElement {
      constructor(a, C = 'table') {
        super(a, C);
      }
    }
    class HTMLFrameSetElement extends element_HTMLElement {
      constructor(a, C = 'frameset') {
        super(a, C);
      }
    }
    class HTMLLIElement extends element_HTMLElement {
      constructor(a, C = 'li') {
        super(a, C);
      }
    }
    class HTMLBaseElement extends element_HTMLElement {
      constructor(a, C = 'base') {
        super(a, C);
      }
    }
    class HTMLDataListElement extends element_HTMLElement {
      constructor(a, C = 'datalist') {
        super(a, C);
      }
    }
    const ka = 'input';
    class HTMLInputElement extends element_HTMLElement {
      constructor(a, C = ka) {
        super(a, C);
      }
      get autofocus() {
        return So.get(this, 'autofocus') || -1;
      }
      set autofocus(a) {
        So.set(this, 'autofocus', a);
      }
      get disabled() {
        return So.get(this, 'disabled');
      }
      set disabled(a) {
        So.set(this, 'disabled', a);
      }
      get name() {
        return this.getAttribute('name');
      }
      set name(a) {
        this.setAttribute('name', a);
      }
      get placeholder() {
        return this.getAttribute('placeholder');
      }
      set placeholder(a) {
        this.setAttribute('placeholder', a);
      }
      get type() {
        return this.getAttribute('type');
      }
      set type(a) {
        this.setAttribute('type', a);
      }
      get value() {
        return To.get(this, 'value');
      }
      set value(a) {
        To.set(this, 'value', a);
      }
    }
    registerHTMLClass(ka, HTMLInputElement);
    class HTMLParamElement extends element_HTMLElement {
      constructor(a, C = 'param') {
        super(a, C);
      }
    }
    class HTMLMediaElement extends element_HTMLElement {
      constructor(a, C = 'media') {
        super(a, C);
      }
    }
    class HTMLAudioElement extends element_HTMLElement {
      constructor(a, C = 'audio') {
        super(a, C);
      }
    }
    const Ra = 'h1';
    class HTMLHeadingElement extends element_HTMLElement {
      constructor(a, C = Ra) {
        super(a, C);
      }
    }
    registerHTMLClass([Ra, 'h2', 'h3', 'h4', 'h5', 'h6'], HTMLHeadingElement);
    class HTMLDirectoryElement extends element_HTMLElement {
      constructor(a, C = 'dir') {
        super(a, C);
      }
    }
    class HTMLQuoteElement extends element_HTMLElement {
      constructor(a, C = 'quote') {
        super(a, C);
      }
    }
    var Da = __nccwpck_require__(8653);
    const { createCanvas: Na } = Da;
    const La = 'canvas';
    class HTMLCanvasElement extends element_HTMLElement {
      constructor(a, C = La) {
        super(a, C);
        this[Cs] = Na(300, 150);
      }
      get width() {
        return this[Cs].width;
      }
      set width(a) {
        _o.set(this, 'width', a);
        this[Cs].width = a;
      }
      get height() {
        return this[Cs].height;
      }
      set height(a) {
        _o.set(this, 'height', a);
        this[Cs].height = a;
      }
      getContext(a) {
        return this[Cs].getContext(a);
      }
      toDataURL(...a) {
        return this[Cs].toDataURL(...a);
      }
    }
    registerHTMLClass(La, HTMLCanvasElement);
    class HTMLLegendElement extends element_HTMLElement {
      constructor(a, C = 'legend') {
        super(a, C);
      }
    }
    const Fa = 'option';
    class HTMLOptionElement extends element_HTMLElement {
      constructor(a, C = Fa) {
        super(a, C);
      }
      get value() {
        return To.get(this, 'value');
      }
      set value(a) {
        To.set(this, 'value', a);
      }
      get selected() {
        return So.get(this, 'selected');
      }
      set selected(a) {
        const C = this.parentElement?.querySelector('option[selected]');
        if (C && C !== this) C.selected = false;
        So.set(this, 'selected', a);
      }
    }
    registerHTMLClass(Fa, HTMLOptionElement);
    class HTMLSpanElement extends element_HTMLElement {
      constructor(a, C = 'span') {
        super(a, C);
      }
    }
    class HTMLMeterElement extends element_HTMLElement {
      constructor(a, C = 'meter') {
        super(a, C);
      }
    }
    class HTMLVideoElement extends element_HTMLElement {
      constructor(a, C = 'video') {
        super(a, C);
      }
    }
    class HTMLTableCellElement extends element_HTMLElement {
      constructor(a, C = 'td') {
        super(a, C);
      }
    }
    const Ma = 'title';
    class HTMLTitleElement extends TextElement {
      constructor(a, C = Ma) {
        super(a, C);
      }
    }
    registerHTMLClass(Ma, HTMLTitleElement);
    class HTMLOutputElement extends element_HTMLElement {
      constructor(a, C = 'output') {
        super(a, C);
      }
    }
    class HTMLTableRowElement extends element_HTMLElement {
      constructor(a, C = 'tr') {
        super(a, C);
      }
    }
    class HTMLDataElement extends element_HTMLElement {
      constructor(a, C = 'data') {
        super(a, C);
      }
    }
    class HTMLMenuElement extends element_HTMLElement {
      constructor(a, C = 'menu') {
        super(a, C);
      }
    }
    const Pa = 'select';
    class HTMLSelectElement extends element_HTMLElement {
      constructor(a, C = Pa) {
        super(a, C);
      }
      get options() {
        let a = new NodeList();
        let { firstElementChild: C } = this;
        while (C) {
          if (C.tagName === 'OPTGROUP') a.push(...C.children);
          else a.push(C);
          C = C.nextElementSibling;
        }
        return a;
      }
      get disabled() {
        return So.get(this, 'disabled');
      }
      set disabled(a) {
        So.set(this, 'disabled', a);
      }
      get name() {
        return this.getAttribute('name');
      }
      set name(a) {
        this.setAttribute('name', a);
      }
      get value() {
        return this.querySelector('option[selected]')?.value;
      }
    }
    registerHTMLClass(Pa, HTMLSelectElement);
    class HTMLBRElement extends element_HTMLElement {
      constructor(a, C = 'br') {
        super(a, C);
      }
    }
    const Oa = 'button';
    class HTMLButtonElement extends element_HTMLElement {
      constructor(a, C = Oa) {
        super(a, C);
      }
      get disabled() {
        return So.get(this, 'disabled');
      }
      set disabled(a) {
        So.set(this, 'disabled', a);
      }
      get name() {
        return this.getAttribute('name');
      }
      set name(a) {
        this.setAttribute('name', a);
      }
      get type() {
        return this.getAttribute('type');
      }
      set type(a) {
        this.setAttribute('type', a);
      }
    }
    registerHTMLClass(Oa, HTMLButtonElement);
    class HTMLMapElement extends element_HTMLElement {
      constructor(a, C = 'map') {
        super(a, C);
      }
    }
    class HTMLOptGroupElement extends element_HTMLElement {
      constructor(a, C = 'optgroup') {
        super(a, C);
      }
    }
    class HTMLDListElement extends element_HTMLElement {
      constructor(a, C = 'dl') {
        super(a, C);
      }
    }
    const xa = 'textarea';
    class HTMLTextAreaElement extends TextElement {
      constructor(a, C = xa) {
        super(a, C);
      }
      get disabled() {
        return So.get(this, 'disabled');
      }
      set disabled(a) {
        So.set(this, 'disabled', a);
      }
      get name() {
        return this.getAttribute('name');
      }
      set name(a) {
        this.setAttribute('name', a);
      }
      get placeholder() {
        return this.getAttribute('placeholder');
      }
      set placeholder(a) {
        this.setAttribute('placeholder', a);
      }
      get type() {
        return this.getAttribute('type');
      }
      set type(a) {
        this.setAttribute('type', a);
      }
      get value() {
        return this.textContent;
      }
      set value(a) {
        this.textContent = a;
      }
    }
    registerHTMLClass(xa, HTMLTextAreaElement);
    class HTMLFontElement extends element_HTMLElement {
      constructor(a, C = 'font') {
        super(a, C);
      }
    }
    class HTMLDivElement extends element_HTMLElement {
      constructor(a, C = 'div') {
        super(a, C);
      }
    }
    const Ua = 'link';
    class HTMLLinkElement extends element_HTMLElement {
      constructor(a, C = Ua) {
        super(a, C);
      }
      get disabled() {
        return So.get(this, 'disabled');
      }
      set disabled(a) {
        So.set(this, 'disabled', a);
      }
      get href() {
        return To.get(this, 'href');
      }
      set href(a) {
        To.set(this, 'href', a);
      }
      get hreflang() {
        return To.get(this, 'hreflang');
      }
      set hreflang(a) {
        To.set(this, 'hreflang', a);
      }
      get media() {
        return To.get(this, 'media');
      }
      set media(a) {
        To.set(this, 'media', a);
      }
      get rel() {
        return To.get(this, 'rel');
      }
      set rel(a) {
        To.set(this, 'rel', a);
      }
      get type() {
        return To.get(this, 'type');
      }
      set type(a) {
        To.set(this, 'type', a);
      }
    }
    registerHTMLClass(Ua, HTMLLinkElement);
    const Ga = 'slot';
    class HTMLSlotElement extends element_HTMLElement {
      constructor(a, C = Ga) {
        super(a, C);
      }
      get name() {
        return this.getAttribute('name');
      }
      set name(a) {
        this.setAttribute('name', a);
      }
      assign() {}
      assignedNodes(a) {
        const C = !!this.name;
        const q = this.getRootNode().host?.childNodes ?? [];
        let re;
        if (C) {
          re = [...q].filter((a) => a.slot === this.name);
        } else {
          re = [...q].filter((a) => !a.slot);
        }
        if (a?.flatten) {
          const a = [];
          for (let C of re) {
            if (C.localName === 'slot') {
              a.push(...C.assignedNodes({ flatten: true }));
            } else {
              a.push(C);
            }
          }
          re = a;
        }
        return re.length ? re : [...this.childNodes];
      }
      assignedElements(a) {
        const C = this.assignedNodes(a).filter((a) => a.nodeType === 1);
        return C.length ? C : [...this.children];
      }
    }
    registerHTMLClass(Ga, HTMLSlotElement);
    class HTMLFormElement extends element_HTMLElement {
      constructor(a, C = 'form') {
        super(a, C);
      }
    }
    const Ha = 'img';
    class HTMLImageElement extends element_HTMLElement {
      constructor(a, C = Ha) {
        super(a, C);
      }
      get alt() {
        return To.get(this, 'alt');
      }
      set alt(a) {
        To.set(this, 'alt', a);
      }
      get sizes() {
        return To.get(this, 'sizes');
      }
      set sizes(a) {
        To.set(this, 'sizes', a);
      }
      get src() {
        return To.get(this, 'src');
      }
      set src(a) {
        To.set(this, 'src', a);
      }
      get srcset() {
        return To.get(this, 'srcset');
      }
      set srcset(a) {
        To.set(this, 'srcset', a);
      }
      get title() {
        return To.get(this, 'title');
      }
      set title(a) {
        To.set(this, 'title', a);
      }
      get width() {
        return _o.get(this, 'width');
      }
      set width(a) {
        _o.set(this, 'width', a);
      }
      get height() {
        return _o.get(this, 'height');
      }
      set height(a) {
        _o.set(this, 'height', a);
      }
    }
    registerHTMLClass(Ha, HTMLImageElement);
    class HTMLPreElement extends element_HTMLElement {
      constructor(a, C = 'pre') {
        super(a, C);
      }
    }
    class HTMLUListElement extends element_HTMLElement {
      constructor(a, C = 'ul') {
        super(a, C);
      }
    }
    const qa = 'meta';
    class HTMLMetaElement extends element_HTMLElement {
      constructor(a, C = qa) {
        super(a, C);
      }
      get name() {
        return To.get(this, 'name');
      }
      set name(a) {
        To.set(this, 'name', a);
      }
      get httpEquiv() {
        return To.get(this, 'http-equiv');
      }
      set httpEquiv(a) {
        To.set(this, 'http-equiv', a);
      }
      get content() {
        return To.get(this, 'content');
      }
      set content(a) {
        To.set(this, 'content', a);
      }
      get charset() {
        return To.get(this, 'charset');
      }
      set charset(a) {
        To.set(this, 'charset', a);
      }
      get media() {
        return To.get(this, 'media');
      }
      set media(a) {
        To.set(this, 'media', a);
      }
    }
    registerHTMLClass(qa, HTMLMetaElement);
    class HTMLPictureElement extends element_HTMLElement {
      constructor(a, C = 'picture') {
        super(a, C);
      }
    }
    class HTMLAreaElement extends element_HTMLElement {
      constructor(a, C = 'area') {
        super(a, C);
      }
    }
    class HTMLOListElement extends element_HTMLElement {
      constructor(a, C = 'ol') {
        super(a, C);
      }
    }
    class HTMLTableCaptionElement extends element_HTMLElement {
      constructor(a, C = 'caption') {
        super(a, C);
      }
    }
    const Va = 'a';
    class HTMLAnchorElement extends element_HTMLElement {
      constructor(a, C = Va) {
        super(a, C);
      }
      get href() {
        return encodeURI(decodeURI(To.get(this, 'href')));
      }
      set href(a) {
        To.set(this, 'href', decodeURI(a));
      }
      get download() {
        return encodeURI(decodeURI(To.get(this, 'download')));
      }
      set download(a) {
        To.set(this, 'download', decodeURI(a));
      }
      get target() {
        return To.get(this, 'target');
      }
      set target(a) {
        To.set(this, 'target', a);
      }
      get type() {
        return To.get(this, 'type');
      }
      set type(a) {
        To.set(this, 'type', a);
      }
      get rel() {
        return To.get(this, 'rel');
      }
      set rel(a) {
        To.set(this, 'rel', a);
      }
    }
    registerHTMLClass(Va, HTMLAnchorElement);
    class HTMLLabelElement extends element_HTMLElement {
      constructor(a, C = 'label') {
        super(a, C);
      }
    }
    class HTMLUnknownElement extends element_HTMLElement {
      constructor(a, C = 'unknown') {
        super(a, C);
      }
    }
    class HTMLModElement extends element_HTMLElement {
      constructor(a, C = 'mod') {
        super(a, C);
      }
    }
    class HTMLDetailsElement extends element_HTMLElement {
      constructor(a, C = 'details') {
        super(a, C);
      }
    }
    const Wa = 'source';
    class HTMLSourceElement extends element_HTMLElement {
      constructor(a, C = Wa) {
        super(a, C);
      }
      get src() {
        return To.get(this, 'src');
      }
      set src(a) {
        To.set(this, 'src', a);
      }
      get srcset() {
        return To.get(this, 'srcset');
      }
      set srcset(a) {
        To.set(this, 'srcset', a);
      }
      get sizes() {
        return To.get(this, 'sizes');
      }
      set sizes(a) {
        To.set(this, 'sizes', a);
      }
      get type() {
        return To.get(this, 'type');
      }
      set type(a) {
        To.set(this, 'type', a);
      }
    }
    registerHTMLClass(Wa, HTMLSourceElement);
    class HTMLTrackElement extends element_HTMLElement {
      constructor(a, C = 'track') {
        super(a, C);
      }
    }
    class HTMLMarqueeElement extends element_HTMLElement {
      constructor(a, C = 'marquee') {
        super(a, C);
      }
    }
    const Ya = {
      HTMLElement: element_HTMLElement,
      HTMLTemplateElement: HTMLTemplateElement,
      HTMLHtmlElement: HTMLHtmlElement,
      HTMLScriptElement: HTMLScriptElement,
      HTMLFrameElement: HTMLFrameElement,
      HTMLIFrameElement: HTMLIFrameElement,
      HTMLObjectElement: HTMLObjectElement,
      HTMLHeadElement: HTMLHeadElement,
      HTMLBodyElement: HTMLBodyElement,
      HTMLStyleElement: HTMLStyleElement,
      HTMLTimeElement: HTMLTimeElement,
      HTMLFieldSetElement: HTMLFieldSetElement,
      HTMLEmbedElement: HTMLEmbedElement,
      HTMLHRElement: HTMLHRElement,
      HTMLProgressElement: HTMLProgressElement,
      HTMLParagraphElement: HTMLParagraphElement,
      HTMLTableElement: HTMLTableElement,
      HTMLFrameSetElement: HTMLFrameSetElement,
      HTMLLIElement: HTMLLIElement,
      HTMLBaseElement: HTMLBaseElement,
      HTMLDataListElement: HTMLDataListElement,
      HTMLInputElement: HTMLInputElement,
      HTMLParamElement: HTMLParamElement,
      HTMLMediaElement: HTMLMediaElement,
      HTMLAudioElement: HTMLAudioElement,
      HTMLHeadingElement: HTMLHeadingElement,
      HTMLDirectoryElement: HTMLDirectoryElement,
      HTMLQuoteElement: HTMLQuoteElement,
      HTMLCanvasElement: HTMLCanvasElement,
      HTMLLegendElement: HTMLLegendElement,
      HTMLOptionElement: HTMLOptionElement,
      HTMLSpanElement: HTMLSpanElement,
      HTMLMeterElement: HTMLMeterElement,
      HTMLVideoElement: HTMLVideoElement,
      HTMLTableCellElement: HTMLTableCellElement,
      HTMLTitleElement: HTMLTitleElement,
      HTMLOutputElement: HTMLOutputElement,
      HTMLTableRowElement: HTMLTableRowElement,
      HTMLDataElement: HTMLDataElement,
      HTMLMenuElement: HTMLMenuElement,
      HTMLSelectElement: HTMLSelectElement,
      HTMLBRElement: HTMLBRElement,
      HTMLButtonElement: HTMLButtonElement,
      HTMLMapElement: HTMLMapElement,
      HTMLOptGroupElement: HTMLOptGroupElement,
      HTMLDListElement: HTMLDListElement,
      HTMLTextAreaElement: HTMLTextAreaElement,
      HTMLFontElement: HTMLFontElement,
      HTMLDivElement: HTMLDivElement,
      HTMLLinkElement: HTMLLinkElement,
      HTMLSlotElement: HTMLSlotElement,
      HTMLFormElement: HTMLFormElement,
      HTMLImageElement: HTMLImageElement,
      HTMLPreElement: HTMLPreElement,
      HTMLUListElement: HTMLUListElement,
      HTMLMetaElement: HTMLMetaElement,
      HTMLPictureElement: HTMLPictureElement,
      HTMLAreaElement: HTMLAreaElement,
      HTMLOListElement: HTMLOListElement,
      HTMLTableCaptionElement: HTMLTableCaptionElement,
      HTMLAnchorElement: HTMLAnchorElement,
      HTMLLabelElement: HTMLLabelElement,
      HTMLUnknownElement: HTMLUnknownElement,
      HTMLModElement: HTMLModElement,
      HTMLDetailsElement: HTMLDetailsElement,
      HTMLSourceElement: HTMLSourceElement,
      HTMLTrackElement: HTMLTrackElement,
      HTMLMarqueeElement: HTMLMarqueeElement
    };
    const ja = { test: () => true };
    const Ja = {
      'text/html': {
        docType: '<!DOCTYPE html>',
        ignoreCase: true,
        voidElements:
          /^(?:area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)$/i
      },
      'image/svg+xml': {
        docType: '<?xml version="1.0" encoding="utf-8"?>',
        ignoreCase: false,
        voidElements: ja
      },
      'text/xml': {
        docType: '<?xml version="1.0" encoding="utf-8"?>',
        ignoreCase: false,
        voidElements: ja
      },
      'application/xml': {
        docType: '<?xml version="1.0" encoding="utf-8"?>',
        ignoreCase: false,
        voidElements: ja
      },
      'application/xhtml+xml': {
        docType: '<?xml version="1.0" encoding="utf-8"?>',
        ignoreCase: false,
        voidElements: ja
      }
    };
    class CustomEvent extends GlobalEvent {
      constructor(a, C = {}) {
        super(a, C);
        this.detail = C.detail;
      }
    }
    class InputEvent extends GlobalEvent {
      constructor(a, C = {}) {
        super(a, C);
        this.inputType = C.inputType;
        this.data = C.data;
        this.dataTransfer = C.dataTransfer;
        this.isComposing = C.isComposing || false;
        this.ranges = C.ranges;
      }
    }
    const ImageClass = (a) =>
      class Image extends HTMLImageElement {
        constructor(C, q) {
          super(a);
          switch (arguments.length) {
            case 1:
              this.height = C;
              this.width = C;
              break;
            case 2:
              this.height = q;
              this.width = C;
              break;
          }
        }
      };
    const deleteContents = ({ [Ss]: a, [fs]: C }, q = null) => {
      setAdjacent(a[Bs], C[Is]);
      do {
        const re = getEnd(a);
        const ae = re === C ? re : re[Is];
        if (q) q.insertBefore(a, q[fs]);
        else a.remove();
        a = ae;
      } while (a !== C);
    };
    class Range {
      constructor() {
        this[Ss] = null;
        this[fs] = null;
        this.commonAncestorContainer = null;
      }
      insertNode(a) {
        this[fs].parentNode.insertBefore(a, this[Ss]);
      }
      selectNode(a) {
        this[Ss] = a;
        this[fs] = getEnd(a);
      }
      selectNodeContents(a) {
        this.selectNode(a);
        this.commonAncestorContainer = a;
      }
      surroundContents(a) {
        a.replaceChildren(this.extractContents());
      }
      setStartBefore(a) {
        this[Ss] = a;
      }
      setStartAfter(a) {
        this[Ss] = a.nextSibling;
      }
      setEndBefore(a) {
        this[fs] = getEnd(a.previousSibling);
      }
      setEndAfter(a) {
        this[fs] = getEnd(a);
      }
      cloneContents() {
        let { [Ss]: a, [fs]: C } = this;
        const q = a.ownerDocument.createDocumentFragment();
        while (a !== C) {
          q.insertBefore(a.cloneNode(true), q[fs]);
          a = getEnd(a);
          if (a !== C) a = a[Is];
        }
        return q;
      }
      deleteContents() {
        deleteContents(this);
      }
      extractContents() {
        const a = this[Ss].ownerDocument.createDocumentFragment();
        deleteContents(this, a);
        return a;
      }
      createContextualFragment(a) {
        const { commonAncestorContainer: C } = this;
        const q = 'ownerSVGElement' in C;
        const re = q ? C.ownerDocument : C;
        const ae = re.createElement('template');
        ae.innerHTML = a;
        let { content: Ue } = ae;
        if (q) {
          const a = [...Ue.childNodes];
          Ue = re.createDocumentFragment();
          Object.setPrototypeOf(Ue, element_SVGElement.prototype);
          Ue.ownerSVGElement = re;
          for (const C of a) {
            Object.setPrototypeOf(C, element_SVGElement.prototype);
            C.ownerSVGElement = re;
            Ue.appendChild(C);
          }
        } else this.selectNode(Ue);
        return Ue;
      }
      cloneRange() {
        const a = new Range();
        a[Ss] = this[Ss];
        a[fs] = this[fs];
        return a;
      }
    }
    const isOK = ({ nodeType: a }, C) => {
      switch (a) {
        case Un:
          return C & $n;
        case Hn:
          return C & Kn;
        case Vn:
          return C & Zn;
        case qn:
          return C & Xn;
      }
      return 0;
    };
    class TreeWalker {
      constructor(a, C = zn) {
        this.root = a;
        this.currentNode = a;
        this.whatToShow = C;
        let { [Is]: q, [fs]: re } = a;
        if (a.nodeType === Wn) {
          const { documentElement: C } = a;
          q = C;
          re = C[fs];
        }
        const ae = [];
        while (q !== re) {
          if (isOK(q, C)) ae.push(q);
          q = q[Is];
        }
        this[Qs] = { i: 0, nodes: ae };
      }
      nextNode() {
        const a = this[Qs];
        this.currentNode = a.i < a.nodes.length ? a.nodes[a.i++] : null;
        return this.currentNode;
      }
    }
    const query = (a, C, q) => {
      let { [Is]: re, [fs]: ae } = C;
      return a.call({ ownerDocument: C, [Is]: re, [fs]: ae }, q);
    };
    const za = io({}, ya, Ya, {
      CustomEvent: CustomEvent,
      Event: GlobalEvent,
      EventTarget: DOMEventTarget,
      InputEvent: InputEvent,
      NamedNodeMap: NamedNodeMap,
      NodeList: NodeList
    });
    const $a = new WeakMap();
    class document_Document extends NonElementParentNode {
      constructor(a) {
        super(null, '#document', Wn);
        this[ds] = { active: false, registry: null };
        this[ys] = { active: false, class: null };
        this[bs] = Ja[a];
        this[hs] = null;
        this[ms] = null;
        this[Es] = null;
        this[Cs] = null;
        this[Ts] = null;
      }
      get defaultView() {
        if (!$a.has(this))
          $a.set(
            this,
            new Proxy(globalThis, {
              set: (a, C, q) => {
                switch (C) {
                  case 'addEventListener':
                  case 'removeEventListener':
                  case 'dispatchEvent':
                    this[gs][C] = q;
                    break;
                  default:
                    a[C] = q;
                    break;
                }
                return true;
              },
              get: (a, C) => {
                switch (C) {
                  case 'addEventListener':
                  case 'removeEventListener':
                  case 'dispatchEvent':
                    if (!this[gs]) {
                      const a = (this[gs] = new DOMEventTarget());
                      a.dispatchEvent = a.dispatchEvent.bind(a);
                      a.addEventListener = a.addEventListener.bind(a);
                      a.removeEventListener = a.removeEventListener.bind(a);
                    }
                    return this[gs][C];
                  case 'document':
                    return this;
                  case 'navigator':
                    return {
                      userAgent:
                        'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.150 Safari/537.36'
                    };
                  case 'window':
                    return $a.get(this);
                  case 'customElements':
                    if (!this[ds].registry)
                      this[ds] = new CustomElementRegistry(this);
                    return this[ds];
                  case 'performance':
                    return Qo.S;
                  case 'DOMParser':
                    return this[ms];
                  case 'Image':
                    if (!this[Cs]) this[Cs] = ImageClass(this);
                    return this[Cs];
                  case 'MutationObserver':
                    if (!this[ys].class)
                      this[ys] = new MutationObserverClass(this);
                    return this[ys].class;
                }
                return (this[Es] && this[Es][C]) || za[C] || a[C];
              }
            })
          );
        return $a.get(this);
      }
      get doctype() {
        const a = this[hs];
        if (a) return a;
        const { firstChild: C } = this;
        if (C && C.nodeType === Yn) return (this[hs] = C);
        return null;
      }
      set doctype(a) {
        if (
          /^([a-z:]+)(\s+system|\s+public(\s+"([^"]+)")?)?(\s+"([^"]+)")?/i.test(
            a
          )
        ) {
          const { $1: a, $4: C, $6: q } = RegExp;
          this[hs] = new document_type_DocumentType(this, a, C, q);
          utils_knownSiblings(this, this[hs], this[Is]);
        }
      }
      get documentElement() {
        return this.firstElementChild;
      }
      get isConnected() {
        return true;
      }
      _getParent() {
        return this[gs];
      }
      createAttribute(a) {
        return new attr_Attr(this, a);
      }
      createCDATASection(a) {
        return new cdata_section_CDATASection(this, a);
      }
      createComment(a) {
        return new comment_Comment(this, a);
      }
      createDocumentFragment() {
        return new DocumentFragment(this);
      }
      createDocumentType(a, C, q) {
        return new document_type_DocumentType(this, a, C, q);
      }
      createElement(a) {
        return new element_Element(this, a);
      }
      createRange() {
        const a = new Range();
        a.commonAncestorContainer = this;
        return a;
      }
      createTextNode(a) {
        return new text_Text(this, a);
      }
      createTreeWalker(a, C = -1) {
        return new TreeWalker(a, C);
      }
      createNodeIterator(a, C = -1) {
        return this.createTreeWalker(a, C);
      }
      createEvent(a) {
        const C = lo(a === 'Event' ? new GlobalEvent('') : new CustomEvent(''));
        C.initEvent = C.initCustomEvent = (a, q = false, re = false, ae) => {
          C.bubbles = !!q;
          co(C, {
            type: { value: a },
            canBubble: { value: q },
            cancelable: { value: re },
            detail: { value: ae }
          });
        };
        return C;
      }
      cloneNode(a = false) {
        const { constructor: C, [ds]: q, [hs]: re } = this;
        const ae = new C();
        ae[ds] = q;
        if (a) {
          const a = ae[fs];
          const { childNodes: C } = this;
          for (let { length: q } = C, re = 0; re < q; re++)
            ae.insertBefore(C[re].cloneNode(true), a);
          if (re) ae[hs] = C[0];
        }
        return ae;
      }
      importNode(a) {
        const C = 1 < arguments.length && !!arguments[1];
        const q = a.cloneNode(C);
        const { [ds]: re } = this;
        const { active: ae } = re;
        const upgrade = (a) => {
          const { ownerDocument: C, nodeType: q } = a;
          a.ownerDocument = this;
          if (ae && C !== this && q === Un) re.upgrade(a);
        };
        upgrade(q);
        if (C) {
          switch (q.nodeType) {
            case Un:
            case jn: {
              let { [Is]: a, [fs]: C } = q;
              while (a !== C) {
                if (a.nodeType === Un) upgrade(a);
                a = a[Is];
              }
              break;
            }
          }
        }
        return q;
      }
      toString() {
        return this.childNodes.join('');
      }
      querySelector(a) {
        return query(super.querySelector, this, a);
      }
      querySelectorAll(a) {
        return query(super.querySelectorAll, this, a);
      }
      getElementsByTagNameNS(a, C) {
        return this.getElementsByTagName(C);
      }
      createAttributeNS(a, C) {
        return this.createAttribute(C);
      }
      createElementNS(a, C, q) {
        return a === ao
          ? new element_SVGElement(this, C, null)
          : this.createElement(C, q);
      }
    }
    ho(
      (za.Document = function Document() {
        illegalConstructor();
      }),
      document_Document
    ).prototype = document_Document.prototype;
    const createHTMLElement = (a, C, q, re) => {
      if (!C && Bo.has(q)) {
        const C = Bo.get(q);
        return new C(a, q);
      }
      const {
        [ds]: { active: ae, registry: Ue }
      } = a;
      if (ae) {
        const ae = C ? re.is : q;
        if (Ue.has(ae)) {
          const { Class: C } = Ue.get(ae);
          const re = new C(a, q);
          Co.set(re, { connected: false });
          return re;
        }
      }
      return new element_HTMLElement(a, q);
    };
    class document_HTMLDocument extends document_Document {
      constructor() {
        super('text/html');
      }
      get all() {
        const a = new NodeList();
        let { [Is]: C, [fs]: q } = this;
        while (C !== q) {
          switch (C.nodeType) {
            case Un:
              a.push(C);
              break;
          }
          C = C[Is];
        }
        return a;
      }
      get head() {
        const { documentElement: a } = this;
        let { firstElementChild: C } = a;
        if (!C || C.tagName !== 'HEAD') {
          C = this.createElement('head');
          a.prepend(C);
        }
        return C;
      }
      get body() {
        const { head: a } = this;
        let { nextElementSibling: C } = a;
        if (!C || C.tagName !== 'BODY') {
          C = this.createElement('body');
          a.after(C);
        }
        return C;
      }
      get title() {
        const { head: a } = this;
        return a.getElementsByTagName('title').at(0)?.textContent || '';
      }
      set title(a) {
        const { head: C } = this;
        let q = C.getElementsByTagName('title').at(0);
        if (q) q.textContent = a;
        else {
          C.insertBefore(
            this.createElement('title'),
            C.firstChild
          ).textContent = a;
        }
      }
      createElement(a, C) {
        const q = !!(C && C.is);
        const re = createHTMLElement(this, q, a, C);
        if (q) re.setAttribute('is', C.is);
        return re;
      }
    }
    class SVGDocument extends document_Document {
      constructor() {
        super('image/svg+xml');
      }
      toString() {
        return this[bs].docType + super.toString();
      }
    }
    class XMLDocument extends document_Document {
      constructor() {
        super('text/xml');
      }
      toString() {
        return this[bs].docType + super.toString();
      }
    }
    class DOMParser {
      parseFromString(a, C, q = null) {
        let re = false,
          ae;
        if (C === 'text/html') {
          re = true;
          ae = new document_HTMLDocument();
        } else if (C === 'image/svg+xml') ae = new SVGDocument();
        else ae = new XMLDocument();
        ae[ms] = DOMParser;
        if (q) ae[Es] = q;
        if (re && a === '...')
          a = '<!doctype html><html><head></head><body></body></html>';
        return a ? parseFromString(ae, re, a) : ae;
      }
    }
    const { parse: Ka } = JSON;
    const parse_json_append = (a, C, q) => {
      C.parentNode = a;
      knownSiblings(q[PREV], C, q);
    };
    const parse_json_createHTMLElement = (a, C) => {
      if (htmlClasses.has(C)) {
        const q = htmlClasses.get(C);
        return new q(a, C);
      }
      return new HTMLElement(a, C);
    };
    const parseJSON = (a) => {
      const C = typeof a === 'string' ? Ka(a) : a;
      const { length: q } = C;
      const re = new HTMLDocument();
      let ae = re,
        Ue = ae[END],
        lt = false,
        Pt = 0;
      while (Pt < q) {
        let a = C[Pt++];
        switch (a) {
          case ELEMENT_NODE: {
            const a = C[Pt++];
            const q = lt || a === 'svg' || a === 'SVG';
            const Wt = q
              ? new SVGElement(re, a, ae.ownerSVGElement || null)
              : parse_json_createHTMLElement(re, a);
            knownBoundaries(Ue[PREV], Wt, Ue);
            Wt.parentNode = ae;
            ae = Wt;
            Ue = ae[END];
            lt = q;
            break;
          }
          case ATTRIBUTE_NODE: {
            const a = C[Pt++];
            const q = typeof C[Pt] === 'string' ? C[Pt++] : '';
            const lt = new Attr(re, a, q);
            lt.ownerElement = ae;
            knownSiblings(Ue[PREV], lt, Ue);
            break;
          }
          case TEXT_NODE:
            parse_json_append(ae, new Text(re, C[Pt++]), Ue);
            break;
          case COMMENT_NODE:
            parse_json_append(ae, new Comment(re, C[Pt++]), Ue);
            break;
          case CDATA_SECTION_NODE:
            parse_json_append(ae, new CDATASection(re, C[Pt++]), Ue);
            break;
          case DOCUMENT_TYPE_NODE: {
            const a = [re];
            while (typeof C[Pt] === 'string') a.push(C[Pt++]);
            if (a.length === 3 && /\.dtd$/i.test(a[2])) a.splice(2, 0, '');
            parse_json_append(ae, new DocumentType(...a), Ue);
            break;
          }
          case DOCUMENT_FRAGMENT_NODE:
            ae = re.createDocumentFragment();
            Ue = ae[END];
          case DOCUMENT_NODE:
            break;
          default:
            do {
              a -= NODE_END;
              if (lt && !ae.ownerSVGElement) lt = false;
              ae = ae.parentNode || ae;
            } while (a < 0);
            Ue = ae[END];
            break;
        }
      }
      switch (Pt && C[0]) {
        case ELEMENT_NODE:
          return re.firstElementChild;
        case DOCUMENT_FRAGMENT_NODE:
          return ae;
      }
      return re;
    };
    const toJSON = (a) => a.toJSON();
    class NodeFilter {
      static get SHOW_ALL() {
        return SHOW_ALL;
      }
      static get SHOW_ELEMENT() {
        return SHOW_ELEMENT;
      }
      static get SHOW_COMMENT() {
        return SHOW_COMMENT;
      }
      static get SHOW_CDATA_SECTION() {
        return SHOW_CDATA_SECTION;
      }
      static get SHOW_TEXT() {
        return SHOW_TEXT;
      }
    }
    const parseHTML = (a, C = null) =>
      new DOMParser().parseFromString(a, 'text/html', C).defaultView;
    function esm_Document() {
      illegalConstructor();
    }
    ho(esm_Document, document_Document).prototype = document_Document.prototype;
    var Xa = __nccwpck_require__(1384);
    var Za = __nccwpck_require__(1955);
    var ei = __nccwpck_require__.n(Za);
    var ti = __nccwpck_require__(8949);
    const ri = /^(#|javascript:\s*void\(0\);?\s*)$/;
    const si = new (ei())({
      hr: '---',
      linkStyle: 'referenced',
      headingStyle: 'atx',
      bulletListMarker: '-',
      codeBlockStyle: 'fenced'
    })
      .use(ti.Jq)
      .use(ti.EY)
      .use(ti.BX)
      .use(ti.r0)
      .addRule('non_url', {
        filter: (a) =>
          ['a', 'area'].includes(a.nodeName.toLowerCase()) &&
          ri.test(a.getAttribute('href') || ''),
        replacement: () => ''
      })
      .addRule('img-srcset', {
        filter: ['img'],
        replacement(a, { alt: C, title: q, src: re, srcset: ae }) {
          var Ue;
          const [lt] =
            ((Ue = ae.split(',')[0]) === null || Ue === void 0
              ? void 0
              : Ue.split(/\s+/)) || [];
          const Pt = [re || lt, q && JSON.stringify(q)].filter(Boolean);
          return `![${C}](${Pt.join(' ')})`;
        }
      })
      .addRule('source-srcset', {
        filter: ['picture'],
        replacement(a, C) {
          var q;
          const { src: re, alt: ae, title: Ue } = C.querySelector('img') || {};
          const lt = Array.from(
            C.querySelectorAll('source'),
            ({ sizes: a, srcset: C }) => {
              var q;
              const re = Math.max(
                ...a
                  .split(/,|\)/)
                  .map((a) => parseFloat(a.trim()))
                  .filter(Boolean)
              );
              const [ae] =
                ((q = C.split(',')[0]) === null || q === void 0
                  ? void 0
                  : q.split(/\s+/)) || [];
              return { size: re, src: ae };
            }
          );
          const Pt = lt.sort(({ size: a }, { size: C }) => C - a);
          const Wt = [
            re || ((q = Pt[0]) === null || q === void 0 ? void 0 : q.src),
            Ue && JSON.stringify(Ue)
          ].filter(Boolean);
          return `![${ae}](${Wt.join(' ')})`;
        }
      })
      .remove((a) => a.matches('style, script, aside, form, [class*="ads" i]'))
      .keep((a) => a.matches('kbd, iframe, audio, video, source'));
    const selectorOf = (a) => `${a}, [class*="${a}" i]`;
    function HTMLtoMarkdown(a, C = '') {
      var q, re, ae, Ue;
      const lt =
          ((re =
            (q = a.querySelector('h1')) === null || q === void 0
              ? void 0
              : q.textContent) === null || re === void 0
            ? void 0
            : re.trim()) || a.title.trim(),
        Pt = a.querySelector('time, [class*="time" i], [class*="date" i]'),
        Wt = a.querySelector('a[class*="author" i], [class*="author" i] a');
      const Ar = new Date(
          (Pt === null || Pt === void 0
            ? void 0
            : Pt.getAttribute('datetime')) || ''
        ),
        Er = new Date(
          ((ae = Pt === null || Pt === void 0 ? void 0 : Pt.textContent) ===
            null || ae === void 0
            ? void 0
            : ae.trim()) || ''
        );
      Pt === null || Pt === void 0 ? void 0 : Pt.remove();
      var Ir = '';
      for (const q of ['article', 'content', 'main', 'body']) {
        const re = a.querySelector(selectorOf(q));
        if (re) {
          if (C) si.remove((a) => a.matches(C));
          Ir = si.turndown(re.innerHTML);
          break;
        }
      }
      return {
        meta: {
          title: lt,
          date: new Date(+Ar ? Ar : +Er ? Er : Date.now()).toJSON(),
          author:
            (Ue = Wt === null || Wt === void 0 ? void 0 : Wt.textContent) ===
              null || Ue === void 0
              ? void 0
              : Ue.trim(),
          authorURL: (Wt === null || Wt === void 0 ? void 0 : Wt.href)
            ? new URL(Wt.href, a.baseURI) + ''
            : ''
        },
        content: Ir
      };
    }
    class utils_web_fetch_to_mdfile_options {}
    async function utils_web_fetch_to_mdfile(a) {
      const {
        str_url: C,
        str_mdfile_to_save_name: q,
        str_mdfile_to_save_dir: re,
        str_webpage_include_selector: ae,
        str_webpage_ignore_Selector: Ue
      } = a;
      const lt = parseHTML(await (await fetch(C)).text());
      Object.defineProperty(lt.document, 'baseURI', {
        value: C,
        writable: false
      });
      const { document: Pt } = lt;
      if (ae) {
        const a = Pt.querySelectorAll(ae);
        if (a) {
          Pt.body.innerHTML = '';
          Pt.body.append(...a);
        }
      }
      const { meta: Wt, content: Ar } = HTMLtoMarkdown(Pt, Ue);
      const Er = Object.assign(Object.assign({}, Wt), {
        OriginalURL: C,
        Proofreader: ''
      });
      const Ir = (0, Xa.Pz)(Er);
      const Br = `---\r\n${Ir}\r\n---\r\n\r\n${Ar.replace('\n\n', '\n\n\x3c!-- more --\x3e\n\n')}`;
      a.str_mdfile_to_save_name =
        q || C.split('/').filter(Boolean).at(-1) + '.md';
      const Qr = (0, as.join)(re, a.str_mdfile_to_save_name);
      await (0, ls.outputFile)(Qr, Br);
      return Wt;
    }
    function _getDefaults() {
      return {
        async: false,
        breaks: false,
        extensions: null,
        gfm: true,
        hooks: null,
        pedantic: false,
        renderer: null,
        silent: false,
        tokenizer: null,
        walkTokens: null
      };
    }
    let ni = _getDefaults();
    function changeDefaults(a) {
      ni = a;
    }
    const oi = /[&<>"']/;
    const ai = new RegExp(oi.source, 'g');
    const ii = /[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/;
    const li = new RegExp(ii.source, 'g');
    const ci = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };
    const getEscapeReplacement = (a) => ci[a];
    function escape$1(a, C) {
      if (C) {
        if (oi.test(a)) {
          return a.replace(ai, getEscapeReplacement);
        }
      } else {
        if (ii.test(a)) {
          return a.replace(li, getEscapeReplacement);
        }
      }
      return a;
    }
    const Ai = /&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi;
    function marked_esm_unescape(a) {
      return a.replace(Ai, (a, C) => {
        C = C.toLowerCase();
        if (C === 'colon') return ':';
        if (C.charAt(0) === '#') {
          return C.charAt(1) === 'x'
            ? String.fromCharCode(parseInt(C.substring(2), 16))
            : String.fromCharCode(+C.substring(1));
        }
        return '';
      });
    }
    const di = /(^|[^\[])\^/g;
    function edit(a, C) {
      let q = typeof a === 'string' ? a : a.source;
      C = C || '';
      const re = {
        replace: (a, C) => {
          let ae = typeof C === 'string' ? C : C.source;
          ae = ae.replace(di, '$1');
          q = q.replace(a, ae);
          return re;
        },
        getRegex: () => new RegExp(q, C)
      };
      return re;
    }
    function cleanUrl(a) {
      try {
        a = encodeURI(a).replace(/%25/g, '%');
      } catch (a) {
        return null;
      }
      return a;
    }
    const ui = { exec: () => null };
    function splitCells(a, C) {
      const q = a.replace(/\|/g, (a, C, q) => {
          let re = false;
          let ae = C;
          while (--ae >= 0 && q[ae] === '\\') re = !re;
          if (re) {
            return '|';
          } else {
            return ' |';
          }
        }),
        re = q.split(/ \|/);
      let ae = 0;
      if (!re[0].trim()) {
        re.shift();
      }
      if (re.length > 0 && !re[re.length - 1].trim()) {
        re.pop();
      }
      if (C) {
        if (re.length > C) {
          re.splice(C);
        } else {
          while (re.length < C) re.push('');
        }
      }
      for (; ae < re.length; ae++) {
        re[ae] = re[ae].trim().replace(/\\\|/g, '|');
      }
      return re;
    }
    function rtrim(a, C, q) {
      const re = a.length;
      if (re === 0) {
        return '';
      }
      let ae = 0;
      while (ae < re) {
        const Ue = a.charAt(re - ae - 1);
        if (Ue === C && !q) {
          ae++;
        } else if (Ue !== C && q) {
          ae++;
        } else {
          break;
        }
      }
      return a.slice(0, re - ae);
    }
    function findClosingBracket(a, C) {
      if (a.indexOf(C[1]) === -1) {
        return -1;
      }
      let q = 0;
      for (let re = 0; re < a.length; re++) {
        if (a[re] === '\\') {
          re++;
        } else if (a[re] === C[0]) {
          q++;
        } else if (a[re] === C[1]) {
          q--;
          if (q < 0) {
            return re;
          }
        }
      }
      return -1;
    }
    function outputLink(a, C, q, re) {
      const ae = C.href;
      const Ue = C.title ? escape$1(C.title) : null;
      const lt = a[1].replace(/\\([\[\]])/g, '$1');
      if (a[0].charAt(0) !== '!') {
        re.state.inLink = true;
        const a = {
          type: 'link',
          raw: q,
          href: ae,
          title: Ue,
          text: lt,
          tokens: re.inlineTokens(lt)
        };
        re.state.inLink = false;
        return a;
      }
      return { type: 'image', raw: q, href: ae, title: Ue, text: escape$1(lt) };
    }
    function indentCodeCompensation(a, C) {
      const q = a.match(/^(\s+)(?:```)/);
      if (q === null) {
        return C;
      }
      const re = q[1];
      return C.split('\n')
        .map((a) => {
          const C = a.match(/^\s+/);
          if (C === null) {
            return a;
          }
          const [q] = C;
          if (q.length >= re.length) {
            return a.slice(re.length);
          }
          return a;
        })
        .join('\n');
    }
    class _Tokenizer {
      options;
      rules;
      lexer;
      constructor(a) {
        this.options = a || ni;
      }
      space(a) {
        const C = this.rules.block.newline.exec(a);
        if (C && C[0].length > 0) {
          return { type: 'space', raw: C[0] };
        }
      }
      code(a) {
        const C = this.rules.block.code.exec(a);
        if (C) {
          const a = C[0].replace(/^ {1,4}/gm, '');
          return {
            type: 'code',
            raw: C[0],
            codeBlockStyle: 'indented',
            text: !this.options.pedantic ? rtrim(a, '\n') : a
          };
        }
      }
      fences(a) {
        const C = this.rules.block.fences.exec(a);
        if (C) {
          const a = C[0];
          const q = indentCodeCompensation(a, C[3] || '');
          return {
            type: 'code',
            raw: a,
            lang: C[2]
              ? C[2].trim().replace(this.rules.inline.anyPunctuation, '$1')
              : C[2],
            text: q
          };
        }
      }
      heading(a) {
        const C = this.rules.block.heading.exec(a);
        if (C) {
          let a = C[2].trim();
          if (/#$/.test(a)) {
            const C = rtrim(a, '#');
            if (this.options.pedantic) {
              a = C.trim();
            } else if (!C || / $/.test(C)) {
              a = C.trim();
            }
          }
          return {
            type: 'heading',
            raw: C[0],
            depth: C[1].length,
            text: a,
            tokens: this.lexer.inline(a)
          };
        }
      }
      hr(a) {
        const C = this.rules.block.hr.exec(a);
        if (C) {
          return { type: 'hr', raw: rtrim(C[0], '\n') };
        }
      }
      blockquote(a) {
        const C = this.rules.block.blockquote.exec(a);
        if (C) {
          let a = rtrim(C[0], '\n').split('\n');
          let q = '';
          let re = '';
          const ae = [];
          while (a.length > 0) {
            let C = false;
            const Ue = [];
            let lt;
            for (lt = 0; lt < a.length; lt++) {
              if (/^ {0,3}>/.test(a[lt])) {
                Ue.push(a[lt]);
                C = true;
              } else if (!C) {
                Ue.push(a[lt]);
              } else {
                break;
              }
            }
            a = a.slice(lt);
            const Pt = Ue.join('\n');
            const Wt = Pt.replace(
              /\n {0,3}((?:=+|-+) *)(?=\n|$)/g,
              '\n    $1'
            ).replace(/^ {0,3}>[ \t]?/gm, '');
            q = q ? `${q}\n${Pt}` : Pt;
            re = re ? `${re}\n${Wt}` : Wt;
            const Ar = this.lexer.state.top;
            this.lexer.state.top = true;
            this.lexer.blockTokens(Wt, ae, true);
            this.lexer.state.top = Ar;
            if (a.length === 0) {
              break;
            }
            const Er = ae[ae.length - 1];
            if (Er?.type === 'code') {
              break;
            } else if (Er?.type === 'blockquote') {
              const C = Er;
              const Ue = C.raw + '\n' + a.join('\n');
              const lt = this.blockquote(Ue);
              ae[ae.length - 1] = lt;
              q = q.substring(0, q.length - C.raw.length) + lt.raw;
              re = re.substring(0, re.length - C.text.length) + lt.text;
              break;
            } else if (Er?.type === 'list') {
              const C = Er;
              const Ue = C.raw + '\n' + a.join('\n');
              const lt = this.list(Ue);
              ae[ae.length - 1] = lt;
              q = q.substring(0, q.length - Er.raw.length) + lt.raw;
              re = re.substring(0, re.length - C.raw.length) + lt.raw;
              a = Ue.substring(ae[ae.length - 1].raw.length).split('\n');
              continue;
            }
          }
          return { type: 'blockquote', raw: q, tokens: ae, text: re };
        }
      }
      list(a) {
        let C = this.rules.block.list.exec(a);
        if (C) {
          let q = C[1].trim();
          const re = q.length > 1;
          const ae = {
            type: 'list',
            raw: '',
            ordered: re,
            start: re ? +q.slice(0, -1) : '',
            loose: false,
            items: []
          };
          q = re ? `\\d{1,9}\\${q.slice(-1)}` : `\\${q}`;
          if (this.options.pedantic) {
            q = re ? q : '[*+-]';
          }
          const Ue = new RegExp(`^( {0,3}${q})((?:[\t ][^\\n]*)?(?:\\n|$))`);
          let lt = false;
          while (a) {
            let q = false;
            let re = '';
            let Pt = '';
            if (!(C = Ue.exec(a))) {
              break;
            }
            if (this.rules.block.hr.test(a)) {
              break;
            }
            re = C[0];
            a = a.substring(re.length);
            let Wt = C[2]
              .split('\n', 1)[0]
              .replace(/^\t+/, (a) => ' '.repeat(3 * a.length));
            let Ar = a.split('\n', 1)[0];
            let Er = !Wt.trim();
            let Ir = 0;
            if (this.options.pedantic) {
              Ir = 2;
              Pt = Wt.trimStart();
            } else if (Er) {
              Ir = C[1].length + 1;
            } else {
              Ir = C[2].search(/[^ ]/);
              Ir = Ir > 4 ? 1 : Ir;
              Pt = Wt.slice(Ir);
              Ir += C[1].length;
            }
            if (Er && /^ *$/.test(Ar)) {
              re += Ar + '\n';
              a = a.substring(Ar.length + 1);
              q = true;
            }
            if (!q) {
              const C = new RegExp(
                `^ {0,${Math.min(3, Ir - 1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))`
              );
              const q = new RegExp(
                `^ {0,${Math.min(3, Ir - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`
              );
              const ae = new RegExp(
                `^ {0,${Math.min(3, Ir - 1)}}(?:\`\`\`|~~~)`
              );
              const Ue = new RegExp(`^ {0,${Math.min(3, Ir - 1)}}#`);
              while (a) {
                const lt = a.split('\n', 1)[0];
                Ar = lt;
                if (this.options.pedantic) {
                  Ar = Ar.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');
                }
                if (ae.test(Ar)) {
                  break;
                }
                if (Ue.test(Ar)) {
                  break;
                }
                if (C.test(Ar)) {
                  break;
                }
                if (q.test(a)) {
                  break;
                }
                if (Ar.search(/[^ ]/) >= Ir || !Ar.trim()) {
                  Pt += '\n' + Ar.slice(Ir);
                } else {
                  if (Er) {
                    break;
                  }
                  if (Wt.search(/[^ ]/) >= 4) {
                    break;
                  }
                  if (ae.test(Wt)) {
                    break;
                  }
                  if (Ue.test(Wt)) {
                    break;
                  }
                  if (q.test(Wt)) {
                    break;
                  }
                  Pt += '\n' + Ar;
                }
                if (!Er && !Ar.trim()) {
                  Er = true;
                }
                re += lt + '\n';
                a = a.substring(lt.length + 1);
                Wt = Ar.slice(Ir);
              }
            }
            if (!ae.loose) {
              if (lt) {
                ae.loose = true;
              } else if (/\n *\n *$/.test(re)) {
                lt = true;
              }
            }
            let Br = null;
            let Qr;
            if (this.options.gfm) {
              Br = /^\[[ xX]\] /.exec(Pt);
              if (Br) {
                Qr = Br[0] !== '[ ] ';
                Pt = Pt.replace(/^\[[ xX]\] +/, '');
              }
            }
            ae.items.push({
              type: 'list_item',
              raw: re,
              task: !!Br,
              checked: Qr,
              loose: false,
              text: Pt,
              tokens: []
            });
            ae.raw += re;
          }
          ae.items[ae.items.length - 1].raw =
            ae.items[ae.items.length - 1].raw.trimEnd();
          ae.items[ae.items.length - 1].text =
            ae.items[ae.items.length - 1].text.trimEnd();
          ae.raw = ae.raw.trimEnd();
          for (let a = 0; a < ae.items.length; a++) {
            this.lexer.state.top = false;
            ae.items[a].tokens = this.lexer.blockTokens(ae.items[a].text, []);
            if (!ae.loose) {
              const C = ae.items[a].tokens.filter((a) => a.type === 'space');
              const q = C.length > 0 && C.some((a) => /\n.*\n/.test(a.raw));
              ae.loose = q;
            }
          }
          if (ae.loose) {
            for (let a = 0; a < ae.items.length; a++) {
              ae.items[a].loose = true;
            }
          }
          return ae;
        }
      }
      html(a) {
        const C = this.rules.block.html.exec(a);
        if (C) {
          const a = {
            type: 'html',
            block: true,
            raw: C[0],
            pre: C[1] === 'pre' || C[1] === 'script' || C[1] === 'style',
            text: C[0]
          };
          return a;
        }
      }
      def(a) {
        const C = this.rules.block.def.exec(a);
        if (C) {
          const a = C[1].toLowerCase().replace(/\s+/g, ' ');
          const q = C[2]
            ? C[2]
                .replace(/^<(.*)>$/, '$1')
                .replace(this.rules.inline.anyPunctuation, '$1')
            : '';
          const re = C[3]
            ? C[3]
                .substring(1, C[3].length - 1)
                .replace(this.rules.inline.anyPunctuation, '$1')
            : C[3];
          return { type: 'def', tag: a, raw: C[0], href: q, title: re };
        }
      }
      table(a) {
        const C = this.rules.block.table.exec(a);
        if (!C) {
          return;
        }
        if (!/[:|]/.test(C[2])) {
          return;
        }
        const q = splitCells(C[1]);
        const re = C[2].replace(/^\||\| *$/g, '').split('|');
        const ae =
          C[3] && C[3].trim() ? C[3].replace(/\n[ \t]*$/, '').split('\n') : [];
        const Ue = {
          type: 'table',
          raw: C[0],
          header: [],
          align: [],
          rows: []
        };
        if (q.length !== re.length) {
          return;
        }
        for (const a of re) {
          if (/^ *-+: *$/.test(a)) {
            Ue.align.push('right');
          } else if (/^ *:-+: *$/.test(a)) {
            Ue.align.push('center');
          } else if (/^ *:-+ *$/.test(a)) {
            Ue.align.push('left');
          } else {
            Ue.align.push(null);
          }
        }
        for (let a = 0; a < q.length; a++) {
          Ue.header.push({
            text: q[a],
            tokens: this.lexer.inline(q[a]),
            header: true,
            align: Ue.align[a]
          });
        }
        for (const a of ae) {
          Ue.rows.push(
            splitCells(a, Ue.header.length).map((a, C) => ({
              text: a,
              tokens: this.lexer.inline(a),
              header: false,
              align: Ue.align[C]
            }))
          );
        }
        return Ue;
      }
      lheading(a) {
        const C = this.rules.block.lheading.exec(a);
        if (C) {
          return {
            type: 'heading',
            raw: C[0],
            depth: C[2].charAt(0) === '=' ? 1 : 2,
            text: C[1],
            tokens: this.lexer.inline(C[1])
          };
        }
      }
      paragraph(a) {
        const C = this.rules.block.paragraph.exec(a);
        if (C) {
          const a =
            C[1].charAt(C[1].length - 1) === '\n' ? C[1].slice(0, -1) : C[1];
          return {
            type: 'paragraph',
            raw: C[0],
            text: a,
            tokens: this.lexer.inline(a)
          };
        }
      }
      text(a) {
        const C = this.rules.block.text.exec(a);
        if (C) {
          return {
            type: 'text',
            raw: C[0],
            text: C[0],
            tokens: this.lexer.inline(C[0])
          };
        }
      }
      escape(a) {
        const C = this.rules.inline.escape.exec(a);
        if (C) {
          return { type: 'escape', raw: C[0], text: escape$1(C[1]) };
        }
      }
      tag(a) {
        const C = this.rules.inline.tag.exec(a);
        if (C) {
          if (!this.lexer.state.inLink && /^<a /i.test(C[0])) {
            this.lexer.state.inLink = true;
          } else if (this.lexer.state.inLink && /^<\/a>/i.test(C[0])) {
            this.lexer.state.inLink = false;
          }
          if (
            !this.lexer.state.inRawBlock &&
            /^<(pre|code|kbd|script)(\s|>)/i.test(C[0])
          ) {
            this.lexer.state.inRawBlock = true;
          } else if (
            this.lexer.state.inRawBlock &&
            /^<\/(pre|code|kbd|script)(\s|>)/i.test(C[0])
          ) {
            this.lexer.state.inRawBlock = false;
          }
          return {
            type: 'html',
            raw: C[0],
            inLink: this.lexer.state.inLink,
            inRawBlock: this.lexer.state.inRawBlock,
            block: false,
            text: C[0]
          };
        }
      }
      link(a) {
        const C = this.rules.inline.link.exec(a);
        if (C) {
          const a = C[2].trim();
          if (!this.options.pedantic && /^</.test(a)) {
            if (!/>$/.test(a)) {
              return;
            }
            const C = rtrim(a.slice(0, -1), '\\');
            if ((a.length - C.length) % 2 === 0) {
              return;
            }
          } else {
            const a = findClosingBracket(C[2], '()');
            if (a > -1) {
              const q = C[0].indexOf('!') === 0 ? 5 : 4;
              const re = q + C[1].length + a;
              C[2] = C[2].substring(0, a);
              C[0] = C[0].substring(0, re).trim();
              C[3] = '';
            }
          }
          let q = C[2];
          let re = '';
          if (this.options.pedantic) {
            const a = /^([^'"]*[^\s])\s+(['"])(.*)\2/.exec(q);
            if (a) {
              q = a[1];
              re = a[3];
            }
          } else {
            re = C[3] ? C[3].slice(1, -1) : '';
          }
          q = q.trim();
          if (/^</.test(q)) {
            if (this.options.pedantic && !/>$/.test(a)) {
              q = q.slice(1);
            } else {
              q = q.slice(1, -1);
            }
          }
          return outputLink(
            C,
            {
              href: q ? q.replace(this.rules.inline.anyPunctuation, '$1') : q,
              title: re
                ? re.replace(this.rules.inline.anyPunctuation, '$1')
                : re
            },
            C[0],
            this.lexer
          );
        }
      }
      reflink(a, C) {
        let q;
        if (
          (q = this.rules.inline.reflink.exec(a)) ||
          (q = this.rules.inline.nolink.exec(a))
        ) {
          const a = (q[2] || q[1]).replace(/\s+/g, ' ');
          const re = C[a.toLowerCase()];
          if (!re) {
            const a = q[0].charAt(0);
            return { type: 'text', raw: a, text: a };
          }
          return outputLink(q, re, q[0], this.lexer);
        }
      }
      emStrong(a, C, q = '') {
        let re = this.rules.inline.emStrongLDelim.exec(a);
        if (!re) return;
        if (re[3] && q.match(/[\p{L}\p{N}]/u)) return;
        const ae = re[1] || re[2] || '';
        if (!ae || !q || this.rules.inline.punctuation.exec(q)) {
          const q = [...re[0]].length - 1;
          let ae,
            Ue,
            lt = q,
            Pt = 0;
          const Wt =
            re[0][0] === '*'
              ? this.rules.inline.emStrongRDelimAst
              : this.rules.inline.emStrongRDelimUnd;
          Wt.lastIndex = 0;
          C = C.slice(-1 * a.length + q);
          while ((re = Wt.exec(C)) != null) {
            ae = re[1] || re[2] || re[3] || re[4] || re[5] || re[6];
            if (!ae) continue;
            Ue = [...ae].length;
            if (re[3] || re[4]) {
              lt += Ue;
              continue;
            } else if (re[5] || re[6]) {
              if (q % 3 && !((q + Ue) % 3)) {
                Pt += Ue;
                continue;
              }
            }
            lt -= Ue;
            if (lt > 0) continue;
            Ue = Math.min(Ue, Ue + lt + Pt);
            const C = [...re[0]][0].length;
            const Wt = a.slice(0, q + re.index + C + Ue);
            if (Math.min(q, Ue) % 2) {
              const a = Wt.slice(1, -1);
              return {
                type: 'em',
                raw: Wt,
                text: a,
                tokens: this.lexer.inlineTokens(a)
              };
            }
            const Ar = Wt.slice(2, -2);
            return {
              type: 'strong',
              raw: Wt,
              text: Ar,
              tokens: this.lexer.inlineTokens(Ar)
            };
          }
        }
      }
      codespan(a) {
        const C = this.rules.inline.code.exec(a);
        if (C) {
          let a = C[2].replace(/\n/g, ' ');
          const q = /[^ ]/.test(a);
          const re = /^ /.test(a) && / $/.test(a);
          if (q && re) {
            a = a.substring(1, a.length - 1);
          }
          a = escape$1(a, true);
          return { type: 'codespan', raw: C[0], text: a };
        }
      }
      br(a) {
        const C = this.rules.inline.br.exec(a);
        if (C) {
          return { type: 'br', raw: C[0] };
        }
      }
      del(a) {
        const C = this.rules.inline.del.exec(a);
        if (C) {
          return {
            type: 'del',
            raw: C[0],
            text: C[2],
            tokens: this.lexer.inlineTokens(C[2])
          };
        }
      }
      autolink(a) {
        const C = this.rules.inline.autolink.exec(a);
        if (C) {
          let a, q;
          if (C[2] === '@') {
            a = escape$1(C[1]);
            q = 'mailto:' + a;
          } else {
            a = escape$1(C[1]);
            q = a;
          }
          return {
            type: 'link',
            raw: C[0],
            text: a,
            href: q,
            tokens: [{ type: 'text', raw: a, text: a }]
          };
        }
      }
      url(a) {
        let C;
        if ((C = this.rules.inline.url.exec(a))) {
          let a, q;
          if (C[2] === '@') {
            a = escape$1(C[0]);
            q = 'mailto:' + a;
          } else {
            let re;
            do {
              re = C[0];
              C[0] = this.rules.inline._backpedal.exec(C[0])?.[0] ?? '';
            } while (re !== C[0]);
            a = escape$1(C[0]);
            if (C[1] === 'www.') {
              q = 'http://' + C[0];
            } else {
              q = C[0];
            }
          }
          return {
            type: 'link',
            raw: C[0],
            text: a,
            href: q,
            tokens: [{ type: 'text', raw: a, text: a }]
          };
        }
      }
      inlineText(a) {
        const C = this.rules.inline.text.exec(a);
        if (C) {
          let a;
          if (this.lexer.state.inRawBlock) {
            a = C[0];
          } else {
            a = escape$1(C[0]);
          }
          return { type: 'text', raw: C[0], text: a };
        }
      }
    }
    const pi = /^(?: *(?:\n|$))+/;
    const hi = /^( {4}[^\n]+(?:\n(?: *(?:\n|$))*)?)+/;
    const mi =
      /^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/;
    const fi =
      /^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/;
    const gi = /^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/;
    const Ei = /(?:[*+-]|\d{1,9}[.)])/;
    const Ci = edit(
      /^(?!bull |blockCode|fences|blockquote|heading|html)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html))+?)\n {0,3}(=+|-+) *(?:\n+|$)/
    )
      .replace(/bull/g, Ei)
      .replace(/blockCode/g, / {4}/)
      .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/)
      .replace(/blockquote/g, / {0,3}>/)
      .replace(/heading/g, / {0,3}#{1,6}/)
      .replace(/html/g, / {0,3}<[^\n>]+>\n/)
      .getRegex();
    const bi =
      /^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/;
    const yi = /^[^\n]+/;
    const Ii = /(?!\s*\])(?:\\.|[^\[\]\\])+/;
    const wi = edit(
      /^ {0,3}\[(label)\]: *(?:\n *)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n *)?| *\n *)(title))? *(?:\n+|$)/
    )
      .replace('label', Ii)
      .replace(
        'title',
        /(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/
      )
      .getRegex();
    const Bi = edit(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/)
      .replace(/bull/g, Ei)
      .getRegex();
    const Qi =
      'address|article|aside|base|basefont|blockquote|body|caption' +
      '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' +
      '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' +
      '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' +
      '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title' +
      '|tr|track|ul';
    const vi = /<!--(?:-?>|[\s\S]*?(?:-->|$))/;
    const Si = edit(
      '^ {0,3}(?:' +
        '<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)' +
        '|comment[^\\n]*(\\n+|$)' +
        '|<\\?[\\s\\S]*?(?:\\?>\\n*|$)' +
        '|<![A-Z][\\s\\S]*?(?:>\\n*|$)' +
        '|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)' +
        '|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n *)+\\n|$)' +
        '|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' +
        '|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n *)+\\n|$)' +
        ')',
      'i'
    )
      .replace('comment', vi)
      .replace('tag', Qi)
      .replace(
        'attribute',
        / +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/
      )
      .getRegex();
    const _i = edit(bi)
      .replace('hr', fi)
      .replace('heading', ' {0,3}#{1,6}(?:\\s|$)')
      .replace('|lheading', '')
      .replace('|table', '')
      .replace('blockquote', ' {0,3}>')
      .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
      .replace('list', ' {0,3}(?:[*+-]|1[.)]) ')
      .replace(
        'html',
        '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)'
      )
      .replace('tag', Qi)
      .getRegex();
    const Ti = edit(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/)
      .replace('paragraph', _i)
      .getRegex();
    const ki = {
      blockquote: Ti,
      code: hi,
      def: wi,
      fences: mi,
      heading: gi,
      hr: fi,
      html: Si,
      lheading: Ci,
      list: Bi,
      newline: pi,
      paragraph: _i,
      table: ui,
      text: yi
    };
    const Ri = edit(
      '^ *([^\\n ].*)\\n' +
        ' {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)' +
        '(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)'
    )
      .replace('hr', fi)
      .replace('heading', ' {0,3}#{1,6}(?:\\s|$)')
      .replace('blockquote', ' {0,3}>')
      .replace('code', ' {4}[^\\n]')
      .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
      .replace('list', ' {0,3}(?:[*+-]|1[.)]) ')
      .replace(
        'html',
        '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)'
      )
      .replace('tag', Qi)
      .getRegex();
    const Di = {
      ...ki,
      table: Ri,
      paragraph: edit(bi)
        .replace('hr', fi)
        .replace('heading', ' {0,3}#{1,6}(?:\\s|$)')
        .replace('|lheading', '')
        .replace('table', Ri)
        .replace('blockquote', ' {0,3}>')
        .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n')
        .replace('list', ' {0,3}(?:[*+-]|1[.)]) ')
        .replace(
          'html',
          '</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)'
        )
        .replace('tag', Qi)
        .getRegex()
    };
    const Ni = {
      ...ki,
      html: edit(
        '^ *(?:comment *(?:\\n|\\s*$)' +
          '|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)' +
          '|<tag(?:"[^"]*"|\'[^\']*\'|\\s[^\'"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))'
      )
        .replace('comment', vi)
        .replace(
          /tag/g,
          '(?!(?:' +
            'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' +
            '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' +
            '\\b)\\w+(?!:|[^\\w\\s@]*@)\\b'
        )
        .getRegex(),
      def: /^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,
      heading: /^(#{1,6})(.*)(?:\n+|$)/,
      fences: ui,
      lheading: /^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,
      paragraph: edit(bi)
        .replace('hr', fi)
        .replace('heading', ' *#{1,6} *[^\n]')
        .replace('lheading', Ci)
        .replace('|table', '')
        .replace('blockquote', ' {0,3}>')
        .replace('|fences', '')
        .replace('|list', '')
        .replace('|html', '')
        .replace('|tag', '')
        .getRegex()
    };
    const Li = /^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/;
    const Fi = /^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/;
    const Mi = /^( {2,}|\\)\n(?!\s*$)/;
    const Pi =
      /^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/;
    const Oi = '\\p{P}\\p{S}';
    const xi = edit(/^((?![*_])[\spunctuation])/, 'u')
      .replace(/punctuation/g, Oi)
      .getRegex();
    const Ui = /\[[^[\]]*?\]\([^\(\)]*?\)|`[^`]*?`|<[^<>]*?>/g;
    const Gi = edit(
      /^(?:\*+(?:((?!\*)[punct])|[^\s*]))|^_+(?:((?!_)[punct])|([^\s_]))/,
      'u'
    )
      .replace(/punct/g, Oi)
      .getRegex();
    const Hi = edit(
      '^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)' +
        '|[^*]+(?=[^*])' +
        '|(?!\\*)[punct](\\*+)(?=[\\s]|$)' +
        '|[^punct\\s](\\*+)(?!\\*)(?=[punct\\s]|$)' +
        '|(?!\\*)[punct\\s](\\*+)(?=[^punct\\s])' +
        '|[\\s](\\*+)(?!\\*)(?=[punct])' +
        '|(?!\\*)[punct](\\*+)(?!\\*)(?=[punct])' +
        '|[^punct\\s](\\*+)(?=[^punct\\s])',
      'gu'
    )
      .replace(/punct/g, Oi)
      .getRegex();
    const qi = edit(
      '^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)' +
        '|[^_]+(?=[^_])' +
        '|(?!_)[punct](_+)(?=[\\s]|$)' +
        '|[^punct\\s](_+)(?!_)(?=[punct\\s]|$)' +
        '|(?!_)[punct\\s](_+)(?=[^punct\\s])' +
        '|[\\s](_+)(?!_)(?=[punct])' +
        '|(?!_)[punct](_+)(?!_)(?=[punct])',
      'gu'
    )
      .replace(/punct/g, Oi)
      .getRegex();
    const Vi = edit(/\\([punct])/, 'gu')
      .replace(/punct/g, Oi)
      .getRegex();
    const Wi = edit(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/)
      .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)
      .replace(
        'email',
        /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/
      )
      .getRegex();
    const Yi = edit(vi).replace('(?:--\x3e|$)', '--\x3e').getRegex();
    const ji = edit(
      '^comment' +
        '|^</[a-zA-Z][\\w:-]*\\s*>' +
        '|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>' +
        '|^<\\?[\\s\\S]*?\\?>' +
        '|^<![a-zA-Z]+\\s[\\s\\S]*?>' +
        '|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>'
    )
      .replace('comment', Yi)
      .replace(
        'attribute',
        /\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/
      )
      .getRegex();
    const Ji = /(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/;
    const zi = edit(/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/)
      .replace('label', Ji)
      .replace('href', /<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/)
      .replace(
        'title',
        /"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/
      )
      .getRegex();
    const $i = edit(/^!?\[(label)\]\[(ref)\]/)
      .replace('label', Ji)
      .replace('ref', Ii)
      .getRegex();
    const Ki = edit(/^!?\[(ref)\](?:\[\])?/)
      .replace('ref', Ii)
      .getRegex();
    const Xi = edit('reflink|nolink(?!\\()', 'g')
      .replace('reflink', $i)
      .replace('nolink', Ki)
      .getRegex();
    const Zi = {
      _backpedal: ui,
      anyPunctuation: Vi,
      autolink: Wi,
      blockSkip: Ui,
      br: Mi,
      code: Fi,
      del: ui,
      emStrongLDelim: Gi,
      emStrongRDelimAst: Hi,
      emStrongRDelimUnd: qi,
      escape: Li,
      link: zi,
      nolink: Ki,
      punctuation: xi,
      reflink: $i,
      reflinkSearch: Xi,
      tag: ji,
      text: Pi,
      url: ui
    };
    const el = {
      ...Zi,
      link: edit(/^!?\[(label)\]\((.*?)\)/)
        .replace('label', Ji)
        .getRegex(),
      reflink: edit(/^!?\[(label)\]\s*\[([^\]]*)\]/)
        .replace('label', Ji)
        .getRegex()
    };
    const tl = {
      ...Zi,
      escape: edit(Li).replace('])', '~|])').getRegex(),
      url: edit(
        /^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,
        'i'
      )
        .replace(
          'email',
          /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/
        )
        .getRegex(),
      _backpedal:
        /(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,
      del: /^(~~?)(?=[^\s~])([\s\S]*?[^\s~])\1(?=[^~]|$)/,
      text: /^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/
    };
    const rl = {
      ...tl,
      br: edit(Mi).replace('{2,}', '*').getRegex(),
      text: edit(tl.text)
        .replace('\\b_', '\\b_| {2,}\\n')
        .replace(/\{2,\}/g, '*')
        .getRegex()
    };
    const sl = { normal: ki, gfm: Di, pedantic: Ni };
    const nl = { normal: Zi, gfm: tl, breaks: rl, pedantic: el };
    class _Lexer {
      tokens;
      options;
      state;
      tokenizer;
      inlineQueue;
      constructor(a) {
        this.tokens = [];
        this.tokens.links = Object.create(null);
        this.options = a || ni;
        this.options.tokenizer = this.options.tokenizer || new _Tokenizer();
        this.tokenizer = this.options.tokenizer;
        this.tokenizer.options = this.options;
        this.tokenizer.lexer = this;
        this.inlineQueue = [];
        this.state = { inLink: false, inRawBlock: false, top: true };
        const C = { block: sl.normal, inline: nl.normal };
        if (this.options.pedantic) {
          C.block = sl.pedantic;
          C.inline = nl.pedantic;
        } else if (this.options.gfm) {
          C.block = sl.gfm;
          if (this.options.breaks) {
            C.inline = nl.breaks;
          } else {
            C.inline = nl.gfm;
          }
        }
        this.tokenizer.rules = C;
      }
      static get rules() {
        return { block: sl, inline: nl };
      }
      static lex(a, C) {
        const q = new _Lexer(C);
        return q.lex(a);
      }
      static lexInline(a, C) {
        const q = new _Lexer(C);
        return q.inlineTokens(a);
      }
      lex(a) {
        a = a.replace(/\r\n|\r/g, '\n');
        this.blockTokens(a, this.tokens);
        for (let a = 0; a < this.inlineQueue.length; a++) {
          const C = this.inlineQueue[a];
          this.inlineTokens(C.src, C.tokens);
        }
        this.inlineQueue = [];
        return this.tokens;
      }
      blockTokens(a, C = [], q = false) {
        if (this.options.pedantic) {
          a = a.replace(/\t/g, '    ').replace(/^ +$/gm, '');
        } else {
          a = a.replace(
            /^( *)(\t+)/gm,
            (a, C, q) => C + '    '.repeat(q.length)
          );
        }
        let re;
        let ae;
        let Ue;
        while (a) {
          if (
            this.options.extensions &&
            this.options.extensions.block &&
            this.options.extensions.block.some((q) => {
              if ((re = q.call({ lexer: this }, a, C))) {
                a = a.substring(re.raw.length);
                C.push(re);
                return true;
              }
              return false;
            })
          ) {
            continue;
          }
          if ((re = this.tokenizer.space(a))) {
            a = a.substring(re.raw.length);
            if (re.raw.length === 1 && C.length > 0) {
              C[C.length - 1].raw += '\n';
            } else {
              C.push(re);
            }
            continue;
          }
          if ((re = this.tokenizer.code(a))) {
            a = a.substring(re.raw.length);
            ae = C[C.length - 1];
            if (ae && (ae.type === 'paragraph' || ae.type === 'text')) {
              ae.raw += '\n' + re.raw;
              ae.text += '\n' + re.text;
              this.inlineQueue[this.inlineQueue.length - 1].src = ae.text;
            } else {
              C.push(re);
            }
            continue;
          }
          if ((re = this.tokenizer.fences(a))) {
            a = a.substring(re.raw.length);
            C.push(re);
            continue;
          }
          if ((re = this.tokenizer.heading(a))) {
            a = a.substring(re.raw.length);
            C.push(re);
            continue;
          }
          if ((re = this.tokenizer.hr(a))) {
            a = a.substring(re.raw.length);
            C.push(re);
            continue;
          }
          if ((re = this.tokenizer.blockquote(a))) {
            a = a.substring(re.raw.length);
            C.push(re);
            continue;
          }
          if ((re = this.tokenizer.list(a))) {
            a = a.substring(re.raw.length);
            C.push(re);
            continue;
          }
          if ((re = this.tokenizer.html(a))) {
            a = a.substring(re.raw.length);
            C.push(re);
            continue;
          }
          if ((re = this.tokenizer.def(a))) {
            a = a.substring(re.raw.length);
            ae = C[C.length - 1];
            if (ae && (ae.type === 'paragraph' || ae.type === 'text')) {
              ae.raw += '\n' + re.raw;
              ae.text += '\n' + re.raw;
              this.inlineQueue[this.inlineQueue.length - 1].src = ae.text;
            } else if (!this.tokens.links[re.tag]) {
              this.tokens.links[re.tag] = { href: re.href, title: re.title };
            }
            continue;
          }
          if ((re = this.tokenizer.table(a))) {
            a = a.substring(re.raw.length);
            C.push(re);
            continue;
          }
          if ((re = this.tokenizer.lheading(a))) {
            a = a.substring(re.raw.length);
            C.push(re);
            continue;
          }
          Ue = a;
          if (this.options.extensions && this.options.extensions.startBlock) {
            let C = Infinity;
            const q = a.slice(1);
            let re;
            this.options.extensions.startBlock.forEach((a) => {
              re = a.call({ lexer: this }, q);
              if (typeof re === 'number' && re >= 0) {
                C = Math.min(C, re);
              }
            });
            if (C < Infinity && C >= 0) {
              Ue = a.substring(0, C + 1);
            }
          }
          if (this.state.top && (re = this.tokenizer.paragraph(Ue))) {
            ae = C[C.length - 1];
            if (q && ae?.type === 'paragraph') {
              ae.raw += '\n' + re.raw;
              ae.text += '\n' + re.text;
              this.inlineQueue.pop();
              this.inlineQueue[this.inlineQueue.length - 1].src = ae.text;
            } else {
              C.push(re);
            }
            q = Ue.length !== a.length;
            a = a.substring(re.raw.length);
            continue;
          }
          if ((re = this.tokenizer.text(a))) {
            a = a.substring(re.raw.length);
            ae = C[C.length - 1];
            if (ae && ae.type === 'text') {
              ae.raw += '\n' + re.raw;
              ae.text += '\n' + re.text;
              this.inlineQueue.pop();
              this.inlineQueue[this.inlineQueue.length - 1].src = ae.text;
            } else {
              C.push(re);
            }
            continue;
          }
          if (a) {
            const C = 'Infinite loop on byte: ' + a.charCodeAt(0);
            if (this.options.silent) {
              console.error(C);
              break;
            } else {
              throw new Error(C);
            }
          }
        }
        this.state.top = true;
        return C;
      }
      inline(a, C = []) {
        this.inlineQueue.push({ src: a, tokens: C });
        return C;
      }
      inlineTokens(a, C = []) {
        let q, re, ae;
        let Ue = a;
        let lt;
        let Pt, Wt;
        if (this.tokens.links) {
          const a = Object.keys(this.tokens.links);
          if (a.length > 0) {
            while (
              (lt = this.tokenizer.rules.inline.reflinkSearch.exec(Ue)) != null
            ) {
              if (a.includes(lt[0].slice(lt[0].lastIndexOf('[') + 1, -1))) {
                Ue =
                  Ue.slice(0, lt.index) +
                  '[' +
                  'a'.repeat(lt[0].length - 2) +
                  ']' +
                  Ue.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);
              }
            }
          }
        }
        while ((lt = this.tokenizer.rules.inline.blockSkip.exec(Ue)) != null) {
          Ue =
            Ue.slice(0, lt.index) +
            '[' +
            'a'.repeat(lt[0].length - 2) +
            ']' +
            Ue.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);
        }
        while (
          (lt = this.tokenizer.rules.inline.anyPunctuation.exec(Ue)) != null
        ) {
          Ue =
            Ue.slice(0, lt.index) +
            '++' +
            Ue.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);
        }
        while (a) {
          if (!Pt) {
            Wt = '';
          }
          Pt = false;
          if (
            this.options.extensions &&
            this.options.extensions.inline &&
            this.options.extensions.inline.some((re) => {
              if ((q = re.call({ lexer: this }, a, C))) {
                a = a.substring(q.raw.length);
                C.push(q);
                return true;
              }
              return false;
            })
          ) {
            continue;
          }
          if ((q = this.tokenizer.escape(a))) {
            a = a.substring(q.raw.length);
            C.push(q);
            continue;
          }
          if ((q = this.tokenizer.tag(a))) {
            a = a.substring(q.raw.length);
            re = C[C.length - 1];
            if (re && q.type === 'text' && re.type === 'text') {
              re.raw += q.raw;
              re.text += q.text;
            } else {
              C.push(q);
            }
            continue;
          }
          if ((q = this.tokenizer.link(a))) {
            a = a.substring(q.raw.length);
            C.push(q);
            continue;
          }
          if ((q = this.tokenizer.reflink(a, this.tokens.links))) {
            a = a.substring(q.raw.length);
            re = C[C.length - 1];
            if (re && q.type === 'text' && re.type === 'text') {
              re.raw += q.raw;
              re.text += q.text;
            } else {
              C.push(q);
            }
            continue;
          }
          if ((q = this.tokenizer.emStrong(a, Ue, Wt))) {
            a = a.substring(q.raw.length);
            C.push(q);
            continue;
          }
          if ((q = this.tokenizer.codespan(a))) {
            a = a.substring(q.raw.length);
            C.push(q);
            continue;
          }
          if ((q = this.tokenizer.br(a))) {
            a = a.substring(q.raw.length);
            C.push(q);
            continue;
          }
          if ((q = this.tokenizer.del(a))) {
            a = a.substring(q.raw.length);
            C.push(q);
            continue;
          }
          if ((q = this.tokenizer.autolink(a))) {
            a = a.substring(q.raw.length);
            C.push(q);
            continue;
          }
          if (!this.state.inLink && (q = this.tokenizer.url(a))) {
            a = a.substring(q.raw.length);
            C.push(q);
            continue;
          }
          ae = a;
          if (this.options.extensions && this.options.extensions.startInline) {
            let C = Infinity;
            const q = a.slice(1);
            let re;
            this.options.extensions.startInline.forEach((a) => {
              re = a.call({ lexer: this }, q);
              if (typeof re === 'number' && re >= 0) {
                C = Math.min(C, re);
              }
            });
            if (C < Infinity && C >= 0) {
              ae = a.substring(0, C + 1);
            }
          }
          if ((q = this.tokenizer.inlineText(ae))) {
            a = a.substring(q.raw.length);
            if (q.raw.slice(-1) !== '_') {
              Wt = q.raw.slice(-1);
            }
            Pt = true;
            re = C[C.length - 1];
            if (re && re.type === 'text') {
              re.raw += q.raw;
              re.text += q.text;
            } else {
              C.push(q);
            }
            continue;
          }
          if (a) {
            const C = 'Infinite loop on byte: ' + a.charCodeAt(0);
            if (this.options.silent) {
              console.error(C);
              break;
            } else {
              throw new Error(C);
            }
          }
        }
        return C;
      }
    }
    class _Renderer {
      options;
      parser;
      constructor(a) {
        this.options = a || ni;
      }
      space(a) {
        return '';
      }
      code({ text: a, lang: C, escaped: q }) {
        const re = (C || '').match(/^\S*/)?.[0];
        const ae = a.replace(/\n$/, '') + '\n';
        if (!re) {
          return (
            '<pre><code>' + (q ? ae : escape$1(ae, true)) + '</code></pre>\n'
          );
        }
        return (
          '<pre><code class="language-' +
          escape$1(re) +
          '">' +
          (q ? ae : escape$1(ae, true)) +
          '</code></pre>\n'
        );
      }
      blockquote({ tokens: a }) {
        const C = this.parser.parse(a);
        return `<blockquote>\n${C}</blockquote>\n`;
      }
      html({ text: a }) {
        return a;
      }
      heading({ tokens: a, depth: C }) {
        return `<h${C}>${this.parser.parseInline(a)}</h${C}>\n`;
      }
      hr(a) {
        return '<hr>\n';
      }
      list(a) {
        const C = a.ordered;
        const q = a.start;
        let re = '';
        for (let C = 0; C < a.items.length; C++) {
          const q = a.items[C];
          re += this.listitem(q);
        }
        const ae = C ? 'ol' : 'ul';
        const Ue = C && q !== 1 ? ' start="' + q + '"' : '';
        return '<' + ae + Ue + '>\n' + re + '</' + ae + '>\n';
      }
      listitem(a) {
        let C = '';
        if (a.task) {
          const q = this.checkbox({ checked: !!a.checked });
          if (a.loose) {
            if (a.tokens.length > 0 && a.tokens[0].type === 'paragraph') {
              a.tokens[0].text = q + ' ' + a.tokens[0].text;
              if (
                a.tokens[0].tokens &&
                a.tokens[0].tokens.length > 0 &&
                a.tokens[0].tokens[0].type === 'text'
              ) {
                a.tokens[0].tokens[0].text =
                  q + ' ' + a.tokens[0].tokens[0].text;
              }
            } else {
              a.tokens.unshift({ type: 'text', raw: q + ' ', text: q + ' ' });
            }
          } else {
            C += q + ' ';
          }
        }
        C += this.parser.parse(a.tokens, !!a.loose);
        return `<li>${C}</li>\n`;
      }
      checkbox({ checked: a }) {
        return (
          '<input ' + (a ? 'checked="" ' : '') + 'disabled="" type="checkbox">'
        );
      }
      paragraph({ tokens: a }) {
        return `<p>${this.parser.parseInline(a)}</p>\n`;
      }
      table(a) {
        let C = '';
        let q = '';
        for (let C = 0; C < a.header.length; C++) {
          q += this.tablecell(a.header[C]);
        }
        C += this.tablerow({ text: q });
        let re = '';
        for (let C = 0; C < a.rows.length; C++) {
          const ae = a.rows[C];
          q = '';
          for (let a = 0; a < ae.length; a++) {
            q += this.tablecell(ae[a]);
          }
          re += this.tablerow({ text: q });
        }
        if (re) re = `<tbody>${re}</tbody>`;
        return '<table>\n' + '<thead>\n' + C + '</thead>\n' + re + '</table>\n';
      }
      tablerow({ text: a }) {
        return `<tr>\n${a}</tr>\n`;
      }
      tablecell(a) {
        const C = this.parser.parseInline(a.tokens);
        const q = a.header ? 'th' : 'td';
        const re = a.align ? `<${q} align="${a.align}">` : `<${q}>`;
        return re + C + `</${q}>\n`;
      }
      strong({ tokens: a }) {
        return `<strong>${this.parser.parseInline(a)}</strong>`;
      }
      em({ tokens: a }) {
        return `<em>${this.parser.parseInline(a)}</em>`;
      }
      codespan({ text: a }) {
        return `<code>${a}</code>`;
      }
      br(a) {
        return '<br>';
      }
      del({ tokens: a }) {
        return `<del>${this.parser.parseInline(a)}</del>`;
      }
      link({ href: a, title: C, tokens: q }) {
        const re = this.parser.parseInline(q);
        const ae = cleanUrl(a);
        if (ae === null) {
          return re;
        }
        a = ae;
        let Ue = '<a href="' + a + '"';
        if (C) {
          Ue += ' title="' + C + '"';
        }
        Ue += '>' + re + '</a>';
        return Ue;
      }
      image({ href: a, title: C, text: q }) {
        const re = cleanUrl(a);
        if (re === null) {
          return q;
        }
        a = re;
        let ae = `<img src="${a}" alt="${q}"`;
        if (C) {
          ae += ` title="${C}"`;
        }
        ae += '>';
        return ae;
      }
      text(a) {
        return 'tokens' in a && a.tokens
          ? this.parser.parseInline(a.tokens)
          : a.text;
      }
    }
    class _TextRenderer {
      strong({ text: a }) {
        return a;
      }
      em({ text: a }) {
        return a;
      }
      codespan({ text: a }) {
        return a;
      }
      del({ text: a }) {
        return a;
      }
      html({ text: a }) {
        return a;
      }
      text({ text: a }) {
        return a;
      }
      link({ text: a }) {
        return '' + a;
      }
      image({ text: a }) {
        return '' + a;
      }
      br() {
        return '';
      }
    }
    class _Parser {
      options;
      renderer;
      textRenderer;
      constructor(a) {
        this.options = a || ni;
        this.options.renderer = this.options.renderer || new _Renderer();
        this.renderer = this.options.renderer;
        this.renderer.options = this.options;
        this.renderer.parser = this;
        this.textRenderer = new _TextRenderer();
      }
      static parse(a, C) {
        const q = new _Parser(C);
        return q.parse(a);
      }
      static parseInline(a, C) {
        const q = new _Parser(C);
        return q.parseInline(a);
      }
      parse(a, C = true) {
        let q = '';
        for (let re = 0; re < a.length; re++) {
          const ae = a[re];
          if (
            this.options.extensions &&
            this.options.extensions.renderers &&
            this.options.extensions.renderers[ae.type]
          ) {
            const a = ae;
            const C = this.options.extensions.renderers[a.type].call(
              { parser: this },
              a
            );
            if (
              C !== false ||
              ![
                'space',
                'hr',
                'heading',
                'code',
                'table',
                'blockquote',
                'list',
                'html',
                'paragraph',
                'text'
              ].includes(a.type)
            ) {
              q += C || '';
              continue;
            }
          }
          const Ue = ae;
          switch (Ue.type) {
            case 'space': {
              q += this.renderer.space(Ue);
              continue;
            }
            case 'hr': {
              q += this.renderer.hr(Ue);
              continue;
            }
            case 'heading': {
              q += this.renderer.heading(Ue);
              continue;
            }
            case 'code': {
              q += this.renderer.code(Ue);
              continue;
            }
            case 'table': {
              q += this.renderer.table(Ue);
              continue;
            }
            case 'blockquote': {
              q += this.renderer.blockquote(Ue);
              continue;
            }
            case 'list': {
              q += this.renderer.list(Ue);
              continue;
            }
            case 'html': {
              q += this.renderer.html(Ue);
              continue;
            }
            case 'paragraph': {
              q += this.renderer.paragraph(Ue);
              continue;
            }
            case 'text': {
              let ae = Ue;
              let lt = this.renderer.text(ae);
              while (re + 1 < a.length && a[re + 1].type === 'text') {
                ae = a[++re];
                lt += '\n' + this.renderer.text(ae);
              }
              if (C) {
                q += this.renderer.paragraph({
                  type: 'paragraph',
                  raw: lt,
                  text: lt,
                  tokens: [{ type: 'text', raw: lt, text: lt }]
                });
              } else {
                q += lt;
              }
              continue;
            }
            default: {
              const a = 'Token with "' + Ue.type + '" type was not found.';
              if (this.options.silent) {
                console.error(a);
                return '';
              } else {
                throw new Error(a);
              }
            }
          }
        }
        return q;
      }
      parseInline(a, C) {
        C = C || this.renderer;
        let q = '';
        for (let re = 0; re < a.length; re++) {
          const ae = a[re];
          if (
            this.options.extensions &&
            this.options.extensions.renderers &&
            this.options.extensions.renderers[ae.type]
          ) {
            const a = this.options.extensions.renderers[ae.type].call(
              { parser: this },
              ae
            );
            if (
              a !== false ||
              ![
                'escape',
                'html',
                'link',
                'image',
                'strong',
                'em',
                'codespan',
                'br',
                'del',
                'text'
              ].includes(ae.type)
            ) {
              q += a || '';
              continue;
            }
          }
          const Ue = ae;
          switch (Ue.type) {
            case 'escape': {
              q += C.text(Ue);
              break;
            }
            case 'html': {
              q += C.html(Ue);
              break;
            }
            case 'link': {
              q += C.link(Ue);
              break;
            }
            case 'image': {
              q += C.image(Ue);
              break;
            }
            case 'strong': {
              q += C.strong(Ue);
              break;
            }
            case 'em': {
              q += C.em(Ue);
              break;
            }
            case 'codespan': {
              q += C.codespan(Ue);
              break;
            }
            case 'br': {
              q += C.br(Ue);
              break;
            }
            case 'del': {
              q += C.del(Ue);
              break;
            }
            case 'text': {
              q += C.text(Ue);
              break;
            }
            default: {
              const a = 'Token with "' + Ue.type + '" type was not found.';
              if (this.options.silent) {
                console.error(a);
                return '';
              } else {
                throw new Error(a);
              }
            }
          }
        }
        return q;
      }
    }
    class _Hooks {
      options;
      constructor(a) {
        this.options = a || ni;
      }
      static passThroughHooks = new Set([
        'preprocess',
        'postprocess',
        'processAllTokens'
      ]);
      preprocess(a) {
        return a;
      }
      postprocess(a) {
        return a;
      }
      processAllTokens(a) {
        return a;
      }
    }
    class Marked {
      defaults = _getDefaults();
      options = this.setOptions;
      parse = this.#f(_Lexer.lex, _Parser.parse);
      parseInline = this.#f(_Lexer.lexInline, _Parser.parseInline);
      Parser = _Parser;
      Renderer = _Renderer;
      TextRenderer = _TextRenderer;
      Lexer = _Lexer;
      Tokenizer = _Tokenizer;
      Hooks = _Hooks;
      constructor(...a) {
        this.use(...a);
      }
      walkTokens(a, C) {
        let q = [];
        for (const re of a) {
          q = q.concat(C.call(this, re));
          switch (re.type) {
            case 'table': {
              const a = re;
              for (const re of a.header) {
                q = q.concat(this.walkTokens(re.tokens, C));
              }
              for (const re of a.rows) {
                for (const a of re) {
                  q = q.concat(this.walkTokens(a.tokens, C));
                }
              }
              break;
            }
            case 'list': {
              const a = re;
              q = q.concat(this.walkTokens(a.items, C));
              break;
            }
            default: {
              const a = re;
              if (this.defaults.extensions?.childTokens?.[a.type]) {
                this.defaults.extensions.childTokens[a.type].forEach((re) => {
                  const ae = a[re].flat(Infinity);
                  q = q.concat(this.walkTokens(ae, C));
                });
              } else if (a.tokens) {
                q = q.concat(this.walkTokens(a.tokens, C));
              }
            }
          }
        }
        return q;
      }
      use(...a) {
        const C = this.defaults.extensions || {
          renderers: {},
          childTokens: {}
        };
        a.forEach((a) => {
          const q = { ...a };
          q.async = this.defaults.async || q.async || false;
          if (a.extensions) {
            a.extensions.forEach((a) => {
              if (!a.name) {
                throw new Error('extension name required');
              }
              if ('renderer' in a) {
                const q = C.renderers[a.name];
                if (q) {
                  C.renderers[a.name] = function (...C) {
                    let re = a.renderer.apply(this, C);
                    if (re === false) {
                      re = q.apply(this, C);
                    }
                    return re;
                  };
                } else {
                  C.renderers[a.name] = a.renderer;
                }
              }
              if ('tokenizer' in a) {
                if (!a.level || (a.level !== 'block' && a.level !== 'inline')) {
                  throw new Error(
                    "extension level must be 'block' or 'inline'"
                  );
                }
                const q = C[a.level];
                if (q) {
                  q.unshift(a.tokenizer);
                } else {
                  C[a.level] = [a.tokenizer];
                }
                if (a.start) {
                  if (a.level === 'block') {
                    if (C.startBlock) {
                      C.startBlock.push(a.start);
                    } else {
                      C.startBlock = [a.start];
                    }
                  } else if (a.level === 'inline') {
                    if (C.startInline) {
                      C.startInline.push(a.start);
                    } else {
                      C.startInline = [a.start];
                    }
                  }
                }
              }
              if ('childTokens' in a && a.childTokens) {
                C.childTokens[a.name] = a.childTokens;
              }
            });
            q.extensions = C;
          }
          if (a.renderer) {
            const C = this.defaults.renderer || new _Renderer(this.defaults);
            for (const q in a.renderer) {
              if (!(q in C)) {
                throw new Error(`renderer '${q}' does not exist`);
              }
              if (['options', 'parser'].includes(q)) {
                continue;
              }
              const re = q;
              let ae = a.renderer[re];
              const Ue = C[re];
              C[re] = (...q) => {
                if (!a.useNewRenderer) {
                  ae = this.#g(ae, re, C);
                }
                let lt = ae.apply(C, q);
                if (lt === false) {
                  lt = Ue.apply(C, q);
                }
                return lt || '';
              };
            }
            q.renderer = C;
          }
          if (a.tokenizer) {
            const C = this.defaults.tokenizer || new _Tokenizer(this.defaults);
            for (const q in a.tokenizer) {
              if (!(q in C)) {
                throw new Error(`tokenizer '${q}' does not exist`);
              }
              if (['options', 'rules', 'lexer'].includes(q)) {
                continue;
              }
              const re = q;
              const ae = a.tokenizer[re];
              const Ue = C[re];
              C[re] = (...a) => {
                let q = ae.apply(C, a);
                if (q === false) {
                  q = Ue.apply(C, a);
                }
                return q;
              };
            }
            q.tokenizer = C;
          }
          if (a.hooks) {
            const C = this.defaults.hooks || new _Hooks();
            for (const q in a.hooks) {
              if (!(q in C)) {
                throw new Error(`hook '${q}' does not exist`);
              }
              if (q === 'options') {
                continue;
              }
              const re = q;
              const ae = a.hooks[re];
              const Ue = C[re];
              if (_Hooks.passThroughHooks.has(q)) {
                C[re] = (a) => {
                  if (this.defaults.async) {
                    return Promise.resolve(ae.call(C, a)).then((a) =>
                      Ue.call(C, a)
                    );
                  }
                  const q = ae.call(C, a);
                  return Ue.call(C, q);
                };
              } else {
                C[re] = (...a) => {
                  let q = ae.apply(C, a);
                  if (q === false) {
                    q = Ue.apply(C, a);
                  }
                  return q;
                };
              }
            }
            q.hooks = C;
          }
          if (a.walkTokens) {
            const C = this.defaults.walkTokens;
            const re = a.walkTokens;
            q.walkTokens = function (a) {
              let q = [];
              q.push(re.call(this, a));
              if (C) {
                q = q.concat(C.call(this, a));
              }
              return q;
            };
          }
          this.defaults = { ...this.defaults, ...q };
        });
        return this;
      }
      #g(a, C, q) {
        switch (C) {
          case 'heading':
            return function (re) {
              if (!re.type || re.type !== C) {
                return a.apply(this, arguments);
              }
              return a.call(
                this,
                q.parser.parseInline(re.tokens),
                re.depth,
                marked_esm_unescape(
                  q.parser.parseInline(re.tokens, q.parser.textRenderer)
                )
              );
            };
          case 'code':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              return a.call(this, q.text, q.lang, !!q.escaped);
            };
          case 'table':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              let re = '';
              let ae = '';
              for (let a = 0; a < q.header.length; a++) {
                ae += this.tablecell({
                  text: q.header[a].text,
                  tokens: q.header[a].tokens,
                  header: true,
                  align: q.align[a]
                });
              }
              re += this.tablerow({ text: ae });
              let Ue = '';
              for (let a = 0; a < q.rows.length; a++) {
                const C = q.rows[a];
                ae = '';
                for (let a = 0; a < C.length; a++) {
                  ae += this.tablecell({
                    text: C[a].text,
                    tokens: C[a].tokens,
                    header: false,
                    align: q.align[a]
                  });
                }
                Ue += this.tablerow({ text: ae });
              }
              return a.call(this, re, Ue);
            };
          case 'blockquote':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              const re = this.parser.parse(q.tokens);
              return a.call(this, re);
            };
          case 'list':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              const re = q.ordered;
              const ae = q.start;
              const Ue = q.loose;
              let lt = '';
              for (let a = 0; a < q.items.length; a++) {
                const C = q.items[a];
                const re = C.checked;
                const ae = C.task;
                let Pt = '';
                if (C.task) {
                  const a = this.checkbox({ checked: !!re });
                  if (Ue) {
                    if (
                      C.tokens.length > 0 &&
                      C.tokens[0].type === 'paragraph'
                    ) {
                      C.tokens[0].text = a + ' ' + C.tokens[0].text;
                      if (
                        C.tokens[0].tokens &&
                        C.tokens[0].tokens.length > 0 &&
                        C.tokens[0].tokens[0].type === 'text'
                      ) {
                        C.tokens[0].tokens[0].text =
                          a + ' ' + C.tokens[0].tokens[0].text;
                      }
                    } else {
                      C.tokens.unshift({ type: 'text', text: a + ' ' });
                    }
                  } else {
                    Pt += a + ' ';
                  }
                }
                Pt += this.parser.parse(C.tokens, Ue);
                lt += this.listitem({
                  type: 'list_item',
                  raw: Pt,
                  text: Pt,
                  task: ae,
                  checked: !!re,
                  loose: Ue,
                  tokens: C.tokens
                });
              }
              return a.call(this, lt, re, ae);
            };
          case 'html':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              return a.call(this, q.text, q.block);
            };
          case 'paragraph':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              return a.call(this, this.parser.parseInline(q.tokens));
            };
          case 'escape':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              return a.call(this, q.text);
            };
          case 'link':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              return a.call(
                this,
                q.href,
                q.title,
                this.parser.parseInline(q.tokens)
              );
            };
          case 'image':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              return a.call(this, q.href, q.title, q.text);
            };
          case 'strong':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              return a.call(this, this.parser.parseInline(q.tokens));
            };
          case 'em':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              return a.call(this, this.parser.parseInline(q.tokens));
            };
          case 'codespan':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              return a.call(this, q.text);
            };
          case 'del':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              return a.call(this, this.parser.parseInline(q.tokens));
            };
          case 'text':
            return function (q) {
              if (!q.type || q.type !== C) {
                return a.apply(this, arguments);
              }
              return a.call(this, q.text);
            };
        }
        return a;
      }
      setOptions(a) {
        this.defaults = { ...this.defaults, ...a };
        return this;
      }
      lexer(a, C) {
        return _Lexer.lex(a, C ?? this.defaults);
      }
      parser(a, C) {
        return _Parser.parse(a, C ?? this.defaults);
      }
      #f(a, C) {
        return (q, re) => {
          const ae = { ...re };
          const Ue = { ...this.defaults, ...ae };
          if (this.defaults.async === true && ae.async === false) {
            if (!Ue.silent) {
              console.warn(
                'marked(): The async option was set to true by an extension. The async: false option sent to parse will be ignored.'
              );
            }
            Ue.async = true;
          }
          const lt = this.#E(!!Ue.silent, !!Ue.async);
          if (typeof q === 'undefined' || q === null) {
            return lt(
              new Error('marked(): input parameter is undefined or null')
            );
          }
          if (typeof q !== 'string') {
            return lt(
              new Error(
                'marked(): input parameter is of type ' +
                  Object.prototype.toString.call(q) +
                  ', string expected'
              )
            );
          }
          if (Ue.hooks) {
            Ue.hooks.options = Ue;
          }
          if (Ue.async) {
            return Promise.resolve(Ue.hooks ? Ue.hooks.preprocess(q) : q)
              .then((C) => a(C, Ue))
              .then((a) => (Ue.hooks ? Ue.hooks.processAllTokens(a) : a))
              .then((a) =>
                Ue.walkTokens
                  ? Promise.all(this.walkTokens(a, Ue.walkTokens)).then(() => a)
                  : a
              )
              .then((a) => C(a, Ue))
              .then((a) => (Ue.hooks ? Ue.hooks.postprocess(a) : a))
              .catch(lt);
          }
          try {
            if (Ue.hooks) {
              q = Ue.hooks.preprocess(q);
            }
            let re = a(q, Ue);
            if (Ue.hooks) {
              re = Ue.hooks.processAllTokens(re);
            }
            if (Ue.walkTokens) {
              this.walkTokens(re, Ue.walkTokens);
            }
            let ae = C(re, Ue);
            if (Ue.hooks) {
              ae = Ue.hooks.postprocess(ae);
            }
            return ae;
          } catch (a) {
            return lt(a);
          }
        };
      }
      #E(a, C) {
        return (q) => {
          q.message +=
            '\nPlease report this to https://github.com/markedjs/marked.';
          if (a) {
            const a =
              '<p>An error occurred:</p><pre>' +
              escape$1(q.message + '', true) +
              '</pre>';
            if (C) {
              return Promise.resolve(a);
            }
            return a;
          }
          if (C) {
            return Promise.reject(q);
          }
          throw q;
        };
      }
    }
    const ol = new Marked();
    function marked(a, C) {
      return ol.parse(a, C);
    }
    marked.options = marked.setOptions = function (a) {
      ol.setOptions(a);
      marked.defaults = ol.defaults;
      changeDefaults(marked.defaults);
      return marked;
    };
    marked.getDefaults = _getDefaults;
    marked.defaults = ni;
    marked.use = function (...a) {
      ol.use(...a);
      marked.defaults = ol.defaults;
      changeDefaults(marked.defaults);
      return marked;
    };
    marked.walkTokens = function (a, C) {
      return ol.walkTokens(a, C);
    };
    marked.parseInline = ol.parseInline;
    marked.Parser = _Parser;
    marked.parser = _Parser.parse;
    marked.Renderer = _Renderer;
    marked.TextRenderer = _TextRenderer;
    marked.Lexer = _Lexer;
    marked.lexer = _Lexer.lex;
    marked.Tokenizer = _Tokenizer;
    marked.Hooks = _Hooks;
    marked.parse = marked;
    const al = marked.options;
    const il = marked.setOptions;
    const ll = marked.use;
    const cl = marked.walkTokens;
    const Al = marked.parseInline;
    const dl = null && marked;
    const ul = _Parser.parse;
    const pl = _Lexer.lex;
    function utils_mdstr_extract_link(a) {
      const C = /index\.\w+$/i;
      const q = marked(a);
      const { document: re } = parseHTML(q);
      const { href: ae } = re.querySelector('a') || { href: '' };
      if (!ae) {
        return '';
      }
      const Ue = new URL(ae);
      Ue.pathname = Ue.pathname.replace(C, '');
      return Ue + '';
    }
    async function task_auto_translate_step_01_fetch_articels(a) {
      const { with_issue_body: C } = a;
      const q = C.split('\n')
        .filter((a) => a.trim() !== '')
        .map(utils_mdstr_extract_link);
      for (const C of q) {
        const q = {
          str_url: C,
          str_mdfile_to_save_name: undefined,
          str_mdfile_to_save_dir: a.with_task_fetch_to_save_path,
          str_webpage_include_selector: a.with_task_fetch_to_include_selector,
          str_webpage_ignore_Selector: a.with_task_fetch_to_ignore_selector
        };
        const re = await utils_web_fetch_to_mdfile(q);
        const { str_mdfile_to_save_name: ae } = q;
        console.log('meta:', re);
        console.log('str_mdfile_to_save_name:', ae);
        const Ue = (0, as.join)(a.with_task_fetch_to_save_path, ae);
        a.step_01_result_mdfiles.push(Ue);
        a.step_01_result_metas.push(re);
      }
    }
    const hl = '4.52.7';
    let ml = false;
    let fl = undefined;
    let gl = undefined;
    let El = null && undefined;
    let Cl = null && undefined;
    let bl = null && undefined;
    let yl = undefined;
    let Il = null && undefined;
    let wl = undefined;
    let Bl = undefined;
    let Ql = undefined;
    let vl = undefined;
    let Sl = undefined;
    let _l = undefined;
    function setShims(a, C = { auto: false }) {
      if (ml) {
        throw new Error(
          `you must \`import 'openai/shims/${a.kind}'\` before importing anything else from openai`
        );
      }
      if (fl) {
        throw new Error(
          `can't \`import 'openai/shims/${a.kind}'\` after \`import 'openai/shims/${fl}'\``
        );
      }
      ml = C.auto;
      fl = a.kind;
      gl = a.fetch;
      El = a.Request;
      Cl = a.Response;
      bl = a.Headers;
      yl = a.FormData;
      Il = a.Blob;
      wl = a.File;
      Bl = a.ReadableStream;
      Ql = a.getMultipartRequestOptions;
      vl = a.getDefaultAgent;
      Sl = a.fileFromPath;
      _l = a.isFsReadStream;
    }
    var Tl = __nccwpck_require__(8761);
    var kl = __nccwpck_require__(3837);
    var Rl = __nccwpck_require__(4471);
    var Dl = __nccwpck_require__(2131);
    var Nl = __nccwpck_require__(12);
    const isBlob = (a) => a instanceof Nl.t;
    var Ll = __nccwpck_require__(5648);
    const Fl = (0, kl.deprecate)(
      () => {},
      'Constructor "entries" argument is not spec-compliant ' +
        'and will be removed in next major release.'
    );
    var Ml =
      (undefined && undefined.__classPrivateFieldGet) ||
      function (a, C, q, re) {
        if (q === 'a' && !re)
          throw new TypeError('Private accessor was defined without a getter');
        if (typeof C === 'function' ? a !== C || !re : !C.has(a))
          throw new TypeError(
            'Cannot read private member from an object whose class did not declare it'
          );
        return q === 'm'
          ? re
          : q === 'a'
            ? re.call(a)
            : re
              ? re.value
              : C.get(a);
      };
    var Pl, Ol, xl;
    class FormData_FormData {
      constructor(a) {
        Pl.add(this);
        Ol.set(this, new Map());
        if (a) {
          Fl();
          a.forEach(({ name: a, value: C, fileName: q }) =>
            this.append(a, C, q)
          );
        }
      }
      static [((Ol = new WeakMap()), (Pl = new WeakSet()), Symbol.hasInstance)](
        a
      ) {
        return Boolean(
          a &&
            (0, Ll.m)(a.constructor) &&
            a[Symbol.toStringTag] === 'FormData' &&
            (0, Ll.m)(a.append) &&
            (0, Ll.m)(a.set) &&
            (0, Ll.m)(a.get) &&
            (0, Ll.m)(a.getAll) &&
            (0, Ll.m)(a.has) &&
            (0, Ll.m)(a.delete) &&
            (0, Ll.m)(a.entries) &&
            (0, Ll.m)(a.values) &&
            (0, Ll.m)(a.keys) &&
            (0, Ll.m)(a[Symbol.iterator]) &&
            (0, Ll.m)(a.forEach)
        );
      }
      append(a, C, q) {
        Ml(this, Pl, 'm', xl).call(this, {
          name: a,
          fileName: q,
          append: true,
          rawValue: C,
          argsLength: arguments.length
        });
      }
      set(a, C, q) {
        Ml(this, Pl, 'm', xl).call(this, {
          name: a,
          fileName: q,
          append: false,
          rawValue: C,
          argsLength: arguments.length
        });
      }
      get(a) {
        const C = Ml(this, Ol, 'f').get(String(a));
        if (!C) {
          return null;
        }
        return C[0];
      }
      getAll(a) {
        const C = Ml(this, Ol, 'f').get(String(a));
        if (!C) {
          return [];
        }
        return C.slice();
      }
      has(a) {
        return Ml(this, Ol, 'f').has(String(a));
      }
      delete(a) {
        Ml(this, Ol, 'f').delete(String(a));
      }
      *keys() {
        for (const a of Ml(this, Ol, 'f').keys()) {
          yield a;
        }
      }
      *entries() {
        for (const a of this.keys()) {
          const C = this.getAll(a);
          for (const q of C) {
            yield [a, q];
          }
        }
      }
      *values() {
        for (const [, a] of this) {
          yield a;
        }
      }
      [((xl = function _FormData_setEntry({
        name: a,
        rawValue: C,
        append: q,
        fileName: re,
        argsLength: ae
      }) {
        const Ue = q ? 'append' : 'set';
        if (ae < 2) {
          throw new TypeError(
            `Failed to execute '${Ue}' on 'FormData': ` +
              `2 arguments required, but only ${ae} present.`
          );
        }
        a = String(a);
        let lt;
        if ((0, Dl.z)(C)) {
          lt =
            re === undefined
              ? C
              : new Rl.$([C], re, {
                  type: C.type,
                  lastModified: C.lastModified
                });
        } else if (isBlob(C)) {
          lt = new Rl.$([C], re === undefined ? 'blob' : re, { type: C.type });
        } else if (re) {
          throw new TypeError(
            `Failed to execute '${Ue}' on 'FormData': ` +
              "parameter 2 is not of type 'Blob'."
          );
        } else {
          lt = String(C);
        }
        const Pt = Ml(this, Ol, 'f').get(a);
        if (!Pt) {
          return void Ml(this, Ol, 'f').set(a, [lt]);
        }
        if (!q) {
          return void Ml(this, Ol, 'f').set(a, [lt]);
        }
        Pt.push(lt);
      }),
      Symbol.iterator)]() {
        return this.entries();
      }
      forEach(a, C) {
        for (const [q, re] of this) {
          a.call(C, re, q, this);
        }
      }
      get [Symbol.toStringTag]() {
        return 'FormData';
      }
      [kl.inspect.custom]() {
        return this[Symbol.toStringTag];
      }
    }
    var Ul = __nccwpck_require__(9469);
    var Gl = __nccwpck_require__(7428);
    const Hl = require('node:fs');
    const ql = 'abcdefghijklmnopqrstuvwxyz0123456789';
    function createBoundary() {
      let a = 16;
      let C = '';
      while (a--) {
        C += ql[(Math.random() * ql.length) << 0];
      }
      return C;
    }
    const Vl = createBoundary;
    const getType = (a) =>
      Object.prototype.toString.call(a).slice(8, -1).toLowerCase();
    function isPlainObject_isPlainObject(a) {
      if (getType(a) !== 'object') {
        return false;
      }
      const C = Object.getPrototypeOf(a);
      if (C === null || C === undefined) {
        return true;
      }
      const q = C.constructor && C.constructor.toString();
      return q === Object.toString();
    }
    const Wl = isPlainObject_isPlainObject;
    const normalizeValue = (a) =>
      String(a).replace(/\r|\n/g, (a, C, q) => {
        if (
          (a === '\r' && q[C + 1] !== '\n') ||
          (a === '\n' && q[C - 1] !== '\r')
        ) {
          return '\r\n';
        }
        return a;
      });
    const Yl = normalizeValue;
    const escapeName = (a) =>
      String(a)
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/"/g, '%22');
    const jl = escapeName;
    const isFunction_isFunction = (a) => typeof a === 'function';
    const Jl = isFunction_isFunction;
    const isFileLike = (a) =>
      Boolean(
        a &&
          typeof a === 'object' &&
          Jl(a.constructor) &&
          a[Symbol.toStringTag] === 'File' &&
          Jl(a.stream) &&
          a.name != null &&
          a.size != null &&
          a.lastModified != null
      );
    const isFormData = (a) =>
      Boolean(
        a &&
          Jl(a.constructor) &&
          a[Symbol.toStringTag] === 'FormData' &&
          Jl(a.append) &&
          Jl(a.getAll) &&
          Jl(a.entries) &&
          Jl(a[Symbol.iterator])
      );
    const zl = null && isFormData;
    var $l =
      (undefined && undefined.__classPrivateFieldSet) ||
      function (a, C, q, re, ae) {
        if (re === 'm') throw new TypeError('Private method is not writable');
        if (re === 'a' && !ae)
          throw new TypeError('Private accessor was defined without a setter');
        if (typeof C === 'function' ? a !== C || !ae : !C.has(a))
          throw new TypeError(
            'Cannot write private member to an object whose class did not declare it'
          );
        return (
          re === 'a' ? ae.call(a, q) : ae ? (ae.value = q) : C.set(a, q), q
        );
      };
    var Kl =
      (undefined && undefined.__classPrivateFieldGet) ||
      function (a, C, q, re) {
        if (q === 'a' && !re)
          throw new TypeError('Private accessor was defined without a getter');
        if (typeof C === 'function' ? a !== C || !re : !C.has(a))
          throw new TypeError(
            'Cannot read private member from an object whose class did not declare it'
          );
        return q === 'm'
          ? re
          : q === 'a'
            ? re.call(a)
            : re
              ? re.value
              : C.get(a);
      };
    var Xl, Zl, ec, tc, rc, sc, nc, oc, ac, ic;
    const lc = { enableAdditionalHeaders: false };
    class FormDataEncoder {
      constructor(a, C, q) {
        Xl.add(this);
        Zl.set(this, '\r\n');
        ec.set(this, void 0);
        tc.set(this, void 0);
        rc.set(this, '-'.repeat(2));
        sc.set(this, new TextEncoder());
        nc.set(this, void 0);
        oc.set(this, void 0);
        ac.set(this, void 0);
        if (!isFormData(a)) {
          throw new TypeError(
            'Expected first argument to be a FormData instance.'
          );
        }
        let re;
        if (Wl(C)) {
          q = C;
        } else {
          re = C;
        }
        if (!re) {
          re = Vl();
        }
        if (typeof re !== 'string') {
          throw new TypeError('Expected boundary argument to be a string.');
        }
        if (q && !Wl(q)) {
          throw new TypeError('Expected options argument to be an object.');
        }
        $l(this, oc, a, 'f');
        $l(this, ac, { ...lc, ...q }, 'f');
        $l(this, ec, Kl(this, sc, 'f').encode(Kl(this, Zl, 'f')), 'f');
        $l(this, tc, Kl(this, ec, 'f').byteLength, 'f');
        this.boundary = `form-data-boundary-${re}`;
        this.contentType = `multipart/form-data; boundary=${this.boundary}`;
        $l(
          this,
          nc,
          Kl(this, sc, 'f').encode(
            `${Kl(this, rc, 'f')}${this.boundary}${Kl(this, rc, 'f')}${Kl(this, Zl, 'f').repeat(2)}`
          ),
          'f'
        );
        this.contentLength = String(this.getContentLength());
        this.headers = Object.freeze({
          'Content-Type': this.contentType,
          'Content-Length': this.contentLength
        });
        Object.defineProperties(this, {
          boundary: { writable: false, configurable: false },
          contentType: { writable: false, configurable: false },
          contentLength: { writable: false, configurable: false },
          headers: { writable: false, configurable: false }
        });
      }
      getContentLength() {
        let a = 0;
        for (const [C, q] of Kl(this, oc, 'f')) {
          const re = isFileLike(q) ? q : Kl(this, sc, 'f').encode(Yl(q));
          a += Kl(this, Xl, 'm', ic).call(this, C, re).byteLength;
          a += isFileLike(re) ? re.size : re.byteLength;
          a += Kl(this, tc, 'f');
        }
        return a + Kl(this, nc, 'f').byteLength;
      }
      *values() {
        for (const [a, C] of Kl(this, oc, 'f').entries()) {
          const q = isFileLike(C) ? C : Kl(this, sc, 'f').encode(Yl(C));
          yield Kl(this, Xl, 'm', ic).call(this, a, q);
          yield q;
          yield Kl(this, ec, 'f');
        }
        yield Kl(this, nc, 'f');
      }
      async *encode() {
        for (const a of this.values()) {
          if (isFileLike(a)) {
            yield* a.stream();
          } else {
            yield a;
          }
        }
      }
      [((Zl = new WeakMap()),
      (ec = new WeakMap()),
      (tc = new WeakMap()),
      (rc = new WeakMap()),
      (sc = new WeakMap()),
      (nc = new WeakMap()),
      (oc = new WeakMap()),
      (ac = new WeakMap()),
      (Xl = new WeakSet()),
      (ic = function _FormDataEncoder_getFieldHeader(a, C) {
        let q = '';
        q += `${Kl(this, rc, 'f')}${this.boundary}${Kl(this, Zl, 'f')}`;
        q += `Content-Disposition: form-data; name="${jl(a)}"`;
        if (isFileLike(C)) {
          q += `; filename="${jl(C.name)}"${Kl(this, Zl, 'f')}`;
          q += `Content-Type: ${C.type || 'application/octet-stream'}`;
        }
        if (Kl(this, ac, 'f').enableAdditionalHeaders === true) {
          q += `${Kl(this, Zl, 'f')}Content-Length: ${isFileLike(C) ? C.size : C.byteLength}`;
        }
        return Kl(this, sc, 'f').encode(`${q}${Kl(this, Zl, 'f').repeat(2)}`);
      }),
      Symbol.iterator)]() {
        return this.values();
      }
      [Symbol.asyncIterator]() {
        return this.encode();
      }
    }
    const cc = null && FormDataEncoder;
    var Ac = __nccwpck_require__(4492);
    class MultipartBody {
      constructor(a) {
        this.body = a;
      }
      get [Symbol.toStringTag]() {
        return 'MultipartBody';
      }
    }
    var dc = __nccwpck_require__(5304);
    let uc = false;
    async function node_runtime_fileFromPath(a, ...C) {
      const { fileFromPath: q } = await __nccwpck_require__
        .e(486)
        .then(__nccwpck_require__.bind(__nccwpck_require__, 9486));
      if (!uc) {
        console.warn(
          `fileFromPath is deprecated; use fs.createReadStream(${JSON.stringify(a)}) instead`
        );
        uc = true;
      }
      return await q(a, ...C);
    }
    const pc = new Ul({ keepAlive: true, timeout: 5 * 60 * 1e3 });
    const hc = new Ul.HttpsAgent({ keepAlive: true, timeout: 5 * 60 * 1e3 });
    async function node_runtime_getMultipartRequestOptions(a, C) {
      const q = new FormDataEncoder(a);
      const re = Ac.Readable.from(q);
      const ae = new MultipartBody(re);
      const Ue = {
        ...C.headers,
        ...q.headers,
        'Content-Length': q.contentLength
      };
      return { ...C, body: ae, headers: Ue };
    }
    function getRuntime() {
      if (typeof AbortController === 'undefined') {
        globalThis.AbortController = Gl.AbortController;
      }
      return {
        kind: 'node',
        fetch: Tl,
        Request: Tl.Request,
        Response: Tl.Response,
        Headers: Tl.Headers,
        FormData: FormData_FormData,
        Blob: Nl.t,
        File: Rl.$,
        ReadableStream: dc.ReadableStream,
        getMultipartRequestOptions: node_runtime_getMultipartRequestOptions,
        getDefaultAgent: (a) => (a.startsWith('https') ? hc : pc),
        fileFromPath: node_runtime_fileFromPath,
        isFsReadStream: (a) => a instanceof Hl.ReadStream
      };
    }
    if (!fl) setShims(getRuntime(), { auto: true });
    class Stream {
      constructor(a, C) {
        this.iterator = a;
        this.controller = C;
      }
      static fromSSEResponse(a, C) {
        let q = false;
        async function* iterator() {
          if (q) {
            throw new Error(
              'Cannot iterate over a consumed stream, use `.tee()` to split the stream.'
            );
          }
          q = true;
          let re = false;
          try {
            for await (const q of _iterSSEMessages(a, C)) {
              if (re) continue;
              if (q.data.startsWith('[DONE]')) {
                re = true;
                continue;
              }
              if (q.event === null) {
                let a;
                try {
                  a = JSON.parse(q.data);
                } catch (a) {
                  console.error(`Could not parse message into JSON:`, q.data);
                  console.error(`From chunk:`, q.raw);
                  throw a;
                }
                if (a && a.error) {
                  throw new APIError(undefined, a.error, undefined, undefined);
                }
                yield a;
              } else {
                let a;
                try {
                  a = JSON.parse(q.data);
                } catch (a) {
                  console.error(`Could not parse message into JSON:`, q.data);
                  console.error(`From chunk:`, q.raw);
                  throw a;
                }
                if (q.event == 'error') {
                  throw new APIError(undefined, a.error, a.message, undefined);
                }
                yield { event: q.event, data: a };
              }
            }
            re = true;
          } catch (a) {
            if (a instanceof Error && a.name === 'AbortError') return;
            throw a;
          } finally {
            if (!re) C.abort();
          }
        }
        return new Stream(iterator, C);
      }
      static fromReadableStream(a, C) {
        let q = false;
        async function* iterLines() {
          const C = new LineDecoder();
          const q = readableStreamAsyncIterable(a);
          for await (const a of q) {
            for (const q of C.decode(a)) {
              yield q;
            }
          }
          for (const a of C.flush()) {
            yield a;
          }
        }
        async function* iterator() {
          if (q) {
            throw new Error(
              'Cannot iterate over a consumed stream, use `.tee()` to split the stream.'
            );
          }
          q = true;
          let a = false;
          try {
            for await (const C of iterLines()) {
              if (a) continue;
              if (C) yield JSON.parse(C);
            }
            a = true;
          } catch (a) {
            if (a instanceof Error && a.name === 'AbortError') return;
            throw a;
          } finally {
            if (!a) C.abort();
          }
        }
        return new Stream(iterator, C);
      }
      [Symbol.asyncIterator]() {
        return this.iterator();
      }
      tee() {
        const a = [];
        const C = [];
        const q = this.iterator();
        const teeIterator = (re) => ({
          next: () => {
            if (re.length === 0) {
              const re = q.next();
              a.push(re);
              C.push(re);
            }
            return re.shift();
          }
        });
        return [
          new Stream(() => teeIterator(a), this.controller),
          new Stream(() => teeIterator(C), this.controller)
        ];
      }
      toReadableStream() {
        const a = this;
        let C;
        const q = new TextEncoder();
        return new Bl({
          async start() {
            C = a[Symbol.asyncIterator]();
          },
          async pull(a) {
            try {
              const { value: re, done: ae } = await C.next();
              if (ae) return a.close();
              const Ue = q.encode(JSON.stringify(re) + '\n');
              a.enqueue(Ue);
            } catch (C) {
              a.error(C);
            }
          },
          async cancel() {
            await C.return?.();
          }
        });
      }
    }
    async function* _iterSSEMessages(a, C) {
      if (!a.body) {
        C.abort();
        throw new error_OpenAIError(
          `Attempted to iterate over a response with no body`
        );
      }
      const q = new SSEDecoder();
      const re = new LineDecoder();
      const ae = readableStreamAsyncIterable(a.body);
      for await (const a of iterSSEChunks(ae)) {
        for (const C of re.decode(a)) {
          const a = q.decode(C);
          if (a) yield a;
        }
      }
      for (const a of re.flush()) {
        const C = q.decode(a);
        if (C) yield C;
      }
    }
    async function* iterSSEChunks(a) {
      let C = new Uint8Array();
      for await (const q of a) {
        if (q == null) {
          continue;
        }
        const a =
          q instanceof ArrayBuffer
            ? new Uint8Array(q)
            : typeof q === 'string'
              ? new TextEncoder().encode(q)
              : q;
        let re = new Uint8Array(C.length + a.length);
        re.set(C);
        re.set(a, C.length);
        C = re;
        let ae;
        while ((ae = findDoubleNewlineIndex(C)) !== -1) {
          yield C.slice(0, ae);
          C = C.slice(ae);
        }
      }
      if (C.length > 0) {
        yield C;
      }
    }
    function findDoubleNewlineIndex(a) {
      const C = 10;
      const q = 13;
      for (let re = 0; re < a.length - 2; re++) {
        if (a[re] === C && a[re + 1] === C) {
          return re + 2;
        }
        if (a[re] === q && a[re + 1] === q) {
          return re + 2;
        }
        if (
          a[re] === q &&
          a[re + 1] === C &&
          re + 3 < a.length &&
          a[re + 2] === q &&
          a[re + 3] === C
        ) {
          return re + 4;
        }
      }
      return -1;
    }
    class SSEDecoder {
      constructor() {
        this.event = null;
        this.data = [];
        this.chunks = [];
      }
      decode(a) {
        if (a.endsWith('\r')) {
          a = a.substring(0, a.length - 1);
        }
        if (!a) {
          if (!this.event && !this.data.length) return null;
          const a = {
            event: this.event,
            data: this.data.join('\n'),
            raw: this.chunks
          };
          this.event = null;
          this.data = [];
          this.chunks = [];
          return a;
        }
        this.chunks.push(a);
        if (a.startsWith(':')) {
          return null;
        }
        let [C, q, re] = partition(a, ':');
        if (re.startsWith(' ')) {
          re = re.substring(1);
        }
        if (C === 'event') {
          this.event = re;
        } else if (C === 'data') {
          this.data.push(re);
        }
        return null;
      }
    }
    class LineDecoder {
      constructor() {
        this.buffer = [];
        this.trailingCR = false;
      }
      decode(a) {
        let C = this.decodeText(a);
        if (this.trailingCR) {
          C = '\r' + C;
          this.trailingCR = false;
        }
        if (C.endsWith('\r')) {
          this.trailingCR = true;
          C = C.slice(0, -1);
        }
        if (!C) {
          return [];
        }
        const q = LineDecoder.NEWLINE_CHARS.has(C[C.length - 1] || '');
        let re = C.split(LineDecoder.NEWLINE_REGEXP);
        if (q) {
          re.pop();
        }
        if (re.length === 1 && !q) {
          this.buffer.push(re[0]);
          return [];
        }
        if (this.buffer.length > 0) {
          re = [this.buffer.join('') + re[0], ...re.slice(1)];
          this.buffer = [];
        }
        if (!q) {
          this.buffer = [re.pop() || ''];
        }
        return re;
      }
      decodeText(a) {
        if (a == null) return '';
        if (typeof a === 'string') return a;
        if (typeof Buffer !== 'undefined') {
          if (a instanceof Buffer) {
            return a.toString();
          }
          if (a instanceof Uint8Array) {
            return Buffer.from(a).toString();
          }
          throw new error_OpenAIError(
            `Unexpected: received non-Uint8Array (${a.constructor.name}) stream chunk in an environment with a global "Buffer" defined, which this library assumes to be Node. Please report this error.`
          );
        }
        if (typeof TextDecoder !== 'undefined') {
          if (a instanceof Uint8Array || a instanceof ArrayBuffer) {
            this.textDecoder ?? (this.textDecoder = new TextDecoder('utf8'));
            return this.textDecoder.decode(a);
          }
          throw new error_OpenAIError(
            `Unexpected: received non-Uint8Array/ArrayBuffer (${a.constructor.name}) in a web platform. Please report this error.`
          );
        }
        throw new error_OpenAIError(
          `Unexpected: neither Buffer nor TextDecoder are available as globals. Please report this error.`
        );
      }
      flush() {
        if (!this.buffer.length && !this.trailingCR) {
          return [];
        }
        const a = [this.buffer.join('')];
        this.buffer = [];
        this.trailingCR = false;
        return a;
      }
    }
    LineDecoder.NEWLINE_CHARS = new Set(['\n', '\r']);
    LineDecoder.NEWLINE_REGEXP = /\r\n|[\n\r]/g;
    function _decodeChunks(a) {
      const C = new LineDecoder();
      const q = [];
      for (const re of a) {
        q.push(...C.decode(re));
      }
      return q;
    }
    function partition(a, C) {
      const q = a.indexOf(C);
      if (q !== -1) {
        return [a.substring(0, q), C, a.substring(q + C.length)];
      }
      return [a, '', ''];
    }
    function readableStreamAsyncIterable(a) {
      if (a[Symbol.asyncIterator]) return a;
      const C = a.getReader();
      return {
        async next() {
          try {
            const a = await C.read();
            if (a?.done) C.releaseLock();
            return a;
          } catch (a) {
            C.releaseLock();
            throw a;
          }
        },
        async return() {
          const a = C.cancel();
          C.releaseLock();
          await a;
          return { done: true, value: undefined };
        },
        [Symbol.asyncIterator]() {
          return this;
        }
      };
    }
    const isResponseLike = (a) =>
      a != null &&
      typeof a === 'object' &&
      typeof a.url === 'string' &&
      typeof a.blob === 'function';
    const uploads_isFileLike = (a) =>
      a != null &&
      typeof a === 'object' &&
      typeof a.name === 'string' &&
      typeof a.lastModified === 'number' &&
      isBlobLike(a);
    const isBlobLike = (a) =>
      a != null &&
      typeof a === 'object' &&
      typeof a.size === 'number' &&
      typeof a.type === 'string' &&
      typeof a.text === 'function' &&
      typeof a.slice === 'function' &&
      typeof a.arrayBuffer === 'function';
    const isUploadable = (a) =>
      uploads_isFileLike(a) || isResponseLike(a) || _l(a);
    async function toFile(a, C, q) {
      a = await a;
      q ??
        (q = uploads_isFileLike(a)
          ? { lastModified: a.lastModified, type: a.type }
          : {});
      if (isResponseLike(a)) {
        const re = await a.blob();
        C ||
          (C = new URL(a.url).pathname.split(/[\\/]/).pop() ?? 'unknown_file');
        return new wl([re], C, q);
      }
      const re = await getBytes(a);
      C || (C = uploads_getName(a) ?? 'unknown_file');
      if (!q.type) {
        const a = re[0]?.type;
        if (typeof a === 'string') {
          q = { ...q, type: a };
        }
      }
      return new wl(re, C, q);
    }
    async function getBytes(a) {
      let C = [];
      if (
        typeof a === 'string' ||
        ArrayBuffer.isView(a) ||
        a instanceof ArrayBuffer
      ) {
        C.push(a);
      } else if (isBlobLike(a)) {
        C.push(await a.arrayBuffer());
      } else if (isAsyncIterableIterator(a)) {
        for await (const q of a) {
          C.push(q);
        }
      } else {
        throw new Error(
          `Unexpected data type: ${typeof a}; constructor: ${a?.constructor?.name}; props: ${propsForError(a)}`
        );
      }
      return C;
    }
    function propsForError(a) {
      const C = Object.getOwnPropertyNames(a);
      return `[${C.map((a) => `"${a}"`).join(', ')}]`;
    }
    function uploads_getName(a) {
      return (
        getStringFromMaybeBuffer(a.name) ||
        getStringFromMaybeBuffer(a.filename) ||
        getStringFromMaybeBuffer(a.path)?.split(/[\\/]/).pop()
      );
    }
    const getStringFromMaybeBuffer = (a) => {
      if (typeof a === 'string') return a;
      if (typeof Buffer !== 'undefined' && a instanceof Buffer)
        return String(a);
      return undefined;
    };
    const isAsyncIterableIterator = (a) =>
      a != null &&
      typeof a === 'object' &&
      typeof a[Symbol.asyncIterator] === 'function';
    const isMultipartBody = (a) =>
      a &&
      typeof a === 'object' &&
      a.body &&
      a[Symbol.toStringTag] === 'MultipartBody';
    const maybeMultipartFormRequestOptions = async (a) => {
      if (!hasUploadableValue(a.body)) return a;
      const C = await createForm(a.body);
      return getMultipartRequestOptions(C, a);
    };
    const multipartFormRequestOptions = async (a) => {
      const C = await createForm(a.body);
      return Ql(C, a);
    };
    const createForm = async (a) => {
      const C = new yl();
      await Promise.all(
        Object.entries(a || {}).map(([a, q]) => addFormValue(C, a, q))
      );
      return C;
    };
    const hasUploadableValue = (a) => {
      if (isUploadable(a)) return true;
      if (Array.isArray(a)) return a.some(hasUploadableValue);
      if (a && typeof a === 'object') {
        for (const C in a) {
          if (hasUploadableValue(a[C])) return true;
        }
      }
      return false;
    };
    const addFormValue = async (a, C, q) => {
      if (q === undefined) return;
      if (q == null) {
        throw new TypeError(
          `Received null for "${C}"; to pass null in FormData, you must use the string 'null'`
        );
      }
      if (
        typeof q === 'string' ||
        typeof q === 'number' ||
        typeof q === 'boolean'
      ) {
        a.append(C, String(q));
      } else if (isUploadable(q)) {
        const re = await toFile(q);
        a.append(C, re);
      } else if (Array.isArray(q)) {
        await Promise.all(q.map((q) => addFormValue(a, C + '[]', q)));
      } else if (typeof q === 'object') {
        await Promise.all(
          Object.entries(q).map(([q, re]) => addFormValue(a, `${C}[${q}]`, re))
        );
      } else {
        throw new TypeError(
          `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${q} instead`
        );
      }
    };
    var mc =
      (undefined && undefined.__classPrivateFieldSet) ||
      function (a, C, q, re, ae) {
        if (re === 'm') throw new TypeError('Private method is not writable');
        if (re === 'a' && !ae)
          throw new TypeError('Private accessor was defined without a setter');
        if (typeof C === 'function' ? a !== C || !ae : !C.has(a))
          throw new TypeError(
            'Cannot write private member to an object whose class did not declare it'
          );
        return (
          re === 'a' ? ae.call(a, q) : ae ? (ae.value = q) : C.set(a, q), q
        );
      };
    var fc =
      (undefined && undefined.__classPrivateFieldGet) ||
      function (a, C, q, re) {
        if (q === 'a' && !re)
          throw new TypeError('Private accessor was defined without a getter');
        if (typeof C === 'function' ? a !== C || !re : !C.has(a))
          throw new TypeError(
            'Cannot read private member from an object whose class did not declare it'
          );
        return q === 'm'
          ? re
          : q === 'a'
            ? re.call(a)
            : re
              ? re.value
              : C.get(a);
      };
    var gc;
    async function defaultParseResponse(a) {
      const { response: C } = a;
      if (a.options.stream) {
        debug('response', C.status, C.url, C.headers, C.body);
        if (a.options.__streamClass) {
          return a.options.__streamClass.fromSSEResponse(C, a.controller);
        }
        return Stream.fromSSEResponse(C, a.controller);
      }
      if (C.status === 204) {
        return null;
      }
      if (a.options.__binaryResponse) {
        return C;
      }
      const q = C.headers.get('content-type');
      const re =
        q?.includes('application/json') ||
        q?.includes('application/vnd.api+json');
      if (re) {
        const a = await C.json();
        debug('response', C.status, C.url, C.headers, a);
        return a;
      }
      const ae = await C.text();
      debug('response', C.status, C.url, C.headers, ae);
      return ae;
    }
    class APIPromise extends Promise {
      constructor(a, C = defaultParseResponse) {
        super((a) => {
          a(null);
        });
        this.responsePromise = a;
        this.parseResponse = C;
      }
      _thenUnwrap(a) {
        return new APIPromise(this.responsePromise, async (C) =>
          a(await this.parseResponse(C))
        );
      }
      asResponse() {
        return this.responsePromise.then((a) => a.response);
      }
      async withResponse() {
        const [a, C] = await Promise.all([this.parse(), this.asResponse()]);
        return { data: a, response: C };
      }
      parse() {
        if (!this.parsedPromise) {
          this.parsedPromise = this.responsePromise.then(this.parseResponse);
        }
        return this.parsedPromise;
      }
      then(a, C) {
        return this.parse().then(a, C);
      }
      catch(a) {
        return this.parse().catch(a);
      }
      finally(a) {
        return this.parse().finally(a);
      }
    }
    class APIClient {
      constructor({
        baseURL: a,
        maxRetries: C = 2,
        timeout: q = 6e5,
        httpAgent: re,
        fetch: ae
      }) {
        this.baseURL = a;
        this.maxRetries = validatePositiveInteger('maxRetries', C);
        this.timeout = validatePositiveInteger('timeout', q);
        this.httpAgent = re;
        this.fetch = ae ?? gl;
      }
      authHeaders(a) {
        return {};
      }
      defaultHeaders(a) {
        return {
          Accept: 'application/json',
          'Content-Type': 'application/json',
          'User-Agent': this.getUserAgent(),
          ...getPlatformHeaders(),
          ...this.authHeaders(a)
        };
      }
      validateHeaders(a, C) {}
      defaultIdempotencyKey() {
        return `stainless-node-retry-${uuid4()}`;
      }
      get(a, C) {
        return this.methodRequest('get', a, C);
      }
      post(a, C) {
        return this.methodRequest('post', a, C);
      }
      patch(a, C) {
        return this.methodRequest('patch', a, C);
      }
      put(a, C) {
        return this.methodRequest('put', a, C);
      }
      delete(a, C) {
        return this.methodRequest('delete', a, C);
      }
      methodRequest(a, C, q) {
        return this.request(
          Promise.resolve(q).then(async (q) => {
            const re =
              q && isBlobLike(q?.body)
                ? new DataView(await q.body.arrayBuffer())
                : q?.body instanceof DataView
                  ? q.body
                  : q?.body instanceof ArrayBuffer
                    ? new DataView(q.body)
                    : q && ArrayBuffer.isView(q?.body)
                      ? new DataView(q.body.buffer)
                      : q?.body;
            return { method: a, path: C, ...q, body: re };
          })
        );
      }
      getAPIList(a, C, q) {
        return this.requestAPIList(C, { method: 'get', path: a, ...q });
      }
      calculateContentLength(a) {
        if (typeof a === 'string') {
          if (typeof Buffer !== 'undefined') {
            return Buffer.byteLength(a, 'utf8').toString();
          }
          if (typeof TextEncoder !== 'undefined') {
            const C = new TextEncoder();
            const q = C.encode(a);
            return q.length.toString();
          }
        } else if (ArrayBuffer.isView(a)) {
          return a.byteLength.toString();
        }
        return null;
      }
      buildRequest(a) {
        const { method: C, path: q, query: re, headers: ae = {} } = a;
        const Ue =
          ArrayBuffer.isView(a.body) ||
          (a.__binaryRequest && typeof a.body === 'string')
            ? a.body
            : isMultipartBody(a.body)
              ? a.body.body
              : a.body
                ? JSON.stringify(a.body, null, 2)
                : null;
        const lt = this.calculateContentLength(Ue);
        const Pt = this.buildURL(q, re);
        if ('timeout' in a) validatePositiveInteger('timeout', a.timeout);
        const Wt = a.timeout ?? this.timeout;
        const Ar = a.httpAgent ?? this.httpAgent ?? vl(Pt);
        const Er = Wt + 1e3;
        if (
          typeof Ar?.options?.timeout === 'number' &&
          Er > (Ar.options.timeout ?? 0)
        ) {
          Ar.options.timeout = Er;
        }
        if (this.idempotencyHeader && C !== 'get') {
          if (!a.idempotencyKey)
            a.idempotencyKey = this.defaultIdempotencyKey();
          ae[this.idempotencyHeader] = a.idempotencyKey;
        }
        const Ir = this.buildHeaders({
          options: a,
          headers: ae,
          contentLength: lt
        });
        const Br = {
          method: C,
          ...(Ue && { body: Ue }),
          headers: Ir,
          ...(Ar && { agent: Ar }),
          signal: a.signal ?? null
        };
        return { req: Br, url: Pt, timeout: Wt };
      }
      buildHeaders({ options: a, headers: C, contentLength: q }) {
        const re = {};
        if (q) {
          re['content-length'] = q;
        }
        const ae = this.defaultHeaders(a);
        applyHeadersMut(re, ae);
        applyHeadersMut(re, C);
        if (isMultipartBody(a.body) && fl !== 'node') {
          delete re['content-type'];
        }
        this.validateHeaders(re, C);
        return re;
      }
      async prepareOptions(a) {}
      async prepareRequest(a, { url: C, options: q }) {}
      parseHeaders(a) {
        return !a
          ? {}
          : Symbol.iterator in a
            ? Object.fromEntries(Array.from(a).map((a) => [...a]))
            : { ...a };
      }
      makeStatusError(a, C, q, re) {
        return APIError.generate(a, C, q, re);
      }
      request(a, C = null) {
        return new APIPromise(this.makeRequest(a, C));
      }
      async makeRequest(a, C) {
        const q = await a;
        if (C == null) {
          C = q.maxRetries ?? this.maxRetries;
        }
        await this.prepareOptions(q);
        const { req: re, url: ae, timeout: Ue } = this.buildRequest(q);
        await this.prepareRequest(re, { url: ae, options: q });
        debug('request', ae, q, re.headers);
        if (q.signal?.aborted) {
          throw new APIUserAbortError();
        }
        const lt = new AbortController();
        const Pt = await this.fetchWithTimeout(ae, re, Ue, lt).catch(
          castToError
        );
        if (Pt instanceof Error) {
          if (q.signal?.aborted) {
            throw new APIUserAbortError();
          }
          if (C) {
            return this.retryRequest(q, C);
          }
          if (Pt.name === 'AbortError') {
            throw new APIConnectionTimeoutError();
          }
          throw new APIConnectionError({ cause: Pt });
        }
        const Wt = createResponseHeaders(Pt.headers);
        if (!Pt.ok) {
          if (C && this.shouldRetry(Pt)) {
            const a = `retrying, ${C} attempts remaining`;
            debug(`response (error; ${a})`, Pt.status, ae, Wt);
            return this.retryRequest(q, C, Wt);
          }
          const a = await Pt.text().catch((a) => castToError(a).message);
          const re = safeJSON(a);
          const Ue = re ? undefined : a;
          const lt = C
            ? `(error; no more retries left)`
            : `(error; not retryable)`;
          debug(`response (error; ${lt})`, Pt.status, ae, Wt, Ue);
          const Ar = this.makeStatusError(Pt.status, re, Ue, Wt);
          throw Ar;
        }
        return { response: Pt, options: q, controller: lt };
      }
      requestAPIList(a, C) {
        const q = this.makeRequest(C, null);
        return new PagePromise(this, q, a);
      }
      buildURL(a, C) {
        const q = isAbsoluteURL(a)
          ? new URL(a)
          : new URL(
              this.baseURL +
                (this.baseURL.endsWith('/') && a.startsWith('/')
                  ? a.slice(1)
                  : a)
            );
        const re = this.defaultQuery();
        if (!isEmptyObj(re)) {
          C = { ...re, ...C };
        }
        if (typeof C === 'object' && C && !Array.isArray(C)) {
          q.search = this.stringifyQuery(C);
        }
        return q.toString();
      }
      stringifyQuery(a) {
        return Object.entries(a)
          .filter(([a, C]) => typeof C !== 'undefined')
          .map(([a, C]) => {
            if (
              typeof C === 'string' ||
              typeof C === 'number' ||
              typeof C === 'boolean'
            ) {
              return `${encodeURIComponent(a)}=${encodeURIComponent(C)}`;
            }
            if (C === null) {
              return `${encodeURIComponent(a)}=`;
            }
            throw new error_OpenAIError(
              `Cannot stringify type ${typeof C}; Expected string, number, boolean, or null. If you need to pass nested query parameters, you can manually encode them, e.g. { query: { 'foo[key1]': value1, 'foo[key2]': value2 } }, and please open a GitHub issue requesting better support for your use case.`
            );
          })
          .join('&');
      }
      async fetchWithTimeout(a, C, q, re) {
        const { signal: ae, ...Ue } = C || {};
        if (ae) ae.addEventListener('abort', () => re.abort());
        const lt = setTimeout(() => re.abort(), q);
        return this.getRequestClient()
          .fetch.call(undefined, a, { signal: re.signal, ...Ue })
          .finally(() => {
            clearTimeout(lt);
          });
      }
      getRequestClient() {
        return { fetch: this.fetch };
      }
      shouldRetry(a) {
        const C = a.headers.get('x-should-retry');
        if (C === 'true') return true;
        if (C === 'false') return false;
        if (a.status === 408) return true;
        if (a.status === 409) return true;
        if (a.status === 429) return true;
        if (a.status >= 500) return true;
        return false;
      }
      async retryRequest(a, C, q) {
        let re;
        const ae = q?.['retry-after-ms'];
        if (ae) {
          const a = parseFloat(ae);
          if (!Number.isNaN(a)) {
            re = a;
          }
        }
        const Ue = q?.['retry-after'];
        if (Ue && !re) {
          const a = parseFloat(Ue);
          if (!Number.isNaN(a)) {
            re = a * 1e3;
          } else {
            re = Date.parse(Ue) - Date.now();
          }
        }
        if (!(re && 0 <= re && re < 60 * 1e3)) {
          const q = a.maxRetries ?? this.maxRetries;
          re = this.calculateDefaultRetryTimeoutMillis(C, q);
        }
        await sleep(re);
        return this.makeRequest(a, C - 1);
      }
      calculateDefaultRetryTimeoutMillis(a, C) {
        const q = 0.5;
        const re = 8;
        const ae = C - a;
        const Ue = Math.min(q * Math.pow(2, ae), re);
        const lt = 1 - Math.random() * 0.25;
        return Ue * lt * 1e3;
      }
      getUserAgent() {
        return `${this.constructor.name}/JS ${hl}`;
      }
    }
    class AbstractPage {
      constructor(a, C, q, re) {
        gc.set(this, void 0);
        mc(this, gc, a, 'f');
        this.options = re;
        this.response = C;
        this.body = q;
      }
      hasNextPage() {
        const a = this.getPaginatedItems();
        if (!a.length) return false;
        return this.nextPageInfo() != null;
      }
      async getNextPage() {
        const a = this.nextPageInfo();
        if (!a) {
          throw new error_OpenAIError(
            'No next page expected; please check `.hasNextPage()` before calling `.getNextPage()`.'
          );
        }
        const C = { ...this.options };
        if ('params' in a && typeof C.query === 'object') {
          C.query = { ...C.query, ...a.params };
        } else if ('url' in a) {
          const q = [
            ...Object.entries(C.query || {}),
            ...a.url.searchParams.entries()
          ];
          for (const [C, re] of q) {
            a.url.searchParams.set(C, re);
          }
          C.query = undefined;
          C.path = a.url.toString();
        }
        return await fc(this, gc, 'f').requestAPIList(this.constructor, C);
      }
      async *iterPages() {
        let a = this;
        yield a;
        while (a.hasNextPage()) {
          a = await a.getNextPage();
          yield a;
        }
      }
      async *[((gc = new WeakMap()), Symbol.asyncIterator)]() {
        for await (const a of this.iterPages()) {
          for (const C of a.getPaginatedItems()) {
            yield C;
          }
        }
      }
    }
    class PagePromise extends APIPromise {
      constructor(a, C, q) {
        super(
          C,
          async (C) =>
            new q(a, C.response, await defaultParseResponse(C), C.options)
        );
      }
      async *[Symbol.asyncIterator]() {
        const a = await this;
        for await (const C of a) {
          yield C;
        }
      }
    }
    const createResponseHeaders = (a) =>
      new Proxy(Object.fromEntries(a.entries()), {
        get(a, C) {
          const q = C.toString();
          return a[q.toLowerCase()] || a[q];
        }
      });
    const Ec = {
      method: true,
      path: true,
      query: true,
      body: true,
      headers: true,
      maxRetries: true,
      stream: true,
      timeout: true,
      httpAgent: true,
      signal: true,
      idempotencyKey: true,
      __binaryRequest: true,
      __binaryResponse: true,
      __streamClass: true
    };
    const isRequestOptions = (a) =>
      typeof a === 'object' &&
      a !== null &&
      !isEmptyObj(a) &&
      Object.keys(a).every((a) => hasOwn(Ec, a));
    const getPlatformProperties = () => {
      if (typeof Deno !== 'undefined' && Deno.build != null) {
        return {
          'X-Stainless-Lang': 'js',
          'X-Stainless-Package-Version': hl,
          'X-Stainless-OS': normalizePlatform(Deno.build.os),
          'X-Stainless-Arch': normalizeArch(Deno.build.arch),
          'X-Stainless-Runtime': 'deno',
          'X-Stainless-Runtime-Version':
            typeof Deno.version === 'string'
              ? Deno.version
              : Deno.version?.deno ?? 'unknown'
        };
      }
      if (typeof EdgeRuntime !== 'undefined') {
        return {
          'X-Stainless-Lang': 'js',
          'X-Stainless-Package-Version': hl,
          'X-Stainless-OS': 'Unknown',
          'X-Stainless-Arch': `other:${EdgeRuntime}`,
          'X-Stainless-Runtime': 'edge',
          'X-Stainless-Runtime-Version': process.version
        };
      }
      if (
        Object.prototype.toString.call(
          typeof process !== 'undefined' ? process : 0
        ) === '[object process]'
      ) {
        return {
          'X-Stainless-Lang': 'js',
          'X-Stainless-Package-Version': hl,
          'X-Stainless-OS': normalizePlatform(process.platform),
          'X-Stainless-Arch': normalizeArch(process.arch),
          'X-Stainless-Runtime': 'node',
          'X-Stainless-Runtime-Version': process.version
        };
      }
      const a = getBrowserInfo();
      if (a) {
        return {
          'X-Stainless-Lang': 'js',
          'X-Stainless-Package-Version': hl,
          'X-Stainless-OS': 'Unknown',
          'X-Stainless-Arch': 'unknown',
          'X-Stainless-Runtime': `browser:${a.browser}`,
          'X-Stainless-Runtime-Version': a.version
        };
      }
      return {
        'X-Stainless-Lang': 'js',
        'X-Stainless-Package-Version': hl,
        'X-Stainless-OS': 'Unknown',
        'X-Stainless-Arch': 'unknown',
        'X-Stainless-Runtime': 'unknown',
        'X-Stainless-Runtime-Version': 'unknown'
      };
    };
    function getBrowserInfo() {
      if (typeof navigator === 'undefined' || !navigator) {
        return null;
      }
      const a = [
        { key: 'edge', pattern: /Edge(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: 'ie', pattern: /MSIE(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: 'ie', pattern: /Trident(?:.*rv\:(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: 'chrome', pattern: /Chrome(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        { key: 'firefox', pattern: /Firefox(?:\W+(\d+)\.(\d+)(?:\.(\d+))?)?/ },
        {
          key: 'safari',
          pattern:
            /(?:Version\W+(\d+)\.(\d+)(?:\.(\d+))?)?(?:\W+Mobile\S*)?\W+Safari/
        }
      ];
      for (const { key: C, pattern: q } of a) {
        const a = q.exec(navigator.userAgent);
        if (a) {
          const q = a[1] || 0;
          const re = a[2] || 0;
          const ae = a[3] || 0;
          return { browser: C, version: `${q}.${re}.${ae}` };
        }
      }
      return null;
    }
    const normalizeArch = (a) => {
      if (a === 'x32') return 'x32';
      if (a === 'x86_64' || a === 'x64') return 'x64';
      if (a === 'arm') return 'arm';
      if (a === 'aarch64' || a === 'arm64') return 'arm64';
      if (a) return `other:${a}`;
      return 'unknown';
    };
    const normalizePlatform = (a) => {
      a = a.toLowerCase();
      if (a.includes('ios')) return 'iOS';
      if (a === 'android') return 'Android';
      if (a === 'darwin') return 'MacOS';
      if (a === 'win32') return 'Windows';
      if (a === 'freebsd') return 'FreeBSD';
      if (a === 'openbsd') return 'OpenBSD';
      if (a === 'linux') return 'Linux';
      if (a) return `Other:${a}`;
      return 'Unknown';
    };
    let Cc;
    const getPlatformHeaders = () => Cc ?? (Cc = getPlatformProperties());
    const safeJSON = (a) => {
      try {
        return JSON.parse(a);
      } catch (a) {
        return undefined;
      }
    };
    const bc = new RegExp('^(?:[a-z]+:)?//', 'i');
    const isAbsoluteURL = (a) => bc.test(a);
    const sleep = (a) => new Promise((C) => setTimeout(C, a));
    const validatePositiveInteger = (a, C) => {
      if (typeof C !== 'number' || !Number.isInteger(C)) {
        throw new error_OpenAIError(`${a} must be an integer`);
      }
      if (C < 0) {
        throw new error_OpenAIError(`${a} must be a positive integer`);
      }
      return C;
    };
    const castToError = (a) => {
      if (a instanceof Error) return a;
      return new Error(a);
    };
    const ensurePresent = (a) => {
      if (a == null)
        throw new OpenAIError(
          `Expected a value to be given but received ${a} instead.`
        );
      return a;
    };
    const readEnv = (a) => {
      if (typeof process !== 'undefined') {
        return process.env?.[a]?.trim() ?? undefined;
      }
      if (typeof Deno !== 'undefined') {
        return Deno.env?.get?.(a)?.trim();
      }
      return undefined;
    };
    const coerceInteger = (a) => {
      if (typeof a === 'number') return Math.round(a);
      if (typeof a === 'string') return parseInt(a, 10);
      throw new OpenAIError(
        `Could not coerce ${a} (type: ${typeof a}) into a number`
      );
    };
    const coerceFloat = (a) => {
      if (typeof a === 'number') return a;
      if (typeof a === 'string') return parseFloat(a);
      throw new OpenAIError(
        `Could not coerce ${a} (type: ${typeof a}) into a number`
      );
    };
    const coerceBoolean = (a) => {
      if (typeof a === 'boolean') return a;
      if (typeof a === 'string') return a === 'true';
      return Boolean(a);
    };
    const maybeCoerceInteger = (a) => {
      if (a === undefined) {
        return undefined;
      }
      return coerceInteger(a);
    };
    const maybeCoerceFloat = (a) => {
      if (a === undefined) {
        return undefined;
      }
      return coerceFloat(a);
    };
    const maybeCoerceBoolean = (a) => {
      if (a === undefined) {
        return undefined;
      }
      return coerceBoolean(a);
    };
    function isEmptyObj(a) {
      if (!a) return true;
      for (const C in a) return false;
      return true;
    }
    function hasOwn(a, C) {
      return Object.prototype.hasOwnProperty.call(a, C);
    }
    function applyHeadersMut(a, C) {
      for (const q in C) {
        if (!hasOwn(C, q)) continue;
        const re = q.toLowerCase();
        if (!re) continue;
        const ae = C[q];
        if (ae === null) {
          delete a[re];
        } else if (ae !== undefined) {
          a[re] = ae;
        }
      }
    }
    function debug(a, ...C) {
      if (
        typeof process !== 'undefined' &&
        process?.env?.['DEBUG'] === 'true'
      ) {
        console.log(`OpenAI:DEBUG:${a}`, ...C);
      }
    }
    const uuid4 = () =>
      'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (a) => {
        const C = (Math.random() * 16) | 0;
        const q = a === 'x' ? C : (C & 3) | 8;
        return q.toString(16);
      });
    const isRunningInBrowser = () =>
      typeof window !== 'undefined' &&
      typeof window.document !== 'undefined' &&
      typeof navigator !== 'undefined';
    const isHeadersProtocol = (a) => typeof a?.get === 'function';
    const getRequiredHeader = (a, C) => {
      const q = C.toLowerCase();
      if (isHeadersProtocol(a)) {
        const re =
          C[0]?.toUpperCase() +
          C.substring(1).replace(
            /([^\w])(\w)/g,
            (a, C, q) => C + q.toUpperCase()
          );
        for (const ae of [C, q, C.toUpperCase(), re]) {
          const C = a.get(ae);
          if (C) {
            return C;
          }
        }
      }
      for (const [re, ae] of Object.entries(a)) {
        if (re.toLowerCase() === q) {
          if (Array.isArray(ae)) {
            if (ae.length <= 1) return ae[0];
            console.warn(
              `Received ${ae.length} entries for the ${C} header, using the first entry.`
            );
            return ae[0];
          }
          return ae;
        }
      }
      throw new Error(`Could not find ${C} header`);
    };
    const toBase64 = (a) => {
      if (!a) return '';
      if (typeof Buffer !== 'undefined') {
        return Buffer.from(a).toString('base64');
      }
      if (typeof btoa !== 'undefined') {
        return btoa(a);
      }
      throw new OpenAIError(
        'Cannot generate b64 string; Expected `Buffer` or `btoa` to be defined'
      );
    };
    function isObj(a) {
      return a != null && typeof a === 'object' && !Array.isArray(a);
    }
    class error_OpenAIError extends Error {}
    class APIError extends error_OpenAIError {
      constructor(a, C, q, re) {
        super(`${APIError.makeMessage(a, C, q)}`);
        this.status = a;
        this.headers = re;
        this.request_id = re?.['x-request-id'];
        const ae = C;
        this.error = ae;
        this.code = ae?.['code'];
        this.param = ae?.['param'];
        this.type = ae?.['type'];
      }
      static makeMessage(a, C, q) {
        const re = C?.message
          ? typeof C.message === 'string'
            ? C.message
            : JSON.stringify(C.message)
          : C
            ? JSON.stringify(C)
            : q;
        if (a && re) {
          return `${a} ${re}`;
        }
        if (a) {
          return `${a} status code (no body)`;
        }
        if (re) {
          return re;
        }
        return '(no status code or body)';
      }
      static generate(a, C, q, re) {
        if (!a) {
          return new APIConnectionError({ cause: castToError(C) });
        }
        const ae = C?.['error'];
        if (a === 400) {
          return new BadRequestError(a, ae, q, re);
        }
        if (a === 401) {
          return new AuthenticationError(a, ae, q, re);
        }
        if (a === 403) {
          return new PermissionDeniedError(a, ae, q, re);
        }
        if (a === 404) {
          return new NotFoundError(a, ae, q, re);
        }
        if (a === 409) {
          return new ConflictError(a, ae, q, re);
        }
        if (a === 422) {
          return new UnprocessableEntityError(a, ae, q, re);
        }
        if (a === 429) {
          return new RateLimitError(a, ae, q, re);
        }
        if (a >= 500) {
          return new InternalServerError(a, ae, q, re);
        }
        return new APIError(a, ae, q, re);
      }
    }
    class APIUserAbortError extends APIError {
      constructor({ message: a } = {}) {
        super(undefined, undefined, a || 'Request was aborted.', undefined);
        this.status = undefined;
      }
    }
    class APIConnectionError extends APIError {
      constructor({ message: a, cause: C }) {
        super(undefined, undefined, a || 'Connection error.', undefined);
        this.status = undefined;
        if (C) this.cause = C;
      }
    }
    class APIConnectionTimeoutError extends APIConnectionError {
      constructor({ message: a } = {}) {
        super({ message: a ?? 'Request timed out.' });
      }
    }
    class BadRequestError extends APIError {
      constructor() {
        super(...arguments);
        this.status = 400;
      }
    }
    class AuthenticationError extends APIError {
      constructor() {
        super(...arguments);
        this.status = 401;
      }
    }
    class PermissionDeniedError extends APIError {
      constructor() {
        super(...arguments);
        this.status = 403;
      }
    }
    class NotFoundError extends APIError {
      constructor() {
        super(...arguments);
        this.status = 404;
      }
    }
    class ConflictError extends APIError {
      constructor() {
        super(...arguments);
        this.status = 409;
      }
    }
    class UnprocessableEntityError extends APIError {
      constructor() {
        super(...arguments);
        this.status = 422;
      }
    }
    class RateLimitError extends APIError {
      constructor() {
        super(...arguments);
        this.status = 429;
      }
    }
    class InternalServerError extends APIError {}
    class Page extends AbstractPage {
      constructor(a, C, q, re) {
        super(a, C, q, re);
        this.data = q.data || [];
        this.object = q.object;
      }
      getPaginatedItems() {
        return this.data ?? [];
      }
      nextPageParams() {
        return null;
      }
      nextPageInfo() {
        return null;
      }
    }
    class CursorPage extends AbstractPage {
      constructor(a, C, q, re) {
        super(a, C, q, re);
        this.data = q.data || [];
      }
      getPaginatedItems() {
        return this.data ?? [];
      }
      nextPageParams() {
        const a = this.nextPageInfo();
        if (!a) return null;
        if ('params' in a) return a.params;
        const C = Object.fromEntries(a.url.searchParams);
        if (!Object.keys(C).length) return null;
        return C;
      }
      nextPageInfo() {
        const a = this.getPaginatedItems();
        if (!a.length) {
          return null;
        }
        const C = a[a.length - 1]?.id;
        if (!C) {
          return null;
        }
        return { params: { after: C } };
      }
    }
    class APIResource {
      constructor(a) {
        this._client = a;
      }
    }
    class Completions extends APIResource {
      create(a, C) {
        return this._client.post('/completions', {
          body: a,
          ...C,
          stream: a.stream ?? false
        });
      }
    }
    (function (a) {})(Completions || (Completions = {}));
    class completions_Completions extends APIResource {
      create(a, C) {
        return this._client.post('/chat/completions', {
          body: a,
          ...C,
          stream: a.stream ?? false
        });
      }
    }
    (function (a) {})(
      completions_Completions || (completions_Completions = {})
    );
    class Chat extends APIResource {
      constructor() {
        super(...arguments);
        this.completions = new completions_Completions(this._client);
      }
    }
    (function (a) {
      a.Completions = completions_Completions;
    })(Chat || (Chat = {}));
    class Embeddings extends APIResource {
      create(a, C) {
        return this._client.post('/embeddings', { body: a, ...C });
      }
    }
    (function (a) {})(Embeddings || (Embeddings = {}));
    class Files extends APIResource {
      create(a, C) {
        return this._client.post(
          '/files',
          multipartFormRequestOptions({ body: a, ...C })
        );
      }
      retrieve(a, C) {
        return this._client.get(`/files/${a}`, C);
      }
      list(a = {}, C) {
        if (isRequestOptions(a)) {
          return this.list({}, a);
        }
        return this._client.getAPIList('/files', FileObjectsPage, {
          query: a,
          ...C
        });
      }
      del(a, C) {
        return this._client.delete(`/files/${a}`, C);
      }
      content(a, C) {
        return this._client.get(`/files/${a}/content`, {
          ...C,
          __binaryResponse: true
        });
      }
      retrieveContent(a, C) {
        return this._client.get(`/files/${a}/content`, {
          ...C,
          headers: { Accept: 'application/json', ...C?.headers }
        });
      }
      async waitForProcessing(
        a,
        { pollInterval: C = 5e3, maxWait: q = 30 * 60 * 1e3 } = {}
      ) {
        const re = new Set(['processed', 'error', 'deleted']);
        const ae = Date.now();
        let Ue = await this.retrieve(a);
        while (!Ue.status || !re.has(Ue.status)) {
          await sleep(C);
          Ue = await this.retrieve(a);
          if (Date.now() - ae > q) {
            throw new APIConnectionTimeoutError({
              message: `Giving up on waiting for file ${a} to finish processing after ${q} milliseconds.`
            });
          }
        }
        return Ue;
      }
    }
    class FileObjectsPage extends Page {}
    (function (a) {
      a.FileObjectsPage = FileObjectsPage;
    })(Files || (Files = {}));
    class Images extends APIResource {
      createVariation(a, C) {
        return this._client.post(
          '/images/variations',
          multipartFormRequestOptions({ body: a, ...C })
        );
      }
      edit(a, C) {
        return this._client.post(
          '/images/edits',
          multipartFormRequestOptions({ body: a, ...C })
        );
      }
      generate(a, C) {
        return this._client.post('/images/generations', { body: a, ...C });
      }
    }
    (function (a) {})(Images || (Images = {}));
    class Speech extends APIResource {
      create(a, C) {
        return this._client.post('/audio/speech', {
          body: a,
          ...C,
          __binaryResponse: true
        });
      }
    }
    (function (a) {})(Speech || (Speech = {}));
    class Transcriptions extends APIResource {
      create(a, C) {
        return this._client.post(
          '/audio/transcriptions',
          multipartFormRequestOptions({ body: a, ...C })
        );
      }
    }
    (function (a) {})(Transcriptions || (Transcriptions = {}));
    class Translations extends APIResource {
      create(a, C) {
        return this._client.post(
          '/audio/translations',
          multipartFormRequestOptions({ body: a, ...C })
        );
      }
    }
    (function (a) {})(Translations || (Translations = {}));
    class Audio extends APIResource {
      constructor() {
        super(...arguments);
        this.transcriptions = new Transcriptions(this._client);
        this.translations = new Translations(this._client);
        this.speech = new Speech(this._client);
      }
    }
    (function (a) {
      a.Transcriptions = Transcriptions;
      a.Translations = Translations;
      a.Speech = Speech;
    })(Audio || (Audio = {}));
    class Moderations extends APIResource {
      create(a, C) {
        return this._client.post('/moderations', { body: a, ...C });
      }
    }
    (function (a) {})(Moderations || (Moderations = {}));
    class Models extends APIResource {
      retrieve(a, C) {
        return this._client.get(`/models/${a}`, C);
      }
      list(a) {
        return this._client.getAPIList('/models', ModelsPage, a);
      }
      del(a, C) {
        return this._client.delete(`/models/${a}`, C);
      }
    }
    class ModelsPage extends Page {}
    (function (a) {
      a.ModelsPage = ModelsPage;
    })(Models || (Models = {}));
    class Checkpoints extends APIResource {
      list(a, C = {}, q) {
        if (isRequestOptions(C)) {
          return this.list(a, {}, C);
        }
        return this._client.getAPIList(
          `/fine_tuning/jobs/${a}/checkpoints`,
          FineTuningJobCheckpointsPage,
          { query: C, ...q }
        );
      }
    }
    class FineTuningJobCheckpointsPage extends CursorPage {}
    (function (a) {
      a.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage;
    })(Checkpoints || (Checkpoints = {}));
    class Jobs extends APIResource {
      constructor() {
        super(...arguments);
        this.checkpoints = new Checkpoints(this._client);
      }
      create(a, C) {
        return this._client.post('/fine_tuning/jobs', { body: a, ...C });
      }
      retrieve(a, C) {
        return this._client.get(`/fine_tuning/jobs/${a}`, C);
      }
      list(a = {}, C) {
        if (isRequestOptions(a)) {
          return this.list({}, a);
        }
        return this._client.getAPIList(
          '/fine_tuning/jobs',
          FineTuningJobsPage,
          { query: a, ...C }
        );
      }
      cancel(a, C) {
        return this._client.post(`/fine_tuning/jobs/${a}/cancel`, C);
      }
      listEvents(a, C = {}, q) {
        if (isRequestOptions(C)) {
          return this.listEvents(a, {}, C);
        }
        return this._client.getAPIList(
          `/fine_tuning/jobs/${a}/events`,
          FineTuningJobEventsPage,
          { query: C, ...q }
        );
      }
    }
    class FineTuningJobsPage extends CursorPage {}
    class FineTuningJobEventsPage extends CursorPage {}
    (function (a) {
      a.FineTuningJobsPage = FineTuningJobsPage;
      a.FineTuningJobEventsPage = FineTuningJobEventsPage;
      a.Checkpoints = Checkpoints;
      a.FineTuningJobCheckpointsPage = FineTuningJobCheckpointsPage;
    })(Jobs || (Jobs = {}));
    class FineTuning extends APIResource {
      constructor() {
        super(...arguments);
        this.jobs = new Jobs(this._client);
      }
    }
    (function (a) {
      a.Jobs = Jobs;
      a.FineTuningJobsPage = FineTuningJobsPage;
      a.FineTuningJobEventsPage = FineTuningJobEventsPage;
    })(FineTuning || (FineTuning = {}));
    class Assistants extends APIResource {
      create(a, C) {
        return this._client.post('/assistants', {
          body: a,
          ...C,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...C?.headers }
        });
      }
      retrieve(a, C) {
        return this._client.get(`/assistants/${a}`, {
          ...C,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...C?.headers }
        });
      }
      update(a, C, q) {
        return this._client.post(`/assistants/${a}`, {
          body: C,
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      list(a = {}, C) {
        if (isRequestOptions(a)) {
          return this.list({}, a);
        }
        return this._client.getAPIList('/assistants', AssistantsPage, {
          query: a,
          ...C,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...C?.headers }
        });
      }
      del(a, C) {
        return this._client.delete(`/assistants/${a}`, {
          ...C,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...C?.headers }
        });
      }
    }
    class AssistantsPage extends CursorPage {}
    (function (a) {
      a.AssistantsPage = AssistantsPage;
    })(Assistants || (Assistants = {}));
    function isRunnableFunctionWithParse(a) {
      return typeof a.parse === 'function';
    }
    class ParsingFunction {
      constructor(a) {
        this.function = a.function;
        this.parse = a.parse;
        this.parameters = a.parameters;
        this.description = a.description;
        this.name = a.name;
      }
    }
    class ParsingToolFunction {
      constructor(a) {
        this.type = 'function';
        this.function = a;
      }
    }
    const isAssistantMessage = (a) => a?.role === 'assistant';
    const isFunctionMessage = (a) => a?.role === 'function';
    const isToolMessage = (a) => a?.role === 'tool';
    function isPresent(a) {
      return a != null;
    }
    var yc =
      (undefined && undefined.__classPrivateFieldSet) ||
      function (a, C, q, re, ae) {
        if (re === 'm') throw new TypeError('Private method is not writable');
        if (re === 'a' && !ae)
          throw new TypeError('Private accessor was defined without a setter');
        if (typeof C === 'function' ? a !== C || !ae : !C.has(a))
          throw new TypeError(
            'Cannot write private member to an object whose class did not declare it'
          );
        return (
          re === 'a' ? ae.call(a, q) : ae ? (ae.value = q) : C.set(a, q), q
        );
      };
    var Ic =
      (undefined && undefined.__classPrivateFieldGet) ||
      function (a, C, q, re) {
        if (q === 'a' && !re)
          throw new TypeError('Private accessor was defined without a getter');
        if (typeof C === 'function' ? a !== C || !re : !C.has(a))
          throw new TypeError(
            'Cannot read private member from an object whose class did not declare it'
          );
        return q === 'm'
          ? re
          : q === 'a'
            ? re.call(a)
            : re
              ? re.value
              : C.get(a);
      };
    var wc,
      Bc,
      Qc,
      vc,
      Sc,
      _c,
      Tc,
      kc,
      Rc,
      Dc,
      Nc,
      Lc,
      Fc,
      Mc,
      Pc,
      Oc,
      xc,
      Uc,
      Gc,
      Hc;
    const qc = 10;
    class AbstractChatCompletionRunner {
      constructor() {
        wc.add(this);
        this.controller = new AbortController();
        Bc.set(this, void 0);
        Qc.set(this, () => {});
        vc.set(this, () => {});
        Sc.set(this, void 0);
        _c.set(this, () => {});
        Tc.set(this, () => {});
        kc.set(this, {});
        this._chatCompletions = [];
        this.messages = [];
        Rc.set(this, false);
        Dc.set(this, false);
        Nc.set(this, false);
        Lc.set(this, false);
        Uc.set(this, (a) => {
          yc(this, Dc, true, 'f');
          if (a instanceof Error && a.name === 'AbortError') {
            a = new APIUserAbortError();
          }
          if (a instanceof APIUserAbortError) {
            yc(this, Nc, true, 'f');
            return this._emit('abort', a);
          }
          if (a instanceof error_OpenAIError) {
            return this._emit('error', a);
          }
          if (a instanceof Error) {
            const C = new error_OpenAIError(a.message);
            C.cause = a;
            return this._emit('error', C);
          }
          return this._emit('error', new error_OpenAIError(String(a)));
        });
        yc(
          this,
          Bc,
          new Promise((a, C) => {
            yc(this, Qc, a, 'f');
            yc(this, vc, C, 'f');
          }),
          'f'
        );
        yc(
          this,
          Sc,
          new Promise((a, C) => {
            yc(this, _c, a, 'f');
            yc(this, Tc, C, 'f');
          }),
          'f'
        );
        Ic(this, Bc, 'f').catch(() => {});
        Ic(this, Sc, 'f').catch(() => {});
      }
      _run(a) {
        setTimeout(() => {
          a().then(
            () => {
              this._emitFinal();
              this._emit('end');
            },
            Ic(this, Uc, 'f')
          );
        }, 0);
      }
      _addChatCompletion(a) {
        this._chatCompletions.push(a);
        this._emit('chatCompletion', a);
        const C = a.choices[0]?.message;
        if (C) this._addMessage(C);
        return a;
      }
      _addMessage(a, C = true) {
        if (!('content' in a)) a.content = null;
        this.messages.push(a);
        if (C) {
          this._emit('message', a);
          if ((isFunctionMessage(a) || isToolMessage(a)) && a.content) {
            this._emit('functionCallResult', a.content);
          } else if (isAssistantMessage(a) && a.function_call) {
            this._emit('functionCall', a.function_call);
          } else if (isAssistantMessage(a) && a.tool_calls) {
            for (const C of a.tool_calls) {
              if (C.type === 'function') {
                this._emit('functionCall', C.function);
              }
            }
          }
        }
      }
      _connected() {
        if (this.ended) return;
        Ic(this, Qc, 'f').call(this);
        this._emit('connect');
      }
      get ended() {
        return Ic(this, Rc, 'f');
      }
      get errored() {
        return Ic(this, Dc, 'f');
      }
      get aborted() {
        return Ic(this, Nc, 'f');
      }
      abort() {
        this.controller.abort();
      }
      on(a, C) {
        const q = Ic(this, kc, 'f')[a] || (Ic(this, kc, 'f')[a] = []);
        q.push({ listener: C });
        return this;
      }
      off(a, C) {
        const q = Ic(this, kc, 'f')[a];
        if (!q) return this;
        const re = q.findIndex((a) => a.listener === C);
        if (re >= 0) q.splice(re, 1);
        return this;
      }
      once(a, C) {
        const q = Ic(this, kc, 'f')[a] || (Ic(this, kc, 'f')[a] = []);
        q.push({ listener: C, once: true });
        return this;
      }
      emitted(a) {
        return new Promise((C, q) => {
          yc(this, Lc, true, 'f');
          if (a !== 'error') this.once('error', q);
          this.once(a, C);
        });
      }
      async done() {
        yc(this, Lc, true, 'f');
        await Ic(this, Sc, 'f');
      }
      async finalChatCompletion() {
        await this.done();
        const a = this._chatCompletions[this._chatCompletions.length - 1];
        if (!a)
          throw new error_OpenAIError(
            'stream ended without producing a ChatCompletion'
          );
        return a;
      }
      async finalContent() {
        await this.done();
        return Ic(this, wc, 'm', Fc).call(this);
      }
      async finalMessage() {
        await this.done();
        return Ic(this, wc, 'm', Mc).call(this);
      }
      async finalFunctionCall() {
        await this.done();
        return Ic(this, wc, 'm', Pc).call(this);
      }
      async finalFunctionCallResult() {
        await this.done();
        return Ic(this, wc, 'm', Oc).call(this);
      }
      async totalUsage() {
        await this.done();
        return Ic(this, wc, 'm', xc).call(this);
      }
      allChatCompletions() {
        return [...this._chatCompletions];
      }
      _emit(a, ...C) {
        if (Ic(this, Rc, 'f')) {
          return;
        }
        if (a === 'end') {
          yc(this, Rc, true, 'f');
          Ic(this, _c, 'f').call(this);
        }
        const q = Ic(this, kc, 'f')[a];
        if (q) {
          Ic(this, kc, 'f')[a] = q.filter((a) => !a.once);
          q.forEach(({ listener: a }) => a(...C));
        }
        if (a === 'abort') {
          const a = C[0];
          if (!Ic(this, Lc, 'f') && !q?.length) {
            Promise.reject(a);
          }
          Ic(this, vc, 'f').call(this, a);
          Ic(this, Tc, 'f').call(this, a);
          this._emit('end');
          return;
        }
        if (a === 'error') {
          const a = C[0];
          if (!Ic(this, Lc, 'f') && !q?.length) {
            Promise.reject(a);
          }
          Ic(this, vc, 'f').call(this, a);
          Ic(this, Tc, 'f').call(this, a);
          this._emit('end');
        }
      }
      _emitFinal() {
        const a = this._chatCompletions[this._chatCompletions.length - 1];
        if (a) this._emit('finalChatCompletion', a);
        const C = Ic(this, wc, 'm', Mc).call(this);
        if (C) this._emit('finalMessage', C);
        const q = Ic(this, wc, 'm', Fc).call(this);
        if (q) this._emit('finalContent', q);
        const re = Ic(this, wc, 'm', Pc).call(this);
        if (re) this._emit('finalFunctionCall', re);
        const ae = Ic(this, wc, 'm', Oc).call(this);
        if (ae != null) this._emit('finalFunctionCallResult', ae);
        if (this._chatCompletions.some((a) => a.usage)) {
          this._emit('totalUsage', Ic(this, wc, 'm', xc).call(this));
        }
      }
      async _createChatCompletion(a, C, q) {
        const re = q?.signal;
        if (re) {
          if (re.aborted) this.controller.abort();
          re.addEventListener('abort', () => this.controller.abort());
        }
        Ic(this, wc, 'm', Gc).call(this, C);
        const ae = await a.create(
          { ...C, stream: false },
          { ...q, signal: this.controller.signal }
        );
        this._connected();
        return this._addChatCompletion(ae);
      }
      async _runChatCompletion(a, C, q) {
        for (const a of C.messages) {
          this._addMessage(a, false);
        }
        return await this._createChatCompletion(a, C, q);
      }
      async _runFunctions(a, C, q) {
        const re = 'function';
        const { function_call: ae = 'auto', stream: Ue, ...lt } = C;
        const Pt = typeof ae !== 'string' && ae?.name;
        const { maxChatCompletions: Wt = qc } = q || {};
        const Ar = {};
        for (const a of C.functions) {
          Ar[a.name || a.function.name] = a;
        }
        const Er = C.functions.map((a) => ({
          name: a.name || a.function.name,
          parameters: a.parameters,
          description: a.description
        }));
        for (const a of C.messages) {
          this._addMessage(a, false);
        }
        for (let C = 0; C < Wt; ++C) {
          const C = await this._createChatCompletion(
            a,
            {
              ...lt,
              function_call: ae,
              functions: Er,
              messages: [...this.messages]
            },
            q
          );
          const Ue = C.choices[0]?.message;
          if (!Ue) {
            throw new error_OpenAIError(
              `missing message in ChatCompletion response`
            );
          }
          if (!Ue.function_call) return;
          const { name: Wt, arguments: Ir } = Ue.function_call;
          const Br = Ar[Wt];
          if (!Br) {
            const a = `Invalid function_call: ${JSON.stringify(Wt)}. Available options are: ${Er.map((a) => JSON.stringify(a.name)).join(', ')}. Please try again`;
            this._addMessage({ role: re, name: Wt, content: a });
            continue;
          } else if (Pt && Pt !== Wt) {
            const a = `Invalid function_call: ${JSON.stringify(Wt)}. ${JSON.stringify(Pt)} requested. Please try again`;
            this._addMessage({ role: re, name: Wt, content: a });
            continue;
          }
          let Qr;
          try {
            Qr = isRunnableFunctionWithParse(Br) ? await Br.parse(Ir) : Ir;
          } catch (a) {
            this._addMessage({
              role: re,
              name: Wt,
              content: a instanceof Error ? a.message : String(a)
            });
            continue;
          }
          const kr = await Br.function(Qr, this);
          const Dr = Ic(this, wc, 'm', Hc).call(this, kr);
          this._addMessage({ role: re, name: Wt, content: Dr });
          if (Pt) return;
        }
      }
      async _runTools(a, C, q) {
        const re = 'tool';
        const { tool_choice: ae = 'auto', stream: Ue, ...lt } = C;
        const Pt = typeof ae !== 'string' && ae?.function?.name;
        const { maxChatCompletions: Wt = qc } = q || {};
        const Ar = {};
        for (const a of C.tools) {
          if (a.type === 'function') {
            Ar[a.function.name || a.function.function.name] = a.function;
          }
        }
        const Er =
          'tools' in C
            ? C.tools.map((a) =>
                a.type === 'function'
                  ? {
                      type: 'function',
                      function: {
                        name: a.function.name || a.function.function.name,
                        parameters: a.function.parameters,
                        description: a.function.description
                      }
                    }
                  : a
              )
            : undefined;
        for (const a of C.messages) {
          this._addMessage(a, false);
        }
        for (let C = 0; C < Wt; ++C) {
          const C = await this._createChatCompletion(
            a,
            { ...lt, tool_choice: ae, tools: Er, messages: [...this.messages] },
            q
          );
          const Ue = C.choices[0]?.message;
          if (!Ue) {
            throw new error_OpenAIError(
              `missing message in ChatCompletion response`
            );
          }
          if (!Ue.tool_calls) {
            return;
          }
          for (const a of Ue.tool_calls) {
            if (a.type !== 'function') continue;
            const C = a.id;
            const { name: q, arguments: ae } = a.function;
            const Ue = Ar[q];
            if (!Ue) {
              const a = `Invalid tool_call: ${JSON.stringify(q)}. Available options are: ${Er.map((a) => JSON.stringify(a.function.name)).join(', ')}. Please try again`;
              this._addMessage({ role: re, tool_call_id: C, content: a });
              continue;
            } else if (Pt && Pt !== q) {
              const a = `Invalid tool_call: ${JSON.stringify(q)}. ${JSON.stringify(Pt)} requested. Please try again`;
              this._addMessage({ role: re, tool_call_id: C, content: a });
              continue;
            }
            let lt;
            try {
              lt = isRunnableFunctionWithParse(Ue) ? await Ue.parse(ae) : ae;
            } catch (a) {
              const q = a instanceof Error ? a.message : String(a);
              this._addMessage({ role: re, tool_call_id: C, content: q });
              continue;
            }
            const Wt = await Ue.function(lt, this);
            const Ir = Ic(this, wc, 'm', Hc).call(this, Wt);
            this._addMessage({ role: re, tool_call_id: C, content: Ir });
            if (Pt) {
              return;
            }
          }
        }
        return;
      }
    }
    (Bc = new WeakMap()),
      (Qc = new WeakMap()),
      (vc = new WeakMap()),
      (Sc = new WeakMap()),
      (_c = new WeakMap()),
      (Tc = new WeakMap()),
      (kc = new WeakMap()),
      (Rc = new WeakMap()),
      (Dc = new WeakMap()),
      (Nc = new WeakMap()),
      (Lc = new WeakMap()),
      (Uc = new WeakMap()),
      (wc = new WeakSet()),
      (Fc = function _AbstractChatCompletionRunner_getFinalContent() {
        return Ic(this, wc, 'm', Mc).call(this).content ?? null;
      }),
      (Mc = function _AbstractChatCompletionRunner_getFinalMessage() {
        let a = this.messages.length;
        while (a-- > 0) {
          const C = this.messages[a];
          if (isAssistantMessage(C)) {
            const { function_call: a, ...q } = C;
            const re = { ...q, content: C.content ?? null };
            if (a) {
              re.function_call = a;
            }
            return re;
          }
        }
        throw new error_OpenAIError(
          'stream ended without producing a ChatCompletionMessage with role=assistant'
        );
      }),
      (Pc = function _AbstractChatCompletionRunner_getFinalFunctionCall() {
        for (let a = this.messages.length - 1; a >= 0; a--) {
          const C = this.messages[a];
          if (isAssistantMessage(C) && C?.function_call) {
            return C.function_call;
          }
          if (isAssistantMessage(C) && C?.tool_calls?.length) {
            return C.tool_calls.at(-1)?.function;
          }
        }
        return;
      }),
      (Oc =
        function _AbstractChatCompletionRunner_getFinalFunctionCallResult() {
          for (let a = this.messages.length - 1; a >= 0; a--) {
            const C = this.messages[a];
            if (isFunctionMessage(C) && C.content != null) {
              return C.content;
            }
            if (
              isToolMessage(C) &&
              C.content != null &&
              this.messages.some(
                (a) =>
                  a.role === 'assistant' &&
                  a.tool_calls?.some(
                    (a) => a.type === 'function' && a.id === C.tool_call_id
                  )
              )
            ) {
              return C.content;
            }
          }
          return;
        }),
      (xc = function _AbstractChatCompletionRunner_calculateTotalUsage() {
        const a = { completion_tokens: 0, prompt_tokens: 0, total_tokens: 0 };
        for (const { usage: C } of this._chatCompletions) {
          if (C) {
            a.completion_tokens += C.completion_tokens;
            a.prompt_tokens += C.prompt_tokens;
            a.total_tokens += C.total_tokens;
          }
        }
        return a;
      }),
      (Gc = function _AbstractChatCompletionRunner_validateParams(a) {
        if (a.n != null && a.n > 1) {
          throw new error_OpenAIError(
            'ChatCompletion convenience helpers only support n=1 at this time. To use n>1, please use chat.completions.create() directly.'
          );
        }
      }),
      (Hc = function _AbstractChatCompletionRunner_stringifyFunctionCallResult(
        a
      ) {
        return typeof a === 'string'
          ? a
          : a === undefined
            ? 'undefined'
            : JSON.stringify(a);
      });
    class ChatCompletionRunner extends AbstractChatCompletionRunner {
      static runFunctions(a, C, q) {
        const re = new ChatCompletionRunner();
        const ae = {
          ...q,
          headers: {
            ...q?.headers,
            'X-Stainless-Helper-Method': 'runFunctions'
          }
        };
        re._run(() => re._runFunctions(a, C, ae));
        return re;
      }
      static runTools(a, C, q) {
        const re = new ChatCompletionRunner();
        const ae = {
          ...q,
          headers: { ...q?.headers, 'X-Stainless-Helper-Method': 'runTools' }
        };
        re._run(() => re._runTools(a, C, ae));
        return re;
      }
      _addMessage(a) {
        super._addMessage(a);
        if (isAssistantMessage(a) && a.content) {
          this._emit('content', a.content);
        }
      }
    }
    var Vc =
      (undefined && undefined.__classPrivateFieldGet) ||
      function (a, C, q, re) {
        if (q === 'a' && !re)
          throw new TypeError('Private accessor was defined without a getter');
        if (typeof C === 'function' ? a !== C || !re : !C.has(a))
          throw new TypeError(
            'Cannot read private member from an object whose class did not declare it'
          );
        return q === 'm'
          ? re
          : q === 'a'
            ? re.call(a)
            : re
              ? re.value
              : C.get(a);
      };
    var Wc =
      (undefined && undefined.__classPrivateFieldSet) ||
      function (a, C, q, re, ae) {
        if (re === 'm') throw new TypeError('Private method is not writable');
        if (re === 'a' && !ae)
          throw new TypeError('Private accessor was defined without a setter');
        if (typeof C === 'function' ? a !== C || !ae : !C.has(a))
          throw new TypeError(
            'Cannot write private member to an object whose class did not declare it'
          );
        return (
          re === 'a' ? ae.call(a, q) : ae ? (ae.value = q) : C.set(a, q), q
        );
      };
    var Yc, jc, Jc, zc, $c, Kc;
    class ChatCompletionStream extends AbstractChatCompletionRunner {
      constructor() {
        super(...arguments);
        Yc.add(this);
        jc.set(this, void 0);
      }
      get currentChatCompletionSnapshot() {
        return Vc(this, jc, 'f');
      }
      static fromReadableStream(a) {
        const C = new ChatCompletionStream();
        C._run(() => C._fromReadableStream(a));
        return C;
      }
      static createChatCompletion(a, C, q) {
        const re = new ChatCompletionStream();
        re._run(() =>
          re._runChatCompletion(
            a,
            { ...C, stream: true },
            {
              ...q,
              headers: { ...q?.headers, 'X-Stainless-Helper-Method': 'stream' }
            }
          )
        );
        return re;
      }
      async _createChatCompletion(a, C, q) {
        const re = q?.signal;
        if (re) {
          if (re.aborted) this.controller.abort();
          re.addEventListener('abort', () => this.controller.abort());
        }
        Vc(this, Yc, 'm', Jc).call(this);
        const ae = await a.create(
          { ...C, stream: true },
          { ...q, signal: this.controller.signal }
        );
        this._connected();
        for await (const a of ae) {
          Vc(this, Yc, 'm', zc).call(this, a);
        }
        if (ae.controller.signal?.aborted) {
          throw new APIUserAbortError();
        }
        return this._addChatCompletion(Vc(this, Yc, 'm', $c).call(this));
      }
      async _fromReadableStream(a, C) {
        const q = C?.signal;
        if (q) {
          if (q.aborted) this.controller.abort();
          q.addEventListener('abort', () => this.controller.abort());
        }
        Vc(this, Yc, 'm', Jc).call(this);
        this._connected();
        const re = Stream.fromReadableStream(a, this.controller);
        let ae;
        for await (const a of re) {
          if (ae && ae !== a.id) {
            this._addChatCompletion(Vc(this, Yc, 'm', $c).call(this));
          }
          Vc(this, Yc, 'm', zc).call(this, a);
          ae = a.id;
        }
        if (re.controller.signal?.aborted) {
          throw new APIUserAbortError();
        }
        return this._addChatCompletion(Vc(this, Yc, 'm', $c).call(this));
      }
      [((jc = new WeakMap()),
      (Yc = new WeakSet()),
      (Jc = function _ChatCompletionStream_beginRequest() {
        if (this.ended) return;
        Wc(this, jc, undefined, 'f');
      }),
      (zc = function _ChatCompletionStream_addChunk(a) {
        if (this.ended) return;
        const C = Vc(this, Yc, 'm', Kc).call(this, a);
        this._emit('chunk', a, C);
        const q = a.choices[0]?.delta?.content;
        const re = C.choices[0]?.message;
        if (q != null && re?.role === 'assistant' && re?.content) {
          this._emit('content', q, re.content);
        }
      }),
      ($c = function _ChatCompletionStream_endRequest() {
        if (this.ended) {
          throw new error_OpenAIError(
            `stream has ended, this shouldn't happen`
          );
        }
        const a = Vc(this, jc, 'f');
        if (!a) {
          throw new error_OpenAIError(
            `request ended without sending any chunks`
          );
        }
        Wc(this, jc, undefined, 'f');
        return finalizeChatCompletion(a);
      }),
      (Kc = function _ChatCompletionStream_accumulateChatCompletion(a) {
        var C, q, re;
        let ae = Vc(this, jc, 'f');
        const { choices: Ue, ...lt } = a;
        if (!ae) {
          ae = Wc(this, jc, { ...lt, choices: [] }, 'f');
        } else {
          Object.assign(ae, lt);
        }
        for (const {
          delta: Ue,
          finish_reason: lt,
          index: Pt,
          logprobs: Wt = null,
          ...Ar
        } of a.choices) {
          let a = ae.choices[Pt];
          if (!a) {
            a = ae.choices[Pt] = {
              finish_reason: lt,
              index: Pt,
              message: {},
              logprobs: Wt,
              ...Ar
            };
          }
          if (Wt) {
            if (!a.logprobs) {
              a.logprobs = Object.assign({}, Wt);
            } else {
              const { content: q, ...re } = Wt;
              Object.assign(a.logprobs, re);
              if (q) {
                (C = a.logprobs).content ?? (C.content = []);
                a.logprobs.content.push(...q);
              }
            }
          }
          if (lt) a.finish_reason = lt;
          Object.assign(a, Ar);
          if (!Ue) continue;
          const {
            content: Er,
            function_call: Ir,
            role: Br,
            tool_calls: Qr,
            ...kr
          } = Ue;
          Object.assign(a.message, kr);
          if (Er) a.message.content = (a.message.content || '') + Er;
          if (Br) a.message.role = Br;
          if (Ir) {
            if (!a.message.function_call) {
              a.message.function_call = Ir;
            } else {
              if (Ir.name) a.message.function_call.name = Ir.name;
              if (Ir.arguments) {
                (q = a.message.function_call).arguments ?? (q.arguments = '');
                a.message.function_call.arguments += Ir.arguments;
              }
            }
          }
          if (Qr) {
            if (!a.message.tool_calls) a.message.tool_calls = [];
            for (const {
              index: C,
              id: q,
              type: ae,
              function: Ue,
              ...lt
            } of Qr) {
              const Pt = (re = a.message.tool_calls)[C] ?? (re[C] = {});
              Object.assign(Pt, lt);
              if (q) Pt.id = q;
              if (ae) Pt.type = ae;
              if (Ue) Pt.function ?? (Pt.function = { arguments: '' });
              if (Ue?.name) Pt.function.name = Ue.name;
              if (Ue?.arguments) Pt.function.arguments += Ue.arguments;
            }
          }
        }
        return ae;
      }),
      Symbol.asyncIterator)]() {
        const a = [];
        const C = [];
        let q = false;
        this.on('chunk', (q) => {
          const re = C.shift();
          if (re) {
            re.resolve(q);
          } else {
            a.push(q);
          }
        });
        this.on('end', () => {
          q = true;
          for (const a of C) {
            a.resolve(undefined);
          }
          C.length = 0;
        });
        this.on('abort', (a) => {
          q = true;
          for (const q of C) {
            q.reject(a);
          }
          C.length = 0;
        });
        this.on('error', (a) => {
          q = true;
          for (const q of C) {
            q.reject(a);
          }
          C.length = 0;
        });
        return {
          next: async () => {
            if (!a.length) {
              if (q) {
                return { value: undefined, done: true };
              }
              return new Promise((a, q) =>
                C.push({ resolve: a, reject: q })
              ).then((a) =>
                a ? { value: a, done: false } : { value: undefined, done: true }
              );
            }
            const re = a.shift();
            return { value: re, done: false };
          },
          return: async () => {
            this.abort();
            return { value: undefined, done: true };
          }
        };
      }
      toReadableStream() {
        const a = new Stream(
          this[Symbol.asyncIterator].bind(this),
          this.controller
        );
        return a.toReadableStream();
      }
    }
    function finalizeChatCompletion(a) {
      const {
        id: C,
        choices: q,
        created: re,
        model: ae,
        system_fingerprint: Ue,
        ...lt
      } = a;
      return {
        ...lt,
        id: C,
        choices: q.map(
          ({
            message: C,
            finish_reason: q,
            index: re,
            logprobs: ae,
            ...Ue
          }) => {
            if (!q)
              throw new error_OpenAIError(
                `missing finish_reason for choice ${re}`
              );
            const {
              content: lt = null,
              function_call: Pt,
              tool_calls: Wt,
              ...Ar
            } = C;
            const Er = C.role;
            if (!Er)
              throw new error_OpenAIError(`missing role for choice ${re}`);
            if (Pt) {
              const { arguments: a, name: C } = Pt;
              if (a == null)
                throw new error_OpenAIError(
                  `missing function_call.arguments for choice ${re}`
                );
              if (!C)
                throw new error_OpenAIError(
                  `missing function_call.name for choice ${re}`
                );
              return {
                ...Ue,
                message: {
                  content: lt,
                  function_call: { arguments: a, name: C },
                  role: Er
                },
                finish_reason: q,
                index: re,
                logprobs: ae
              };
            }
            if (Wt) {
              return {
                ...Ue,
                index: re,
                finish_reason: q,
                logprobs: ae,
                message: {
                  ...Ar,
                  role: Er,
                  content: lt,
                  tool_calls: Wt.map((C, q) => {
                    const { function: ae, type: Ue, id: lt, ...Pt } = C;
                    const { arguments: Wt, name: Ar, ...Er } = ae || {};
                    if (lt == null)
                      throw new error_OpenAIError(
                        `missing choices[${re}].tool_calls[${q}].id\n${str(a)}`
                      );
                    if (Ue == null)
                      throw new error_OpenAIError(
                        `missing choices[${re}].tool_calls[${q}].type\n${str(a)}`
                      );
                    if (Ar == null)
                      throw new error_OpenAIError(
                        `missing choices[${re}].tool_calls[${q}].function.name\n${str(a)}`
                      );
                    if (Wt == null)
                      throw new error_OpenAIError(
                        `missing choices[${re}].tool_calls[${q}].function.arguments\n${str(a)}`
                      );
                    return {
                      ...Pt,
                      id: lt,
                      type: Ue,
                      function: { ...Er, name: Ar, arguments: Wt }
                    };
                  })
                }
              };
            }
            return {
              ...Ue,
              message: { ...Ar, content: lt, role: Er },
              finish_reason: q,
              index: re,
              logprobs: ae
            };
          }
        ),
        created: re,
        model: ae,
        object: 'chat.completion',
        ...(Ue ? { system_fingerprint: Ue } : {})
      };
    }
    function str(a) {
      return JSON.stringify(a);
    }
    class ChatCompletionStreamingRunner extends ChatCompletionStream {
      static fromReadableStream(a) {
        const C = new ChatCompletionStreamingRunner();
        C._run(() => C._fromReadableStream(a));
        return C;
      }
      static runFunctions(a, C, q) {
        const re = new ChatCompletionStreamingRunner();
        const ae = {
          ...q,
          headers: {
            ...q?.headers,
            'X-Stainless-Helper-Method': 'runFunctions'
          }
        };
        re._run(() => re._runFunctions(a, C, ae));
        return re;
      }
      static runTools(a, C, q) {
        const re = new ChatCompletionStreamingRunner();
        const ae = {
          ...q,
          headers: { ...q?.headers, 'X-Stainless-Helper-Method': 'runTools' }
        };
        re._run(() => re._runTools(a, C, ae));
        return re;
      }
    }
    class chat_completions_Completions extends APIResource {
      runFunctions(a, C) {
        if (a.stream) {
          return ChatCompletionStreamingRunner.runFunctions(
            this._client.chat.completions,
            a,
            C
          );
        }
        return ChatCompletionRunner.runFunctions(
          this._client.chat.completions,
          a,
          C
        );
      }
      runTools(a, C) {
        if (a.stream) {
          return ChatCompletionStreamingRunner.runTools(
            this._client.chat.completions,
            a,
            C
          );
        }
        return ChatCompletionRunner.runTools(
          this._client.chat.completions,
          a,
          C
        );
      }
      stream(a, C) {
        return ChatCompletionStream.createChatCompletion(
          this._client.chat.completions,
          a,
          C
        );
      }
    }
    class chat_Chat extends APIResource {
      constructor() {
        super(...arguments);
        this.completions = new chat_completions_Completions(this._client);
      }
    }
    (function (a) {
      a.Completions = chat_completions_Completions;
    })(chat_Chat || (chat_Chat = {}));
    var Xc =
      (undefined && undefined.__classPrivateFieldSet) ||
      function (a, C, q, re, ae) {
        if (re === 'm') throw new TypeError('Private method is not writable');
        if (re === 'a' && !ae)
          throw new TypeError('Private accessor was defined without a setter');
        if (typeof C === 'function' ? a !== C || !ae : !C.has(a))
          throw new TypeError(
            'Cannot write private member to an object whose class did not declare it'
          );
        return (
          re === 'a' ? ae.call(a, q) : ae ? (ae.value = q) : C.set(a, q), q
        );
      };
    var Zc =
      (undefined && undefined.__classPrivateFieldGet) ||
      function (a, C, q, re) {
        if (q === 'a' && !re)
          throw new TypeError('Private accessor was defined without a getter');
        if (typeof C === 'function' ? a !== C || !re : !C.has(a))
          throw new TypeError(
            'Cannot read private member from an object whose class did not declare it'
          );
        return q === 'm'
          ? re
          : q === 'a'
            ? re.call(a)
            : re
              ? re.value
              : C.get(a);
      };
    var eA, tA, rA, sA, nA, oA, aA, iA, lA, cA, AA, dA;
    class AbstractAssistantStreamRunner {
      constructor() {
        this.controller = new AbortController();
        eA.set(this, void 0);
        tA.set(this, () => {});
        rA.set(this, () => {});
        sA.set(this, void 0);
        nA.set(this, () => {});
        oA.set(this, () => {});
        aA.set(this, {});
        iA.set(this, false);
        lA.set(this, false);
        cA.set(this, false);
        AA.set(this, false);
        dA.set(this, (a) => {
          Xc(this, lA, true, 'f');
          if (a instanceof Error && a.name === 'AbortError') {
            a = new APIUserAbortError();
          }
          if (a instanceof APIUserAbortError) {
            Xc(this, cA, true, 'f');
            return this._emit('abort', a);
          }
          if (a instanceof error_OpenAIError) {
            return this._emit('error', a);
          }
          if (a instanceof Error) {
            const C = new error_OpenAIError(a.message);
            C.cause = a;
            return this._emit('error', C);
          }
          return this._emit('error', new error_OpenAIError(String(a)));
        });
        Xc(
          this,
          eA,
          new Promise((a, C) => {
            Xc(this, tA, a, 'f');
            Xc(this, rA, C, 'f');
          }),
          'f'
        );
        Xc(
          this,
          sA,
          new Promise((a, C) => {
            Xc(this, nA, a, 'f');
            Xc(this, oA, C, 'f');
          }),
          'f'
        );
        Zc(this, eA, 'f').catch(() => {});
        Zc(this, sA, 'f').catch(() => {});
      }
      _run(a) {
        setTimeout(() => {
          a().then(
            () => {
              this._emit('end');
            },
            Zc(this, dA, 'f')
          );
        }, 0);
      }
      _addRun(a) {
        return a;
      }
      _connected() {
        if (this.ended) return;
        Zc(this, tA, 'f').call(this);
        this._emit('connect');
      }
      get ended() {
        return Zc(this, iA, 'f');
      }
      get errored() {
        return Zc(this, lA, 'f');
      }
      get aborted() {
        return Zc(this, cA, 'f');
      }
      abort() {
        this.controller.abort();
      }
      on(a, C) {
        const q = Zc(this, aA, 'f')[a] || (Zc(this, aA, 'f')[a] = []);
        q.push({ listener: C });
        return this;
      }
      off(a, C) {
        const q = Zc(this, aA, 'f')[a];
        if (!q) return this;
        const re = q.findIndex((a) => a.listener === C);
        if (re >= 0) q.splice(re, 1);
        return this;
      }
      once(a, C) {
        const q = Zc(this, aA, 'f')[a] || (Zc(this, aA, 'f')[a] = []);
        q.push({ listener: C, once: true });
        return this;
      }
      emitted(a) {
        return new Promise((C, q) => {
          Xc(this, AA, true, 'f');
          if (a !== 'error') this.once('error', q);
          this.once(a, C);
        });
      }
      async done() {
        Xc(this, AA, true, 'f');
        await Zc(this, sA, 'f');
      }
      _emit(a, ...C) {
        if (Zc(this, iA, 'f')) {
          return;
        }
        if (a === 'end') {
          Xc(this, iA, true, 'f');
          Zc(this, nA, 'f').call(this);
        }
        const q = Zc(this, aA, 'f')[a];
        if (q) {
          Zc(this, aA, 'f')[a] = q.filter((a) => !a.once);
          q.forEach(({ listener: a }) => a(...C));
        }
        if (a === 'abort') {
          const a = C[0];
          if (!Zc(this, AA, 'f') && !q?.length) {
            Promise.reject(a);
          }
          Zc(this, rA, 'f').call(this, a);
          Zc(this, oA, 'f').call(this, a);
          this._emit('end');
          return;
        }
        if (a === 'error') {
          const a = C[0];
          if (!Zc(this, AA, 'f') && !q?.length) {
            Promise.reject(a);
          }
          Zc(this, rA, 'f').call(this, a);
          Zc(this, oA, 'f').call(this, a);
          this._emit('end');
        }
      }
      async _threadAssistantStream(a, C, q) {
        return await this._createThreadAssistantStream(C, a, q);
      }
      async _runAssistantStream(a, C, q, re) {
        return await this._createAssistantStream(C, a, q, re);
      }
      async _runToolAssistantStream(a, C, q, re, ae) {
        return await this._createToolAssistantStream(q, a, C, re, ae);
      }
      async _createThreadAssistantStream(a, C, q) {
        const re = q?.signal;
        if (re) {
          if (re.aborted) this.controller.abort();
          re.addEventListener('abort', () => this.controller.abort());
        }
        const ae = await a.createAndRun(
          { ...C, stream: false },
          { ...q, signal: this.controller.signal }
        );
        this._connected();
        return this._addRun(ae);
      }
      async _createToolAssistantStream(a, C, q, re, ae) {
        const Ue = ae?.signal;
        if (Ue) {
          if (Ue.aborted) this.controller.abort();
          Ue.addEventListener('abort', () => this.controller.abort());
        }
        const lt = await a.submitToolOutputs(
          C,
          q,
          { ...re, stream: false },
          { ...ae, signal: this.controller.signal }
        );
        this._connected();
        return this._addRun(lt);
      }
      async _createAssistantStream(a, C, q, re) {
        const ae = re?.signal;
        if (ae) {
          if (ae.aborted) this.controller.abort();
          ae.addEventListener('abort', () => this.controller.abort());
        }
        const Ue = await a.create(
          C,
          { ...q, stream: false },
          { ...re, signal: this.controller.signal }
        );
        this._connected();
        return this._addRun(Ue);
      }
    }
    (eA = new WeakMap()),
      (tA = new WeakMap()),
      (rA = new WeakMap()),
      (sA = new WeakMap()),
      (nA = new WeakMap()),
      (oA = new WeakMap()),
      (aA = new WeakMap()),
      (iA = new WeakMap()),
      (lA = new WeakMap()),
      (cA = new WeakMap()),
      (AA = new WeakMap()),
      (dA = new WeakMap());
    var uA =
      (undefined && undefined.__classPrivateFieldGet) ||
      function (a, C, q, re) {
        if (q === 'a' && !re)
          throw new TypeError('Private accessor was defined without a getter');
        if (typeof C === 'function' ? a !== C || !re : !C.has(a))
          throw new TypeError(
            'Cannot read private member from an object whose class did not declare it'
          );
        return q === 'm'
          ? re
          : q === 'a'
            ? re.call(a)
            : re
              ? re.value
              : C.get(a);
      };
    var pA =
      (undefined && undefined.__classPrivateFieldSet) ||
      function (a, C, q, re, ae) {
        if (re === 'm') throw new TypeError('Private method is not writable');
        if (re === 'a' && !ae)
          throw new TypeError('Private accessor was defined without a setter');
        if (typeof C === 'function' ? a !== C || !ae : !C.has(a))
          throw new TypeError(
            'Cannot write private member to an object whose class did not declare it'
          );
        return (
          re === 'a' ? ae.call(a, q) : ae ? (ae.value = q) : C.set(a, q), q
        );
      };
    var hA,
      mA,
      fA,
      gA,
      EA,
      CA,
      bA,
      yA,
      IA,
      wA,
      BA,
      QA,
      vA,
      SA,
      _A,
      TA,
      kA,
      RA,
      DA,
      NA,
      LA,
      FA;
    class AssistantStream extends AbstractAssistantStreamRunner {
      constructor() {
        super(...arguments);
        hA.add(this);
        mA.set(this, []);
        fA.set(this, {});
        gA.set(this, {});
        EA.set(this, void 0);
        CA.set(this, void 0);
        bA.set(this, void 0);
        yA.set(this, void 0);
        IA.set(this, void 0);
        wA.set(this, void 0);
        BA.set(this, void 0);
        QA.set(this, void 0);
        vA.set(this, void 0);
      }
      [((mA = new WeakMap()),
      (fA = new WeakMap()),
      (gA = new WeakMap()),
      (EA = new WeakMap()),
      (CA = new WeakMap()),
      (bA = new WeakMap()),
      (yA = new WeakMap()),
      (IA = new WeakMap()),
      (wA = new WeakMap()),
      (BA = new WeakMap()),
      (QA = new WeakMap()),
      (vA = new WeakMap()),
      (hA = new WeakSet()),
      Symbol.asyncIterator)]() {
        const a = [];
        const C = [];
        let q = false;
        this.on('event', (q) => {
          const re = C.shift();
          if (re) {
            re.resolve(q);
          } else {
            a.push(q);
          }
        });
        this.on('end', () => {
          q = true;
          for (const a of C) {
            a.resolve(undefined);
          }
          C.length = 0;
        });
        this.on('abort', (a) => {
          q = true;
          for (const q of C) {
            q.reject(a);
          }
          C.length = 0;
        });
        this.on('error', (a) => {
          q = true;
          for (const q of C) {
            q.reject(a);
          }
          C.length = 0;
        });
        return {
          next: async () => {
            if (!a.length) {
              if (q) {
                return { value: undefined, done: true };
              }
              return new Promise((a, q) =>
                C.push({ resolve: a, reject: q })
              ).then((a) =>
                a ? { value: a, done: false } : { value: undefined, done: true }
              );
            }
            const re = a.shift();
            return { value: re, done: false };
          },
          return: async () => {
            this.abort();
            return { value: undefined, done: true };
          }
        };
      }
      static fromReadableStream(a) {
        const C = new AssistantStream();
        C._run(() => C._fromReadableStream(a));
        return C;
      }
      async _fromReadableStream(a, C) {
        const q = C?.signal;
        if (q) {
          if (q.aborted) this.controller.abort();
          q.addEventListener('abort', () => this.controller.abort());
        }
        this._connected();
        const re = Stream.fromReadableStream(a, this.controller);
        for await (const a of re) {
          uA(this, hA, 'm', SA).call(this, a);
        }
        if (re.controller.signal?.aborted) {
          throw new APIUserAbortError();
        }
        return this._addRun(uA(this, hA, 'm', _A).call(this));
      }
      toReadableStream() {
        const a = new Stream(
          this[Symbol.asyncIterator].bind(this),
          this.controller
        );
        return a.toReadableStream();
      }
      static createToolAssistantStream(a, C, q, re, ae) {
        const Ue = new AssistantStream();
        Ue._run(() =>
          Ue._runToolAssistantStream(a, C, q, re, {
            ...ae,
            headers: { ...ae?.headers, 'X-Stainless-Helper-Method': 'stream' }
          })
        );
        return Ue;
      }
      async _createToolAssistantStream(a, C, q, re, ae) {
        const Ue = ae?.signal;
        if (Ue) {
          if (Ue.aborted) this.controller.abort();
          Ue.addEventListener('abort', () => this.controller.abort());
        }
        const lt = { ...re, stream: true };
        const Pt = await a.submitToolOutputs(C, q, lt, {
          ...ae,
          signal: this.controller.signal
        });
        this._connected();
        for await (const a of Pt) {
          uA(this, hA, 'm', SA).call(this, a);
        }
        if (Pt.controller.signal?.aborted) {
          throw new APIUserAbortError();
        }
        return this._addRun(uA(this, hA, 'm', _A).call(this));
      }
      static createThreadAssistantStream(a, C, q) {
        const re = new AssistantStream();
        re._run(() =>
          re._threadAssistantStream(a, C, {
            ...q,
            headers: { ...q?.headers, 'X-Stainless-Helper-Method': 'stream' }
          })
        );
        return re;
      }
      static createAssistantStream(a, C, q, re) {
        const ae = new AssistantStream();
        ae._run(() =>
          ae._runAssistantStream(a, C, q, {
            ...re,
            headers: { ...re?.headers, 'X-Stainless-Helper-Method': 'stream' }
          })
        );
        return ae;
      }
      currentEvent() {
        return uA(this, BA, 'f');
      }
      currentRun() {
        return uA(this, QA, 'f');
      }
      currentMessageSnapshot() {
        return uA(this, EA, 'f');
      }
      currentRunStepSnapshot() {
        return uA(this, vA, 'f');
      }
      async finalRunSteps() {
        await this.done();
        return Object.values(uA(this, fA, 'f'));
      }
      async finalMessages() {
        await this.done();
        return Object.values(uA(this, gA, 'f'));
      }
      async finalRun() {
        await this.done();
        if (!uA(this, CA, 'f')) throw Error('Final run was not received.');
        return uA(this, CA, 'f');
      }
      async _createThreadAssistantStream(a, C, q) {
        const re = q?.signal;
        if (re) {
          if (re.aborted) this.controller.abort();
          re.addEventListener('abort', () => this.controller.abort());
        }
        const ae = { ...C, stream: true };
        const Ue = await a.createAndRun(ae, {
          ...q,
          signal: this.controller.signal
        });
        this._connected();
        for await (const a of Ue) {
          uA(this, hA, 'm', SA).call(this, a);
        }
        if (Ue.controller.signal?.aborted) {
          throw new APIUserAbortError();
        }
        return this._addRun(uA(this, hA, 'm', _A).call(this));
      }
      async _createAssistantStream(a, C, q, re) {
        const ae = re?.signal;
        if (ae) {
          if (ae.aborted) this.controller.abort();
          ae.addEventListener('abort', () => this.controller.abort());
        }
        const Ue = { ...q, stream: true };
        const lt = await a.create(C, Ue, {
          ...re,
          signal: this.controller.signal
        });
        this._connected();
        for await (const a of lt) {
          uA(this, hA, 'm', SA).call(this, a);
        }
        if (lt.controller.signal?.aborted) {
          throw new APIUserAbortError();
        }
        return this._addRun(uA(this, hA, 'm', _A).call(this));
      }
      static accumulateDelta(a, C) {
        for (const [q, re] of Object.entries(C)) {
          if (!a.hasOwnProperty(q)) {
            a[q] = re;
            continue;
          }
          let C = a[q];
          if (C === null || C === undefined) {
            a[q] = re;
            continue;
          }
          if (q === 'index' || q === 'type') {
            a[q] = re;
            continue;
          }
          if (typeof C === 'string' && typeof re === 'string') {
            C += re;
          } else if (typeof C === 'number' && typeof re === 'number') {
            C += re;
          } else if (isObj(C) && isObj(re)) {
            C = this.accumulateDelta(C, re);
          } else if (Array.isArray(C) && Array.isArray(re)) {
            if (
              C.every((a) => typeof a === 'string' || typeof a === 'number')
            ) {
              C.push(...re);
              continue;
            }
          } else {
            throw Error(
              `Unhandled record type: ${q}, deltaValue: ${re}, accValue: ${C}`
            );
          }
          a[q] = C;
        }
        return a;
      }
    }
    (SA = function _AssistantStream_addEvent(a) {
      if (this.ended) return;
      pA(this, BA, a, 'f');
      uA(this, hA, 'm', RA).call(this, a);
      switch (a.event) {
        case 'thread.created':
          break;
        case 'thread.run.created':
        case 'thread.run.queued':
        case 'thread.run.in_progress':
        case 'thread.run.requires_action':
        case 'thread.run.completed':
        case 'thread.run.failed':
        case 'thread.run.cancelling':
        case 'thread.run.cancelled':
        case 'thread.run.expired':
          uA(this, hA, 'm', FA).call(this, a);
          break;
        case 'thread.run.step.created':
        case 'thread.run.step.in_progress':
        case 'thread.run.step.delta':
        case 'thread.run.step.completed':
        case 'thread.run.step.failed':
        case 'thread.run.step.cancelled':
        case 'thread.run.step.expired':
          uA(this, hA, 'm', kA).call(this, a);
          break;
        case 'thread.message.created':
        case 'thread.message.in_progress':
        case 'thread.message.delta':
        case 'thread.message.completed':
        case 'thread.message.incomplete':
          uA(this, hA, 'm', TA).call(this, a);
          break;
        case 'error':
          throw new Error(
            'Encountered an error event in event processing - errors should be processed earlier'
          );
      }
    }),
      (_A = function _AssistantStream_endRequest() {
        if (this.ended) {
          throw new error_OpenAIError(
            `stream has ended, this shouldn't happen`
          );
        }
        if (!uA(this, CA, 'f')) throw Error('Final run has not been received');
        return uA(this, CA, 'f');
      }),
      (TA = function _AssistantStream_handleMessage(a) {
        const [C, q] = uA(this, hA, 'm', NA).call(this, a, uA(this, EA, 'f'));
        pA(this, EA, C, 'f');
        uA(this, gA, 'f')[C.id] = C;
        for (const a of q) {
          const q = C.content[a.index];
          if (q?.type == 'text') {
            this._emit('textCreated', q.text);
          }
        }
        switch (a.event) {
          case 'thread.message.created':
            this._emit('messageCreated', a.data);
            break;
          case 'thread.message.in_progress':
            break;
          case 'thread.message.delta':
            this._emit('messageDelta', a.data.delta, C);
            if (a.data.delta.content) {
              for (const q of a.data.delta.content) {
                if (q.type == 'text' && q.text) {
                  let a = q.text;
                  let re = C.content[q.index];
                  if (re && re.type == 'text') {
                    this._emit('textDelta', a, re.text);
                  } else {
                    throw Error(
                      'The snapshot associated with this text delta is not text or missing'
                    );
                  }
                }
                if (q.index != uA(this, bA, 'f')) {
                  if (uA(this, yA, 'f')) {
                    switch (uA(this, yA, 'f').type) {
                      case 'text':
                        this._emit(
                          'textDone',
                          uA(this, yA, 'f').text,
                          uA(this, EA, 'f')
                        );
                        break;
                      case 'image_file':
                        this._emit(
                          'imageFileDone',
                          uA(this, yA, 'f').image_file,
                          uA(this, EA, 'f')
                        );
                        break;
                    }
                  }
                  pA(this, bA, q.index, 'f');
                }
                pA(this, yA, C.content[q.index], 'f');
              }
            }
            break;
          case 'thread.message.completed':
          case 'thread.message.incomplete':
            if (uA(this, bA, 'f') !== undefined) {
              const C = a.data.content[uA(this, bA, 'f')];
              if (C) {
                switch (C.type) {
                  case 'image_file':
                    this._emit(
                      'imageFileDone',
                      C.image_file,
                      uA(this, EA, 'f')
                    );
                    break;
                  case 'text':
                    this._emit('textDone', C.text, uA(this, EA, 'f'));
                    break;
                }
              }
            }
            if (uA(this, EA, 'f')) {
              this._emit('messageDone', a.data);
            }
            pA(this, EA, undefined, 'f');
        }
      }),
      (kA = function _AssistantStream_handleRunStep(a) {
        const C = uA(this, hA, 'm', DA).call(this, a);
        pA(this, vA, C, 'f');
        switch (a.event) {
          case 'thread.run.step.created':
            this._emit('runStepCreated', a.data);
            break;
          case 'thread.run.step.delta':
            const q = a.data.delta;
            if (
              q.step_details &&
              q.step_details.type == 'tool_calls' &&
              q.step_details.tool_calls &&
              C.step_details.type == 'tool_calls'
            ) {
              for (const a of q.step_details.tool_calls) {
                if (a.index == uA(this, IA, 'f')) {
                  this._emit(
                    'toolCallDelta',
                    a,
                    C.step_details.tool_calls[a.index]
                  );
                } else {
                  if (uA(this, wA, 'f')) {
                    this._emit('toolCallDone', uA(this, wA, 'f'));
                  }
                  pA(this, IA, a.index, 'f');
                  pA(this, wA, C.step_details.tool_calls[a.index], 'f');
                  if (uA(this, wA, 'f'))
                    this._emit('toolCallCreated', uA(this, wA, 'f'));
                }
              }
            }
            this._emit('runStepDelta', a.data.delta, C);
            break;
          case 'thread.run.step.completed':
          case 'thread.run.step.failed':
          case 'thread.run.step.cancelled':
          case 'thread.run.step.expired':
            pA(this, vA, undefined, 'f');
            const re = a.data.step_details;
            if (re.type == 'tool_calls') {
              if (uA(this, wA, 'f')) {
                this._emit('toolCallDone', uA(this, wA, 'f'));
                pA(this, wA, undefined, 'f');
              }
            }
            this._emit('runStepDone', a.data, C);
            break;
          case 'thread.run.step.in_progress':
            break;
        }
      }),
      (RA = function _AssistantStream_handleEvent(a) {
        uA(this, mA, 'f').push(a);
        this._emit('event', a);
      }),
      (DA = function _AssistantStream_accumulateRunStep(a) {
        switch (a.event) {
          case 'thread.run.step.created':
            uA(this, fA, 'f')[a.data.id] = a.data;
            return a.data;
          case 'thread.run.step.delta':
            let C = uA(this, fA, 'f')[a.data.id];
            if (!C) {
              throw Error(
                'Received a RunStepDelta before creation of a snapshot'
              );
            }
            let q = a.data;
            if (q.delta) {
              const re = AssistantStream.accumulateDelta(C, q.delta);
              uA(this, fA, 'f')[a.data.id] = re;
            }
            return uA(this, fA, 'f')[a.data.id];
          case 'thread.run.step.completed':
          case 'thread.run.step.failed':
          case 'thread.run.step.cancelled':
          case 'thread.run.step.expired':
          case 'thread.run.step.in_progress':
            uA(this, fA, 'f')[a.data.id] = a.data;
            break;
        }
        if (uA(this, fA, 'f')[a.data.id]) return uA(this, fA, 'f')[a.data.id];
        throw new Error('No snapshot available');
      }),
      (NA = function _AssistantStream_accumulateMessage(a, C) {
        let q = [];
        switch (a.event) {
          case 'thread.message.created':
            return [a.data, q];
          case 'thread.message.delta':
            if (!C) {
              throw Error(
                'Received a delta with no existing snapshot (there should be one from message creation)'
              );
            }
            let re = a.data;
            if (re.delta.content) {
              for (const a of re.delta.content) {
                if (a.index in C.content) {
                  let q = C.content[a.index];
                  C.content[a.index] = uA(this, hA, 'm', LA).call(this, a, q);
                } else {
                  C.content[a.index] = a;
                  q.push(a);
                }
              }
            }
            return [C, q];
          case 'thread.message.in_progress':
          case 'thread.message.completed':
          case 'thread.message.incomplete':
            if (C) {
              return [C, q];
            } else {
              throw Error(
                'Received thread message event with no existing snapshot'
              );
            }
        }
        throw Error('Tried to accumulate a non-message event');
      }),
      (LA = function _AssistantStream_accumulateContent(a, C) {
        return AssistantStream.accumulateDelta(C, a);
      }),
      (FA = function _AssistantStream_handleRun(a) {
        pA(this, QA, a.data, 'f');
        switch (a.event) {
          case 'thread.run.created':
            break;
          case 'thread.run.queued':
            break;
          case 'thread.run.in_progress':
            break;
          case 'thread.run.requires_action':
          case 'thread.run.cancelled':
          case 'thread.run.failed':
          case 'thread.run.completed':
          case 'thread.run.expired':
            pA(this, CA, a.data, 'f');
            if (uA(this, wA, 'f')) {
              this._emit('toolCallDone', uA(this, wA, 'f'));
              pA(this, wA, undefined, 'f');
            }
            break;
          case 'thread.run.cancelling':
            break;
        }
      });
    class Messages extends APIResource {
      create(a, C, q) {
        return this._client.post(`/threads/${a}/messages`, {
          body: C,
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      retrieve(a, C, q) {
        return this._client.get(`/threads/${a}/messages/${C}`, {
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      update(a, C, q, re) {
        return this._client.post(`/threads/${a}/messages/${C}`, {
          body: q,
          ...re,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...re?.headers }
        });
      }
      list(a, C = {}, q) {
        if (isRequestOptions(C)) {
          return this.list(a, {}, C);
        }
        return this._client.getAPIList(`/threads/${a}/messages`, MessagesPage, {
          query: C,
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      del(a, C, q) {
        return this._client.delete(`/threads/${a}/messages/${C}`, {
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
    }
    class MessagesPage extends CursorPage {}
    (function (a) {
      a.MessagesPage = MessagesPage;
    })(Messages || (Messages = {}));
    class Steps extends APIResource {
      retrieve(a, C, q, re) {
        return this._client.get(`/threads/${a}/runs/${C}/steps/${q}`, {
          ...re,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...re?.headers }
        });
      }
      list(a, C, q = {}, re) {
        if (isRequestOptions(q)) {
          return this.list(a, C, {}, q);
        }
        return this._client.getAPIList(
          `/threads/${a}/runs/${C}/steps`,
          RunStepsPage,
          {
            query: q,
            ...re,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...re?.headers }
          }
        );
      }
    }
    class RunStepsPage extends CursorPage {}
    (function (a) {
      a.RunStepsPage = RunStepsPage;
    })(Steps || (Steps = {}));
    class Runs extends APIResource {
      constructor() {
        super(...arguments);
        this.steps = new Steps(this._client);
      }
      create(a, C, q) {
        return this._client.post(`/threads/${a}/runs`, {
          body: C,
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers },
          stream: C.stream ?? false
        });
      }
      retrieve(a, C, q) {
        return this._client.get(`/threads/${a}/runs/${C}`, {
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      update(a, C, q, re) {
        return this._client.post(`/threads/${a}/runs/${C}`, {
          body: q,
          ...re,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...re?.headers }
        });
      }
      list(a, C = {}, q) {
        if (isRequestOptions(C)) {
          return this.list(a, {}, C);
        }
        return this._client.getAPIList(`/threads/${a}/runs`, RunsPage, {
          query: C,
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      cancel(a, C, q) {
        return this._client.post(`/threads/${a}/runs/${C}/cancel`, {
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      async createAndPoll(a, C, q) {
        const re = await this.create(a, C, q);
        return await this.poll(a, re.id, q);
      }
      createAndStream(a, C, q) {
        return AssistantStream.createAssistantStream(
          a,
          this._client.beta.threads.runs,
          C,
          q
        );
      }
      async poll(a, C, q) {
        const re = { ...q?.headers, 'X-Stainless-Poll-Helper': 'true' };
        if (q?.pollIntervalMs) {
          re['X-Stainless-Custom-Poll-Interval'] = q.pollIntervalMs.toString();
        }
        while (true) {
          const { data: ae, response: Ue } = await this.retrieve(a, C, {
            ...q,
            headers: { ...q?.headers, ...re }
          }).withResponse();
          switch (ae.status) {
            case 'queued':
            case 'in_progress':
            case 'cancelling':
              let a = 5e3;
              if (q?.pollIntervalMs) {
                a = q.pollIntervalMs;
              } else {
                const C = Ue.headers.get('openai-poll-after-ms');
                if (C) {
                  const q = parseInt(C);
                  if (!isNaN(q)) {
                    a = q;
                  }
                }
              }
              await sleep(a);
              break;
            case 'requires_action':
            case 'incomplete':
            case 'cancelled':
            case 'completed':
            case 'failed':
            case 'expired':
              return ae;
          }
        }
      }
      stream(a, C, q) {
        return AssistantStream.createAssistantStream(
          a,
          this._client.beta.threads.runs,
          C,
          q
        );
      }
      submitToolOutputs(a, C, q, re) {
        return this._client.post(
          `/threads/${a}/runs/${C}/submit_tool_outputs`,
          {
            body: q,
            ...re,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...re?.headers },
            stream: q.stream ?? false
          }
        );
      }
      async submitToolOutputsAndPoll(a, C, q, re) {
        const ae = await this.submitToolOutputs(a, C, q, re);
        return await this.poll(a, ae.id, re);
      }
      submitToolOutputsStream(a, C, q, re) {
        return AssistantStream.createToolAssistantStream(
          a,
          C,
          this._client.beta.threads.runs,
          q,
          re
        );
      }
    }
    class RunsPage extends CursorPage {}
    (function (a) {
      a.RunsPage = RunsPage;
      a.Steps = Steps;
      a.RunStepsPage = RunStepsPage;
    })(Runs || (Runs = {}));
    class Threads extends APIResource {
      constructor() {
        super(...arguments);
        this.runs = new Runs(this._client);
        this.messages = new Messages(this._client);
      }
      create(a = {}, C) {
        if (isRequestOptions(a)) {
          return this.create({}, a);
        }
        return this._client.post('/threads', {
          body: a,
          ...C,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...C?.headers }
        });
      }
      retrieve(a, C) {
        return this._client.get(`/threads/${a}`, {
          ...C,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...C?.headers }
        });
      }
      update(a, C, q) {
        return this._client.post(`/threads/${a}`, {
          body: C,
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      del(a, C) {
        return this._client.delete(`/threads/${a}`, {
          ...C,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...C?.headers }
        });
      }
      createAndRun(a, C) {
        return this._client.post('/threads/runs', {
          body: a,
          ...C,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...C?.headers },
          stream: a.stream ?? false
        });
      }
      async createAndRunPoll(a, C) {
        const q = await this.createAndRun(a, C);
        return await this.runs.poll(q.thread_id, q.id, C);
      }
      createAndRunStream(a, C) {
        return AssistantStream.createThreadAssistantStream(
          a,
          this._client.beta.threads,
          C
        );
      }
    }
    (function (a) {
      a.Runs = Runs;
      a.RunsPage = RunsPage;
      a.Messages = Messages;
      a.MessagesPage = MessagesPage;
    })(Threads || (Threads = {}));
    const allSettledWithThrow = async (a) => {
      const C = await Promise.allSettled(a);
      const q = C.filter((a) => a.status === 'rejected');
      if (q.length) {
        for (const a of q) {
          console.error(a.reason);
        }
        throw new Error(`${q.length} promise(s) failed - see the above errors`);
      }
      const re = [];
      for (const a of C) {
        if (a.status === 'fulfilled') {
          re.push(a.value);
        }
      }
      return re;
    };
    class files_Files extends APIResource {
      create(a, C, q) {
        return this._client.post(`/vector_stores/${a}/files`, {
          body: C,
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      retrieve(a, C, q) {
        return this._client.get(`/vector_stores/${a}/files/${C}`, {
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      list(a, C = {}, q) {
        if (isRequestOptions(C)) {
          return this.list(a, {}, C);
        }
        return this._client.getAPIList(
          `/vector_stores/${a}/files`,
          VectorStoreFilesPage,
          {
            query: C,
            ...q,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
          }
        );
      }
      del(a, C, q) {
        return this._client.delete(`/vector_stores/${a}/files/${C}`, {
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      async createAndPoll(a, C, q) {
        const re = await this.create(a, C, q);
        return await this.poll(a, re.id, q);
      }
      async poll(a, C, q) {
        const re = { ...q?.headers, 'X-Stainless-Poll-Helper': 'true' };
        if (q?.pollIntervalMs) {
          re['X-Stainless-Custom-Poll-Interval'] = q.pollIntervalMs.toString();
        }
        while (true) {
          const ae = await this.retrieve(a, C, {
            ...q,
            headers: re
          }).withResponse();
          const Ue = ae.data;
          switch (Ue.status) {
            case 'in_progress':
              let a = 5e3;
              if (q?.pollIntervalMs) {
                a = q.pollIntervalMs;
              } else {
                const C = ae.response.headers.get('openai-poll-after-ms');
                if (C) {
                  const q = parseInt(C);
                  if (!isNaN(q)) {
                    a = q;
                  }
                }
              }
              await sleep(a);
              break;
            case 'failed':
            case 'completed':
              return Ue;
          }
        }
      }
      async upload(a, C, q) {
        const re = await this._client.files.create(
          { file: C, purpose: 'assistants' },
          q
        );
        return this.create(a, { file_id: re.id }, q);
      }
      async uploadAndPoll(a, C, q) {
        const re = await this.upload(a, C, q);
        return await this.poll(a, re.id, q);
      }
    }
    class VectorStoreFilesPage extends CursorPage {}
    (function (a) {
      a.VectorStoreFilesPage = VectorStoreFilesPage;
    })(files_Files || (files_Files = {}));
    class FileBatches extends APIResource {
      create(a, C, q) {
        return this._client.post(`/vector_stores/${a}/file_batches`, {
          body: C,
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      retrieve(a, C, q) {
        return this._client.get(`/vector_stores/${a}/file_batches/${C}`, {
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      cancel(a, C, q) {
        return this._client.post(
          `/vector_stores/${a}/file_batches/${C}/cancel`,
          { ...q, headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers } }
        );
      }
      async createAndPoll(a, C, q) {
        const re = await this.create(a, C);
        return await this.poll(a, re.id, q);
      }
      listFiles(a, C, q = {}, re) {
        if (isRequestOptions(q)) {
          return this.listFiles(a, C, {}, q);
        }
        return this._client.getAPIList(
          `/vector_stores/${a}/file_batches/${C}/files`,
          VectorStoreFilesPage,
          {
            query: q,
            ...re,
            headers: { 'OpenAI-Beta': 'assistants=v2', ...re?.headers }
          }
        );
      }
      async poll(a, C, q) {
        const re = { ...q?.headers, 'X-Stainless-Poll-Helper': 'true' };
        if (q?.pollIntervalMs) {
          re['X-Stainless-Custom-Poll-Interval'] = q.pollIntervalMs.toString();
        }
        while (true) {
          const { data: ae, response: Ue } = await this.retrieve(a, C, {
            ...q,
            headers: re
          }).withResponse();
          switch (ae.status) {
            case 'in_progress':
              let a = 5e3;
              if (q?.pollIntervalMs) {
                a = q.pollIntervalMs;
              } else {
                const C = Ue.headers.get('openai-poll-after-ms');
                if (C) {
                  const q = parseInt(C);
                  if (!isNaN(q)) {
                    a = q;
                  }
                }
              }
              await sleep(a);
              break;
            case 'failed':
            case 'cancelled':
            case 'completed':
              return ae;
          }
        }
      }
      async uploadAndPoll(a, { files: C, fileIds: q = [] }, re) {
        if (C == null || C.length == 0) {
          throw new Error(
            `No \`files\` provided to process. If you've already uploaded files you should use \`.createAndPoll()\` instead`
          );
        }
        const ae = re?.maxConcurrency ?? 5;
        const Ue = Math.min(ae, C.length);
        const lt = this._client;
        const Pt = C.values();
        const Wt = [...q];
        async function processFiles(a) {
          for (let C of a) {
            const a = await lt.files.create(
              { file: C, purpose: 'assistants' },
              re
            );
            Wt.push(a.id);
          }
        }
        const Ar = Array(Ue).fill(Pt).map(processFiles);
        await allSettledWithThrow(Ar);
        return await this.createAndPoll(a, { file_ids: Wt });
      }
    }
    (function (a) {})(FileBatches || (FileBatches = {}));
    class VectorStores extends APIResource {
      constructor() {
        super(...arguments);
        this.files = new files_Files(this._client);
        this.fileBatches = new FileBatches(this._client);
      }
      create(a, C) {
        return this._client.post('/vector_stores', {
          body: a,
          ...C,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...C?.headers }
        });
      }
      retrieve(a, C) {
        return this._client.get(`/vector_stores/${a}`, {
          ...C,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...C?.headers }
        });
      }
      update(a, C, q) {
        return this._client.post(`/vector_stores/${a}`, {
          body: C,
          ...q,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...q?.headers }
        });
      }
      list(a = {}, C) {
        if (isRequestOptions(a)) {
          return this.list({}, a);
        }
        return this._client.getAPIList('/vector_stores', VectorStoresPage, {
          query: a,
          ...C,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...C?.headers }
        });
      }
      del(a, C) {
        return this._client.delete(`/vector_stores/${a}`, {
          ...C,
          headers: { 'OpenAI-Beta': 'assistants=v2', ...C?.headers }
        });
      }
    }
    class VectorStoresPage extends CursorPage {}
    (function (a) {
      a.VectorStoresPage = VectorStoresPage;
      a.Files = files_Files;
      a.VectorStoreFilesPage = VectorStoreFilesPage;
      a.FileBatches = FileBatches;
    })(VectorStores || (VectorStores = {}));
    class Beta extends APIResource {
      constructor() {
        super(...arguments);
        this.vectorStores = new VectorStores(this._client);
        this.chat = new chat_Chat(this._client);
        this.assistants = new Assistants(this._client);
        this.threads = new Threads(this._client);
      }
    }
    (function (a) {
      a.VectorStores = VectorStores;
      a.VectorStoresPage = VectorStoresPage;
      a.Chat = chat_Chat;
      a.Assistants = Assistants;
      a.AssistantsPage = AssistantsPage;
      a.Threads = Threads;
    })(Beta || (Beta = {}));
    class Batches extends APIResource {
      create(a, C) {
        return this._client.post('/batches', { body: a, ...C });
      }
      retrieve(a, C) {
        return this._client.get(`/batches/${a}`, C);
      }
      list(a = {}, C) {
        if (isRequestOptions(a)) {
          return this.list({}, a);
        }
        return this._client.getAPIList('/batches', BatchesPage, {
          query: a,
          ...C
        });
      }
      cancel(a, C) {
        return this._client.post(`/batches/${a}/cancel`, C);
      }
    }
    class BatchesPage extends CursorPage {}
    (function (a) {
      a.BatchesPage = BatchesPage;
    })(Batches || (Batches = {}));
    var MA;
    class OpenAI extends APIClient {
      constructor({
        baseURL: a = readEnv('OPENAI_BASE_URL'),
        apiKey: C = readEnv('OPENAI_API_KEY'),
        organization: q = readEnv('OPENAI_ORG_ID') ?? null,
        project: re = readEnv('OPENAI_PROJECT_ID') ?? null,
        ...ae
      } = {}) {
        if (C === undefined) {
          throw new error_OpenAIError(
            "The OPENAI_API_KEY environment variable is missing or empty; either provide it, or instantiate the OpenAI client with an apiKey option, like new OpenAI({ apiKey: 'My API Key' })."
          );
        }
        const Ue = {
          apiKey: C,
          organization: q,
          project: re,
          ...ae,
          baseURL: a || `https://api.openai.com/v1`
        };
        if (!Ue.dangerouslyAllowBrowser && isRunningInBrowser()) {
          throw new error_OpenAIError(
            "It looks like you're running in a browser-like environment.\n\nThis is disabled by default, as it risks exposing your secret API credentials to attackers.\nIf you understand the risks and have appropriate mitigations in place,\nyou can set the `dangerouslyAllowBrowser` option to `true`, e.g.,\n\nnew OpenAI({ apiKey, dangerouslyAllowBrowser: true });\n\nhttps://help.openai.com/en/articles/5112595-best-practices-for-api-key-safety\n"
          );
        }
        super({
          baseURL: Ue.baseURL,
          timeout: Ue.timeout ?? 6e5,
          httpAgent: Ue.httpAgent,
          maxRetries: Ue.maxRetries,
          fetch: Ue.fetch
        });
        this.completions = new Completions(this);
        this.chat = new Chat(this);
        this.embeddings = new Embeddings(this);
        this.files = new Files(this);
        this.images = new Images(this);
        this.audio = new Audio(this);
        this.moderations = new Moderations(this);
        this.models = new Models(this);
        this.fineTuning = new FineTuning(this);
        this.beta = new Beta(this);
        this.batches = new Batches(this);
        this._options = Ue;
        this.apiKey = C;
        this.organization = q;
        this.project = re;
      }
      defaultQuery() {
        return this._options.defaultQuery;
      }
      defaultHeaders(a) {
        return {
          ...super.defaultHeaders(a),
          'OpenAI-Organization': this.organization,
          'OpenAI-Project': this.project,
          ...this._options.defaultHeaders
        };
      }
      authHeaders(a) {
        return { Authorization: `Bearer ${this.apiKey}` };
      }
    }
    MA = OpenAI;
    OpenAI.OpenAI = MA;
    OpenAI.OpenAIError = error_OpenAIError;
    OpenAI.APIError = APIError;
    OpenAI.APIConnectionError = APIConnectionError;
    OpenAI.APIConnectionTimeoutError = APIConnectionTimeoutError;
    OpenAI.APIUserAbortError = APIUserAbortError;
    OpenAI.NotFoundError = NotFoundError;
    OpenAI.ConflictError = ConflictError;
    OpenAI.RateLimitError = RateLimitError;
    OpenAI.BadRequestError = BadRequestError;
    OpenAI.AuthenticationError = AuthenticationError;
    OpenAI.InternalServerError = InternalServerError;
    OpenAI.PermissionDeniedError = PermissionDeniedError;
    OpenAI.UnprocessableEntityError = UnprocessableEntityError;
    OpenAI.toFile = toFile;
    OpenAI.fileFromPath = Sl;
    const {
      OpenAIError: PA,
      APIError: OA,
      APIConnectionError: xA,
      APIConnectionTimeoutError: UA,
      APIUserAbortError: GA,
      NotFoundError: HA,
      ConflictError: qA,
      RateLimitError: VA,
      BadRequestError: WA,
      AuthenticationError: YA,
      InternalServerError: jA,
      PermissionDeniedError: JA,
      UnprocessableEntityError: zA
    } = re;
    var $A = toFile;
    var KA = Sl;
    (function (a) {
      a.Page = Page;
      a.CursorPage = CursorPage;
      a.Completions = Completions;
      a.Chat = Chat;
      a.Embeddings = Embeddings;
      a.Files = Files;
      a.FileObjectsPage = FileObjectsPage;
      a.Images = Images;
      a.Audio = Audio;
      a.Moderations = Moderations;
      a.Models = Models;
      a.ModelsPage = ModelsPage;
      a.FineTuning = FineTuning;
      a.Beta = Beta;
      a.Batches = Batches;
      a.BatchesPage = BatchesPage;
    })(OpenAI || (OpenAI = {}));
    class AzureOpenAI extends (null && OpenAI) {
      constructor({
        baseURL: a = Core.readEnv('OPENAI_BASE_URL'),
        apiKey: C = Core.readEnv('AZURE_OPENAI_API_KEY'),
        apiVersion: q = Core.readEnv('OPENAI_API_VERSION'),
        endpoint: re,
        deployment: ae,
        azureADTokenProvider: Ue,
        dangerouslyAllowBrowser: lt,
        ...Pt
      } = {}) {
        if (!q) {
          throw new Errors.OpenAIError(
            "The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' })."
          );
        }
        if (typeof Ue === 'function') {
          lt = true;
        }
        if (!Ue && !C) {
          throw new Errors.OpenAIError(
            'Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.'
          );
        }
        if (Ue && C) {
          throw new Errors.OpenAIError(
            'The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.'
          );
        }
        C ?? (C = ZA);
        Pt.defaultQuery = { ...Pt.defaultQuery, 'api-version': q };
        if (!a) {
          if (!re) {
            re = process.env['AZURE_OPENAI_ENDPOINT'];
          }
          if (!re) {
            throw new Errors.OpenAIError(
              'Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable'
            );
          }
          a = `${re}/openai`;
        } else {
          if (re) {
            throw new Errors.OpenAIError(
              'baseURL and endpoint are mutually exclusive'
            );
          }
        }
        super({
          apiKey: C,
          baseURL: a,
          ...Pt,
          ...(lt !== undefined ? { dangerouslyAllowBrowser: lt } : {})
        });
        this.apiVersion = '';
        this._azureADTokenProvider = Ue;
        this.apiVersion = q;
        this._deployment = ae;
      }
      buildRequest(a) {
        if (XA.has(a.path) && a.method === 'post' && a.body !== undefined) {
          if (!Core.isObj(a.body)) {
            throw new Error('Expected request body to be an object');
          }
          const C = this._deployment || a.body['model'];
          delete a.body['model'];
          if (C !== undefined && !this.baseURL.includes('/deployments')) {
            a.path = `/deployments/${C}${a.path}`;
          }
        }
        return super.buildRequest(a);
      }
      async _getAzureADToken() {
        if (typeof this._azureADTokenProvider === 'function') {
          const a = await this._azureADTokenProvider();
          if (!a || typeof a !== 'string') {
            throw new Errors.OpenAIError(
              `Expected 'azureADTokenProvider' argument to return a string but it returned ${a}`
            );
          }
          return a;
        }
        return undefined;
      }
      authHeaders(a) {
        return {};
      }
      async prepareOptions(a) {
        if (a.headers?.['Authorization'] || a.headers?.['api-key']) {
          return super.prepareOptions(a);
        }
        const C = await this._getAzureADToken();
        a.headers ?? (a.headers = {});
        if (C) {
          a.headers['Authorization'] = `Bearer ${C}`;
        } else if (this.apiKey !== ZA) {
          a.headers['api-key'] = this.apiKey;
        } else {
          throw new Errors.OpenAIError('Unable to handle auth');
        }
        return super.prepareOptions(a);
      }
    }
    const XA = new Set([
      '/completions',
      '/chat/completions',
      '/embeddings',
      '/audio/transcriptions',
      '/audio/translations',
      '/audio/speech',
      '/images/generations'
    ]);
    const ZA = '<Missing Key>';
    const ed = OpenAI;
    const td = {
      'zh-cn':
        '我有段 md 文件，请翻译为中文。翻译需要严格保留源文件 markdown 排版布局，请直接输出，不要在作询问。\n',
      'ja-jp':
        'この Markdown を日本語に翻訳してください。逐語訳ではなく、日本語の IT 系ウェブメディアの記事として自然な表現にしてください。Markdown の書式は、原文から変更しないでください。また、半角英数字と日本語の文字の間には半角スペースを入れてください。追加の質問はせず、直接出力してください。\n',
      'es-es':
        'Tengo un archivo md, por favor tradúzcalo al español. La traducción debe mantener estrictamente el formato y la disposición del archivo original en markdown. Por favor, simplemente muéstrelo sin hacer preguntas.\n',
      'pt-br':
        'Eu tenho um arquivo md, por favor, traduza-o para o português. A tradução deve manter rigorosamente a formatação e layout markdown do arquivo original. Por favor, forneça a tradução diretamente sem fazer perguntas.'
    };
    async function translate(a, C, q) {
      const re = new ed({ apiKey: q });
      const Ue = {
        messages: [{ role: 'user', content: C + a }],
        model: 'gpt-4o'
      };
      const lt = await re.chat.completions.create(Ue);
      const Pt = lt.choices[0].message.content;
      (0, ae.debug)(a);
      (0, ae.debug)('-----------------------------------');
      (0, ae.debug)(Pt);
      return Pt;
    }
    async function task_auto_translate_step_02_trans_articels(a) {
      var C;
      let {
        with_issue_title: q,
        with_task_translate_openai_api_key: re,
        with_task_translate_to_save_path: Ue,
        step_01_result_mdfiles: lt
      } = a;
      const Pt =
        ((C = q.match(/\[Auto\]\[(.+?)\]/)) === null || C === void 0
          ? void 0
          : C[1]) || '';
      (0, ae.debug)('target_language:' + Pt);
      const Wt = td[Pt];
      (0, ae.debug)('str_prompt:' + Wt);
      if (!Wt) {
        throw new Error('Unsupported language');
      }
      Ue = Ue.replace('{lang}', Pt);
      for (const C of lt) {
        const q = await (0, ls.readFile)(C, 'utf-8');
        const lt = q.split('\n\n');
        let Pt = '';
        const Ar = lt.length;
        let Er = '';
        const Ir = 1024 * 5;
        let Br = 0;
        for (let a = 0; a < Ar; a++) {
          const C = a < Ar - 1;
          const q = lt[a];
          let ae = false;
          if (Er.length < Ir) {
            Er += q + '\n\n';
            ae = true;
            if (C) continue;
          }
          const Ue = (q.match(/```/g) || []).length;
          Br += Ue;
          if (Br % 2 === 1 && !ae) {
            Er += q + '\n\n';
            ae = true;
            if (C) continue;
          } else {
            Br = 0;
          }
          console.log(`============== [${a} / ${Ar}] ==============`);
          const Qr = await translate(Er, Wt, re);
          Er = '';
          Pt += Qr + '\n\n';
          console.log('\n');
        }
        const Qr = Ue + '/' + C.split('/').pop();
        (0, ae.debug)('output_mdfile_path:' + Qr);
        await (0, ls.ensureFile)(Qr);
        await (0, ls.writeFile)(Qr, Pt);
        a.step_02_result_mdfiles.push(Qr);
      }
    }
    class src_main_options {
      constructor() {
        this.with_issue_title = (0, ae.getInput)('with_issue_title');
        this.with_issue_body = (0, ae.getInput)('with_issue_body');
        this.with_github_token = (0, ae.getInput)('with_github_token');
        this.with_task_fetch_to_save_path = (0, ae.getInput)(
          'with_task_fetch_to_save_path'
        );
        this.with_task_fetch_to_include_selector = (0, ae.getInput)(
          'with_task_fetch_to_include_selector'
        );
        this.with_task_fetch_to_ignore_selector = (0, ae.getInput)(
          'with_task_fetch_to_ignore_selector'
        );
        this.with_task_translate_openai_api_key = (0, ae.getInput)(
          'with_task_translate_openai_api_key'
        );
        this.with_task_translate_to_save_path = (0, ae.getInput)(
          'with_task_translate_to_save_path'
        );
        this.step_01_result_metas = [];
        this.step_01_result_mdfiles = [];
        this.step_02_result_mdfiles = [];
        this.str_comment = '';
      }
    }
    function gen_issue_comment(a, C, q, re, ae, Ue) {
      return `\n- Original URL: [${a.title}](${C})\n- Original author: [${a.author || 'anonymous'}](${a.authorURL})\n- Markdown file: [click to view](https://github.com/${q.owner}/${q.repo}/blob/${(0, as.join)(re.replace(/^refs\/heads\//, ''), ae)})\n- Translated file: [click to edit](https://github.com/${q.owner}/${q.repo}/edit/${(0, as.join)(re.replace(/^refs\/heads\//, ''), Ue)}),\n`;
    }
    async function main() {
      const a = Object.assign(new src_main_options(), {});
      const { with_issue_title: C } = a;
      if (!C.toLocaleLowerCase().startsWith('[auto]')) return;
      let q = '';
      await task_auto_translate_step_01_fetch_articels(a);
      await task_auto_translate_step_02_trans_articels(a);
      const re = a.step_01_result_mdfiles.length;
      const ae = a.step_02_result_mdfiles.length;
      if (ae !== re) {
        throw new Error(
          'The number of translated articles is not equal to the number of raw articles'
        );
      }
      let lt = `🚀 **Auto Translate**`;
      if (re > 1) {
        lt += `\n\n📚 **Articles**: ${re}`;
        for (let C = 0; C < re; C++) {
          lt += `==========${C - 1}==========\n\n`;
          lt += gen_issue_comment(
            a.step_01_result_metas[C],
            a.step_01_result_mdfiles[C],
            Ue.context.repo,
            Ue.context.ref,
            a.step_01_result_mdfiles[C],
            a.step_02_result_mdfiles[C]
          );
          lt += '\n\n';
        }
      } else {
        lt = gen_issue_comment(
          a.step_01_result_metas[0],
          a.step_01_result_mdfiles[0],
          Ue.context.repo,
          Ue.context.ref,
          a.step_01_result_mdfiles[0],
          a.step_02_result_mdfiles[0]
        );
      }
      q += lt;
      Object.assign(a, { str_comment: q });
      await utils_repo_submit_issue_comment(a);
      return;
    }
    main()
      .catch((a) => {
        console.error(a);
        process.exit(1);
      })
      .then(() => {})
      .finally(() => {
        console.log('Done');
      });
  })();
  module.exports = __webpack_exports__;
})();
